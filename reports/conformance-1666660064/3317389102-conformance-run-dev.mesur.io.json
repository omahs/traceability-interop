{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8c433c7c-fae6-4c88-8d80-abf457df1098",
        "name": "Clear Cache",
        "item": [
          {
            "id": "72030f0b-036b-424d-af43-48a75a169711",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e79e4ede-d046-45cb-aaac-79ee661989dd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "63f1a61d-5d7f-45ac-961a-47ad6bf06c75"
                }
              }
            ]
          },
          {
            "id": "78ebfa59-601a-4c4b-b226-beb80edb7f45",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b2fad595-4e64-4ef3-bd65-3922ae0326f5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6b62f2a0-2e37-4eaf-b737-e0fa967112a6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b322feb1-83f0-464e-90ff-fc9974f9251c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9b0606e3-8e48-425f-86ae-2c7a4814549d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d6a674ca-e06f-4a9d-83ab-862cecb6c49b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eec332d1-fe84-4505-a6bd-36cdd2d198bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b13c5b67-b99b-45ef-9ead-ecce208e42db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c074c32-c6c8-4e95-b36b-dd73ee819078",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "111e51f9-5f3d-4859-b220-4747d7d2ac60"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2d97a69-5c04-4a5d-a5bc-e23836fb80de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd974e73-588f-4c35-bbbd-a523f697b4d9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fc7be05-c3b2-49fa-b2bb-cb18980817a7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4445aa6a-083e-494b-a90d-a46abb444eca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0465c43a-4e29-42a3-921a-cac7cb4f8de8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "21fdf6bf-14c6-4faa-978f-0d802694c009"
            }
          }
        ]
      },
      {
        "id": "767d3f7e-7b89-4415-bd49-21b7e67afb1e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fcd36804-f6cf-4741-bfbd-0a7fb5e51382",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fdfc6818-ab77-465f-bf82-e348645d784b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "084fa4f7-3544-43e7-84ee-f22bd58ba152",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f766bdda-903b-4072-82a7-6891fa2abe0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b6a3aac-418b-4809-915f-56d9f356b06b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746bb206-c3d1-4337-81ab-122818137577",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bf8b5d-6fc0-451c-8ccc-31d997cb8452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cd86684-2f90-4ace-9285-e9e2fa918755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70e9749-f791-49b9-b84a-a9e03d3ab55a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675b2ac0-3c4d-40e3-ba62-4dd3127f9766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6151f7cf-d446-406e-b954-7f345def9103"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e564f205-7995-4329-84cb-8f67908beaa0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c5efb40-64f9-499a-b9b9-cbefd53bce13",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206b033c-1764-47e8-9355-72cbb6317af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67b182f3-076f-4bcf-a835-901048f9fa19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee402fbc-3e8c-4376-a7bd-5da5876f5489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f425a4c-58b5-4a71-84a1-0fb39923af9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461e3205-3df5-4859-908f-f601e56914b8",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e735d3ba-00f7-4857-b1ae-719749f00686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2960cb6f-dc59-4c14-9a87-65ba05a0847a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec67e7b-64fb-4388-9503-fadbb5905f0b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8014508d-cb5d-4b5c-96de-681b1a97c099"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7530a5ca-f479-44f9-ae82-e2225703cff7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ffb2a228-fac4-46fb-8a88-47b56cfd705e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c62e37a-70ea-43c6-bed2-55d5cea5ea58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5f014c60-2dca-4772-94ec-1dceae71e52b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e5078d2-278e-4ace-8fd2-aae3a21ed1d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "abe05638-949e-4e46-b48e-135a1acc6a22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5901330-7070-4321-ae43-7ffa20b3cb9c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41e39f4c-ada7-49e1-b1fc-1afb99dd3ffd"
            }
          }
        ]
      },
      {
        "id": "0d9aa2c3-7b87-4a6d-b2d3-2ccca7dc5276",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1f9879bd-a654-4c5d-9f7a-e47106a33118",
            "name": "Negative Testing",
            "item": [
              {
                "id": "63820c54-fc28-42b2-aef8-03f5189bd930",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "abd20791-b404-478e-a204-ade24508d5c7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1974fe92-7402-4eb4-ad73-d532d63bf54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed76c6b-28a0-47c4-b898-f067c038a22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146be4ea-e439-40f4-bba2-adc5b7ef52c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3b42a49-fd15-4077-af5a-77508f41a983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3a683b-6189-4cd4-bf4d-394a46ca0388",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e869c7-fe09-4690-9516-85da859685dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7203c7-ddad-41e4-a7d4-9cdabaf662de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acaa2288-39bb-4672-88eb-7970cd6636af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca41aa16-753f-4e99-b5f8-57f07effc229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93772acf-795f-49a3-9df3-65248e736ca1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968e25e7-f3b1-4852-85f9-6f475d1e88c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c104e3c-675c-441d-9ffa-3b588fdd033b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b52d83-9000-4837-bd97-121c0a17290c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8522145-1498-4cd3-9204-d89fb8cd2935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0a3e66-a60e-4209-90c5-31ea28c516dd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400d625d-1bef-4b29-94a9-537adfd67990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb3c804-57d9-46a4-b936-f24590bdb000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42b5440-d806-4b6e-bf01-272c9da177d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74e77f76-dd05-4b6a-b275-1c9d2d6966bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b49e35-eb37-416d-9e5a-582c1ee1a070",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dedd363-4978-4ab6-9892-eb6b613315e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72bd942-1aea-4c67-8c3e-37812d263bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641a0ce9-7352-4db0-b72b-622b0bb2fd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be23790e-84aa-4b85-95ca-2567217f69d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f907229-a459-4f03-a710-a65a90958b8c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6998e1c6-ac61-47be-a917-9bb84b2eb347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca42211e-9c10-45ee-9285-ebb8438e4239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90ea7aa-dd8c-4617-89ec-03d7fc9bf54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26d5f221-6912-4865-bc10-a9b2182379aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e376de-1f16-4085-aa38-f010fce94ac8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f495e9-70c8-481e-b19b-4c997a35d99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad40901b-7e2b-41c0-8f68-c46735a62463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a64ac3-5436-41c9-9025-754bd58d75d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36b12871-edf1-4d3c-a8b1-4bacdb740940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900bb917-5b29-428c-9ded-ee0810f00a31",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90293920-8da3-4c26-a187-3b196845fe48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463e22e8-9865-4b4e-8c36-8d62ba6a22b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c765a6e4-2169-4c21-b6c6-07e5ad63bb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f3fd798-c569-418b-b1ba-51247f84c50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff093078-45c8-4789-911e-77f562d1960c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff37453-8884-4bdc-91f3-d7c82b1267a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b7bcbb-bb6e-4e20-b572-e8f432035cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bdf210-2b23-48f0-af77-61bd7582ec4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24f90279-ded6-467f-ad12-92dff9b04c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999321d0-b2a2-4a39-8627-24410fe7b85c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d61030d-a3b7-4581-95b1-30a4d7a2eec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08be6003-6738-4975-bea8-ddbc83716a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbcb6d2-4391-4ea3-9031-b6e9c94d3396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00bfa077-e5b9-4f16-a449-59d91d7017a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39ae642-eee3-40ee-8afb-a25f272a5514",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cd087b-c091-4d9b-8bbb-2b90b3f14e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89130b09-1d0c-4c68-8251-2bd218f59c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3acbdf-66f0-465a-9c4d-82a89295d532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c820543-6091-495c-91d8-0d6949799446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2973648d-3719-4035-a7b4-083686188658",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207570bc-3427-4cf3-9fdf-09cb0c12aaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f4bcc8-2a72-43e0-b566-27561f591e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05746a32-b222-445d-9b7e-e4d564e6c864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "238ea2ae-c650-4add-b922-8eee01576228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452329e4-7f2a-4786-92d6-89a63badb3ee",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff4148e-b3ca-484a-aafc-9eb91fb9a282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7c650e-f748-4fe8-9574-3d67d09c26cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d702f20-a7e9-482d-8946-f10b6ca31177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09a449d4-2219-4cbe-923e-55cfd235f674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030c925b-712a-4252-a520-e324d67c1f46",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054046a9-6ae9-49c6-9051-f852bd5f41bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b04f618-54b5-4fe5-9ff8-f12f173c5867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5af1a8-0304-4869-9b7b-4aba256a26d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3235236-8c62-47b9-a0cd-35241d2397f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f277c9-50bf-4d76-8738-d0d32eb8d086",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94bb4a4-827c-4e95-8087-dddb691fb1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8e2564-dba3-48d0-8921-bc72bc7636d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9707d4cb-fb2e-448a-805b-06ac0cc1dbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8b67821-8dfa-4b11-a8e1-db48b1a617c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb574759-a53a-416a-b96b-e7b873ddf9c6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da363a4-2f4e-45d8-9052-54cc586f1f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2863282d-173f-49af-a215-af6ca92add89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999e4ea6-9d7b-4218-bbf6-493f6a6152aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e48a5c7-db64-491d-9312-410d885242af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326cc2fa-da09-4d61-a082-8361d5f4c615",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5fb8ee-9483-4ffb-9509-9cfa34934a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bef98a8-09d5-47e8-9377-2a07e05ad2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b1e0ca-11a9-4de6-a182-74a56beb4e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73d3dc5c-3427-432e-b6d7-2dc3dd2b6dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb5dea9-b7ce-4692-9d69-47d499d8f053",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056282d4-382b-4475-95a8-6ebdce4f33fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43dd8b6b-670f-4e34-8dc8-6be7d0ad86f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89b70f0-6459-4ef1-976f-45097f142740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "74c21375-cc3c-47c6-a6fb-0f1f557c714e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed820e5-8fab-4f08-9799-3fe6a2c18b7e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "464d046e-71ae-492b-9f15-8470698b04c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63856b5a-5b4f-4c15-ba6d-0635cacb4283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54696c2d-476b-45f2-a28e-2fcc3362a7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9e0e35-77db-4d4c-8fea-0f28e60c7c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5208f0bd-69cd-4fb7-a431-8002eb2586a7",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8295dec-6363-4bc2-8859-d084e3e20959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c53ca5-f357-4a82-992f-5910a252bbcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c44d0c-17a4-4e67-9a05-28dab0f3217a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04c469f0-2507-40a7-b607-e29869d02adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addf0c46-e432-4365-88af-0eed4549c050",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4407c8ca-f6eb-4b1e-89b3-50a0229152c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a4af7a-4adb-4c82-977c-cc938c4ae3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a15e112-061b-4886-94a9-1bbf74c8e30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b158f1a-1aba-434f-ad8d-ad4f60a01e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce094857-ea39-4009-ac64-db950be2aa2c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af269a75-1bd4-4bef-8212-88f09ca62a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77433f2e-84c4-442d-b8b0-c9b2bfda2a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad478135-0b9f-42f2-912d-05870e4f7659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd28a0d-1758-40a2-b4ef-a1a28c2b8256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdc6acc-5e9d-4acd-a23f-739b6e386446",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566a3832-f3bd-47c9-b1d3-885d55fbb076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5965d2-9052-42dc-ab9f-9df17752f15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c07d11-27fb-44a8-9476-2d2fe0e57ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "962403e2-5e94-4ad9-aaa7-cf3483a0b4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9107ab88-b78b-4cff-8892-9556accd8119",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ceb4f6c-ea49-461b-a259-a269ebce62aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2674df5e-b411-4406-9df0-72895b1425ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e18791-48c0-4ab2-9986-9e17a0cc7058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1caea466-f050-40f5-976d-3f150907e2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48c782b-a621-4258-abef-0cd3e56f117d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d2d5fa-5b27-4450-9c71-e70e28f860ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709927d9-a590-4e7e-a747-4c616aef2804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3f17bf-3273-43b2-89d1-23427e1b4639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96845d60-8075-4330-9611-35bad6f75dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d606e263-1c84-46a3-bf07-ec7bdcc537c3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0744b81c-6cdd-4043-87ef-883894945016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930614b3-4241-4ab4-afbd-72b82036ea06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b69c7f-6db6-4a4e-9e0a-3055dc9d8a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "93d3564b-6405-4011-849c-d84689217350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378353ea-e6ee-457b-93ec-810896107fbe",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75fbd20-62c5-4873-b65d-f40eb349cff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b4a8da-00c7-4f11-a927-26b6425d60d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05f4cea-2dc5-4385-b801-e1fb521ed4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e1eecd-3671-41e8-8775-f0a977be60cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fba534-355f-4db2-a793-2c7fb56580f3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191a97c4-2014-4061-8cec-4876e02aac74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdcf1d88-5bdd-4051-8e66-f5524ade749a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bfa8ea-ea7b-426f-9ff7-00361475446c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8faa5227-a073-4564-9955-8309ce5334fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885c7ef3-a53d-4a14-9806-a4fdb27983e3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d986722-4f83-40fc-a32c-178dd4fb1f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5580316e-58dc-4666-b1cf-9d8d8f267577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e823c968-5ca3-4bf4-aa12-51ea38879725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b67158d6-86a3-4034-9c7f-b021d04f3e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d8937f-bf9b-4f98-ad19-0bb5b481d8cd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737687f7-f8dc-4986-a0f2-09bb040d2f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6175d11-e94d-4372-89e1-656d04c16f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae158817-db34-4b59-bc3a-6b3d5bc32ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e813bde-0d10-4ecf-8f8e-9b326963c8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76efa1a8-8a4a-413b-814f-92a0fb57e0e9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d204d1d0-8f0a-4115-bb2b-51545fa8bd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c768667-edda-40f1-9338-c7550d103b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc83f712-6cbf-4bba-a97a-035bcd0455ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8793db-c0af-4b4d-b769-a03f20fcb5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42986ac-2f40-4ad8-8f99-fdd056fc593c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981c3210-a441-4c98-a5f5-08d06bb3b819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83122388-e321-4c18-9bf0-ada1ebf05dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78dc4a1-e304-4db5-8a9f-57e1c25bb06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4fe586-5af9-4934-bbf8-ed3e2cb7ab49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a319f5-e780-4031-971a-8619785e67bb",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d9d528-8118-48a9-a21d-ec443741f2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "818864db-2faf-4b06-9f35-ac01ff54a69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d674e5-acee-4397-8cc5-6fe4c93e315f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f21cc3e-790e-4817-b65d-7bd9dc7d93c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b7e102-1094-42a0-9141-0bc41402d5da",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24caed61-fe82-4681-950e-0b4081f5d9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dcb3d24-38e3-4f37-917c-9f6ff0d26e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc53366-308b-47b4-b44c-9b9e830f1321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4995aa-445f-4b6b-ba94-9b432cd2674c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54904598-5363-44ca-bd84-981c30e359cb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f564a33-235a-4084-9a8c-1e86de7ca401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac608c43-d31c-483e-a397-f75281367aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b919a1-2005-4afd-9171-6f9afa350902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c7badb8a-faca-4a8a-9789-66d4407fe498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cab7eff-7101-4d34-b243-e315d9816f46",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af245e89-4dce-43fb-bc55-282ece5fa4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7cbadb8-5de0-470a-b97d-7bae78fc0c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb903b2-c2de-4684-938a-db6d2d360262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49aeff7a-f784-4f6c-8163-8931df352781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9793086-5a7f-4013-bdaf-3e12aff5755b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6253ae-7c1b-4491-9c3f-40e38df29d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55c7121-5edc-40f7-a3a3-fe0a9ca9f85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18cf360-694d-4f0d-a2b2-969ac5b4c2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a16eef-dd10-4345-b267-c3b8df5bb203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63fd1b43-ced4-49af-80cc-67bc0bc83796",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0708e6ef-1902-4143-a956-c9b5220c617f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbd95cd-5d6b-413a-a311-1245a6525070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2faba089-8e77-470c-a2d6-7d1c831cfcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "35da43bc-c295-4157-b557-39efbfd03061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3321b9-d0f5-47bb-b028-c200a68bb3ba",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf97877-8b12-4a7a-84f8-90c6459d1685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3df03e-9234-48a0-8251-dd5d0cab8e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3825945-5f56-4314-93c1-7a958f00c282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "554839cb-c4d9-4135-ad43-2e39e7e34e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ff4879-9988-4964-8847-0945244b7e62",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ec8dd8-6699-4363-9da8-e4376a23f7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10464a7-2e53-4c86-bbba-92d58b3791c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7837ffad-ed90-4c6d-a4f9-e66da7151e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d43643d2-d06e-4d59-b2c9-034d6c2295f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5896496-ae56-4bc6-baed-e0a5fbf78252",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46419fd8-17e4-4084-8c9a-b4d35c41a654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713a3ffe-226f-4050-aa75-4a2a37470ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e2c6ab-2606-42c4-b7be-bfd138118eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d027daf2-dd3b-416c-953c-a5b1344fce00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6097d777-7bbf-4552-a3a7-d8ac5a88f87b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff248fb-4715-4079-b363-5ad57bbb5de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c32fc47-d2ab-412d-bcb5-a46362dba452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7051fae-3f3d-4240-84b0-10523cadaf3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "58ab3f43-e42e-41fd-b03e-6d18d4d947a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843bd2b5-6f9e-4c16-a0af-2c6dd2fb39a9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3f825c-6355-44e9-9491-2e4f6798c0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1109c069-a044-4f33-9e05-fde6984ae1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9102dd1-8c0a-449c-b076-6b5c86ac66cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2391a23-b256-4c86-a6ed-8913246dc373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15e9d21-f5e5-4b80-a383-34ff27bd3ade",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb9c0df-5fa7-4bf5-8dd8-32b0ee0a57b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a5ef8a-e989-4446-a7b3-d86c1a37cead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1fda7d-8f4b-45e8-8b50-3d08f87237d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "424b7601-cfb3-4cea-ab86-42ac4f5df705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59430600-d089-444b-a2e1-1b21c2fbf4db",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b3e6ea-a568-4844-892c-c0f33891b21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86db2b14-d673-482a-ad38-592fd0886aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8224aed7-c82f-4801-aa25-0a57ccf43b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c73b41c-78d2-4fa3-a122-b8561d5ae60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d965905-8e80-41c5-8100-3df16c194744",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94b90de-d9f6-44de-839b-acca9eddadc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493b5a29-7d7c-40e3-a9fa-843314f9db8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19987728-dc77-484a-91bf-bbd01f25310e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84be3333-24d6-4ebe-8306-4e9c7ba40e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6df70f6-6e58-4f81-81d6-85087a8fe71a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13e00c3-6e3b-46f7-911a-ab088a4e4211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4cbfc9-ab26-49c5-b272-57c7e9d8445a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6506f41f-c116-47c2-a17f-1e6f1fb71fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2de53df4-723b-4b65-a621-866970e61249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960776c4-2d49-4e3b-8b9e-b30a5eead293",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cc88e6-3ef0-474f-b3ef-644f2dd6a908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3897d53b-a9d7-4ebe-b3c8-c335e3110fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7722894e-5014-41db-ae04-4e239c104a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6153f3a9-3a7c-4d29-9095-84b4544d6804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2959ac-5171-499c-b609-ad3f353c7405",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969dc45e-6bd0-4965-8c0b-887ae86baa22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e0c95a-b758-46d6-ab9c-8fdaae2799a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7817f337-8f2a-45c1-8315-4147ce847fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fff654d-d543-42dd-8d6f-b551374e988f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ee06a8-e6e5-44ca-be0d-fdfa60b2d2e7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fde2d3d-ea51-4696-9b5b-f509d25724d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28df8e60-a309-4bed-9794-5476421d7a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8441d0-503d-47ee-aa42-8ab14532f590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47949655-947e-4643-a484-cad50e7a9672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d49afb-cb73-4444-af49-bcc84b4f2475",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ab9695-1169-477f-8699-a40e3f8e69e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e0534e-e3ff-4c68-aee1-8572f54b3389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2bbc6a-50f2-47c3-992f-8571eefb5298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1da8438-3568-4ffb-acab-f4f09d13341d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059050fe-7479-4fa4-8454-1cc2d94ff70f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0062daff-64dd-4f92-ad42-2ee2f42f34f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2187492a-06f8-415e-850c-922faa7c52ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e26648-628b-4449-9ec2-0cd1b6baa6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5dbc56a-e4fc-4a34-9e37-94b4d57fbf94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95d558f-b7e1-47f5-8868-0675e6ff31c0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bd1b73-4053-4f42-b12a-08b680b77d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cb8a39-02aa-4060-ae11-dbeeb908b6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc28f97d-06bd-48d0-b656-fea83bf7048e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "387d5bba-4e40-404b-9185-38ec4ac968d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09593a6a-69f0-46af-ba95-d4ee23631261",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f36402-a0be-43b6-ae9f-d6e1dd1060a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1bf843-f4f7-43e8-aa17-575d1a2c05c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f678efe-eb59-4dab-9bc1-5e0180da5650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1ed8c1-aeb0-444e-a467-f36638132223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008b1cc6-eec6-4024-b35a-1c5584c1f071",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e0417a-574a-4a58-b52b-705af2d546b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b49dda1-4033-4c8f-9369-4852e1fc6a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad195858-ef48-4b45-8706-37d6885e4baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19e8b0d2-5c1a-486e-a03e-22a3e8b62982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf4211f-7de9-4425-a6d4-9fbd86b02082",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4484f6-7a2f-4378-85ed-0a3bc52ac8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7b2c02-b2b9-4bcd-a3c5-14e8561df30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1847286-d0e9-46b2-a77f-5689087e121a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d77082e3-09cc-4812-8bb9-d9caf3405cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ce708c-44a4-4a0c-ae30-b7adbbc2c1cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341bb11c-8311-43cc-9893-c9c2b7aebdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936b3c25-dbae-489c-bee2-1e21d27f99e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec5f1aa-595c-4620-a286-91abce3296ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5aeb348-666f-4b4d-804a-2826946c53b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d42ecd3-ad91-4242-8fff-3f11e87d88dc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daee45a0-561f-4acf-a32a-27febe54cdfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38773288-ea31-4758-aa6a-181f5b439799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850cb4d7-4f86-4764-bfe5-845c84a9d059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "39eddf65-43ec-4df7-8e44-ae5fd921faef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dcf5c3-ce6e-43ee-83da-6ef03c7ec335",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac13349-920c-4fbd-904e-4a5940bca56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c73935d-3d80-44d4-969e-7af608d09223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20c4cb4-4592-4ece-bb21-30cc31ba85e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e51b2d16-e726-4654-9259-5eb9bd46c6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a044aa33-bb9a-498e-b2bc-40cf212b93de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1abd5e-6836-4109-8eab-b68e6bfeeaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8a70c0-2729-44a7-86cc-da088f2ff438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ca5796-1ed2-488d-9df1-bb4295df3910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "662ddc0c-6112-4bfe-b407-fbd1851e9003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d392f589-98e4-43ea-b905-ee8d9d78209c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae50e255-18bf-4c3a-8042-03cb3204f1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c25f9c-a11a-4dca-b07c-040fb038ed2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039a4b5b-eb1d-4eb8-b37c-bc82bcb6ca84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "10af96d9-4b13-49cf-9f1c-0f25180b6283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440c579f-088f-4c55-99ba-d4b699238d52",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba41e81e-1616-4730-b819-1893a9a75a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ed37b9-344c-43e0-9557-15499128d876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9722ac3-bc85-4acb-b483-490309218a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dcd07fd-649a-47e5-8bd1-ebec396ba90c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0c6b6d-dbe7-4310-950b-6dafe7a36d5e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "284cf1f6-d5e1-4182-8653-8f3366ec7c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18ebc32-c244-40c1-9286-d656ef6402c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847d2527-47ba-4d2a-9f36-b5baca7de682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7b265f-3f97-4cc7-8e0b-17fda5942f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0528465a-0bbd-4503-a9f1-4c0d69603a61",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c9c2e3-02e2-4eda-9007-34257e4479f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbd5625-e87a-4547-9b1a-86cecd2aa649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7accb0f4-2b9e-4046-8f76-7d0981952c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "530b3d4c-b375-40d1-9b5f-3d459e5a2ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557e399c-34ce-498d-bbbb-3d40e934b311",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863c944f-19fb-434e-adaf-15c7636c5213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f45c6e3d-e14f-48c1-8257-076bc74f55d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a567bf12-4e0b-446e-86e3-422ea8443b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85f2d277-155c-466f-817c-572dc09c1aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f12af5-ccdf-4907-aa30-86f1fe493e6e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35956e63-2424-414c-bb58-16fb23f88298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c231dc-2987-44b4-a88f-dd6b281be686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6f7f01-e2de-4714-9713-64d95a964c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8536592c-3fb3-4598-8e64-3cf249a7f0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fe99e4-3b18-4f98-ba77-6ff022012cbf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a91193-e693-4a0e-b4f5-a1f4ffe37edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ffab2b6-3b78-499f-8590-0c0ba08ea9f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98eb3128-d130-4870-86ac-9d5024b731e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b347e72c-5607-4faf-973c-277f50f59255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cadc4ed-cfca-4ffa-9df6-f3a3294bbef3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac01cf0-dad6-40ca-9733-58f39588f619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad9069a-684d-4a7d-a5e4-cefc14925f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106e76bb-f26b-4be3-8177-632f4d20bd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c173e1c-83c0-4d23-be98-c525cc9ecd0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4023ccd-cc3e-4cc4-b756-d97428cf83bd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4a93e7-ec7a-443c-a03e-b231d26921a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171023fb-b77c-4ca8-b92d-554610141134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10526f48-de6a-4e35-bdab-4663a665094a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "59eaa1d0-79a7-4fd7-84ee-4a519d32bd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad07f64-0d16-4e36-846d-8f958079d038",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2d5436-e525-4de9-8607-7671d4214839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86baed8-aaca-4647-8b63-91871bca72f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b42380c-5253-4d9d-b5e0-d92168099f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52d59b1c-601b-4c68-95f4-b2152b4a7f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e3be88-bcde-49ff-b1b8-5b20f011d039",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46608bc-26ea-49e1-8332-f11706755b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af98d892-5abb-4e44-aafb-66d0e107b9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ed8e16-d999-4c60-b9a6-17ce8ee8adf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c684385-9f6b-444f-8695-cbc261daafeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e2aa40-1165-4e2c-9dae-352365157161",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12086cfa-d3e0-473a-8391-97b772974e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cacfb4-6e9a-4b5c-9d91-09b8512d4e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d075ee06-03c4-444d-8ba8-164e4285a1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c9ec76-7e71-4b87-9256-ead59f6650ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6f2cac-2e60-4238-9f7c-7a4b5f1d9a75",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8ba058-9d58-4e53-b9b0-1d7f1b124622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b21a935-0ed4-4132-a0a0-666be4b6e556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8a0fc6-4cf2-408b-888c-3f239f11210b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb4cffa-d069-439b-890f-0c8fcf639c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663738b2-bd69-4ec7-ac84-cdac6a73f122",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8b80df-a825-422c-a44a-91023fb22222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7321c61-6bf6-4d9a-8130-ace24c1c6709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb702ed-0045-407b-b88c-905f17807183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2f4b17-04aa-4289-8a15-63fddec382b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997b6791-5f96-4147-828d-8a0112dbdccd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780732cf-d449-491f-bf28-02001a137f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca0e76c-78c7-4447-af9c-8fa47f2855fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aa75fd-e968-4c03-9382-39f6f2e83634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "83abcc41-9406-49c9-baaf-172044baf46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30935c8a-2796-4514-9ddb-922b9245979a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23683e90-681f-427b-869f-27fc62886d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5baec1f0-de79-4a7e-8ca7-5ec24ff9399f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b310164-5323-42b8-830f-1e4e4d1732e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9bacfd-b0d1-4149-ab17-9dc5bbeb7094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e677f2-e052-424d-97cd-3fff8f89fa84",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb938588-bb84-49b9-a933-9965015a405d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9473e2-2a57-4d08-ac4d-7e692fc23cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9e5ce5-b907-4105-8278-97cc62a7fedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab6ad32-fcca-4503-8e41-07dcfde0f8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6815ca57-4f05-41e5-86c7-2912767e067e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0858b1d2-2c15-4e67-a438-4f1cff3321e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b2c22c-066b-4dde-b2a9-6208d336086a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e899103-7142-4485-a811-fda4e9ba50be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "146996f7-6b5b-44c5-bed2-5d5741fb1663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d41c1b8-9e24-4f0d-a227-e37eb83267d2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffe4668-9246-43ca-8f6d-ea0f32efa5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60f0fc2-f9d0-4e14-9391-d141d034f10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecdddca4-5b7a-44c7-ae12-53fba979b416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "913adbab-9517-47ef-9028-8dbb9db1f191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3566c7c9-12b8-4716-88db-5256c4d0e0ea",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae46174-0b01-409d-81cb-6108c7355ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3ea374-651f-428f-b2c0-ea4ffb5543f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d0f36f-4855-4650-9992-1a436ebfb162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f170cfe0-7388-4de8-8c71-1dba8c50f741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d076b0-1b7e-48eb-8a45-cae9f926cf1a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4c57eb-fd09-477e-a5c8-64624f371b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe2f03f-528e-4256-ba2a-260d5980097d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80bc6d4-03ee-435b-a762-ad820a825d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5039553d-1dd3-4b40-9c7d-3d2bb0ebc6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6dca49-59b8-4786-a457-445d25a6eb4b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12a560c-c558-458b-ad58-7af4277f3642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416fd037-c5fe-4993-9eea-af0d6fe1ddf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48b16cf-b83d-4697-9449-2af8346a0ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20dfb4e8-6523-4498-9777-5c63c774dbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7f4330-1a6e-46eb-96e5-e61fbf2a9efa",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31e3f3d-ae15-43e0-ad25-2dae4069b736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f9a114-a66e-48f2-a99b-f93118d0935a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecdd14a-12ec-41a9-8d4a-110cabcfe2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "377b988b-3d8c-4cc0-ab47-0f1642020139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2c2040-7f65-4258-9212-ebeb5c0134cb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2c0ef5-90a8-4bf1-883b-60b8457d292f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8437bf30-075e-48e5-be66-d0edf001a47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da11f796-a8f0-45ff-91fd-48db2787efd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a26269d9-4e33-4658-8f34-d8b308dc5c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a2186c-6d2a-4898-b6f2-cc96441fe75c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6088b74-e34a-4b5c-bbca-804d4dbcc007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7e9580-f7f2-4b57-964f-41884380e1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823c414f-60ae-4dce-b7c3-4723cba6a179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aabf9c32-d67f-4c18-abbf-08f1f1cc7617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21d2019-d664-426e-8302-167bfec0fe4a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a672fc-c0df-4496-b18f-ce70e877eda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3db692-b1ad-4e6a-9ea9-eba7a2f24425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b00b72e-badc-4dfa-b867-d0c5830cdbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "98f879e5-98c1-4dd6-a282-798ed57a420f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b862f5f4-30ea-4a86-ba7b-aaf7ec812b19",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6597cc80-d3a1-47c4-9fc8-11cfe622eced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9916dd1-b073-47a0-9c1b-f752a4b22608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549f7e50-743f-4835-b1a6-6ac6be830b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e6c81bd-3f83-4b99-a575-e0aa8624c9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7433837f-5581-48b4-9a7a-b7a770bd9137",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507499c5-9d29-4c69-aed5-b01a1c99cd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808fed69-5844-46c3-aa0d-761ab06fdd62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d724cd-6a28-4a59-90eb-136bc5471f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d24b887-937e-476f-84f6-f304cf6e785b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf29a5c-b8c9-4ea1-8879-75e1eaecfc90",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f394905-ec53-4418-a7f5-6e8d21e4653f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6af093f-4f72-4033-8ef7-ebf33eb98916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b975b5d9-0a43-41ab-8917-ac0812866582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "99df9ca1-dac1-4076-b6d5-afd54adf397e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4af7d93-bdac-4e57-9eb9-ba5de554a3d0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f21ed9-b898-4297-8866-05be648433cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d957f3a-6468-489b-9dfb-2719c2e29667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5e9015-2d38-4a74-830b-7c66aa472b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c5ef9f8-1ff1-441d-a991-770c007847e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6faee1d0-ab3e-4799-9332-de031537b05f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2d2bb9-97d0-4c25-b3df-c5b9dc4f08bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f241a545-af9d-40b3-96e1-c1198a11a6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443d4d91-9aff-48e1-95a2-534f634069f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8acfd57-177d-46f7-9938-797e1f75ff01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd094463-6d70-467e-a502-b99a168d09a4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acdd8cc-5bc1-44f1-9207-f8f24bc64e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "181c531c-903a-4101-bbad-f7e40633f0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb54a0cf-2e1b-464b-a4e2-b83f41906b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c179e239-55d8-487e-b20a-08fce31cf050"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5518a6f4-961c-449a-9b61-b1507b44bade",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f18830e6-202e-46ed-96fe-c5b17ccd6734",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f1b686-db44-4071-8e3b-c68d76624647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "025f0ac5-5bd0-448e-9f07-911b966271b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf07fb6d-faae-4d65-88da-380e01a09938",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4e5dd84c-ccbd-4145-9afd-f06581fd4dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275d15f7-9732-4173-a9b6-b0a93113372d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dca17be-98db-4710-a0e4-6cca48eb0529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "717f5a61-2184-45dc-990b-11b98012d1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058284c7-39a7-476e-bec7-e607e068fcc3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a0f9bac9-f91e-4470-97da-bdeb10f386ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfde4974-c9a4-4398-95d4-cbde62e1a313",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f547d933-7d27-4b32-b2a4-c1c807cb832e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e68a40e0-b107-4337-b8cf-a466463438cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a36d290d-7cd8-4c7e-9a1e-ad6372457027"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac93bb4d-1ef3-4ab0-b674-224029aa0d00",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "26a8fd23-9564-4671-9caf-edc0ba806f20"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "179a71cc-8c94-493a-b34e-7e194934d47b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e493948-5010-48ce-bb6b-170495371473"
                }
              }
            ]
          },
          {
            "id": "264ec60c-45a3-4d07-8c7d-7983a20661e9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a08e1fa8-2b40-47aa-b054-c3217e285129",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0c1bcb2-2ee8-4797-8615-1ad41d270ef6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9f71211-9c37-4614-9a3f-c29568d4f574"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c8289e5-f909-4ae2-9e6e-452c724338ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "25c01283-6999-4509-a95d-66765805d0dd"
                    }
                  }
                ]
              },
              {
                "id": "4d6b2160-b8c2-4700-9dda-2f33b361921c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2745b38f-c1d9-4b3f-a769-3204d4224417",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f280c0bf-bae6-4cff-b7a6-b9c2670cd4b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e39916f-593f-43a7-8112-978297cbc1f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6f7bcf2e-a37a-44a7-accf-0cca13c059e6"
                    }
                  }
                ]
              },
              {
                "id": "b3aea52c-651c-4d21-a92c-7ad790ec41ca",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da536c5c-fdb6-4317-96a8-2399e5331652",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83ba6d3f-22f0-4227-ab5b-a4a4675d3d9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbbc801b-0314-4e59-bc04-84bf67b903ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4712e75e-d70c-48ac-9eed-ca55ff03be42"
                    }
                  }
                ]
              },
              {
                "id": "9c93984e-ee33-4acd-89ee-77a740cc111b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "497b76c2-27af-4925-b0c6-a7b3da022bb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "baad75f6-9299-47db-8855-33e58d607979"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fe0fc3b-0748-412b-874b-ea1ca0ac035f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9881b129-9644-4647-849a-67abe968aee0"
                    }
                  }
                ]
              },
              {
                "id": "24fc9da6-7b77-4436-9f18-7bab6b507e9c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2575bd82-18a3-472a-a15f-c548628f33d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "85938d2e-491f-492e-afe8-b246aea422a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "461c82e1-67a3-4738-92dc-979460bdcf2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "28fb58ea-46fd-457c-bab0-637636476fb6"
                    }
                  }
                ]
              },
              {
                "id": "e0aeaa4e-e7e7-41e2-8c67-32d1c13058cf",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9c64c3c-d9f2-4adc-bf80-4cf1c9744983",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "062a4025-cd24-4583-ac23-298806834c52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d5550f2-6d2f-4503-9266-98f315b59d83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "51b5816d-77ed-4a01-a0bf-419ec52cad92"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "339b85e0-4c8e-4027-b253-540bbcd72e3e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d5e8b75e-3d1f-4d4b-8073-50c0897193c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "be393b6f-a5a3-4cd4-9f5b-54898d74b018",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3747571e-0377-47fc-8e39-35778000b1db"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f83c5a2-92d8-4573-abe1-2d3a94209acc",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "55074086-ac33-4e7a-b1c7-c17a0b3d2cb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "617a3862-0552-43d5-b934-f83b9d42c361",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0a7375d-c954-4404-9035-4e6ba56e5d55"
            }
          }
        ]
      },
      {
        "id": "23307773-9797-4c43-b539-90baaa919673",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cd9e6f6c-8a1e-46a0-a59d-b2dd63756e34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc398473-36f7-4e74-8469-0a5806ac69e0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f5927f6-ebd3-4557-aa02-0ab1dfdb57cd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37125c9-0d3a-41c7-b88e-754ade23d8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95cc6424-f3ed-45b8-8b20-260005e2d66d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ab7b86-8c58-4c59-a435-fb0ab1f9bb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1175b068-e9ff-49a6-8940-217fbd29487a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9866493-d693-4b22-a24a-ae98763555c2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf09d5e5-4af6-4db2-abfa-c8664dc0fec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46787ac-89fb-45f8-8779-d9ebf56ceeeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31466eb-9b93-4fd9-960b-13e4e1adb1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b583957-e801-4f81-bd3e-2d1e82219a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484d6e8d-3cbd-4189-af5c-3bcb3eb0ad4b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b942114-8376-4ddc-8d30-b6c4ecb688ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5449b975-ddb3-4834-b8a2-160d2507dfbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a8b65e-0688-4931-9951-64c551ed6041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee173176-2a22-449a-b052-b562c760bda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813f08af-05e3-4440-afbe-fdca17d230e0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302965ca-7928-482a-9c43-89841f0c8dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3c4285-57aa-4031-9d3f-c86024b02edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa673817-1c30-4a4e-957a-5e336b5936f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f6bb18-aae5-46d3-ba39-f534f1514939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c036ce8d-b71e-43c1-9b12-1f230d87c171",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84468fd7-e8ec-4a48-b8af-37b2a1cdd8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a80ee9c-76fa-48e6-a818-9902045ecd39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf53cb0-8f9d-4193-b199-6e4b4dda7335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dfc668a-503c-4f51-9821-96fa63684e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92d97d7-268d-4955-a839-2e0b4024cb3f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f525f46-2826-4f27-bc83-49256e167268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77e8742-9cf3-4740-8f07-3ec2a0d34b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f149631f-95e0-4728-8c63-7d837502a709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "437a44b1-0ddd-4777-b590-bbf57c95bea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a37b9bc-d730-4252-ae53-910fe8f29f73",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5577a52-8e5b-46f0-9ee9-7ab4b534b3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ceb562-22c2-4dde-a2b1-5ff4d98ccf86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012263dd-36a7-40e9-b684-676cc344dbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "eba17852-aa1c-492c-b826-45304399466e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb210ca-174b-462d-aeef-f98afa7a7773",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffb2df1-6a48-49a6-b19d-429016a14fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c211340-971d-442a-b6e3-6c550fb1eb24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285eda89-f2ab-4c6b-b60c-9d154b69b44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a40385ee-4d5d-4a2d-8720-9d4ce204beb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba1e7b6-c64f-4860-9bc0-b0647215723e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86020e01-6788-4b05-a97e-94dda4685e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee81226-f8e5-430f-8c08-bf2b246e8938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a558ad-367f-4223-850d-075a78ef264e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3065f280-e7ab-434b-9e84-fd385cf2101a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1647384-a629-4928-a588-0a2bb38a3697",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7aac8a-5f79-455c-ad69-35e885bfbeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bdf4e8-9e25-497f-a107-bc1fa218d339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1965538a-a202-4f96-9e73-4d717dcd5da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2e0173-31dc-4066-a260-a38c0351196e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709674b1-ad42-4056-8588-96aa61fb4b90",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c77357-72f9-468e-824d-feddb9e9c4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ac5620-20a5-4c7e-95b5-d5cffe64eb48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c329d6d-fdd6-48e9-bc2f-b1ec2854d228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "00efe535-ac35-440e-985e-e7a4d3889b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026c2715-e619-4987-b721-1c0692869ec5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6fd65b-cfb5-4a74-b251-9dcf168e02ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4f0cac-07f0-4a83-b60f-d57134a1ee70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47812ea2-1e21-4626-b745-928bc67c8bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b502ac75-fc88-4f2f-a2af-7113598bbf4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00da70c6-5efa-4729-b553-4e4fd2459101",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc53b30d-3bed-4186-bd08-563a0604adc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d31af853-f801-4b79-8773-69ff39c642fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd491d12-8654-4378-9a5b-2eb1f5cf1f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf81bf0-d9b8-43a9-b459-1737a5c10590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b655ccea-9096-417f-9277-e9a970029bd6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c819f097-73dd-4007-b27b-52e3d6cc2159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a445147c-d025-4243-bdbd-a914d98ce271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805f44c0-7a57-4b7f-923d-f58f2a733b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "827864d4-5d78-4da1-b8b9-7d147e0abce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e1dee4-e497-438f-9f15-890152b04bac",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab8502e-15ba-4db9-a2c0-b206c6f68285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec14ec6-49e9-4f5a-8011-c281b004deba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c5583a-d977-4560-af4d-b817cc63404c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e18b0ded-09bb-458e-aca7-9ad9c58a7b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad0ba9a-00bb-454a-9739-eda76eb2e247",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79efb8f-c67d-4790-a353-8827b6373a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82c115d-287c-4aac-a94c-0899d406db5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25dde40-c09b-4717-9a44-2fb78cc81b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "73d0368b-6f06-4244-ab84-883665fff93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8355762e-a385-40dc-b58e-1af1c082ddd9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16b6f77-e178-42c0-b72c-f03a956a2225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ca336b-6fe7-435e-97da-e75101fffb5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29600d4-a5eb-4303-88df-56bbcf95227e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "39af8fa1-1ec5-4c1e-8cee-9a68a2285742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6038728-2b37-4415-86a7-fbb7fa053686",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2b21f7-866a-4ea8-acfa-12d5db9cb6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812dc3e6-8c29-4860-90bd-90ded32bc28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dea2598-bbd5-4a8d-bbd9-ef0a1583b1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0c73f5-5015-4106-beb1-eea9006c9c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49f580a-8216-481a-a15b-df4d5b2c5a0b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a03942-5a6e-43e2-aaf4-14f6502bfce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa907741-0a21-4392-a730-3b2a3d038974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1160e6-6ef7-4f50-a2af-c78d07d390f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71db9722-1547-45d6-ac5c-af27881bbb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fbf0c1-95ed-4faf-90ff-8f618815ee9b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db28a14-3712-4efa-a007-32821ffb8cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7472a8-c85a-4fac-8e99-306ae14fda6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2fb295-77a1-4da9-9ecc-57f7ca90b510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bd377c3-29ce-45fd-9d7b-0c3f5d735020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059d6bdb-c1a4-49ca-a2cc-2dd3a4d647d8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d44b0d8-eef8-4f19-9c1a-de39b9e8e14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1bc40a-9d69-4d42-b07c-be30715efd69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c9e7dd-a51d-4d0a-823f-ead6fa1d82a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f0c4ec-0691-48bc-8fc0-f33569c87721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba3063e-fcc6-4b28-b92d-fa320397b751",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e0e3a9-cea8-48e4-8a7f-b1d507ee92f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6227fb-2e50-47e2-a9ff-cea2e393ea81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df3a79b-4ada-4d25-ad42-c04e9e37da15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "007f8643-c0cb-457d-9b9f-10a938ec966b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5f9a79-c957-412b-8ec8-896b455f29e1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82919c1-b728-4a35-b942-23038d945bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c1f1c7-1e31-4733-af6c-534f6ffeecb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c59795f-0d6f-40a5-945e-71206ea364b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51d5865a-3512-469d-b7ca-c20deeff19b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2776b57-ef05-4a55-80c3-c0a851d341d0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c620a7-3d91-4973-8f9c-fc1201427274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb08e940-69d3-4d0c-8a80-2037239abeda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4909079e-37b4-41d3-a663-7cc5e1580844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e7bb19-a8b0-44fd-b5bd-dcdc41e6939c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15204ee1-5e27-42dc-bf55-47889b52e82e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49df150a-6993-4760-84d4-cd3e021bfe6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9997911a-c110-4a4b-9363-6fdb647e8596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7842731d-3da5-4f45-9de6-80ef01422537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f926626-171f-4ec1-8da0-a18734be2d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedec1ae-2d90-4ef6-8b71-104dbc401de1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2049dc3a-a6ba-4134-a1fe-d64b980fb05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f793ede-92e7-465c-aaa8-2b920425cba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0278f760-97ba-443c-ac8d-4248c42c73bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6affd4e1-3f2c-499f-8f7d-a92ff45bca26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9ca898-d1e4-429d-b551-0af684f83ab0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a4e4bd-7971-40b5-bc41-7f6d6f0956e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d046ba-492e-4876-92f9-cbb76c60fdf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0512e2a-88d7-4f48-9120-470142d8da82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f671e2ed-1599-4c00-8bb5-3d8c1e7c35f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13611ed8-2f39-4f31-8579-0c3eea2f25db",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a253d512-67b5-48f6-97ea-e8a2ea85f1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52afddaf-10ae-49ad-ba0c-98c4474bc1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac6247c-3998-4208-9d38-a75ff4bef457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "880d2122-e2b3-4e85-a4bb-0815bb796463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d4d9f8-b659-4aa8-bcfc-6551e6be1a6a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b369c8-ebae-495d-b382-4b86c4ae4ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56fb57b5-3227-4a4f-ae8b-7e4aa9cbe6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c2cbd6-2ed9-409b-abd1-22c5a9fce27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce173b7-665e-4b7a-9d75-be484d5eae6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66da1c0-cb2f-4845-878a-4c58cd64b2c0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e02ea4-6ffb-4273-9275-3bb4a2443377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e219e4-8dd6-4b92-a29e-9b5bc71fa730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6573f930-db83-4ce9-bff9-4d047aa59bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b053fc-c574-46b2-9d23-7b255c1a07d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23c1cf3-d71d-4606-a336-d016e4d4e403",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63699113-ca62-448e-adfa-04cacdb9b8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c66a48-18e2-46b1-8608-de5f9d0e8f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc12e9a-5a56-4055-a8e6-b2b298e4bf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb95a14f-3d3c-43e2-93c3-f53cf0731f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e93303-a4e7-4ed9-b4d1-aa8699db9d63",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d262499b-b062-49c7-bd6f-cfd0d18e1dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1a8fa0-78f4-4e85-8bd3-c88b93e189ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a7e109-f7d1-4e6e-a8db-8156d9d9c450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83f07f96-08ee-46ad-a103-1a21251aad4b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "02379c3e-b135-4610-85d2-a19cf3e93c47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c8e4fbe-84f5-4257-aed0-817b42f3edeb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ab2b3d-25b6-4120-8de0-1cf1a5aa33d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0c6c79-1e85-475e-b1c1-dddaf03dd880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6ef5c1-23e3-4195-807f-7348898dd0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ad04c85-63f3-46a4-8cd3-50d156f23c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796d33c5-c811-457f-ada8-3083058c1ff0",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82244f7-f21f-46a1-bd32-b5e03f420b07",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5a48cff0-b7de-4376-be5c-ed809d98248b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af844f6-660d-4e91-9b69-0dfc73ee6b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "faf1fe6a-a631-4d67-82ab-83463ce0416e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06f70c06-4ba1-46df-b51c-cf9e634d7f97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cfdea57-bfa1-4be8-81ce-2bd02c41dd0f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf0ec3eb-c0cc-42d0-a3e0-722bad0ef170",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41f3fe6e-2bb4-486f-8ec2-f7bae8b1f3ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89aa826c-5225-4fbf-a404-128cf375e6b2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0bba1b76-4f2e-409e-8338-51025b974199"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d07f94f-3fa4-4ad7-ab78-c0938d08a45c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccf3f0b7-7e18-4e6e-8944-84f2c59edd77"
            }
          }
        ]
      },
      {
        "id": "e3e6b5dd-bc0b-4118-9d95-31766d5faabf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "13ef17ad-a54a-4e2f-83b9-66a16162b3c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33d20678-178c-4def-bc92-3c99e9b1b6d4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ae19da86-6acd-4645-9d97-11136ff43568",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54cb0fa-c140-4863-9c75-af1235907550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b45934-6b7d-477d-ba63-cc15e4ce372b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6777efdd-b73d-4e13-82a2-be0a6b45d52c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4ae4a4-3292-411c-9521-458b3ef618d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8f82ec-46d6-465d-a946-2d0193fa57e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a846f1a-50b9-4328-a6e0-417c3a1fad67",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b4becc-2332-4778-a71f-d85d19c47746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49dc45b-2c2f-4f1f-bbc8-93f9d1852b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6176f597-9de6-4266-9e13-bd2cb56c1fa6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f784d5-f3fd-46f7-90a5-e64169a09073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81c3f70-267a-4d73-bde3-ae4e8af5cbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ff9675-f839-482a-a4bb-69eeeb39b5fd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90eb23e7-a07a-412f-8e9b-9a2a6bb326f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1038fea8-1957-4f08-b9e7-8ee32688c885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2fb5f8-4fa0-47c2-907e-09b866282acf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a679d2f4-068a-46d4-a08a-30d7415cd75a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3830015e-f140-4eb3-8efc-9d0e70bd7e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b887cf8d-f0c9-4298-a6c3-b3f562499d8d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ca5635-0411-45e6-b778-ec965543ea0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b92ed40-1e56-49ac-af3b-7386439b21db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecfca7b-a631-445f-8b44-78defbd51005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7084aaf9-3a7e-42e5-ab9e-c53ae54f65e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbaab9b4-3af0-43b7-89d8-3516a4895f33",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541fac0a-fbbe-4a14-8743-15f311aae606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca26a9e6-7fc4-451f-afb9-19a4642a8b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d2e4b4-06e8-4431-b352-ba0d6711aee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d877cc08-1a10-4ba5-a1f3-7c7aaa1f6d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fef450b-4be2-429c-b87f-3f5c49c440d8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c876a1fe-06eb-4fab-9033-e7198c0e951b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14b8b2c2-b17d-4552-a797-5fc2ecac840b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d19861-44a9-4791-aabf-a5d46e06e0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ee3fa4-620c-4a61-bb80-2a1b6424ec41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d350223d-aa82-4cf6-961d-38e74ec12597",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b0cf58-2731-4d8f-915b-f176824add07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "430879d4-4343-495c-85e8-f95f07bee711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb7a3d1-2958-439b-acd0-37347d122db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2eb360b-ce03-461c-99f9-247d5929b787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6665f008-724d-4329-b2ac-e613a3458232",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cbc393-4f51-4fbf-b4df-69c4e958192f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee75202-a71c-4763-bf0e-2b6d3932bcdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "897ed7db-3661-4e80-8305-8a4ccfa18e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4079075-14a2-4bb1-8612-55e510e8e725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4ff1f3-5c28-4403-9c73-34727c80c678",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e5cb54-0f43-4183-899b-ea869ff6151c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c0ce61-c50f-4f5e-bd33-309aee7c4ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b91e19-0199-4508-a324-16e167638a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c1eaa2-2ee4-4d58-b210-0b54f79ba3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b382f0-24ac-4a6c-8529-6b2992286b7c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ab2d2e-1a42-4365-9adc-4ae29be32fd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebedf41a-9b6b-45e3-b6b3-0aeac49d037f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff90bc5-93e1-4953-bd48-29aaa7dd0a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1ed433-4278-4e73-8b45-3e6597e9c5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e537e96a-ffbb-472d-bb65-b2505dcc7fbc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f171155-b415-49ad-a65d-3f6414f413f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad16763e-f9da-4c45-88e5-0ed1ec2664d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a041a7-4d3f-475e-93b9-eeb386222531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf77137-bc2c-4f6b-95a7-7055abeb6949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57f5a83-9f1f-45cf-82a4-c3719aae2cde",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6071f14b-6e42-4260-ad84-b90311985983",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c16e66c5-07e9-48f0-a4b2-9980b46341fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fd1dc1-a15c-4139-b2fc-67cdc434d8f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e94818e-8063-4ae0-8ab8-7d10b1f3bcdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a9c438-eed7-4528-910a-ef8d80ceb61a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732e7b73-1ffc-4177-a946-226ea03fea07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00344bcf-1428-4d63-9e7e-b9c98f1ef801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb032c6-bf8b-4ff9-80ab-ce016f88aae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da3d3cfc-4cf5-4940-bfe9-a3a95060fcdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4659b70-5b8c-4a1a-8f7d-e59881b21995",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c87dd8-a596-44b2-b9b2-bc1093336eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448893e7-14ab-4e64-ab37-479d4da43016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a230b51-270d-42c7-afde-191100a38593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3adb1a1-43e4-4cea-9090-09892f1413fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90317698-f7a1-4db2-b390-68343fbfdeee",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b00c063-e724-460a-9a96-38fe75e054bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ebf23a-c33e-4f9d-a7cd-76224ef3aecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f2f393-381f-402b-94ba-396d690cf045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0439171e-86fa-4f9b-bd98-86d413008971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e3d8a4-2990-4ba0-af01-e924bc12bcdb",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81eaee79-65b1-4965-b6c4-965e630041e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd439917-4b5a-4f52-8c83-78b83becd072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbd6626-b2ea-4e19-bbd6-373f81837e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4cf3fe7-58d8-4508-96c3-3e08947ec170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e91ba1-a315-4f4f-ba1a-8913060b5250",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136c8fa8-be3d-4abd-805d-713edc40e838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f640056-33ee-407f-85d3-99f59406478b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17cb137-9141-4fcb-a413-228fad9f018f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3c80b2-076c-4af1-a691-7f24b4ae04ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77bb454-9af1-4834-9fc3-1061af054ddd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421f8d3b-15f3-4389-8a27-9e0e80863d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d789e4b4-69dd-45c1-9aa7-54f6321061de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "602c3d86-9a0f-4708-9800-7c6d004761b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849d1525-1782-4af0-9fd0-40238b2fff5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2415f4c0-3892-48c7-afb3-6cc6fc03156e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19760595-6661-4308-9051-1310dcb55c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f46b067-8086-4b56-a413-f24ed3d93b78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f8689b-27d1-4c14-a965-90ea10683f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb42e3c-287c-472c-a8f1-f750e8cdcd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed935264-bf18-4655-92c5-6ae0b76d1418",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78800090-b954-4ce0-bf5c-e672d7d94cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d3a879-8028-4ec1-b7bc-9983eb91a850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0139c1-a680-4ea0-9152-f4efb0b2742f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c169fb-7ad3-4d06-bfed-9f2944d5d292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7b7443-215c-487b-9bbf-b5e12756f94a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6feb7cf-f7a3-4b96-8667-54a1e60adaa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab1d80eb-b178-41e9-89d2-2d3a3074bae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21014b0c-a4ad-4803-8fa7-55d96a78bcf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4fa9a9-7248-489d-9b69-9836a63ced1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487f09be-c8a3-4296-a552-85e7bdd238df",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931cfceb-e045-436c-b6f5-6aa8a878eb5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5e82941-3cb7-4fbb-922f-0cf156776d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda64a22-40ed-429e-a957-67570c8509ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bcc1ff-d692-478e-8c98-316bb1ce195d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af8300a-e2cf-4e49-bed9-2893747383a9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe30265-5984-46de-a8df-1d5781031efa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5f1026a-668f-4cf0-96a6-cee4dfbe313d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2dbb7d-15bf-4050-b378-4801c74ec10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0edaee0-ed76-4954-9173-030987efe33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdbf8fb-592c-4922-a113-3dd288d47892",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391a6bf2-0775-4400-821e-9689a0ecac73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "882bfce7-a146-4f8f-bb01-a16914609e45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e50043-48c8-45d1-9782-a3718f0b38aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104295d1-c3c5-493a-9017-d9660614b9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1a9415-606d-4c3d-870b-9d53f1aebecc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c04d63d-5731-46b4-a71e-fa7dcbb3af45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd5815d-9f24-40dc-a608-b84fc5cba552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5455be03-744b-406a-805b-31f4f89a48f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d8dce0-9a70-40ca-a5f5-c668fdccc017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c56ca7-31da-4f47-895e-de318b129149",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5f98ec-5484-41cf-a0c2-94f5a3d87c8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db5d6dac-c87b-4c9f-b9eb-2c88318f2429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67aa32a-df56-4bc2-afe8-3a5e33afddb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6b7d85-ce46-4496-9393-56236053334a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49bc57d-4f5b-484c-ad1b-3300650ad71c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395de6aa-fdc3-4000-a802-f1eeaed1fd9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4eb33d2-9108-4209-8985-2dbeb1a72648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3662249a-ce8a-4731-b6f4-a0dd85d8e587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215e20cf-d934-42a8-8801-9eeafee17818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32370b4-4e49-4b29-86a5-7fe7ce2589f0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f678e52e-c671-4fce-9667-69ceadb33f87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28e6c4c9-f816-44d8-90c2-cf97a1ac5477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0283d77-1627-4ac8-8176-906aeeab2fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7562c124-f11c-4746-8d5a-65c5248e6c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ead57ef-38f0-4ab8-9328-61c9eddd8c8f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722b3d0c-19ae-4784-ab7e-543f852319a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d74adc09-e725-42ca-83e6-89aa8e00dfd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5378ed6a-c833-4681-a5ef-6e4251f2a5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0390d6ad-9b54-4d56-87e8-858a57f25bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4d5237-ac05-4a29-877b-8759dcc27e5c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b79d7f-b3e8-45e9-839b-7f9f9021333a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac61c5cc-0a3d-47dd-ac16-79f4902d6e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbe8c77-37c2-4e6b-9405-e08c1fd3d4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48367514-5afe-4935-bc8a-aad3a6007f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c150bad3-9747-455f-a20f-1c12ab386f0e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c357b8-bdab-4cc9-b91f-0d69502c7757",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59b8a4e1-44d7-46bc-9d59-3952224cef2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c4b7a1-bb0b-4008-ac82-13ca6b460d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4236493-a3b0-403b-ab76-41fdc73824ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2182a835-6af0-4504-809c-824c1db60217",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed411f3e-6c42-4134-84bc-462b20e9a484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ca116f-73bd-4c87-a55b-b3c8e63b8485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeceb217-454c-4d06-9d89-0ee255f9b78d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8565bae-5d67-4d8c-8030-3729a66d8bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a37650-9d83-4612-a6f8-d96b0144d858",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03377e3-aa01-4ffa-b08d-e721da6dca61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6aefa9c-7994-4787-95a1-51b5e6093f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d81a816-db3a-4b22-be6b-e304eed8e4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5beca4e-0fb9-4d91-b6df-18085fa23c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244c0a50-4f85-433e-a00c-b3bc5615bced",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b825e34d-c3b0-4eec-b104-ef4711440c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108dd627-33e2-4c8b-82ca-e3b20fc55275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b983551-6c27-4d3a-a584-c4a687e62164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d6ddc05-21a7-450d-b107-021fc37666b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004aedec-29bb-42e7-b215-abb6ce173348",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d22b992-4151-4930-b6c9-25ffd1abaa60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672330bc-b7d4-4081-8fc0-281dd9c2122a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7738ade-09d8-40a1-abf6-fa3ed7dacfd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65cf5b41-8f79-4493-83f5-531fa0fac2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca28c93-0029-487f-9fca-6c902941082b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e10d837-fff5-488e-9504-fa6c994f4b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d869af0e-38c2-4745-8b45-a42250ad9f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1e76ee-eb37-45b8-9a70-c5f38d30d4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83cc30b-4d15-436e-a458-697d6540b78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b7609f-2b01-4794-a16f-b46ce6efba07",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9148f111-1af3-46a9-9689-5d5fadeb608f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214fcd36-47c4-4461-ad7b-9417a89bfcc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d8bb5a-6a5a-4e54-b144-8415bd16ca53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4118f053-31ec-4a2b-a995-f5b7f2be2a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d4ad3e-51ac-4456-9d85-d4e03f793a33",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbc5014-7d6e-4214-b80b-b6184584a8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3370c1-8843-4ae2-a6cc-52f6808e4cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cfe42c-2072-42bc-9d09-c60b20f11bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037031dd-3d66-4e1a-9909-449f47e1f074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08abc60e-bd0b-4d0f-8722-5b0c43e951be",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db820415-5b28-4359-a9a8-e8a88b2b174c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e68c89a-5de4-4ed9-8e2c-e9dc27841135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e2cd33-31e5-45b8-a341-0a0733068cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611ac2cf-1d1c-4ab8-92bb-826707a12d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7d8a56-f664-44e9-996d-d5070e33e2ed",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436e9e6f-49cc-4fc4-b5f0-79456be5c232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85e5a2e-588e-4dca-97ed-da22b59c26d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c379c456-411a-4ea1-bd1c-3482607bde13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0feb54-9e9c-409c-8363-ff3c3b8867d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f445d409-e78f-4903-baf3-0a95257b6955",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49a13b0-8937-4788-b982-e76b45e385bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a5ce22-9ad1-401e-b127-0bf961351f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb4f56f-b910-4ce5-a800-3c6183cf12f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c194c11-f67a-41ae-9ee4-3b8e6e7d337b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a0b5c2-d828-445e-86b9-bb09eabc83ae",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d05f62f-b12a-42f1-98ca-a20a27a61a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9443e0-4cd2-48a8-86a0-07d15033fdf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae5fb19-9881-43b4-bd4e-33f8dfaa0a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37aaef92-11cb-4dde-adb8-5ff59a6605b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0c5f35-48cb-4097-b127-f3d5b6b79b65",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bb9428-c8d4-48b3-81ae-ffa2964eb8b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee12b84c-6cd6-4ef4-8486-742f9e73f5b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14e267d-39c7-4ef0-90b8-c14692495413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff16068-2487-422c-9ddb-fd0c838f5e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ee2489-f47a-403d-90a4-07297ae95b4f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0383fb-ebc4-4574-aee5-02c3e8e6662f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6dd0ae2-3407-4f7c-8662-9ea89ebb92d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d99d5f-54d8-40b5-916a-3e17dc2c3077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446d3268-98fb-4a15-b01d-66a2e99704df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d26897e-c380-4999-a240-6f85755b5cfc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7191c4fe-8a3f-4342-9ae3-e205f62f76d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca27bd7-a461-4314-add0-87244a307ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9174d662-7de7-40b3-a64d-f89ed28a8f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f47f8aa6-1420-4125-b7bb-bda6bffb958b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b6b6d0-fe35-409d-bca3-93f74666b801",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2421e91-6f23-452c-8c3e-ab9ee1bc2563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac9ffa1-9dfb-46c0-8208-d08e7cc567d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63a3fb8-e2e1-4ae4-a5e2-34d77ae68036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad362cf8-921f-474e-8ba6-27d9babdab9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd750649-4774-4955-bd16-4d6bdf0b8e5d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c77ccb-943e-47ce-96ee-ab4fe845284a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23b1787-bbd7-4373-bd67-9e74dd77bc14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bdc162-8a1c-4658-a162-5317e6b16076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4782e21-49a6-46ef-a97a-8799985f9aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e57655-19fc-45b9-b647-d8311f48608b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5091d7-e30d-4e48-9064-2ce05e3d4e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73d7847-ced2-4102-b4d2-b88bdb6e8eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14982cd-2d37-452a-bd9b-9b563dd85a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad2cbaa-c594-4721-9919-c14431a3fb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480fe2aa-915b-4618-af18-63f6b65428f6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c249cdf-e026-4324-964b-c64e331bcf81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122ef2c4-e3d1-425d-b58f-84225d9931ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eed272f-1d3a-46db-b060-99556869f36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75f1b3c-d592-46da-b6b6-a0b009ecd487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c977caac-9471-4ce9-8551-05805ef96e4b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb3127d-ca75-41f5-9478-e5625b069caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e851d7d5-5f1e-4fa8-96ab-9c9b56bbee31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384d9941-45bb-45b3-a365-bb7754403dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318bee01-8638-451c-aa98-714ab8d799e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07e9010-3697-4590-bb00-1a7d726b2677",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db187baf-f399-4ccf-bae3-f4d6fc911695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1dfc813-98f6-49da-a62d-bc0c1893c4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c05a691-c795-43ca-b4bb-507315e3fd8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb301a1-5d9a-46f7-ac1d-3154b9a3cd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ca6b02-0aaa-4ae5-83d2-14d5e7de8828",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e652f72c-17d5-4248-8213-06f279a5d9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a3614c-d189-4d17-98bb-10f6f4189900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d67743d-2768-4b9a-a55f-bd290af69ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8db2d82-b08b-4922-b3c2-55625dd47ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c19aa4-5607-4eba-8a7e-7b3c04c73f46",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccf745e-79f5-42c7-9baf-1dd7a709703a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6afdabe6-7f0b-4c6c-8b0d-96931e104de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e44f691-dd7e-4015-b6e9-bc4b621dd993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b196f3-69a6-41df-9e64-de298df2082c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3144afa5-e56b-4aad-b9f8-3f79bf45d034",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fe034b-fd4b-4d05-804b-fd9f5702ac3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69eaca2f-5ab4-44e0-94f6-ed5adffc6720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "215f48ca-b053-440a-90e3-7fd247f43ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e80f591-dbeb-4753-9aa6-59b6c0abeb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c02b6b-093f-4dd2-bd1f-d4ab5a1db662",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1354aa-2705-49d4-885e-fc0978855301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea83792-4007-4ac6-90c7-0a1e4f758546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880a1eb3-c4cd-4f73-b49b-9cc2a7ea1bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f947ee5e-94a5-4c27-bd0b-d9784abe5ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20c0e68-b6f5-44ac-b5f1-9008803f2267",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9dda89-a057-40b1-9fbd-aa2967c013f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d16f056-8fa3-49ec-ad57-d24e841c13cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35112440-5bbc-4b43-990d-b2b9b39f930d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8628f97c-e39a-4f8d-9830-95cb4478403a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8f4d24-260b-40ef-ba10-bbbac5510e66",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18163573-7343-406f-b995-67f59b9b43ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f001e2-aa44-440a-9425-e68f596076f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6980639-28cd-4bab-8e0d-ec000d1d359b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08edfce-52fc-4c8e-bddf-98bdd670eea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536586ce-b783-4741-8ce6-468b6e6fad00",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf00a3f0-e4c0-4025-92b2-1306e852b2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fcd67a0-2227-45f1-896a-3826b9340b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e76702-d09c-4faa-8ee1-a5dbed4ced90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c4d460-a16e-4736-b18a-7296ca10bc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2a7dcc-97c5-403a-915f-f69ebe05295b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e75051e-64c3-470b-a457-ba41f9775425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c484454-b95d-467c-b795-6e7eff2f760b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcd747d-7b68-4ee7-9b14-5893ef097f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096f0b53-e3db-4558-b96f-9360ada2b74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7377fe-c065-4440-a9e1-b433d15c3130",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c28a839-9b52-413a-a7bc-a1642328cab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755b54c8-3839-4f74-b81b-d026006fcf75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcc36c2-6731-4177-a744-9b6ad6c053dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f6d44a5-6105-44f1-aead-d2f1ed50bf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7a757c-c082-4230-b5cc-aed6c4a55bcb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08962ae3-a0f7-4329-b471-0819d550e91a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48f607cd-ec30-4555-b478-5783e8b30b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41760c2-52ba-492b-bbe8-85af80d0547c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c638e704-0cc9-4379-9291-d428acb25375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64097c06-f25d-4865-8587-43d3ff1825cd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c6da21-f58d-4dc1-bfd4-3ddd13efbeda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef6716fe-9c32-4527-8911-8e41131e12fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d0a3e1-74a6-4327-acaa-16d6d6ec68e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6eeb6b-aa31-415c-9d4d-8c38ee20d4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e8dd12-5178-4783-a4d3-0e87abf40f90",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8ae616-824e-43a4-b5bc-1ffc2a28ba54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79961980-5509-4bb1-a9bc-ba0cabe833d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3fd317-40ba-4203-b58e-4b2256ebe42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869e8dbf-3913-4c3e-a4c6-4a0e0d2296ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b699e3-2d72-4d2f-beeb-85e13d38ac66",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d334e3-7775-466b-a630-371e655b2817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3efb330-05bd-42b0-be35-c48359d4e7e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5e2255-de57-4362-9006-71660c4d1260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeaab80b-4f73-49ee-a5b3-501a5f8b7231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a29c353-af24-4aa3-878e-bce33b95ae0a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0afd47-cebb-4628-88ca-e754abfe0edd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4b8ed5a-1f54-481c-b43a-a97a891a661b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d68737-09c0-4000-8843-8414aaf9b0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34d79bb-6c1b-4386-94e2-6dcc312b255b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0041b824-c136-4be2-b443-5d06073e5c44",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec32445-4405-4016-bbba-587e1b39c27d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ec88b6b-d055-4ced-8641-c2b39e366ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5e2f95-8bb2-400c-bfff-b0b184bee6bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5502cd-980a-4006-aa8f-bf8e8c7dc462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fff701c-750b-4bd1-a8a5-7c57aa91612a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a4dffc-18fb-4512-b7b1-4f2cef1d6980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0b5331f-9b6b-4c52-b6e9-510d7e176c41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecd8db1-2044-46de-8437-eeab914d6ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc46e5ab-4073-48af-9985-4627acf082b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88aafb29-b279-48a2-b68d-71c61309ea0b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1869e7c-be14-4022-8ae3-800edff29e64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7c99849-ba2d-4725-a7b7-afe617037f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79488ef-b56c-4d19-bce2-7051739d5920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0695ad6a-f2d2-4679-8929-4eb1de77d3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facf3977-bfb4-450a-b0ec-f75e305d443e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d575a3e3-1580-4736-acf3-0c34e228a2f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e5c7cd2-21a5-44ba-ba8e-465829bd3564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d84250-692f-4ae5-b90f-6b3b4acbad59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fd86c3-ef93-419f-9072-8a7f344302e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0507b45c-22e4-42ab-98bd-ee2b0ecf5a43",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff4bbb6-126c-4bc0-82da-1e91c8f639bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b315d9c-4abb-453a-8a83-9fb15abbe09c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f8525e-a976-416e-978f-e6123da992d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dcc2f8d-a9b5-4fe7-b128-5f1b5d4841c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b667bd-942f-4ed7-b1d4-35913ffe8c54",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c354d1-f511-41dd-a93b-ea9a41989626",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "968e6818-15c8-41e3-892b-fde10fe0ccbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e93291-c169-4bd0-9f84-8ab128d7cf7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef7da38-bb94-4b58-95fc-ef191061ec0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ad88fb-b745-4c46-a5e2-de3840489874",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb48c423-9d12-4f6d-8d0f-64eae61face1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba44ba4-05d2-437b-8000-da1d0076e86f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a717759-4399-4bcb-be12-9196c4281df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939c5bbb-f5f6-42e5-b9d2-39d26d85fba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e759c22-aef6-48be-9e11-6b12446c39d6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f298064b-08fc-4e69-983b-13b4133abcaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03096a3b-8f0c-4a4c-b0d0-9f59b03cc0ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a1e5d5-aedd-467a-8037-7a44ee24001e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7990fa-18ed-44f7-a2b1-6c977fe7fd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cda623-7c77-459b-9c32-a0591196ad3a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e0413b-0639-4646-aa78-b6cffd8ec56a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9270fcb4-f60c-499e-96cd-a83618befed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "214ea29d-7fb0-4f8b-acc3-b174c30ab654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3223d9-a420-4e77-a426-a3d4949f12f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927903d8-f150-4726-b763-8d7f4069654f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2177076d-ad4a-4ac2-8b57-20e92b75d00b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dccbb2ef-3e07-4aa7-9a89-bd04777f7550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba7ff59-88b1-4beb-be33-9a12517dce6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d10b301-0b0a-4f61-bb6f-9254ef140ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f53a141-76d3-4806-a213-4f668c3d6af4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6599f3f9-b262-47f9-9d9b-e6e99a9a53a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e189419a-1204-4e2a-95d0-b58f9e2921ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e2e79a-db0d-4412-bc3b-3b3a8cb40444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7850a69-e29c-4e07-bf0f-24e90e023631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69ac981-868d-4eda-a7ce-619d57671cd0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fe5728-0213-45a6-9093-af92ba6aefb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51df953e-a557-43d9-9d75-47b7d4642aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4312e50-cedc-4384-a70d-40160777531a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac95c47-bb59-47e6-a239-ff50cb28c5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a56c094-26a1-4788-8236-5f19d75ad889",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4295e95-7768-4b5d-b052-2efc1ced128c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ee6ffb-6d8a-48e4-8b3b-f024ed95828d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad8e2f7-e8bf-4da2-8232-d1ba9968b01a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60ee371-ec7f-4701-ab14-dcc4c53bbd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1040fafb-c854-4f57-b172-944a7e7ef2a7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d1b8c6-9c9f-4c6b-b858-f650f03dc429",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9bcdfcd-4eeb-4263-a155-73aafd38d2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa85c755-c9d9-4a16-903f-7d221d26dc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a1e8f06-4473-47e0-b5e0-677b198ecc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c5069c-ea47-4838-b0f0-26a1f587a751",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985125b9-6455-494c-a18c-dda517eb6b84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a5d33d-5a1b-41f2-ad94-96874083aa70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4f311a-536a-4f13-bb42-3827dfe0fb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c72862-4fc7-48b1-8445-8d7410fee2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aeae7d0-2e9a-40fe-a925-3d74f5ff475f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efd957c-8e80-435f-b183-8b39f4bdef24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "200362b4-f82a-4f1e-b8ce-617822506fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6759ff35-3e30-49b0-9443-f3b2411c4122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b758de9c-0301-47cf-8fa7-837bfdb70d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ede2a5-02af-4512-9bc8-9ef69016465f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380a750e-b274-4441-a59d-060852d636b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4763cb7f-dd37-4fac-9416-9256c9803e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d659e5-e1c6-474a-869c-399d26e159c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e14e1062-4aab-4140-8864-d1ea6fc43248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca50a2c-31e4-41ce-91ec-26033b3d5242",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95980d23-2bd4-4d55-a40c-a9ff6c73e5a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5311df0a-1289-4cb0-aee5-13e09a71dbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9aff40d-116e-48cd-ba86-b2bd2178d7af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47a3a72-f59e-46ed-80d1-ffa05f1771bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45467aed-58bc-4044-80fe-b0126277c2fd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3de422-c1bd-4d54-a482-d763f7ebeac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a4b330d-9eec-4ab6-a5ea-c2905c1d0c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0d8ff7-a8b5-413d-9967-0513783510d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0806f4b3-2947-4e32-ad06-8efe05f4f7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39258251-b93b-484e-9322-c7d7732240d1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d12246-2aa5-463f-a4c3-b4e442a6082e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40136e04-a4fb-46c4-ad89-20c5e9fa2018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19bd595-b517-47b5-a631-208ef7d0e215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8fda52-d0ff-4a59-aaab-afe80537c019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57de410-0e5b-40f1-8a6a-f1d0e7921425",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01615fd-5c01-4378-854c-0c6fb5eb167f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c148fa40-0dfe-43ae-8c8c-df6d2bd210a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cbdbe3-6b40-46f1-a229-64769473766b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1755e34-27f1-49d8-b356-03b4942a84c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d5b941-b01a-46f2-be47-256764c7901a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19425316-249f-4e66-bd04-d3779c973b1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b2226b-1ec2-4f49-aebd-82271fcd1bd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083aa5bc-f9d0-4897-a276-cd258e9c2b07",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d66b37-3948-41e6-ab6b-589d94d0ccfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfbaaae-7b57-4084-824a-7c3a598faaca",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5784fcf1-c407-4c51-9f4d-6539aebb6bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1109942d-0ae5-4f5e-9932-48476d9e4dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c98d29-9b05-49ed-889f-573e26cb7694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11bba65e-9ab4-4a38-8d30-86b5537dc990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a729210c-3632-4a04-8c93-3a6fb15fc344",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cef122a-7aee-4800-b4b7-b55e3bb25a32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc22e2b7-95ee-4541-a97f-56d4528deaab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9bfb90-db4e-4301-a824-c45bfb83f55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d54ca0b1-8d47-45db-8ba8-19733ca95676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5204f22f-bff8-458a-a1cd-cf8a4e1eb09a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03902fd-0c4d-492c-a34b-a56882182dcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97959925-df4c-415c-919a-bd759fb2135b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9cb170-ff50-4e67-b355-ac49014b07d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93d7d502-c35f-4e71-a450-e6ad6fbc6e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5810cda6-3b73-4cf0-b7af-a7baeb4ea483",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971c659b-1e6f-4fc4-9c14-23f4dca3cf88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d647586c-16e4-4040-ac47-ab86edd944d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd58d2d9-ac6d-4d74-84a9-afde1d66a451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19326b1-36d8-4671-adeb-eadf28da2e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93663eb4-72c9-4e81-83bd-f29db435463c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d1cf79-a580-411c-b0f5-2512fbe8170b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d457cfbf-3dff-4b3f-b40d-0eb02c5dfd42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe898b4-bf6d-4cbc-a53d-dc0817df0855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c0fddc-7d99-43a2-856e-4a2a3a1fe534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859b76c1-ce7c-45e2-ab9c-335b7657575a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712976cb-d6f8-42e1-81c8-7ada22fe5d2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b1c1011-34ec-45d7-ab07-40de7feab73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76b7034-883f-4d4a-b902-beaa0363f41a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f13720d-ceb5-4c46-9610-976ce353c125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7589e1d-7b51-453c-b477-425d03402f7d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42144b9-a15f-4c7c-8d0f-ea4490e221e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5d58f39-9268-459c-b5dc-dfd3684adfbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24959528-7059-4a68-94d8-721a8aef4b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b47349-660c-44e0-84bf-aca95442b363"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "366abe2c-acfd-4b28-984b-fa84426b7393",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "affcd16b-e458-44f0-b6ce-56ec047517c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48d8f5f5-e7ca-433f-a76f-09dd946d5d26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "693d689d-397c-45b9-a8bc-7b30538e5cf4"
                    }
                  }
                ]
              },
              {
                "id": "0ab8ff4d-bd20-46b9-badc-ee74fc4f852b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c0bbd9b-6b1b-4eb1-b3b5-2b48378ee695",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96d4125-4032-4c45-b014-903e07d9abec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eab0160a-8480-49c0-8c0f-9b1abf1c0569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29ed504-9164-4140-ae66-df2011ec61a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95a99373-3672-49ba-abd0-098954ce3117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea2ab6b-b467-440b-a2b8-cfa232a3d9e3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab46a4f3-4f8f-47bb-b017-0cd42f42324f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eac0af6d-3999-4d46-b8be-7a2a4ec6a35a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d435ade-afe6-4bf3-b1ff-7b498d78e772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79e8f0d3-5f80-44fd-bb9a-e6387c4475f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e13df8e-fa2a-49e9-b174-86f5bfbb0ab8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8435851-8e31-4dee-b326-f675bd4cf34d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "907f9b1d-9633-4023-b7b6-5bf5c1b6e600",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd6db5e5-1fad-433c-abf8-1d07385a4b2c"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "5ad30ed6-f5c4-45bd-afdc-e268b1b0dc70",
            "name": "Positive Testing",
            "item": [
              {
                "id": "81d7c8b8-208d-46c1-b76c-3b32b9e92911",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "264df4f1-5c21-4d4d-acd0-87b2add2e844",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e8d0ee2-68e2-4555-b077-dc3d2f0545de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bde9e4f6-dabd-4da1-a873-94f0dc4b90d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dc9fd43-42e7-43a5-8faf-b476e524415e"
                    }
                  }
                ]
              },
              {
                "id": "394ee7ea-ffa0-478f-9fe8-66dc1f63eca0",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d880b5d6-7acb-4bf8-85ea-2d2b0ed43c1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2f7cb23-ee07-4758-8ab9-0e76ed9776d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21a61f8f-030a-4a2c-9b72-bcac35d39272",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "917f6a1e-2563-4c11-8aea-715c97445c08"
                    }
                  }
                ]
              },
              {
                "id": "2d9052b7-4fa5-46aa-96a8-6cbc62b9ca5a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "706d6e97-06f5-4aae-8b5c-e6a3e42c0389",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70bbaa41-87a2-474c-836f-cdd7816f6d9b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa301b8d-72b4-4eb2-b46e-30dcd4d9f7f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97731db8-0f9d-40ee-ab36-467afcd25c60"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b42b4d10-fe4f-43b1-bd48-41ca588dbe60",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "21a1ee21-614f-43d4-a2da-28d3625a0bf7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab367bec-9df5-4bf4-939a-c5e3f129375a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3dafbcf3-4274-414f-a5c8-03b0dd5a68d2"
            }
          }
        ]
      },
      {
        "id": "3b7383ca-8ea5-4edb-85c0-d9e6ad17293b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "65980b74-0641-441f-9c2a-8ea660a45497",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca2d663a-b8fc-42a9-99b4-4fbbc7c4852e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47a62396-6459-4030-b69c-56ef427ddaac",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b65ceb-5cd2-42ed-acb5-8f13386fb592",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7c0b2a41-099d-42fd-84e7-fd0cda947750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffb0fcd-6b46-47fd-bac9-3fe03e8028b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63da31de-ec5c-4de6-807a-0b33fa390546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1f067a-3cca-4e03-bd92-50eb5cb2a001",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7cf3058-f591-4689-9667-c4504a434d38",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2b89d444-c9d1-4de9-83c7-b955e0cf162b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfd1b9b-2bb5-47ed-8a82-b80828de7782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cd121c6-539e-4044-bb5c-af3f3b33d5c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e1a9230-5eee-4c3f-9718-57f9daf3efdb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dcdd6654-a93e-4111-acee-18e45c13417a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7405111-73ff-4a59-8c48-58aef98dc781",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "710d9536-7c00-4ee6-8f4f-10aa02dc1b83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "060918f0-66ee-4573-a7e5-ff326afdacf8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "406881cc-18da-47a4-ac3c-962ac9cefb24"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15252aab-3ab9-44bc-b1a5-bf36cced13b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e20093a-6a43-4c18-a158-77ac4b796186"
            }
          }
        ]
      },
      {
        "id": "5332472e-92da-41df-81bc-5840583190b2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3bb4ca14-4261-42d3-aee2-eaf9d263cfda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be28b181-597a-4fd6-a156-a80b2d86a214",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbd32231-e6a6-4378-b3cc-89999f19a58a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be61b10c-ec56-4406-a789-4c6b3efefd79",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "622a1351-ae27-49dd-933e-0764026f479a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f1c620-4940-48f2-8e39-50b41a8ff9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42eacdd5-5537-497c-8e5c-a1d80a7c1c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa79397d-1e81-4b66-8dc2-8c5b78488fca",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d1ccc8-7b23-40e8-a2af-9648b2b5110a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5e4af1f6-0208-47b6-8f75-9284f646d68c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdf323c-c6f3-4474-bbd9-79a3ff33d49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48f10849-cad7-4d8e-8bbd-d6d33888e030"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "381e8f91-1fda-4e4a-9b9a-fc7d93311aeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3d377d0-bde2-4ae0-b252-bc061b4d6198"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89bebb51-70c2-447f-adfb-919a1c1cec52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ebb65f9-5d90-483b-b88e-6d949a833716"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2445204-1b22-4130-b952-ce17a26e513a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "378aa57d-6ab1-4f9d-b742-4bf55dcaeb96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a019d61c-9c67-41a7-90fc-e923432b2b38",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "843c18c1-0187-45ea-a0e2-95165ff78ce9"
            }
          }
        ]
      },
      {
        "id": "24ed9b42-c940-48a5-b134-e616ff45c23f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "04e43780-5fc7-4dab-95af-fce324b264a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9a629d1-01cb-442b-a917-1ecc38e75238",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24765590-8153-4b14-b086-f275338da7f9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2996a756-16bc-4852-9541-c24c95c323ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "52f98cc9-cca8-4628-aac1-56d13c6cb2ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5293d3-cc30-4777-b3a2-0986b1204ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "425a7025-1bff-4464-9433-20a8889c743f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ff70b7-0dae-48b4-832f-92f34f937a47",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1234e77b-a2f0-4d89-ad7f-42f38738cbc0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "29e4613e-fd21-485b-ac76-ee9c547cb79c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4b98e1-541f-4526-a379-79bfad442ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b87f3a4-9443-41b1-89aa-a498daca19fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "463bff17-158f-4551-abf8-213d1f508436",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1283c852-e803-416f-89d1-93fa27794cf8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5196fd2b-fcbc-4450-a0c7-3de375028e60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bd4fe98-6910-4377-9c50-f098c6110225"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "197ff617-5dbf-4b6a-a5c9-21a658600e53",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc5fd3e6-fb8a-4e27-b269-5a071b071eac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "659399cf-9b25-4e32-be3c-d96cd374fc28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b36268e-49da-4172-9df2-dcad6bd4b11c"
            }
          }
        ]
      },
      {
        "id": "0179ca56-8bcf-4abd-807d-7693d7136739",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cee037a-f59b-4790-bf28-6a9fd0222b82",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d03772a2-2c57-42f2-a1ab-aa25335e269b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c9cc04c7-9202-482c-b269-91f247ebd327",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3146878-64bc-414d-873c-7d9a053e609b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6404ea3a-dc3c-4d3d-9830-a841b417c0b4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 209.33076923076922,
      "responseMin": 7,
      "responseMax": 2224,
      "responseSd": 364.35698657860127,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666659806586,
      "completed": 1666659872241
    },
    "executions": [
      {
        "id": "72030f0b-036b-424d-af43-48a75a169711",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3fcf5f67-a204-4f0b-ba87-2732678e24fc",
          "httpRequestId": "2b613dbd-b953-4121-a715-6c912c8a7632"
        },
        "item": {
          "id": "72030f0b-036b-424d-af43-48a75a169711",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "74548024-8c24-4b33-927a-5d590f4df7fb",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "78ebfa59-601a-4c4b-b226-beb80edb7f45",
        "cursor": {
          "ref": "984284c6-a9e3-406b-9a99-84168ce49c61",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "82485d89-efd1-49cf-a73f-9a1fb07be601"
        },
        "item": {
          "id": "78ebfa59-601a-4c4b-b226-beb80edb7f45",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0efafe3b-3871-4f4b-84f2-3fbc8bc83c2d",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "d6a674ca-e06f-4a9d-83ab-862cecb6c49b",
        "cursor": {
          "ref": "0fc73ae2-8962-497b-b063-f2181ab0ebd4",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b6f6c69b-4204-484b-b36a-ae04bcbebe22"
        },
        "item": {
          "id": "d6a674ca-e06f-4a9d-83ab-862cecb6c49b",
          "name": "did_json"
        },
        "response": {
          "id": "d890ef19-5b6d-4350-ac86-9a08fc4deb66",
          "status": "OK",
          "code": 200,
          "responseTime": 2224,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084fa4f7-3544-43e7-84ee-f22bd58ba152",
        "cursor": {
          "ref": "c75965ba-6728-40ea-babb-080da95db46b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e49abf60-aadd-417c-b9e5-1a12a1f048f8"
        },
        "item": {
          "id": "084fa4f7-3544-43e7-84ee-f22bd58ba152",
          "name": "did:invalid"
        },
        "response": {
          "id": "23c03f53-e854-4f78-a56a-6b8e97b2ffd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084fa4f7-3544-43e7-84ee-f22bd58ba152",
        "cursor": {
          "ref": "c75965ba-6728-40ea-babb-080da95db46b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e49abf60-aadd-417c-b9e5-1a12a1f048f8"
        },
        "item": {
          "id": "084fa4f7-3544-43e7-84ee-f22bd58ba152",
          "name": "did:invalid"
        },
        "response": {
          "id": "23c03f53-e854-4f78-a56a-6b8e97b2ffd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746bb206-c3d1-4337-81ab-122818137577",
        "cursor": {
          "ref": "bc55d190-d2ba-4464-be83-2515a752f856",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bc71e771-3edd-4403-9d00-ba21fa7f5a73"
        },
        "item": {
          "id": "746bb206-c3d1-4337-81ab-122818137577",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ad3ae1b4-2903-4a2a-bf75-a11d54fcd8ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 466,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70e9749-f791-49b9-b84a-a9e03d3ab55a",
        "cursor": {
          "ref": "2e96ad69-ba3e-494b-b315-40bb5e177cf6",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "49bfa081-afb3-42f2-8d10-380696e101d4"
        },
        "item": {
          "id": "e70e9749-f791-49b9-b84a-a9e03d3ab55a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0644a10b-bd0e-49a4-a470-f78c6c24ab93",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5efb40-64f9-499a-b9b9-cbefd53bce13",
        "cursor": {
          "ref": "cee485c2-b752-487e-82ed-a4ae1fac1cf7",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b73a19ad-0046-46e3-bb92-108995b59f9e"
        },
        "item": {
          "id": "3c5efb40-64f9-499a-b9b9-cbefd53bce13",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2601dbcc-15e1-4f19-ad1e-bb3834aaa1ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461e3205-3df5-4859-908f-f601e56914b8",
        "cursor": {
          "ref": "bc8be407-9cb5-49f3-bde7-78b8649ed343",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a5039a50-7bbf-484e-b533-6245c7890116"
        },
        "item": {
          "id": "461e3205-3df5-4859-908f-f601e56914b8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3551c16b-5fda-4c0a-a65e-a00beeb8807e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461e3205-3df5-4859-908f-f601e56914b8",
        "cursor": {
          "ref": "bc8be407-9cb5-49f3-bde7-78b8649ed343",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a5039a50-7bbf-484e-b533-6245c7890116"
        },
        "item": {
          "id": "461e3205-3df5-4859-908f-f601e56914b8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3551c16b-5fda-4c0a-a65e-a00beeb8807e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb2a228-fac4-46fb-8a88-47b56cfd705e",
        "cursor": {
          "ref": "e2958805-a04a-4deb-9315-32ade5742d5a",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bd5d6bc7-12dc-448e-886f-3db3f68f9564"
        },
        "item": {
          "id": "ffb2a228-fac4-46fb-8a88-47b56cfd705e",
          "name": "identifiers"
        },
        "response": {
          "id": "187a4dee-8243-4d4b-9da7-63c2f4404586",
          "status": "OK",
          "code": 200,
          "responseTime": 815,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd20791-b404-478e-a204-ade24508d5c7",
        "cursor": {
          "ref": "6896f71f-26ea-47e4-9d79-724a5a4e7746",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "55951f39-81c3-4847-8700-968eff9bcfd0"
        },
        "item": {
          "id": "abd20791-b404-478e-a204-ade24508d5c7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e9924773-79ac-43da-8e7e-44eb1743d854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd20791-b404-478e-a204-ade24508d5c7",
        "cursor": {
          "ref": "6896f71f-26ea-47e4-9d79-724a5a4e7746",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "55951f39-81c3-4847-8700-968eff9bcfd0"
        },
        "item": {
          "id": "abd20791-b404-478e-a204-ade24508d5c7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e9924773-79ac-43da-8e7e-44eb1743d854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3a683b-6189-4cd4-bf4d-394a46ca0388",
        "cursor": {
          "ref": "18033c28-2a3b-423a-8f83-e53cd3cc82a8",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b75c4f6d-6a36-4100-b934-8ea22da6d68c"
        },
        "item": {
          "id": "2f3a683b-6189-4cd4-bf4d-394a46ca0388",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "235970b4-fb0e-4ace-b71f-99bf10742510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93772acf-795f-49a3-9df3-65248e736ca1",
        "cursor": {
          "ref": "82fa3f5a-3653-469b-a159-965f89503c78",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "60bb5995-eeca-4049-8506-788e2338be18"
        },
        "item": {
          "id": "93772acf-795f-49a3-9df3-65248e736ca1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "eefa0276-43fe-4789-8977-0c95ce8f86f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0a3e66-a60e-4209-90c5-31ea28c516dd",
        "cursor": {
          "ref": "4adf81c9-d847-4418-819c-413943ad0ce7",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bbb9cfeb-a9eb-42e8-bbcf-f9306a4d8b6d"
        },
        "item": {
          "id": "bc0a3e66-a60e-4209-90c5-31ea28c516dd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "de0c130b-b3cb-4b26-ab78-ed486fd26047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b49e35-eb37-416d-9e5a-582c1ee1a070",
        "cursor": {
          "ref": "8c10b58d-f776-40d5-87a2-ffebd95ae1e0",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1ce282e0-1dae-47a0-893c-f38a29fe46c0"
        },
        "item": {
          "id": "05b49e35-eb37-416d-9e5a-582c1ee1a070",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "202728c2-dd7d-450e-b059-f602737abc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f907229-a459-4f03-a710-a65a90958b8c",
        "cursor": {
          "ref": "66a38222-83bb-41a1-9683-7c0eea9d846d",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "24360f9d-a6e7-47bd-bf43-00baa9d9f99c"
        },
        "item": {
          "id": "8f907229-a459-4f03-a710-a65a90958b8c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "31e9f2cb-34f6-42e5-af17-ae9f6045ec1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e376de-1f16-4085-aa38-f010fce94ac8",
        "cursor": {
          "ref": "4ab126d3-a172-40a6-b6fd-855cf0235bbb",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0382e3a6-a6f6-47b2-a6d1-09585e0d6374"
        },
        "item": {
          "id": "03e376de-1f16-4085-aa38-f010fce94ac8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "677086bb-a7a1-4d3f-b576-01ec5dd696ff",
          "status": "Created",
          "code": 201,
          "responseTime": 823,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "900bb917-5b29-428c-9ded-ee0810f00a31",
        "cursor": {
          "ref": "46be3b3c-061c-4ce9-b784-c0697051f81a",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5290fec4-296d-43a2-be46-db7005890c96"
        },
        "item": {
          "id": "900bb917-5b29-428c-9ded-ee0810f00a31",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "31f81ad8-d593-489f-bbfd-2fe98ce0fe09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff093078-45c8-4789-911e-77f562d1960c",
        "cursor": {
          "ref": "dbe6fbd2-3b3b-47b1-8630-71ae64b544f3",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d7dbef8d-4d55-4a10-ac38-2268f0b6a154"
        },
        "item": {
          "id": "ff093078-45c8-4789-911e-77f562d1960c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5abfea3a-03cf-44e4-ae4f-7e261c4b76fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999321d0-b2a2-4a39-8627-24410fe7b85c",
        "cursor": {
          "ref": "9a9a43b3-5300-4b0c-bf65-840759f5bf54",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0a5c2131-cac1-494f-ab50-7bedafeece15"
        },
        "item": {
          "id": "999321d0-b2a2-4a39-8627-24410fe7b85c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a3a5c4cc-2f84-4197-bf3e-14d48ec29f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39ae642-eee3-40ee-8afb-a25f272a5514",
        "cursor": {
          "ref": "b2f2f683-2763-4d3a-afed-0689f284a7f5",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "348848b0-16a1-4afc-bea5-ff972ea68ece"
        },
        "item": {
          "id": "a39ae642-eee3-40ee-8afb-a25f272a5514",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1a8028f9-64d6-4b3a-9d58-07e655dc2c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2973648d-3719-4035-a7b4-083686188658",
        "cursor": {
          "ref": "828ff95a-62b6-489f-8dfd-2a0159ea4b6d",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8a13e999-4213-4b72-97c6-54a39d9435f2"
        },
        "item": {
          "id": "2973648d-3719-4035-a7b4-083686188658",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ad751eab-77e5-49bb-9735-38d1100f397a",
          "status": "Created",
          "code": 201,
          "responseTime": 505,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "452329e4-7f2a-4786-92d6-89a63badb3ee",
        "cursor": {
          "ref": "a5854ce0-35fc-4d46-9927-54ba778f102e",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "456d4894-a5e1-4ad9-a8fd-b529d475fd75"
        },
        "item": {
          "id": "452329e4-7f2a-4786-92d6-89a63badb3ee",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4d046c25-c626-4569-9298-0c94193b6e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030c925b-712a-4252-a520-e324d67c1f46",
        "cursor": {
          "ref": "cd160623-40de-4781-9bb2-488b972492c3",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "efbb2616-6874-42d6-be65-19fce2786c2d"
        },
        "item": {
          "id": "030c925b-712a-4252-a520-e324d67c1f46",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "42c69159-fe8a-471d-b31f-04602977fa4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f277c9-50bf-4d76-8738-d0d32eb8d086",
        "cursor": {
          "ref": "b58a3c90-32a9-4a8f-b020-08cda8f1dcd0",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "81b8d746-4aea-41b7-810d-9f08da2b3602"
        },
        "item": {
          "id": "31f277c9-50bf-4d76-8738-d0d32eb8d086",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d4c1ed62-8012-4cd6-9fff-58311dcd02a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb574759-a53a-416a-b96b-e7b873ddf9c6",
        "cursor": {
          "ref": "824236c3-9a05-4855-9651-878e6ec5c3cb",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8fd6da72-46e6-4dbd-9596-0732272d86e5"
        },
        "item": {
          "id": "cb574759-a53a-416a-b96b-e7b873ddf9c6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "08b20d31-5817-4d8b-98e7-a1ff7420636e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326cc2fa-da09-4d61-a082-8361d5f4c615",
        "cursor": {
          "ref": "63d15ba4-c2c9-4de6-b992-617ecf55b478",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fb73eca9-b19b-4842-9774-70d19312d680"
        },
        "item": {
          "id": "326cc2fa-da09-4d61-a082-8361d5f4c615",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "01efe496-5132-4f05-a5b2-1ec52361ee3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb5dea9-b7ce-4692-9d69-47d499d8f053",
        "cursor": {
          "ref": "ab32d97e-7a46-4c11-a748-1cf183981895",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "02ad6c3b-4619-4435-8f8b-2b6ba2297cde"
        },
        "item": {
          "id": "8eb5dea9-b7ce-4692-9d69-47d499d8f053",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "33959fbc-fb8f-48af-ab10-249ed1e5186c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed820e5-8fab-4f08-9799-3fe6a2c18b7e",
        "cursor": {
          "ref": "7398b3e4-d600-4fa6-bd9e-adfdbed2053f",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "029a3000-194d-4d73-b0df-eeabe95f1c31"
        },
        "item": {
          "id": "0ed820e5-8fab-4f08-9799-3fe6a2c18b7e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "20082275-4407-43c6-90d9-6fa4721f4823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5208f0bd-69cd-4fb7-a431-8002eb2586a7",
        "cursor": {
          "ref": "cef852c4-59a2-4f86-9278-9f9dbce3813f",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "49876efb-03c5-4a79-aa8e-12587415d041"
        },
        "item": {
          "id": "5208f0bd-69cd-4fb7-a431-8002eb2586a7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "66de846d-3d55-4f02-b4e1-3e9c15559550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "addf0c46-e432-4365-88af-0eed4549c050",
        "cursor": {
          "ref": "10151f2b-cce2-4b84-86c7-b9eda62b345d",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "154f6536-d902-4c43-a19d-ebefebdbca38"
        },
        "item": {
          "id": "addf0c46-e432-4365-88af-0eed4549c050",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "625923fc-2ce6-4915-8701-7ff68274d7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce094857-ea39-4009-ac64-db950be2aa2c",
        "cursor": {
          "ref": "da75c321-f19b-4d54-b909-ddf893e30e42",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9c3664b4-429e-4d43-a434-5edaff54d609"
        },
        "item": {
          "id": "ce094857-ea39-4009-ac64-db950be2aa2c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "402f6e27-30cc-490c-9cb5-32f860a7fd22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdc6acc-5e9d-4acd-a23f-739b6e386446",
        "cursor": {
          "ref": "1755794c-03b5-43ef-a8f7-1a42792af8b3",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d91be14f-5663-437f-b0c6-11cb9b2db1f8"
        },
        "item": {
          "id": "8bdc6acc-5e9d-4acd-a23f-739b6e386446",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a6afd457-071f-4d01-847b-38041c74022d",
          "status": "Created",
          "code": 201,
          "responseTime": 500,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "9107ab88-b78b-4cff-8892-9556accd8119",
        "cursor": {
          "ref": "74fef03e-281f-4f78-b706-eaa347aa550e",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c03b37af-e865-45dc-b3bc-da05c0a39527"
        },
        "item": {
          "id": "9107ab88-b78b-4cff-8892-9556accd8119",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "05852908-c6c6-42c6-b890-09d10f0e4c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48c782b-a621-4258-abef-0cd3e56f117d",
        "cursor": {
          "ref": "f515a406-4d73-405e-ad69-7764068f22bc",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce00402e-a7c3-4ce2-a271-91351950dc91"
        },
        "item": {
          "id": "b48c782b-a621-4258-abef-0cd3e56f117d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9b6b04a2-f47d-4b88-ae7f-e6a4bbe1cd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d606e263-1c84-46a3-bf07-ec7bdcc537c3",
        "cursor": {
          "ref": "14f1a3b9-2dee-4521-94a1-b885e4d0dedb",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3878b5bc-ba40-43c3-93dd-caf90c679c82"
        },
        "item": {
          "id": "d606e263-1c84-46a3-bf07-ec7bdcc537c3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6dfa7731-b7b1-44cb-8fb0-4331ac46485c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378353ea-e6ee-457b-93ec-810896107fbe",
        "cursor": {
          "ref": "87fd2267-e346-4923-87d1-459fb756a811",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "97682aed-37b4-48b2-8570-f5421543c218"
        },
        "item": {
          "id": "378353ea-e6ee-457b-93ec-810896107fbe",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7275e3f0-60de-47f7-8986-f6a37e15efe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fba534-355f-4db2-a793-2c7fb56580f3",
        "cursor": {
          "ref": "a3ae5cdc-9d37-48bd-b291-ce0da3d90aa6",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4135c3b3-8ec2-4e6d-917d-c3d18f8224a7"
        },
        "item": {
          "id": "93fba534-355f-4db2-a793-2c7fb56580f3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d08a7c0e-6c64-4ec4-8ef9-3f0b2ee62975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885c7ef3-a53d-4a14-9806-a4fdb27983e3",
        "cursor": {
          "ref": "6ca121fb-450f-4a0f-b07d-509fc09e2a6b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7140b0a5-811b-44ce-bd1a-ebd3d38cab08"
        },
        "item": {
          "id": "885c7ef3-a53d-4a14-9806-a4fdb27983e3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c5a1e3ed-c6ca-4601-bac3-c805b9994cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d8937f-bf9b-4f98-ad19-0bb5b481d8cd",
        "cursor": {
          "ref": "987f27b1-e7d4-4b31-8184-59d9f1f4fe1b",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3f9c4138-9c01-4641-9b28-3d6108a1c127"
        },
        "item": {
          "id": "e9d8937f-bf9b-4f98-ad19-0bb5b481d8cd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e58125bc-4f6c-4cb7-9e3d-2acb6a6f1f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76efa1a8-8a4a-413b-814f-92a0fb57e0e9",
        "cursor": {
          "ref": "0bdfb0b0-755c-4ccd-bcee-c42e61142e28",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "28686339-02e1-4a6b-9154-c7134bb07645"
        },
        "item": {
          "id": "76efa1a8-8a4a-413b-814f-92a0fb57e0e9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2d77e354-07b6-412e-9662-20882c4fb759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42986ac-2f40-4ad8-8f99-fdd056fc593c",
        "cursor": {
          "ref": "f8fae8d4-0b45-42e9-a1cf-a3acda1029e8",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "537f64d8-043d-40da-8a2d-92edad6200ea"
        },
        "item": {
          "id": "c42986ac-2f40-4ad8-8f99-fdd056fc593c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1e170102-e843-42a0-a290-96f9b44162ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a319f5-e780-4031-971a-8619785e67bb",
        "cursor": {
          "ref": "112ff461-1dcf-4fa0-ac80-c1f4c83af330",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "09bd9c32-a1b3-4a0e-b3de-d95656fd551e"
        },
        "item": {
          "id": "58a319f5-e780-4031-971a-8619785e67bb",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "96d46719-bd46-43a1-8a80-00ba523b2845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b7e102-1094-42a0-9141-0bc41402d5da",
        "cursor": {
          "ref": "85ba5955-b509-4972-9ed8-f69d6b92ace0",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5a45bf9e-7d6f-4b51-9e04-d22d6a99c1e9"
        },
        "item": {
          "id": "33b7e102-1094-42a0-9141-0bc41402d5da",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "28ec5719-9337-4556-bbaf-74cb34a05277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54904598-5363-44ca-bd84-981c30e359cb",
        "cursor": {
          "ref": "53422d05-cbae-44f8-8f13-9eb182b8f6a2",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8ceaeb1e-a873-43eb-a5a6-fd1ad19d1864"
        },
        "item": {
          "id": "54904598-5363-44ca-bd84-981c30e359cb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bee44862-4eaf-469a-b128-9e78005b78ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cab7eff-7101-4d34-b243-e315d9816f46",
        "cursor": {
          "ref": "656aaade-eed6-4f1f-8ae3-20c860ea89a3",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2c07b903-9970-49f4-ab32-2b09e04d9adf"
        },
        "item": {
          "id": "5cab7eff-7101-4d34-b243-e315d9816f46",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "699088bb-e8f4-49d6-9340-e41028c7439e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 507,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e9793086-5a7f-4013-bdaf-3e12aff5755b",
        "cursor": {
          "ref": "15dfa836-bf69-4ccc-8c60-a9282aca4f43",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a8881b80-4af2-4c4a-8319-1248e51d5e2a"
        },
        "item": {
          "id": "e9793086-5a7f-4013-bdaf-3e12aff5755b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5eabc5f8-70c4-4eae-913d-3ddd1c92fc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63fd1b43-ced4-49af-80cc-67bc0bc83796",
        "cursor": {
          "ref": "0c8fdd8b-6290-4f57-b0e8-4654fd724029",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "de02d707-cec9-4145-aed8-dfc5a3f8d664"
        },
        "item": {
          "id": "63fd1b43-ced4-49af-80cc-67bc0bc83796",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ff96e141-7ee3-4665-8a4e-5863a9604d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3321b9-d0f5-47bb-b028-c200a68bb3ba",
        "cursor": {
          "ref": "58965c0a-a656-48ff-9979-5ee730a383d7",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4229d4f8-6af4-4ca7-8673-d03440e0aa6f"
        },
        "item": {
          "id": "1c3321b9-d0f5-47bb-b028-c200a68bb3ba",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ad7f8271-df42-49de-9fa4-af03876f3f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ff4879-9988-4964-8847-0945244b7e62",
        "cursor": {
          "ref": "a1a7cab2-0712-4e7b-bf9f-a22df0e67f73",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3f387699-1d4e-4492-b379-2c7d3db70ba8"
        },
        "item": {
          "id": "85ff4879-9988-4964-8847-0945244b7e62",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b5ca5e7d-ffad-438e-a653-0a3dfb3116b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5896496-ae56-4bc6-baed-e0a5fbf78252",
        "cursor": {
          "ref": "48a0f950-13e6-4f8a-924c-e284d6fee3f0",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4c91b5a3-ebb2-44fc-854a-ac979febccc2"
        },
        "item": {
          "id": "a5896496-ae56-4bc6-baed-e0a5fbf78252",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3a6e0f7a-d1d3-4968-bf2f-e4cfd7721442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6097d777-7bbf-4552-a3a7-d8ac5a88f87b",
        "cursor": {
          "ref": "44f00f7b-e985-4e77-b007-5c2058b59dba",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d04a2ac2-f7de-42d5-89bd-0cf625f1c719"
        },
        "item": {
          "id": "6097d777-7bbf-4552-a3a7-d8ac5a88f87b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "88dec2c7-4bdf-41b7-a70f-73c23949a3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843bd2b5-6f9e-4c16-a0af-2c6dd2fb39a9",
        "cursor": {
          "ref": "efcc2b37-89c0-4791-b7d8-a39d4e8a212e",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bb98f62c-df74-4c40-a649-94fff2673b46"
        },
        "item": {
          "id": "843bd2b5-6f9e-4c16-a0af-2c6dd2fb39a9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "eab36df4-44f7-4996-aafe-a078a99f728b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c15e9d21-f5e5-4b80-a383-34ff27bd3ade",
        "cursor": {
          "ref": "f4e86778-61ad-42bc-9611-5c5599576a06",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bf548eab-00cc-496d-836e-c9033ff75e0c"
        },
        "item": {
          "id": "c15e9d21-f5e5-4b80-a383-34ff27bd3ade",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d2e0e936-b245-4844-a7f8-c977bd014285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 498,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59430600-d089-444b-a2e1-1b21c2fbf4db",
        "cursor": {
          "ref": "cf9c7dfc-c2e3-4160-ba9f-805d064b77d1",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2d6a796d-3d76-4a08-9383-df617630da72"
        },
        "item": {
          "id": "59430600-d089-444b-a2e1-1b21c2fbf4db",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1b0062fc-636a-43d2-84af-aaeed4ee3d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d965905-8e80-41c5-8100-3df16c194744",
        "cursor": {
          "ref": "b7d7542d-857a-40c4-bed1-4760792dbf03",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c1140421-af58-4ac6-a2c4-8f79d6796f88"
        },
        "item": {
          "id": "0d965905-8e80-41c5-8100-3df16c194744",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "22bf36e3-20de-4708-b6b0-210ffe0cdb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6df70f6-6e58-4f81-81d6-85087a8fe71a",
        "cursor": {
          "ref": "7c154d25-403e-4b38-bfc5-23a7c7234426",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d97b6baa-da60-4c76-a363-c0b83d3c908f"
        },
        "item": {
          "id": "e6df70f6-6e58-4f81-81d6-85087a8fe71a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e46bc40b-9fa8-40ae-94ad-b2005a6cae45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960776c4-2d49-4e3b-8b9e-b30a5eead293",
        "cursor": {
          "ref": "758b7940-14c7-49b3-9f26-2d7872b4e4c7",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a39c7c10-b526-421c-8240-916f3187ae9e"
        },
        "item": {
          "id": "960776c4-2d49-4e3b-8b9e-b30a5eead293",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1983b751-2e7c-4524-8617-c0bad4c52fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2959ac-5171-499c-b609-ad3f353c7405",
        "cursor": {
          "ref": "133eb3ff-c21c-4384-abbb-911568240dd0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0d050705-2537-4a44-b6f1-2eb0dcdb80db"
        },
        "item": {
          "id": "ee2959ac-5171-499c-b609-ad3f353c7405",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2e370564-a7cf-4a96-b161-d5a400fb8b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ee06a8-e6e5-44ca-be0d-fdfa60b2d2e7",
        "cursor": {
          "ref": "78be7686-3b79-4665-b79d-b172975898e5",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3d7a6fb0-da7e-48c5-a979-a855f996db27"
        },
        "item": {
          "id": "b1ee06a8-e6e5-44ca-be0d-fdfa60b2d2e7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9cc3783b-b893-4347-9ac8-0c9f23606cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d49afb-cb73-4444-af49-bcc84b4f2475",
        "cursor": {
          "ref": "5e3bb9a0-50c1-4ac8-846b-32d2f0e12f3a",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7ad37d5a-86dc-479f-ade4-2a468328af76"
        },
        "item": {
          "id": "24d49afb-cb73-4444-af49-bcc84b4f2475",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "41acd343-e247-48b0-94dc-4eab5875e8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059050fe-7479-4fa4-8454-1cc2d94ff70f",
        "cursor": {
          "ref": "0639dd3b-2438-44dc-856e-35c74f70414a",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2fc91f8a-0d4b-4f5d-b5ad-8998271e2b17"
        },
        "item": {
          "id": "059050fe-7479-4fa4-8454-1cc2d94ff70f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "97d6be07-1685-4b96-819f-ebcb314fc895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95d558f-b7e1-47f5-8868-0675e6ff31c0",
        "cursor": {
          "ref": "4fc30a6a-7b83-4751-bbfc-7bbdc853f672",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c88d52c0-8f47-4f8f-b02d-68d804923e89"
        },
        "item": {
          "id": "a95d558f-b7e1-47f5-8868-0675e6ff31c0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c70c7511-00e9-403c-b4f6-da2119374dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 574,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09593a6a-69f0-46af-ba95-d4ee23631261",
        "cursor": {
          "ref": "1aa4d0bf-15ee-4357-ae00-95daf55dec44",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7a81da08-a8a6-4b2f-8dd1-ca4a2a86b25c"
        },
        "item": {
          "id": "09593a6a-69f0-46af-ba95-d4ee23631261",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5c085ae3-2270-494c-9bba-4f336d4f0349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008b1cc6-eec6-4024-b35a-1c5584c1f071",
        "cursor": {
          "ref": "5d445844-07d8-4383-ab5c-04e0bb30bbf0",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3e0a8ee7-87ca-4da4-a4a0-a0ebfd8149e2"
        },
        "item": {
          "id": "008b1cc6-eec6-4024-b35a-1c5584c1f071",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8a976641-abd8-43cd-a875-12e1c3ea79e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf4211f-7de9-4425-a6d4-9fbd86b02082",
        "cursor": {
          "ref": "51213fa1-3a5a-460a-b7fa-88723207f827",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "01008133-c6f1-4b45-8db9-f00ecd691c31"
        },
        "item": {
          "id": "8bf4211f-7de9-4425-a6d4-9fbd86b02082",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b82b9706-b4ef-4a40-91b4-f871dbfc9b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ce708c-44a4-4a0c-ae30-b7adbbc2c1cc",
        "cursor": {
          "ref": "5b523d53-0ab9-487f-babe-aca226bc1a7b",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "86b014b1-d781-48d2-8d2e-6f2f02544f43"
        },
        "item": {
          "id": "02ce708c-44a4-4a0c-ae30-b7adbbc2c1cc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "354631fa-1696-489b-86e7-78f983ff9e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d42ecd3-ad91-4242-8fff-3f11e87d88dc",
        "cursor": {
          "ref": "04d38353-af91-47d6-b1fb-9a162d4fbd6f",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0c77f554-43db-4f0a-be2c-9f871d847598"
        },
        "item": {
          "id": "0d42ecd3-ad91-4242-8fff-3f11e87d88dc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1b8c7855-3a23-4d83-8b16-008f2904f5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78dcf5c3-ce6e-43ee-83da-6ef03c7ec335",
        "cursor": {
          "ref": "3f862327-8475-4ef0-8382-fbc2cc2cf81c",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "52e9463f-75e1-4e70-80f7-5fdfc95974bb"
        },
        "item": {
          "id": "78dcf5c3-ce6e-43ee-83da-6ef03c7ec335",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f58190eb-ea5e-45ec-90b6-b77532c9f53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a044aa33-bb9a-498e-b2bc-40cf212b93de",
        "cursor": {
          "ref": "eeba22f5-053a-48e5-b51a-d309ab30be40",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fee79ef5-ac75-4eb6-a74b-30f4b4075ebe"
        },
        "item": {
          "id": "a044aa33-bb9a-498e-b2bc-40cf212b93de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a9836841-ef3f-4543-89bc-d6705fcd356f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 590,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d392f589-98e4-43ea-b905-ee8d9d78209c",
        "cursor": {
          "ref": "ee377120-cafd-48c4-b131-f2afd3f1054b",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2e37bda6-bff7-4e3b-88c7-4a63f14222af"
        },
        "item": {
          "id": "d392f589-98e4-43ea-b905-ee8d9d78209c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "925ef774-9395-447a-aa4c-b34587004c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440c579f-088f-4c55-99ba-d4b699238d52",
        "cursor": {
          "ref": "1ccdabb7-212b-4af6-9edf-220a475b3a01",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "eb5f61c5-04aa-4463-b472-9bb3559331a9"
        },
        "item": {
          "id": "440c579f-088f-4c55-99ba-d4b699238d52",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "51899715-82b7-4b89-9b93-c2823cd06186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0c6b6d-dbe7-4310-950b-6dafe7a36d5e",
        "cursor": {
          "ref": "f4eb76b0-5f90-425f-a0cc-4405e0757148",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "02c5a22e-c8d0-4dc4-aff9-e9e7813944f6"
        },
        "item": {
          "id": "3f0c6b6d-dbe7-4310-950b-6dafe7a36d5e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "65a37e44-41c4-4ea6-812a-cf1a620d1ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0528465a-0bbd-4503-a9f1-4c0d69603a61",
        "cursor": {
          "ref": "2ea3255a-a67a-41d2-8435-eb9bcad45ef9",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d4b7a1ca-0f17-4fe3-b147-0f600f043a25"
        },
        "item": {
          "id": "0528465a-0bbd-4503-a9f1-4c0d69603a61",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4887d626-6107-463f-8e36-bbc13a926ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557e399c-34ce-498d-bbbb-3d40e934b311",
        "cursor": {
          "ref": "0edad769-5154-493c-a556-c4107c1ac1f1",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c58326e0-64f1-45ce-8f31-9e164ee3b4a8"
        },
        "item": {
          "id": "557e399c-34ce-498d-bbbb-3d40e934b311",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ba6b7e26-56f1-48bd-b79f-54fec15b22ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f12af5-ccdf-4907-aa30-86f1fe493e6e",
        "cursor": {
          "ref": "7bd16ef8-85cd-4f72-b87d-96b43d85398f",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b1c3d750-de5b-4e86-9a85-2a3585a0cdaf"
        },
        "item": {
          "id": "63f12af5-ccdf-4907-aa30-86f1fe493e6e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0e4ba69c-3b71-4a64-ae29-5127650d81a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fe99e4-3b18-4f98-ba77-6ff022012cbf",
        "cursor": {
          "ref": "0dec9115-4a5e-4fe9-8418-e0337ba9733c",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e657b488-1ccf-44b0-9d7d-87fe4c9d90a4"
        },
        "item": {
          "id": "f4fe99e4-3b18-4f98-ba77-6ff022012cbf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "152abae1-6d8a-42a0-ae75-d0463eceead9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cadc4ed-cfca-4ffa-9df6-f3a3294bbef3",
        "cursor": {
          "ref": "60f70330-3b20-475a-bfdd-a30729d6f035",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f43fc7e0-eab2-4eab-89aa-6ea482ff3db2"
        },
        "item": {
          "id": "0cadc4ed-cfca-4ffa-9df6-f3a3294bbef3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cf69bd94-ef02-4844-8801-66af8dc9c6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4023ccd-cc3e-4cc4-b756-d97428cf83bd",
        "cursor": {
          "ref": "42ac6482-4c9b-4cf5-8c01-2d8f2f9e61bb",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "32ff7dc6-8b2f-469d-9348-16b7f74233c4"
        },
        "item": {
          "id": "f4023ccd-cc3e-4cc4-b756-d97428cf83bd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b42c04c7-cd66-4b28-8c82-24cda16c3c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad07f64-0d16-4e36-846d-8f958079d038",
        "cursor": {
          "ref": "a75ac742-aea8-4eee-b46a-b151d5cd23c3",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9495a17c-c543-4a02-86f3-285b07991218"
        },
        "item": {
          "id": "6ad07f64-0d16-4e36-846d-8f958079d038",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7d770dc4-699a-4621-82b7-4d243bcd14c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e3be88-bcde-49ff-b1b8-5b20f011d039",
        "cursor": {
          "ref": "a4c1df42-df5b-461a-be4c-1b8df94abba0",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "07cd64d0-3905-4e57-894a-6240bbdb3fd9"
        },
        "item": {
          "id": "b3e3be88-bcde-49ff-b1b8-5b20f011d039",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ff8877e6-0d43-4a8b-b84e-c13b7f15db9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e2aa40-1165-4e2c-9dae-352365157161",
        "cursor": {
          "ref": "819ece55-4280-43af-b209-3a5b314943b4",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "07a73903-2e6d-4785-95af-bf590d91f024"
        },
        "item": {
          "id": "25e2aa40-1165-4e2c-9dae-352365157161",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2a9fb723-35bf-497b-92f2-c4dc58b7ccea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6f2cac-2e60-4238-9f7c-7a4b5f1d9a75",
        "cursor": {
          "ref": "ea0b24ca-df1f-445d-b1cb-09ee6e5acb35",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e098ab5c-f9ee-48da-847c-3079ff9e592a"
        },
        "item": {
          "id": "cd6f2cac-2e60-4238-9f7c-7a4b5f1d9a75",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8dd57986-59d8-4b5f-8195-bc5feb2254ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663738b2-bd69-4ec7-ac84-cdac6a73f122",
        "cursor": {
          "ref": "8994fbc7-fdc6-4a7e-b03f-a301a739dee6",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "10049ccc-05f6-418a-8430-bc21a0bbf0ea"
        },
        "item": {
          "id": "663738b2-bd69-4ec7-ac84-cdac6a73f122",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1b7184d9-d605-4837-b74b-252b99f2aebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 722,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997b6791-5f96-4147-828d-8a0112dbdccd",
        "cursor": {
          "ref": "182a8b27-6005-4c52-9134-66ec5d9925b0",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7079b2a7-5bdb-4516-8680-118dd9b26c18"
        },
        "item": {
          "id": "997b6791-5f96-4147-828d-8a0112dbdccd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6e8630df-bc0a-4c1b-bf9f-d1d01940ab38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30935c8a-2796-4514-9ddb-922b9245979a",
        "cursor": {
          "ref": "369cbb88-c2c4-4610-941a-6a25d9e207d1",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "04557207-4439-4461-a3e7-61dd5a2563f2"
        },
        "item": {
          "id": "30935c8a-2796-4514-9ddb-922b9245979a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9dcb041f-e1dd-46c8-b143-276d846fea76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e677f2-e052-424d-97cd-3fff8f89fa84",
        "cursor": {
          "ref": "de9bc2e8-2db1-4d37-bd4d-086a0b47d583",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7047285e-b693-415c-a71c-27ceed033632"
        },
        "item": {
          "id": "a5e677f2-e052-424d-97cd-3fff8f89fa84",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "877dd671-272f-44ef-a102-a4f5417d954c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6815ca57-4f05-41e5-86c7-2912767e067e",
        "cursor": {
          "ref": "feac0a86-fbfc-4fea-ab4e-88a4e05d4efa",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f7d4b40a-cef9-48c7-914d-8769d88f8c85"
        },
        "item": {
          "id": "6815ca57-4f05-41e5-86c7-2912767e067e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d8e5c98d-27f3-4d1f-8230-6e36689aa28b",
          "status": "Created",
          "code": 201,
          "responseTime": 1642,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2d41c1b8-9e24-4f0d-a227-e37eb83267d2",
        "cursor": {
          "ref": "300733db-7615-4ce0-9b76-605170ff0d6b",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b2c733eb-8a44-49da-b548-896cbc7cd5bf"
        },
        "item": {
          "id": "2d41c1b8-9e24-4f0d-a227-e37eb83267d2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1dfdf7d3-e804-495b-98a0-a5b8e58c34cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3566c7c9-12b8-4716-88db-5256c4d0e0ea",
        "cursor": {
          "ref": "223d227d-4cab-4708-9c3a-d4591d5be17d",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ab61bc36-c614-46a5-9808-c2324ffe456b"
        },
        "item": {
          "id": "3566c7c9-12b8-4716-88db-5256c4d0e0ea",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "43ed9c78-9472-4b20-b02d-c8f10cb16278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d076b0-1b7e-48eb-8a45-cae9f926cf1a",
        "cursor": {
          "ref": "c3723204-f92b-4b78-bb24-344affb55d0c",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4dbe7cd3-0fac-485c-86e1-ea8d8cd315dd"
        },
        "item": {
          "id": "91d076b0-1b7e-48eb-8a45-cae9f926cf1a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "60446430-e5a9-453d-8aaf-b0e4a46110b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6dca49-59b8-4786-a457-445d25a6eb4b",
        "cursor": {
          "ref": "712eab23-5ee3-46f4-891f-604d0a4053a2",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8d05f290-1815-41e0-ae1f-8ad4e911cde3"
        },
        "item": {
          "id": "dc6dca49-59b8-4786-a457-445d25a6eb4b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4065265e-0af1-4493-ac8e-1431ed18e715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7f4330-1a6e-46eb-96e5-e61fbf2a9efa",
        "cursor": {
          "ref": "86b8886e-8534-46e4-a141-701844c11e49",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "72231e21-c7ee-4fdf-985d-4ac66ffa29fe"
        },
        "item": {
          "id": "0d7f4330-1a6e-46eb-96e5-e61fbf2a9efa",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6f75270a-3586-4eed-b6fd-701938314e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2c2040-7f65-4258-9212-ebeb5c0134cb",
        "cursor": {
          "ref": "abde912a-3fa9-4f76-a3ae-d4bbc5ee918b",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ce1a9527-d424-4160-80be-fa5d1a497425"
        },
        "item": {
          "id": "ac2c2040-7f65-4258-9212-ebeb5c0134cb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b4cbd32d-5b61-4714-a647-792f5cb401ba",
          "status": "Created",
          "code": 201,
          "responseTime": 1146,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "98a2186c-6d2a-4898-b6f2-cc96441fe75c",
        "cursor": {
          "ref": "267bb62b-83a2-4d39-be34-996f6cc78bfd",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a70a34af-6236-4686-99b0-8f29e997e09e"
        },
        "item": {
          "id": "98a2186c-6d2a-4898-b6f2-cc96441fe75c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "42554512-7712-486f-b64d-b12d9dd21cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21d2019-d664-426e-8302-167bfec0fe4a",
        "cursor": {
          "ref": "e842aa3a-bab7-4c9f-83f4-5de4921b5bb6",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b5993344-ba1d-4269-8c42-2431089247a7"
        },
        "item": {
          "id": "c21d2019-d664-426e-8302-167bfec0fe4a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cafeb862-ea42-47b7-b291-69acdfcdef2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b862f5f4-30ea-4a86-ba7b-aaf7ec812b19",
        "cursor": {
          "ref": "8b0be7ae-5661-4f7f-8b8f-9a16472af016",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "25937526-fac6-4caf-b35d-cc09c3fbaa54"
        },
        "item": {
          "id": "b862f5f4-30ea-4a86-ba7b-aaf7ec812b19",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2327e547-cb13-4d98-bc40-4da6fab32d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7433837f-5581-48b4-9a7a-b7a770bd9137",
        "cursor": {
          "ref": "92e53104-df6c-403a-814a-cf2afd2697d4",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5bd3331d-8dd0-4b76-8ed8-6a7b851aaa97"
        },
        "item": {
          "id": "7433837f-5581-48b4-9a7a-b7a770bd9137",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f33a722a-9e60-4da1-ba7c-da62b9a12f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf29a5c-b8c9-4ea1-8879-75e1eaecfc90",
        "cursor": {
          "ref": "18ecd124-2d87-4491-8e5f-44bb586f3d6a",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9a0c257c-2e91-444b-a95c-2c5560de32aa"
        },
        "item": {
          "id": "ecf29a5c-b8c9-4ea1-8879-75e1eaecfc90",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "34b07003-b365-40d2-828a-080c5355c1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4af7d93-bdac-4e57-9eb9-ba5de554a3d0",
        "cursor": {
          "ref": "ce45056d-b5ff-4457-8255-6858d5d89fff",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f36018c2-7519-49c6-bb3b-5e3387cfd054"
        },
        "item": {
          "id": "c4af7d93-bdac-4e57-9eb9-ba5de554a3d0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "86d5b951-048d-4f11-9824-5e60fccb38d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6faee1d0-ab3e-4799-9332-de031537b05f",
        "cursor": {
          "ref": "0e01a159-e979-4f03-8719-df07cd4c411e",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "64cc866b-12a8-4ddb-afe6-cb7ee2bff6f9"
        },
        "item": {
          "id": "6faee1d0-ab3e-4799-9332-de031537b05f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "251ac5cb-596a-4e96-b624-091cb283c46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd094463-6d70-467e-a502-b99a168d09a4",
        "cursor": {
          "ref": "b7bc4031-421e-4d14-80db-0db751389239",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "27915ecf-e4e7-43c1-a6e7-a255354dcacc"
        },
        "item": {
          "id": "cd094463-6d70-467e-a502-b99a168d09a4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "04341851-adbf-4088-bd40-0686bbe2d97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18830e6-202e-46ed-96fe-c5b17ccd6734",
        "cursor": {
          "ref": "2fc104d2-607e-4775-ac90-c4782e940c09",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5ad9c3df-bfc3-40ec-bac4-f00cbb5217cd"
        },
        "item": {
          "id": "f18830e6-202e-46ed-96fe-c5b17ccd6734",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "26c26870-9e29-48f5-adf3-e5053284dd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "275d15f7-9732-4173-a9b6-b0a93113372d",
        "cursor": {
          "ref": "ad024aea-42a7-4112-9c65-d0c6685321dd",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e1dee8df-cfcc-4c16-b4d8-30d062ecd5d7"
        },
        "item": {
          "id": "275d15f7-9732-4173-a9b6-b0a93113372d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "10dfe755-a134-4a54-9c51-181618008217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "a08e1fa8-2b40-47aa-b054-c3217e285129",
        "cursor": {
          "ref": "cfa1ae51-4580-4d2f-890a-8215400df304",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1f41d399-6eae-41d2-817b-787a0142f79a"
        },
        "item": {
          "id": "a08e1fa8-2b40-47aa-b054-c3217e285129",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e54651e8-0005-4bea-9567-b2ba1e01e549",
          "status": "Created",
          "code": 201,
          "responseTime": 764,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6b2160-b8c2-4700-9dda-2f33b361921c",
        "cursor": {
          "ref": "0c82dd62-4205-4362-aad7-23d068e6e4a6",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a83f756c-14c0-4387-8ce8-1f3166938de0"
        },
        "item": {
          "id": "4d6b2160-b8c2-4700-9dda-2f33b361921c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "403d435b-a5d3-42ba-801c-9f5d8a6ca5f6",
          "status": "Created",
          "code": 201,
          "responseTime": 389,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aea52c-651c-4d21-a92c-7ad790ec41ca",
        "cursor": {
          "ref": "65588eb5-2f54-41a8-ae54-fd05fd2ed53c",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fc051683-04f2-4fc2-9f94-8e37ea4ccb9f"
        },
        "item": {
          "id": "b3aea52c-651c-4d21-a92c-7ad790ec41ca",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "669a4c84-a63f-46d8-a330-cbac7b194dfb",
          "status": "Created",
          "code": 201,
          "responseTime": 900,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c93984e-ee33-4acd-89ee-77a740cc111b",
        "cursor": {
          "ref": "c152a684-7fda-42c8-80ba-8a5ab9590fbc",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7c086333-55fd-4d20-8c9e-5a6f5f6fd57a"
        },
        "item": {
          "id": "9c93984e-ee33-4acd-89ee-77a740cc111b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7a9907bf-0986-41ff-9b44-7885bc9d18ea",
          "status": "Created",
          "code": 201,
          "responseTime": 484,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fc9da6-7b77-4436-9f18-7bab6b507e9c",
        "cursor": {
          "ref": "e3edbca5-8ade-42ba-8b3e-5030504c8dd7",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "49a84c34-d51f-44d9-bef5-92391b615207"
        },
        "item": {
          "id": "24fc9da6-7b77-4436-9f18-7bab6b507e9c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "457ed680-5290-4a10-a32c-1ae632d87ce7",
          "status": "Created",
          "code": 201,
          "responseTime": 971,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0aeaa4e-e7e7-41e2-8c67-32d1c13058cf",
        "cursor": {
          "ref": "d66f206e-bb6b-4fe0-9f5c-c7bda480cddd",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5430b262-d75f-40ee-ad23-6ce742c4f47d"
        },
        "item": {
          "id": "e0aeaa4e-e7e7-41e2-8c67-32d1c13058cf",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ec784815-bfce-41de-9aa0-93d71464f03d",
          "status": "Created",
          "code": 201,
          "responseTime": 881,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5927f6-ebd3-4557-aa02-0ab1dfdb57cd",
        "cursor": {
          "ref": "c25e2a7c-601b-420c-82e0-b5b9dfda654d",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f1cadf79-fc29-4c5e-a3fd-ea5769b82ba7"
        },
        "item": {
          "id": "6f5927f6-ebd3-4557-aa02-0ab1dfdb57cd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "edc414d3-2cac-4207-993d-0aaf12e44608",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "6f5927f6-ebd3-4557-aa02-0ab1dfdb57cd",
        "cursor": {
          "ref": "c25e2a7c-601b-420c-82e0-b5b9dfda654d",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f1cadf79-fc29-4c5e-a3fd-ea5769b82ba7"
        },
        "item": {
          "id": "6f5927f6-ebd3-4557-aa02-0ab1dfdb57cd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "edc414d3-2cac-4207-993d-0aaf12e44608",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "a9866493-d693-4b22-a24a-ae98763555c2",
        "cursor": {
          "ref": "c1f1eb4b-6a27-4cf4-b70c-052c6dd4eb85",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cfd8cb4c-b4e0-441b-8693-dce5974fcf54"
        },
        "item": {
          "id": "a9866493-d693-4b22-a24a-ae98763555c2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8b2b6c69-ea57-4cb7-9a25-9f2f354d820c",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "484d6e8d-3cbd-4189-af5c-3bcb3eb0ad4b",
        "cursor": {
          "ref": "952bfab5-fb1a-4c28-be5e-57212658bf36",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "65b8bf1a-14a3-40e4-99c2-7ffc20b500a0"
        },
        "item": {
          "id": "484d6e8d-3cbd-4189-af5c-3bcb3eb0ad4b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d9733d9e-9014-493e-9b7a-bc7d5fa45e02",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "813f08af-05e3-4440-afbe-fdca17d230e0",
        "cursor": {
          "ref": "5955e0f4-bed8-4d13-ba0e-d94879e9bad9",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ea39bf01-f6fc-4b7f-ba44-a8749b02f5a0"
        },
        "item": {
          "id": "813f08af-05e3-4440-afbe-fdca17d230e0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "94c830da-1098-43d3-84f7-7ad2346c6dd2",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c036ce8d-b71e-43c1-9b12-1f230d87c171",
        "cursor": {
          "ref": "761cdafa-aebd-4d5b-a322-54b45edf81ad",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3b871730-2880-497b-819c-4e12f4d770e1"
        },
        "item": {
          "id": "c036ce8d-b71e-43c1-9b12-1f230d87c171",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1b4a62ba-3c3a-452c-ad95-c97bbfbc121f",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b92d97d7-268d-4955-a839-2e0b4024cb3f",
        "cursor": {
          "ref": "88920ba2-cd8e-44dd-a2bd-ca43454e9f96",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "016f53dd-380f-4619-bb3f-40e3b08ffec9"
        },
        "item": {
          "id": "b92d97d7-268d-4955-a839-2e0b4024cb3f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "92458fa1-d25d-4d23-8507-eb6237d08a26",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "6a37b9bc-d730-4252-ae53-910fe8f29f73",
        "cursor": {
          "ref": "64db8c0e-4166-49e6-b341-c1cfdf3134e5",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d417c11c-0b9a-46cc-976b-8b8bc75bb72b"
        },
        "item": {
          "id": "6a37b9bc-d730-4252-ae53-910fe8f29f73",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b4e09a5a-00ee-4dc1-b030-d7d11429c22f",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "bcb210ca-174b-462d-aeef-f98afa7a7773",
        "cursor": {
          "ref": "dfacebd7-5a78-499e-be98-afd3044f02ed",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b1f6353d-6b7e-4d89-8257-cc1c7b17b03a"
        },
        "item": {
          "id": "bcb210ca-174b-462d-aeef-f98afa7a7773",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "447ca359-0621-4076-9c76-a6a4cba75177",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "bba1e7b6-c64f-4860-9bc0-b0647215723e",
        "cursor": {
          "ref": "721520c6-4ea5-4115-97b9-9fd620a16475",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d9604a9b-f01c-443d-a0a5-edaab8c82de4"
        },
        "item": {
          "id": "bba1e7b6-c64f-4860-9bc0-b0647215723e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "20da2bdc-4233-4d13-9bdb-c217039d3b52",
          "status": "OK",
          "code": 200,
          "responseTime": 330,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e1647384-a629-4928-a588-0a2bb38a3697",
        "cursor": {
          "ref": "d9a5b807-408f-4a84-86a6-11f1670a804d",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a182dd58-7436-45e6-b153-5d7e1ddaaa73"
        },
        "item": {
          "id": "e1647384-a629-4928-a588-0a2bb38a3697",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bb7372d3-0b6d-47c9-a965-17909c040059",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "709674b1-ad42-4056-8588-96aa61fb4b90",
        "cursor": {
          "ref": "2243ae9c-0777-40ab-b6a8-32750d2f8b1e",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c6863a07-a890-46c9-af99-b7d36740b07a"
        },
        "item": {
          "id": "709674b1-ad42-4056-8588-96aa61fb4b90",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ae11a025-772c-407e-b163-4340f304bd89",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "026c2715-e619-4987-b721-1c0692869ec5",
        "cursor": {
          "ref": "53c708bf-b3a5-4209-9752-0dafe43b4a7b",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fe715f34-f2d3-4dec-9369-53b1b97f5b0c"
        },
        "item": {
          "id": "026c2715-e619-4987-b721-1c0692869ec5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "71c05993-6074-4d5e-a1d5-eef5e015a061",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "00da70c6-5efa-4729-b553-4e4fd2459101",
        "cursor": {
          "ref": "408a1783-3afc-4d23-8ac6-96693c969c43",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8a0ecc5c-39db-40c3-bdac-5218bc83d2de"
        },
        "item": {
          "id": "00da70c6-5efa-4729-b553-4e4fd2459101",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a14d37f7-dac2-432a-a24e-04ad8218bd0d",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b655ccea-9096-417f-9277-e9a970029bd6",
        "cursor": {
          "ref": "29605960-8002-4977-8a89-df0f25f6daa5",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6eb0d277-23d7-45ab-aca9-89c37d89e5a4"
        },
        "item": {
          "id": "b655ccea-9096-417f-9277-e9a970029bd6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "421079a1-98e1-450e-8794-df7fe274cdef",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "65e1dee4-e497-438f-9f15-890152b04bac",
        "cursor": {
          "ref": "d8c88769-0b47-4491-b362-f6b840eaa55d",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0817d29c-f3d5-4362-a61c-158f8a8430e1"
        },
        "item": {
          "id": "65e1dee4-e497-438f-9f15-890152b04bac",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6a36ac68-e5fd-4921-9fa2-2a44a9c8577e",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "fad0ba9a-00bb-454a-9739-eda76eb2e247",
        "cursor": {
          "ref": "7d7a9c39-b74e-463c-8996-8d9201b4da60",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5694f61e-9de9-4df1-af01-580d50444c84"
        },
        "item": {
          "id": "fad0ba9a-00bb-454a-9739-eda76eb2e247",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "25d42b6c-7185-4ab6-a1b0-4c9b9ff61c02",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "8355762e-a385-40dc-b58e-1af1c082ddd9",
        "cursor": {
          "ref": "713eab2a-5b20-476d-b947-85bb261fbb06",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4074e66f-7508-4c93-9ecb-c1c970cf8125"
        },
        "item": {
          "id": "8355762e-a385-40dc-b58e-1af1c082ddd9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ad460a37-def6-4a37-b70c-6f9869efa1aa",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c6038728-2b37-4415-86a7-fbb7fa053686",
        "cursor": {
          "ref": "ff21c616-01a6-44cb-8354-a8cc06e9034e",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "debe875a-48e2-486b-8247-30cee0cd87f6"
        },
        "item": {
          "id": "c6038728-2b37-4415-86a7-fbb7fa053686",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "80d8136a-f25f-42eb-81a5-60df65303211",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b49f580a-8216-481a-a15b-df4d5b2c5a0b",
        "cursor": {
          "ref": "35ff278c-c844-48ac-89b1-81c3468ee016",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c969d71a-223f-481b-97c2-94d8e1ae8bc1"
        },
        "item": {
          "id": "b49f580a-8216-481a-a15b-df4d5b2c5a0b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6cd19582-8235-4084-badf-3a0ed84da66f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "64fbf0c1-95ed-4faf-90ff-8f618815ee9b",
        "cursor": {
          "ref": "ef4e9666-3e61-46ae-b588-3b33f01dd2dc",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e9df7f4c-a57b-4bfc-9d92-10f9556931ed"
        },
        "item": {
          "id": "64fbf0c1-95ed-4faf-90ff-8f618815ee9b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d5a42e8c-faad-421b-988a-3cbd28725bd6",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "059d6bdb-c1a4-49ca-a2cc-2dd3a4d647d8",
        "cursor": {
          "ref": "16899837-4b4f-4d0d-8d75-b9370fdb601c",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1201484e-3c27-44bc-b68b-25d05d6d82c6"
        },
        "item": {
          "id": "059d6bdb-c1a4-49ca-a2cc-2dd3a4d647d8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "75a72366-5a89-4acf-bedc-1a36b93c2284",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fba3063e-fcc6-4b28-b92d-fa320397b751",
        "cursor": {
          "ref": "5bc6b9de-333f-4bec-a3f3-8ddba18f06f9",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e5aeaa54-bb80-4ced-a026-e9d45ffe1865"
        },
        "item": {
          "id": "fba3063e-fcc6-4b28-b92d-fa320397b751",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "139b5cfc-e304-4213-b615-81044e1c84bf",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "cb5f9a79-c957-412b-8ec8-896b455f29e1",
        "cursor": {
          "ref": "1d67501b-872f-4b9a-a048-b70091702faa",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "33c7ce35-5af5-4dd9-9e61-401210c98080"
        },
        "item": {
          "id": "cb5f9a79-c957-412b-8ec8-896b455f29e1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a796aca1-2d9a-4511-95df-ee4ef3a85801",
          "status": "OK",
          "code": 200,
          "responseTime": 219,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c2776b57-ef05-4a55-80c3-c0a851d341d0",
        "cursor": {
          "ref": "d8bc338a-ab01-44dd-ab88-50a773931be8",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9fed694e-2986-43f5-a153-ef7f43216f3a"
        },
        "item": {
          "id": "c2776b57-ef05-4a55-80c3-c0a851d341d0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0889b7e4-694a-431b-947d-13447a3deafb",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "15204ee1-5e27-42dc-bf55-47889b52e82e",
        "cursor": {
          "ref": "99e11da3-b895-4281-9abe-88a1bc17ee42",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1cb1e61f-5454-4bf3-82ac-a776ac1b8a0b"
        },
        "item": {
          "id": "15204ee1-5e27-42dc-bf55-47889b52e82e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f96516f3-e7ef-469e-80b3-7576268b448e",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "bedec1ae-2d90-4ef6-8b71-104dbc401de1",
        "cursor": {
          "ref": "c78e3b37-5a60-4515-b5df-346687af5442",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "837121de-282b-40b4-a430-5f793dcb69eb"
        },
        "item": {
          "id": "bedec1ae-2d90-4ef6-8b71-104dbc401de1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "225eaf3f-e0ef-4c97-848d-634faa8675c8",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "9a9ca898-d1e4-429d-b551-0af684f83ab0",
        "cursor": {
          "ref": "7bf296d0-09a5-4152-9d4c-c533b501a091",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "82dd66cc-e032-4625-adf1-9f885e7caf00"
        },
        "item": {
          "id": "9a9ca898-d1e4-429d-b551-0af684f83ab0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fb01ce29-32be-4f52-b240-d60621c26fdd",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "13611ed8-2f39-4f31-8579-0c3eea2f25db",
        "cursor": {
          "ref": "77691243-3a34-4ff0-bfac-9c3972f3fd9a",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c857977f-c370-4636-9fde-0b788581a991"
        },
        "item": {
          "id": "13611ed8-2f39-4f31-8579-0c3eea2f25db",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3998416f-bd9c-4429-9063-71e2bd65277d",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "99d4d9f8-b659-4aa8-bcfc-6551e6be1a6a",
        "cursor": {
          "ref": "14d61510-f520-4f54-8b31-5f98a28b2d35",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "90f775f6-1411-4453-8cf4-775a37e741ba"
        },
        "item": {
          "id": "99d4d9f8-b659-4aa8-bcfc-6551e6be1a6a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7e003a71-fcd5-4b54-9f24-1b5347141679",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "e66da1c0-cb2f-4845-878a-4c58cd64b2c0",
        "cursor": {
          "ref": "ecb4c337-8347-4173-8f66-79d814b41a45",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bcb04d24-d3eb-4940-acc4-232818e3145a"
        },
        "item": {
          "id": "e66da1c0-cb2f-4845-878a-4c58cd64b2c0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4c247f5f-d3bc-4a9b-abbf-a8a9d6fa39d5",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b23c1cf3-d71d-4606-a336-d016e4d4e403",
        "cursor": {
          "ref": "d854092d-69ce-4070-9ddf-dbb5c8868e76",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1d11b953-2648-4638-a0d9-fc375db38967"
        },
        "item": {
          "id": "b23c1cf3-d71d-4606-a336-d016e4d4e403",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0d2fe175-cb3c-4e0b-ab72-25d796fb9311",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "07e93303-a4e7-4ed9-b4d1-aa8699db9d63",
        "cursor": {
          "ref": "d79c8f18-d8d2-46eb-8b48-b332a4ae723d",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "95b2aa28-dc4f-417c-9a12-80c2c7905594"
        },
        "item": {
          "id": "07e93303-a4e7-4ed9-b4d1-aa8699db9d63",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c673b6df-56c1-4253-bfe1-fdd049de045b",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "0c8e4fbe-84f5-4257-aed0-817b42f3edeb",
        "cursor": {
          "ref": "9844e257-1240-4797-b52a-971860c944f3",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "740cb2b4-0fc3-445a-afbf-95a6411d3e8e"
        },
        "item": {
          "id": "0c8e4fbe-84f5-4257-aed0-817b42f3edeb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ae644cf7-4c09-40d9-9744-115f53031387",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796d33c5-c811-457f-ada8-3083058c1ff0",
        "cursor": {
          "ref": "63b23e09-f263-4950-baee-dfb126af7a21",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c1b498e3-6fdb-43fe-af6f-43416d9ffb71"
        },
        "item": {
          "id": "796d33c5-c811-457f-ada8-3083058c1ff0",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "986badfc-49a6-40bd-8d16-9de58ccd955e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae19da86-6acd-4645-9d97-11136ff43568",
        "cursor": {
          "ref": "5f4f4b86-040b-4611-a379-880d2ededfad",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e248e10f-c7d7-45a9-afb8-f78d776bc67a"
        },
        "item": {
          "id": "ae19da86-6acd-4645-9d97-11136ff43568",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9cc83615-d550-48dc-9f42-df2d1686476f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae19da86-6acd-4645-9d97-11136ff43568",
        "cursor": {
          "ref": "5f4f4b86-040b-4611-a379-880d2ededfad",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e248e10f-c7d7-45a9-afb8-f78d776bc67a"
        },
        "item": {
          "id": "ae19da86-6acd-4645-9d97-11136ff43568",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9cc83615-d550-48dc-9f42-df2d1686476f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6777efdd-b73d-4e13-82a2-be0a6b45d52c",
        "cursor": {
          "ref": "c837d87d-f293-4b4f-81d9-d7bc906bff78",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "305d21b9-c1a3-4b8e-ab17-84e0f72f78e7"
        },
        "item": {
          "id": "6777efdd-b73d-4e13-82a2-be0a6b45d52c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7e24550c-60e8-4dc3-a99d-82dcced2f1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a846f1a-50b9-4328-a6e0-417c3a1fad67",
        "cursor": {
          "ref": "492be973-4ee2-4c0d-818f-f15f13c0ca69",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e8c20546-5129-4e3b-bc0d-db16e32e4813"
        },
        "item": {
          "id": "5a846f1a-50b9-4328-a6e0-417c3a1fad67",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d26e2f70-12fd-48f4-bfb4-ae8f321a4cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6176f597-9de6-4266-9e13-bd2cb56c1fa6",
        "cursor": {
          "ref": "94c43a8e-57ea-4c7d-8695-f2f6c00ef72d",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e596eee6-1515-46f7-8b86-72f2be820f45"
        },
        "item": {
          "id": "6176f597-9de6-4266-9e13-bd2cb56c1fa6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "202f2716-45ba-48da-9432-01731c8df123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ff9675-f839-482a-a4bb-69eeeb39b5fd",
        "cursor": {
          "ref": "c7ffd989-bf2a-4d32-93f0-4a40c98e46af",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4eed545a-e75e-4d7b-a18e-c6d67e30d4b0"
        },
        "item": {
          "id": "12ff9675-f839-482a-a4bb-69eeeb39b5fd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "37423cb4-3734-4869-be08-646f85493eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2fb5f8-4fa0-47c2-907e-09b866282acf",
        "cursor": {
          "ref": "9a4acc08-b8ba-43bb-9a4d-13826b7943ae",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "534b5505-37e3-426b-8518-cb13a44642eb"
        },
        "item": {
          "id": "fb2fb5f8-4fa0-47c2-907e-09b866282acf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f1b57878-a992-46af-ba6f-a47683c43fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b887cf8d-f0c9-4298-a6c3-b3f562499d8d",
        "cursor": {
          "ref": "b6ff7632-91a3-4744-a982-4b9296daddf8",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "885ac180-7416-4e17-9276-d680d8a17db4"
        },
        "item": {
          "id": "b887cf8d-f0c9-4298-a6c3-b3f562499d8d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7b5025c6-ecce-4808-9f63-c514e2aee7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 814,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbaab9b4-3af0-43b7-89d8-3516a4895f33",
        "cursor": {
          "ref": "616b8036-e749-4105-a83b-672dc2312ca8",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "679c811c-7268-465a-8f85-3243c7d3f9ae"
        },
        "item": {
          "id": "bbaab9b4-3af0-43b7-89d8-3516a4895f33",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8cf2d0e5-48c8-4288-943a-827212765a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fef450b-4be2-429c-b87f-3f5c49c440d8",
        "cursor": {
          "ref": "92e70cfe-4a27-475b-b3c2-3f68efe53c8d",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c6c0e66a-e342-4a1f-93ba-bf575277c0b0"
        },
        "item": {
          "id": "1fef450b-4be2-429c-b87f-3f5c49c440d8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "71630066-cb0c-49d4-97b5-f36d24bf6f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d350223d-aa82-4cf6-961d-38e74ec12597",
        "cursor": {
          "ref": "aba3684d-e8fa-4829-a329-426e944c5c48",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "eb23700a-7e72-401a-8db8-fc17710f1d46"
        },
        "item": {
          "id": "d350223d-aa82-4cf6-961d-38e74ec12597",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e41a2cdb-7394-4ed2-932d-8a5120c58504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6665f008-724d-4329-b2ac-e613a3458232",
        "cursor": {
          "ref": "b65f0316-77dc-473e-8a31-fd7f22e9c31e",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d0f04b9e-1da8-4327-b97e-b58079c0d9a6"
        },
        "item": {
          "id": "6665f008-724d-4329-b2ac-e613a3458232",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "100de6d9-8751-48c3-bd0b-689a244d4647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4ff1f3-5c28-4403-9c73-34727c80c678",
        "cursor": {
          "ref": "34f88283-eb05-4b0d-bc04-5d70dfab7eeb",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "11164976-c964-48b7-bcff-0db100f5c282"
        },
        "item": {
          "id": "9c4ff1f3-5c28-4403-9c73-34727c80c678",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "359c6d73-8ec4-4e34-bfef-1ebf6af1876b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b382f0-24ac-4a6c-8529-6b2992286b7c",
        "cursor": {
          "ref": "1334000c-df70-47d1-84d8-b65da0eb682d",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "653a1151-fbb0-4f36-b67e-03b0d90b5cad"
        },
        "item": {
          "id": "b7b382f0-24ac-4a6c-8529-6b2992286b7c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "44594b66-db62-40e7-a098-1954296841e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e537e96a-ffbb-472d-bb65-b2505dcc7fbc",
        "cursor": {
          "ref": "06c6b034-673c-46ed-8ab6-cb38cd0c3ec0",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2c654a25-260b-4ca1-9de6-d683d3805da3"
        },
        "item": {
          "id": "e537e96a-ffbb-472d-bb65-b2505dcc7fbc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a4013e56-f90a-4804-bacd-b048ff9e1954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57f5a83-9f1f-45cf-82a4-c3719aae2cde",
        "cursor": {
          "ref": "fb0869a3-ca1a-414f-9745-2ea9a0d62c65",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b97e6a3d-9376-4cce-8e5c-1a90b7a8f6b6"
        },
        "item": {
          "id": "f57f5a83-9f1f-45cf-82a4-c3719aae2cde",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "de168b3b-41ba-4dd3-8173-da15f33c4c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a9c438-eed7-4528-910a-ef8d80ceb61a",
        "cursor": {
          "ref": "a6db2b20-c21e-4fa8-9192-f3abe94e88d8",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bc79237d-cf85-4d2d-95ae-1899bd31fa8e"
        },
        "item": {
          "id": "b4a9c438-eed7-4528-910a-ef8d80ceb61a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9472db54-0c54-4bdf-b305-5369b84c9090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4659b70-5b8c-4a1a-8f7d-e59881b21995",
        "cursor": {
          "ref": "fee51dc2-3e4a-4a96-961c-f93e44f392de",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "46950ef0-758d-4bea-be94-72b99884dcfb"
        },
        "item": {
          "id": "c4659b70-5b8c-4a1a-8f7d-e59881b21995",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "74a39c09-f7b8-4797-90bb-5df5d9e2e04f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90317698-f7a1-4db2-b390-68343fbfdeee",
        "cursor": {
          "ref": "daae2e89-f233-4bfd-921f-c6d4a5fc9341",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "864b3fdb-d575-4b31-921d-95d8cbb72abc"
        },
        "item": {
          "id": "90317698-f7a1-4db2-b390-68343fbfdeee",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f4e611a1-bdda-4119-974f-031f3dc0a14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 694,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e3d8a4-2990-4ba0-af01-e924bc12bcdb",
        "cursor": {
          "ref": "a58ca46e-0012-409e-98cc-e235ea01532c",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3217709c-b59f-4d32-aa31-eae6122c16fc"
        },
        "item": {
          "id": "c6e3d8a4-2990-4ba0-af01-e924bc12bcdb",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "187d0ac7-ced8-4b75-8d4a-40e2c78c19b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 673,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e91ba1-a315-4f4f-ba1a-8913060b5250",
        "cursor": {
          "ref": "b84c2c2d-7bf5-40f1-8b04-cf989658ba84",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "aa33a912-2cbb-4470-b871-b3b7c45a473a"
        },
        "item": {
          "id": "d9e91ba1-a315-4f4f-ba1a-8913060b5250",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1a94d5fb-aab5-4060-b659-7ccf5345c4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 802,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77bb454-9af1-4834-9fc3-1061af054ddd",
        "cursor": {
          "ref": "077aee10-0cea-4f24-af3b-e487e3158c95",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3afea58e-3877-48df-9a2b-08dad2772621"
        },
        "item": {
          "id": "f77bb454-9af1-4834-9fc3-1061af054ddd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "361ca323-3cf5-4eb9-80f9-886c7f3e2d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2415f4c0-3892-48c7-afb3-6cc6fc03156e",
        "cursor": {
          "ref": "5bb34189-0f17-4e63-8b2a-8b22018bd4ab",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "35172983-d324-40a9-b87e-1488889a93ae"
        },
        "item": {
          "id": "2415f4c0-3892-48c7-afb3-6cc6fc03156e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a48475ba-c895-4820-831d-8f801df3e75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed935264-bf18-4655-92c5-6ae0b76d1418",
        "cursor": {
          "ref": "b07ea107-1c34-42f9-b81c-a03618002b67",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "dca4efdf-db1b-4d38-9c34-bafe7d46c7e6"
        },
        "item": {
          "id": "ed935264-bf18-4655-92c5-6ae0b76d1418",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1e762458-1f8d-4922-9f32-5ac019f4e641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7b7443-215c-487b-9bbf-b5e12756f94a",
        "cursor": {
          "ref": "e676bf6c-4e08-4ada-bd26-453f9c06be17",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "93581ef0-2c67-49ac-9474-393af1210554"
        },
        "item": {
          "id": "7f7b7443-215c-487b-9bbf-b5e12756f94a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9d29fece-cdbd-4bcf-b846-a1b91f38568d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487f09be-c8a3-4296-a552-85e7bdd238df",
        "cursor": {
          "ref": "b0f88c48-fb09-4aea-b0ce-a22503e72e84",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e35cbdb7-5cdb-4a82-969b-24cf2be1d878"
        },
        "item": {
          "id": "487f09be-c8a3-4296-a552-85e7bdd238df",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1cebe52f-ed33-423e-845c-3006be19bb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af8300a-e2cf-4e49-bed9-2893747383a9",
        "cursor": {
          "ref": "0b1f27e1-f345-494e-a1d1-7c3ca7c35097",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5b8f7260-12a2-41a9-a2bd-ea744d0a8e59"
        },
        "item": {
          "id": "8af8300a-e2cf-4e49-bed9-2893747383a9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9c6a3499-dd8a-4b12-b63f-1fbad6a77266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdbf8fb-592c-4922-a113-3dd288d47892",
        "cursor": {
          "ref": "21315511-f5cf-406f-861c-f1984dc6896e",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "badff1a7-7526-4982-929b-d11d45b03c94"
        },
        "item": {
          "id": "4fdbf8fb-592c-4922-a113-3dd288d47892",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "951d78de-949c-426d-a14f-093191dbc2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1a9415-606d-4c3d-870b-9d53f1aebecc",
        "cursor": {
          "ref": "1d4f9214-2908-44de-8a94-fcadb9ef714b",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e1dbe5c6-2865-4018-84b9-67bdccd1f13b"
        },
        "item": {
          "id": "5f1a9415-606d-4c3d-870b-9d53f1aebecc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a1de018c-21c8-4344-89e0-f02c8efbf5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c56ca7-31da-4f47-895e-de318b129149",
        "cursor": {
          "ref": "c3fb0781-0226-41cc-9bae-bf66485b1c36",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fa40d300-eb0f-4ab4-9b63-e46b0e9ec3c4"
        },
        "item": {
          "id": "15c56ca7-31da-4f47-895e-de318b129149",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "257a7f20-f529-44b6-80a7-d372f7de301f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49bc57d-4f5b-484c-ad1b-3300650ad71c",
        "cursor": {
          "ref": "2bfb82f4-f839-4728-b5ab-c351b62db2c8",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f91a6b7e-32dc-4362-a6f5-4928e0163cea"
        },
        "item": {
          "id": "f49bc57d-4f5b-484c-ad1b-3300650ad71c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "93ac11b1-5eea-4fa3-a982-2200454cdd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32370b4-4e49-4b29-86a5-7fe7ce2589f0",
        "cursor": {
          "ref": "5193613c-a94d-4d9b-b95a-15f2fd979eb3",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "83003c96-539e-435c-8849-16f042c115f0"
        },
        "item": {
          "id": "d32370b4-4e49-4b29-86a5-7fe7ce2589f0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "af62b9d3-704f-4d70-8ec1-3abf8033bd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 846,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ead57ef-38f0-4ab8-9328-61c9eddd8c8f",
        "cursor": {
          "ref": "9f3b3fe0-922e-4af1-8b60-cfb973d7b013",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "217ebff3-3a1f-4e35-a7f3-7829542d92b8"
        },
        "item": {
          "id": "6ead57ef-38f0-4ab8-9328-61c9eddd8c8f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "599045d8-c958-45a7-ac58-32abe7ce7ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4d5237-ac05-4a29-877b-8759dcc27e5c",
        "cursor": {
          "ref": "d7e5536d-2594-4d9b-98d0-2ee412b89e32",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "89af8ce5-89ef-476d-af8b-a3cd3fb7f579"
        },
        "item": {
          "id": "fa4d5237-ac05-4a29-877b-8759dcc27e5c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c5a704a0-5942-4d09-8b7f-2cf8eacecb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1864,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c150bad3-9747-455f-a20f-1c12ab386f0e",
        "cursor": {
          "ref": "217e035f-b277-4f8f-b079-9371bfab6692",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5b199e7f-4296-460a-a541-e6ccb96af2fe"
        },
        "item": {
          "id": "c150bad3-9747-455f-a20f-1c12ab386f0e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "07753e90-8698-4ced-ab84-7edc0c9f8e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2182a835-6af0-4504-809c-824c1db60217",
        "cursor": {
          "ref": "f873c796-0e4a-4b63-9281-95265a12f5e6",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "49d00b1c-4d54-4796-a5b9-8b7754d3332d"
        },
        "item": {
          "id": "2182a835-6af0-4504-809c-824c1db60217",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7e308d2f-d6ed-4afe-af40-d10a7555017b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1623,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a37650-9d83-4612-a6f8-d96b0144d858",
        "cursor": {
          "ref": "18cb2e76-1e22-4047-94ef-a71883f74c99",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0520eb12-f61f-4475-aa71-22901f6747f7"
        },
        "item": {
          "id": "45a37650-9d83-4612-a6f8-d96b0144d858",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ae08f298-3445-47de-b966-d701ed5ef536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1038,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244c0a50-4f85-433e-a00c-b3bc5615bced",
        "cursor": {
          "ref": "53c9c12b-9a5b-4b58-a282-68a6b254f9fe",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "926f510a-d18a-4440-a840-1fad02b8fd1f"
        },
        "item": {
          "id": "244c0a50-4f85-433e-a00c-b3bc5615bced",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d8245fe1-b330-413a-a0d7-d0caa61bdee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1655,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004aedec-29bb-42e7-b215-abb6ce173348",
        "cursor": {
          "ref": "5060c8e3-58a1-4d21-abd6-c2850113df31",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5f454b29-3835-4dcf-a252-1decba9ee92a"
        },
        "item": {
          "id": "004aedec-29bb-42e7-b215-abb6ce173348",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1089d2ba-3837-4fa7-a9e4-c956cde7b68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 475,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca28c93-0029-487f-9fca-6c902941082b",
        "cursor": {
          "ref": "8f00abb7-e535-429f-9ee9-470f3b309fd6",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "48b1fb45-5b3b-4c23-b469-27adfac3cd25"
        },
        "item": {
          "id": "9ca28c93-0029-487f-9fca-6c902941082b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "71e04569-aead-46da-925f-c4c55bde58ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b7609f-2b01-4794-a16f-b46ce6efba07",
        "cursor": {
          "ref": "6351a378-a9d8-4aa1-a51f-ffd20ccf3194",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9b292b2e-756f-4ba7-bde5-ae6eac92c8b8"
        },
        "item": {
          "id": "e9b7609f-2b01-4794-a16f-b46ce6efba07",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5dcd5316-3018-4eb5-b207-83419d143cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d4ad3e-51ac-4456-9d85-d4e03f793a33",
        "cursor": {
          "ref": "4b81d36e-a886-4e5a-83d8-c9197151823a",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "acb34911-dcf2-4620-97d5-ddde3ce2b24f"
        },
        "item": {
          "id": "21d4ad3e-51ac-4456-9d85-d4e03f793a33",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8511da5f-ba92-4497-b29d-a37dc1e3c4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 388,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08abc60e-bd0b-4d0f-8722-5b0c43e951be",
        "cursor": {
          "ref": "dfe22071-d3bc-49d6-9069-d82f5fd275fd",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f29ff803-b7c7-4817-969a-5adb73776d88"
        },
        "item": {
          "id": "08abc60e-bd0b-4d0f-8722-5b0c43e951be",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e4dfacfa-b445-4b66-aeb3-cbb160c150ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 497,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7d8a56-f664-44e9-996d-d5070e33e2ed",
        "cursor": {
          "ref": "f68f2eec-29e8-48c3-b472-6735b960d1b7",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5c08032b-3e3f-4045-b8ba-d52c2607d37c"
        },
        "item": {
          "id": "ae7d8a56-f664-44e9-996d-d5070e33e2ed",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "40f195b0-297b-4cc6-8d3a-b418d0838d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f445d409-e78f-4903-baf3-0a95257b6955",
        "cursor": {
          "ref": "4de5adfd-f06e-4436-b9d9-b9ba86caf6e4",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "509f1b6a-7f26-450a-a5f1-8264505c2d2f"
        },
        "item": {
          "id": "f445d409-e78f-4903-baf3-0a95257b6955",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1df3cd2a-f0fe-46f3-a3af-c443e8960069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a0b5c2-d828-445e-86b9-bb09eabc83ae",
        "cursor": {
          "ref": "d1f82409-a70a-4483-9b8c-486b95413a50",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "66304984-2e4f-43f1-9b93-50de26f0d67f"
        },
        "item": {
          "id": "e8a0b5c2-d828-445e-86b9-bb09eabc83ae",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0dfedcf4-2f61-4deb-a52c-5ff39ae28ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0c5f35-48cb-4097-b127-f3d5b6b79b65",
        "cursor": {
          "ref": "7b085efe-2816-4269-8e1a-10dd41f6b8d0",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "177f841e-ddd4-4180-af37-84841b5f0524"
        },
        "item": {
          "id": "de0c5f35-48cb-4097-b127-f3d5b6b79b65",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "abe2689b-5992-4325-954f-496ad717e93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ee2489-f47a-403d-90a4-07297ae95b4f",
        "cursor": {
          "ref": "c9039354-8777-40eb-a97b-548aca61a9b5",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ca5cbbce-8a83-4b99-b9d3-157ac72699e0"
        },
        "item": {
          "id": "c7ee2489-f47a-403d-90a4-07297ae95b4f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "aa8b660a-b681-4328-8f8c-432876027d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d26897e-c380-4999-a240-6f85755b5cfc",
        "cursor": {
          "ref": "05dfcdc3-cece-48e6-af46-881197b36a73",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ef514b14-e802-48cc-a1ec-7f9a12b0454c"
        },
        "item": {
          "id": "0d26897e-c380-4999-a240-6f85755b5cfc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b0d0a6fc-c63a-4fc9-9405-191441a9d7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 863,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b6b6d0-fe35-409d-bca3-93f74666b801",
        "cursor": {
          "ref": "d063a925-82ac-4ea2-90cd-30c7a8b0ad5a",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f75121b3-9407-41b0-b9a1-500ed52d9a8b"
        },
        "item": {
          "id": "b8b6b6d0-fe35-409d-bca3-93f74666b801",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5392ee37-14e6-4fd0-8a15-011ba13bbd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1083,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd750649-4774-4955-bd16-4d6bdf0b8e5d",
        "cursor": {
          "ref": "3d9056c9-c50c-4fe5-949a-53c1e137cb99",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "aae2674f-88e0-4df6-b682-4a59752720b7"
        },
        "item": {
          "id": "fd750649-4774-4955-bd16-4d6bdf0b8e5d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0032df91-2cb2-4bf6-bc1a-e27178b658b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 910,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e57655-19fc-45b9-b647-d8311f48608b",
        "cursor": {
          "ref": "5a9078e4-dbc4-4c01-be03-47ecdfe652c7",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "13828cc2-90ae-4367-aee7-836f0ba0d42d"
        },
        "item": {
          "id": "42e57655-19fc-45b9-b647-d8311f48608b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "461c8b89-585a-483e-a7b0-1057c1cf70f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 945,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480fe2aa-915b-4618-af18-63f6b65428f6",
        "cursor": {
          "ref": "b2d526bd-c265-48f0-8660-77c3613085a2",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c7b1e0f2-a38d-4cad-8ce1-7fd076f5a300"
        },
        "item": {
          "id": "480fe2aa-915b-4618-af18-63f6b65428f6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0ed31811-1fa0-43d2-96df-ebb59dc3b489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 321,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c977caac-9471-4ce9-8551-05805ef96e4b",
        "cursor": {
          "ref": "c6da8351-4ce2-49e9-9bd0-48767ea1719f",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2dd299ad-e564-4b68-8f5c-9c8d1deba612"
        },
        "item": {
          "id": "c977caac-9471-4ce9-8551-05805ef96e4b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a36ca79e-5579-4878-995b-6cc98876dc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1492,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07e9010-3697-4590-bb00-1a7d726b2677",
        "cursor": {
          "ref": "fdf81fdd-c016-432c-9ef0-c19c90faee87",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f6944848-1771-452b-be13-dc0a0795da57"
        },
        "item": {
          "id": "d07e9010-3697-4590-bb00-1a7d726b2677",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7f6bfe12-f9e1-4946-8b90-c2108a34f1e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ca6b02-0aaa-4ae5-83d2-14d5e7de8828",
        "cursor": {
          "ref": "b4848beb-02c0-478f-ba33-124bd4f62803",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a26355dd-3155-4717-aa64-e3968896e3b4"
        },
        "item": {
          "id": "f6ca6b02-0aaa-4ae5-83d2-14d5e7de8828",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4307a35b-40dc-4f37-b0cf-5249c4345ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c19aa4-5607-4eba-8a7e-7b3c04c73f46",
        "cursor": {
          "ref": "0b4c2042-fb08-42a5-b7bd-a7e4087b51fc",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "871ca637-7edc-4690-8496-b8e42daed0b0"
        },
        "item": {
          "id": "19c19aa4-5607-4eba-8a7e-7b3c04c73f46",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "16d50dc9-cd75-41d2-b4ed-41e5baf4d92e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3144afa5-e56b-4aad-b9f8-3f79bf45d034",
        "cursor": {
          "ref": "6408bba5-0498-47c3-839a-a04a3caa2302",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "50b2de67-688e-460d-8cd2-a8a9f8dd5691"
        },
        "item": {
          "id": "3144afa5-e56b-4aad-b9f8-3f79bf45d034",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ed62aa04-2784-49dd-bf32-8ddc334ee82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 731,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c02b6b-093f-4dd2-bd1f-d4ab5a1db662",
        "cursor": {
          "ref": "f2dea215-f812-4113-b370-1610df8fbd01",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "23ef5656-093f-407d-ad52-d94dfe9bb6c7"
        },
        "item": {
          "id": "73c02b6b-093f-4dd2-bd1f-d4ab5a1db662",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "10f7ffa9-a4ec-477c-b69f-9308ac299d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20c0e68-b6f5-44ac-b5f1-9008803f2267",
        "cursor": {
          "ref": "0d98c62d-867c-4fb1-bdc3-99f2b6804862",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9beb06cd-81da-40f5-8788-9e95883677ff"
        },
        "item": {
          "id": "a20c0e68-b6f5-44ac-b5f1-9008803f2267",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9022edf1-6ade-494c-bd4d-0a16bd3deda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8f4d24-260b-40ef-ba10-bbbac5510e66",
        "cursor": {
          "ref": "7404b32b-5b84-406b-80b6-4aaff7101652",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d0bf7f03-1013-4701-a759-e330cc634190"
        },
        "item": {
          "id": "cc8f4d24-260b-40ef-ba10-bbbac5510e66",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "66c330cd-a99f-4305-accd-eb6228df9908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536586ce-b783-4741-8ce6-468b6e6fad00",
        "cursor": {
          "ref": "c4ff5df9-34f5-4680-9ed6-97454ed810eb",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f48137ed-e4d4-4580-ba4a-64cc7a48f111"
        },
        "item": {
          "id": "536586ce-b783-4741-8ce6-468b6e6fad00",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "13610e81-35c9-4776-92df-9ed6127e7ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2a7dcc-97c5-403a-915f-f69ebe05295b",
        "cursor": {
          "ref": "06c518cc-7325-4dbd-a1d6-e998533c77ef",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "11548a6f-595f-4c55-b6fe-12f00350f602"
        },
        "item": {
          "id": "8d2a7dcc-97c5-403a-915f-f69ebe05295b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d6e1674b-81f3-4fb2-a026-88fc45689b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7377fe-c065-4440-a9e1-b433d15c3130",
        "cursor": {
          "ref": "48ec2ac2-a9ba-4d8f-b9bb-d88df7610c2b",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ec8848cb-12e7-4fb0-8fe7-ef5bb428eab8"
        },
        "item": {
          "id": "1b7377fe-c065-4440-a9e1-b433d15c3130",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "44fece2c-53af-4f63-96a6-f529468b9845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7a757c-c082-4230-b5cc-aed6c4a55bcb",
        "cursor": {
          "ref": "ced97f00-865e-4128-8937-805614578e1b",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e8b48741-02a8-45f0-a705-59aec0102ade"
        },
        "item": {
          "id": "1a7a757c-c082-4230-b5cc-aed6c4a55bcb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "80f11b63-e4a2-4bf8-adec-bc3f6be188dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64097c06-f25d-4865-8587-43d3ff1825cd",
        "cursor": {
          "ref": "0cfca08c-d031-44e2-a678-cb6333fb5646",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c5650a5c-354b-4035-a8e4-1396f8ab1476"
        },
        "item": {
          "id": "64097c06-f25d-4865-8587-43d3ff1825cd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cb11eacc-424b-4f25-9cbd-87f9c6ebd1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e8dd12-5178-4783-a4d3-0e87abf40f90",
        "cursor": {
          "ref": "25d14760-7a51-4628-89fb-36ec79d36062",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a74e0c06-34f0-4162-95e0-d8d71afa203d"
        },
        "item": {
          "id": "62e8dd12-5178-4783-a4d3-0e87abf40f90",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fbe2079e-048a-48c5-a4aa-b865368785fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b699e3-2d72-4d2f-beeb-85e13d38ac66",
        "cursor": {
          "ref": "9d575233-f3ae-406d-9747-6bd82267dfca",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bf5626e2-68b7-41d7-b41e-8f2f97cad527"
        },
        "item": {
          "id": "18b699e3-2d72-4d2f-beeb-85e13d38ac66",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5cb5b6ae-3fc9-4857-bc9b-b24ef0fc4d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a29c353-af24-4aa3-878e-bce33b95ae0a",
        "cursor": {
          "ref": "1e98696d-605b-4a34-849d-d6d4ad708e03",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0266f763-8770-4f2e-a611-53dcc0bb88c5"
        },
        "item": {
          "id": "8a29c353-af24-4aa3-878e-bce33b95ae0a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a3809843-5b53-4c34-98c4-2a2dadb68602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0041b824-c136-4be2-b443-5d06073e5c44",
        "cursor": {
          "ref": "1dd83038-21b8-4fb9-91f4-ed84ed13c8e8",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6c2f8f9c-9649-4b3b-93dd-b61585b0644c"
        },
        "item": {
          "id": "0041b824-c136-4be2-b443-5d06073e5c44",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "59f399a0-2435-4051-8af3-8829d487c5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fff701c-750b-4bd1-a8a5-7c57aa91612a",
        "cursor": {
          "ref": "5eafb461-60ab-4797-8556-e724f3d15864",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6ef28a8c-c3c2-45e6-b363-ff12e5e60d24"
        },
        "item": {
          "id": "7fff701c-750b-4bd1-a8a5-7c57aa91612a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "707399cd-cf42-45a3-9c60-290113cf5d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88aafb29-b279-48a2-b68d-71c61309ea0b",
        "cursor": {
          "ref": "552249bc-e35e-4a8b-8359-9f46ed2eea7f",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2cf09488-8d44-40cc-916f-8ad4dee56a88"
        },
        "item": {
          "id": "88aafb29-b279-48a2-b68d-71c61309ea0b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b13fe668-81b2-43a1-99ef-0c36c9e10724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facf3977-bfb4-450a-b0ec-f75e305d443e",
        "cursor": {
          "ref": "6cbad350-5e46-4f87-acb9-cc431231c1d4",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "631c55ef-3150-45e8-bd44-10b2ba37b675"
        },
        "item": {
          "id": "facf3977-bfb4-450a-b0ec-f75e305d443e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9841293e-ccb5-46f4-a269-d143404abeaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0507b45c-22e4-42ab-98bd-ee2b0ecf5a43",
        "cursor": {
          "ref": "41311eff-0559-4afb-ac7d-dd73ba03e543",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f64bee75-6d07-41c8-ae17-cfa9972b1c21"
        },
        "item": {
          "id": "0507b45c-22e4-42ab-98bd-ee2b0ecf5a43",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "68b4beea-4e3c-49d0-acf3-2c200c95892d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b667bd-942f-4ed7-b1d4-35913ffe8c54",
        "cursor": {
          "ref": "5ae1af4d-a659-424a-9c35-23b21598baaf",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9ce9f3b1-cc61-4bd6-b7d1-3770997e4baf"
        },
        "item": {
          "id": "99b667bd-942f-4ed7-b1d4-35913ffe8c54",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "51649b5a-2f98-40e0-a76e-9b2949e0466c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ad88fb-b745-4c46-a5e2-de3840489874",
        "cursor": {
          "ref": "9074c170-f804-4f08-b002-f5452ae5fc3f",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5d5350bf-457c-408a-8eb9-3a5cbf351cfa"
        },
        "item": {
          "id": "c6ad88fb-b745-4c46-a5e2-de3840489874",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e8afb716-9ed1-4bf3-b99c-60576fd7f1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e759c22-aef6-48be-9e11-6b12446c39d6",
        "cursor": {
          "ref": "817a35c5-e815-4978-85cf-fb0538755576",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "abcb9eaa-b555-4bf6-a8f3-d274ae53e24d"
        },
        "item": {
          "id": "1e759c22-aef6-48be-9e11-6b12446c39d6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aa21cd3e-3221-46f8-b774-2084b411ac7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61cda623-7c77-459b-9c32-a0591196ad3a",
        "cursor": {
          "ref": "39253bb2-022b-43ae-b7e6-ea1ffa966850",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dc54dcc8-7ee5-41b9-b03d-128d78b64938"
        },
        "item": {
          "id": "61cda623-7c77-459b-9c32-a0591196ad3a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4ac65d4b-62ed-403b-a9dc-d6ab01af323e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927903d8-f150-4726-b763-8d7f4069654f",
        "cursor": {
          "ref": "9aafd40d-86e7-401f-8840-7771bf5c9ee6",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2416e479-dc53-4652-b64e-93a6ae4b033f"
        },
        "item": {
          "id": "927903d8-f150-4726-b763-8d7f4069654f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a5a41f12-b71a-4051-9f7d-81cd908f789f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f53a141-76d3-4806-a213-4f668c3d6af4",
        "cursor": {
          "ref": "a146eb6d-3c17-4a96-95ae-8cd13c029c4d",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4d53fd6e-ce04-44e4-9de6-52c358c6a327"
        },
        "item": {
          "id": "6f53a141-76d3-4806-a213-4f668c3d6af4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d93f8e30-2c7d-409f-8bf8-82d34b4b5ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69ac981-868d-4eda-a7ce-619d57671cd0",
        "cursor": {
          "ref": "dea4b80c-6b36-43cc-afde-c1ca5999be5e",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ed7b362b-f2d9-4678-aae7-69756aaa869d"
        },
        "item": {
          "id": "c69ac981-868d-4eda-a7ce-619d57671cd0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fdfcfec8-c305-4de4-aebd-1b7a1e1d06c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a56c094-26a1-4788-8236-5f19d75ad889",
        "cursor": {
          "ref": "35391e21-c18d-4a06-8b20-b38e3777c81e",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c6c7c645-96a1-43db-bf22-97bf54b928d2"
        },
        "item": {
          "id": "8a56c094-26a1-4788-8236-5f19d75ad889",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0b0815c6-7950-46c4-9b3a-64bafe232988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1040fafb-c854-4f57-b172-944a7e7ef2a7",
        "cursor": {
          "ref": "74fb05af-276c-4a10-add2-38cb058de9a6",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3029e715-c42e-4682-91ac-f195b1fe0c6a"
        },
        "item": {
          "id": "1040fafb-c854-4f57-b172-944a7e7ef2a7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ea6bc503-8dc8-4ee0-b87a-9384ad3d36cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c5069c-ea47-4838-b0f0-26a1f587a751",
        "cursor": {
          "ref": "12007f8b-36df-4fc2-b98a-0d8d8be0b0a5",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "38f2228c-75e0-41be-97b1-b5fcee42f731"
        },
        "item": {
          "id": "b8c5069c-ea47-4838-b0f0-26a1f587a751",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "eb0b82d7-6194-415b-a58b-b09b547c9385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aeae7d0-2e9a-40fe-a925-3d74f5ff475f",
        "cursor": {
          "ref": "22fbc335-a8cc-400e-97eb-37121d73dc8b",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "31b22969-89cd-4454-a591-31d413809dc7"
        },
        "item": {
          "id": "8aeae7d0-2e9a-40fe-a925-3d74f5ff475f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1b18ad3a-5b34-42ed-a82c-fe7e64ad4dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ede2a5-02af-4512-9bc8-9ef69016465f",
        "cursor": {
          "ref": "02b10a2c-c749-4772-9eb7-e76f612728a7",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8f28dbe5-c14a-4ede-8d21-5bed6b73cb4b"
        },
        "item": {
          "id": "f1ede2a5-02af-4512-9bc8-9ef69016465f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ae45e7b3-8643-4f4c-8e16-54589b90aa40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca50a2c-31e4-41ce-91ec-26033b3d5242",
        "cursor": {
          "ref": "f5bb514c-744a-4dce-b8e9-9f057670e84f",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ad268006-5214-42c1-81e3-5be46742b7b1"
        },
        "item": {
          "id": "6ca50a2c-31e4-41ce-91ec-26033b3d5242",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6f201f48-f021-4761-9f5f-4ca651a3b363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45467aed-58bc-4044-80fe-b0126277c2fd",
        "cursor": {
          "ref": "e4b320fd-03e8-465a-b2b9-54ddbc7e2bd7",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4ee7d39d-6805-47fd-a1f9-1d208b5cf74d"
        },
        "item": {
          "id": "45467aed-58bc-4044-80fe-b0126277c2fd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "efa1c595-ed66-48bb-af34-c9e51421e269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39258251-b93b-484e-9322-c7d7732240d1",
        "cursor": {
          "ref": "a5cf13aa-933c-4283-9150-fa0231d2e6f3",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d42a2295-6225-496d-a33d-a6499c42693e"
        },
        "item": {
          "id": "39258251-b93b-484e-9322-c7d7732240d1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "80bd7fd8-306b-4730-b434-2f51a6a44d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57de410-0e5b-40f1-8a6a-f1d0e7921425",
        "cursor": {
          "ref": "61350c98-8ab9-4d96-90b3-2008ec8e5c54",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "745fc543-31f8-4c38-995a-a1e3353663b3"
        },
        "item": {
          "id": "a57de410-0e5b-40f1-8a6a-f1d0e7921425",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "72c5047b-9995-445f-8a08-aed6079a2a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d5b941-b01a-46f2-be47-256764c7901a",
        "cursor": {
          "ref": "6bd0a0a4-f248-470e-ba9d-7c11e42b1631",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8fe27796-702e-449e-bbd2-51b101023c16"
        },
        "item": {
          "id": "24d5b941-b01a-46f2-be47-256764c7901a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "abc44181-52db-4b08-a9c2-fd057ec8b20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfbaaae-7b57-4084-824a-7c3a598faaca",
        "cursor": {
          "ref": "64e0920b-b7a1-42a4-8553-588f75ece4e4",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dd991766-6944-4f6f-a5f5-423c79afb121"
        },
        "item": {
          "id": "6bfbaaae-7b57-4084-824a-7c3a598faaca",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "621e64ef-5f4d-4af3-9c86-41e05f9abfa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a729210c-3632-4a04-8c93-3a6fb15fc344",
        "cursor": {
          "ref": "ad4e321a-f837-469e-8610-2cba796172a9",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "63859790-b921-41ec-ad58-2ea16a0e4122"
        },
        "item": {
          "id": "a729210c-3632-4a04-8c93-3a6fb15fc344",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1351d17f-2235-4d05-a260-d1c85659ec52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5204f22f-bff8-458a-a1cd-cf8a4e1eb09a",
        "cursor": {
          "ref": "0e289f77-302d-444c-89d1-b7b575d3af62",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "34264396-31de-47d7-b45f-9e90289a3e61"
        },
        "item": {
          "id": "5204f22f-bff8-458a-a1cd-cf8a4e1eb09a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2716303e-d02b-4e51-b55c-a2ed910c5bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5810cda6-3b73-4cf0-b7af-a7baeb4ea483",
        "cursor": {
          "ref": "cc034fa0-c477-423c-8d05-6c1668060199",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0382917e-1c98-4cf3-866a-b98e9bd87f28"
        },
        "item": {
          "id": "5810cda6-3b73-4cf0-b7af-a7baeb4ea483",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3823c179-7cb3-4e3c-ab1e-cdc4eae2cd0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93663eb4-72c9-4e81-83bd-f29db435463c",
        "cursor": {
          "ref": "8a6d2ba5-3fa4-4da3-b30b-fc0d79e69bb5",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b8f00ffe-6fcc-4673-9297-4ec409aa86c3"
        },
        "item": {
          "id": "93663eb4-72c9-4e81-83bd-f29db435463c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "63bd2c4d-9980-433b-8529-8d1a034a006d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859b76c1-ce7c-45e2-ab9c-335b7657575a",
        "cursor": {
          "ref": "3fc6bb11-6c5c-4a0c-a864-34f5974ec774",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "66e8af64-c075-46e8-b409-b61640b92b79"
        },
        "item": {
          "id": "859b76c1-ce7c-45e2-ab9c-335b7657575a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "68e223e3-fcf1-4484-803e-21e1edb25ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7589e1d-7b51-453c-b477-425d03402f7d",
        "cursor": {
          "ref": "766a743c-13aa-43ee-9348-cb89e0be2e4a",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9396d31f-053a-4538-a2da-b22ec3a9e4d8"
        },
        "item": {
          "id": "c7589e1d-7b51-453c-b477-425d03402f7d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8cad5622-df32-4306-b6b4-ef4f956297c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0bbd9b-6b1b-4eb1-b3b5-2b48378ee695",
        "cursor": {
          "ref": "3be4b399-14a8-494c-bb2c-f096fef4ef6f",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "021224b9-5a0a-42d8-a120-58ca766b1ed0"
        },
        "item": {
          "id": "8c0bbd9b-6b1b-4eb1-b3b5-2b48378ee695",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0c5d0c6b-af92-4772-a45a-9a2eb1d0e066",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea2ab6b-b467-440b-a2b8-cfa232a3d9e3",
        "cursor": {
          "ref": "0191e4f3-bf3f-4e7c-9daf-7f3ce4930d59",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4f00192e-d595-4494-b190-ca90fe7f90d7"
        },
        "item": {
          "id": "6ea2ab6b-b467-440b-a2b8-cfa232a3d9e3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f0ed0b02-67eb-4389-b3ad-549fc5170dbe",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 41,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d7c8b8-208d-46c1-b76c-3b32b9e92911",
        "cursor": {
          "ref": "03286326-af50-48ba-8ede-196113661898",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "aeba3ac5-3a8d-423c-9490-2929762debab"
        },
        "item": {
          "id": "81d7c8b8-208d-46c1-b76c-3b32b9e92911",
          "name": "credentials_verify"
        },
        "response": {
          "id": "612789c6-6468-4374-a555-a04d4c83e341",
          "status": "OK",
          "code": 200,
          "responseTime": 627,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394ee7ea-ffa0-478f-9fe8-66dc1f63eca0",
        "cursor": {
          "ref": "0c585d3c-b0ae-4f12-9b81-cadffb8ccfaf",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3e9a7ee4-615d-4cb9-b142-19f2f987fa01"
        },
        "item": {
          "id": "394ee7ea-ffa0-478f-9fe8-66dc1f63eca0",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "cc95b84c-839d-4330-ac98-7b55dac51948",
          "status": "OK",
          "code": 200,
          "responseTime": 677,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9052b7-4fa5-46aa-96a8-6cbc62b9ca5a",
        "cursor": {
          "ref": "cf49c3f5-0c1b-46e5-8895-d28d3bd54d4e",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "95e59bf9-bd56-44a0-9421-9a2f09c77f86"
        },
        "item": {
          "id": "2d9052b7-4fa5-46aa-96a8-6cbc62b9ca5a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "77445dca-fc87-44b2-871d-9d79e400f428",
          "status": "OK",
          "code": 200,
          "responseTime": 2014,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a62396-6459-4030-b69c-56ef427ddaac",
        "cursor": {
          "ref": "68e73c03-1990-4d3a-b32c-71064f881e4f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f45463da-a8b8-4b56-b116-ebb34e68d766"
        },
        "item": {
          "id": "47a62396-6459-4030-b69c-56ef427ddaac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c9fad507-29a9-42f6-bdb2-c92d0536d8eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a62396-6459-4030-b69c-56ef427ddaac",
        "cursor": {
          "ref": "68e73c03-1990-4d3a-b32c-71064f881e4f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f45463da-a8b8-4b56-b116-ebb34e68d766"
        },
        "item": {
          "id": "47a62396-6459-4030-b69c-56ef427ddaac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c9fad507-29a9-42f6-bdb2-c92d0536d8eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a62396-6459-4030-b69c-56ef427ddaac",
        "cursor": {
          "ref": "68e73c03-1990-4d3a-b32c-71064f881e4f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f45463da-a8b8-4b56-b116-ebb34e68d766"
        },
        "item": {
          "id": "47a62396-6459-4030-b69c-56ef427ddaac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c9fad507-29a9-42f6-bdb2-c92d0536d8eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1f067a-3cca-4e03-bd92-50eb5cb2a001",
        "cursor": {
          "ref": "f9fd09cb-dc15-4e78-951d-6886c15ef504",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6679186b-8740-4e57-a580-d4b96a7b3c35"
        },
        "item": {
          "id": "bd1f067a-3cca-4e03-bd92-50eb5cb2a001",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a21fbd4b-c277-484a-b5fc-6b7ca90479da",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd32231-e6a6-4378-b3cc-89999f19a58a",
        "cursor": {
          "ref": "b557c3ce-e941-4b9d-9c51-7a348c10de54",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3da2937a-b842-43ac-ad78-a38e8c197b05"
        },
        "item": {
          "id": "cbd32231-e6a6-4378-b3cc-89999f19a58a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e30626ae-45d9-4984-ab73-dcb17087fe96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "cbd32231-e6a6-4378-b3cc-89999f19a58a",
        "cursor": {
          "ref": "b557c3ce-e941-4b9d-9c51-7a348c10de54",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3da2937a-b842-43ac-ad78-a38e8c197b05"
        },
        "item": {
          "id": "cbd32231-e6a6-4378-b3cc-89999f19a58a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e30626ae-45d9-4984-ab73-dcb17087fe96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "fa79397d-1e81-4b66-8dc2-8c5b78488fca",
        "cursor": {
          "ref": "ac9798ce-ba43-4122-a628-25f6cfffaffa",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8514065a-175f-472e-a1ff-69b437d0daf0"
        },
        "item": {
          "id": "fa79397d-1e81-4b66-8dc2-8c5b78488fca",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cfeff7b4-231e-4b5c-b3e3-5994a825e783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "24765590-8153-4b14-b086-f275338da7f9",
        "cursor": {
          "ref": "d500c27f-1653-4ea3-911e-53891cd7f956",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "41d5f3a1-128f-4821-a79e-5a23e9783386"
        },
        "item": {
          "id": "24765590-8153-4b14-b086-f275338da7f9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5ed1bc8e-5d4f-40d9-bff0-d4e612a1463b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24765590-8153-4b14-b086-f275338da7f9",
        "cursor": {
          "ref": "d500c27f-1653-4ea3-911e-53891cd7f956",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "41d5f3a1-128f-4821-a79e-5a23e9783386"
        },
        "item": {
          "id": "24765590-8153-4b14-b086-f275338da7f9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5ed1bc8e-5d4f-40d9-bff0-d4e612a1463b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ff70b7-0dae-48b4-832f-92f34f937a47",
        "cursor": {
          "ref": "520949a5-be82-46bc-b063-1dc42439965d",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9d242a8f-111c-4df5-af42-76197241f228"
        },
        "item": {
          "id": "51ff70b7-0dae-48b4-832f-92f34f937a47",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "146909d7-9478-4ff9-87f0-13166005822d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 41,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}