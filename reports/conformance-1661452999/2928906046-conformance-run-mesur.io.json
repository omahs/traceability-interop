{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6d21443a-7392-4155-b4cd-ecbf8b18d8ec",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7a6d0f45-5c3e-4f47-9b1b-3c558578f111",
            "name": "Positive Testing",
            "item": [
              {
                "id": "393e225f-70c9-44b7-921a-18472be0e42e",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4c5d2cf-33a4-4814-9982-c9a220a1f2d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "963775a6-9222-4af6-9e7d-da74773a97d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "7206ae86-fb23-437f-bc90-80f24d668543",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d043f952-11fb-430c-a047-85c69f6f2e18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58ac0b69-b013-4f97-964b-57c0102b1f3e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5fc3775e-1292-4105-9a1f-d6d86f254dfe",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e253ff44-b7d2-41f7-90fa-b87a370ba717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f14ea323-5e4d-43a4-b84f-e1ab6ee079cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b8d012-1f70-42cf-8131-233118097470",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38ad126-7ad0-4824-b424-012afdda14df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92d22c8a-9ce8-47cd-88b5-882ac3df77b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ee5f33-56fe-4227-b724-01b9408820db",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe348ccc-2453-4810-948d-9503ad8a7235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "464e2b2d-24e4-4534-afaa-d064af380cc9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0951b6f4-59cc-40fa-9963-cae7f28cc2d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2216195c-e325-4988-90ec-8c49d23ac705",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825351e4-6eed-49da-9f59-ddaa9e6f5984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f67ada7-f935-4d87-8639-4911eea9bd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1eae0b-acfc-4ed2-b385-bc66cbeea712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8093be92-af5f-43ce-841f-d81eb07a0916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34846c95-7f63-47ca-87d1-df7ec30cf51c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08872396-25cc-43c6-bd22-accef5a1e156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e629a25a-ac32-4cdd-8430-a0be2a1bdca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2010ec33-3bf5-4cba-8e0c-20af0fb73441",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a3235ce7-7b7f-4bb9-88d3-c46a0cb96a1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "54d64cae-6c48-42d5-a076-e1a45558622a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "81937c4a-7e1a-4430-991e-133f2441d99d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f6c155b-89fc-4ff0-8338-9d2b57b2fc65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f93e5cd6-9ae7-4d5e-8ec3-5e4529fd12ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c6297c9-3933-4c1d-8482-2cd44c5dfd4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "180c9030-b57e-440d-ac8a-55b34fab7ad9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6254d2df-8c22-46d0-a47a-5d9ec0c8eb28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2bfc612e-11e5-4f6d-a906-f04443990d2c"
            }
          }
        ]
      },
      {
        "id": "8f4b4f53-2ffe-45fc-9b54-d02dd6045a85",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ba4e2bd7-4f82-4933-b3b4-d72f1dc12632",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1baabe70-e153-40b7-bd2d-0aed1bbb596b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5bb8bce6-5852-4a5c-8db4-d7b6c9332d1d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b1f9a3-fef5-4a33-a1f2-94e4e692f93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203a1926-c7c6-494d-9524-0c5a6b1f21aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a4fef5-05ec-48a8-b41d-1c6ad98d5be8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "920ee348-1699-4b30-ad81-63debd28a9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340c45cf-c218-429a-bc9b-0c231f16c3af",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cadb882-7fe0-4026-8be7-a07d58901047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d5fce1-2acf-4720-aa1f-2c6ee44278b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb54344-c092-4fe1-af82-8c9cd89aa494",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d03406eb-62a9-48f4-8a42-396be0108153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf748874-5b8d-49d6-90d5-f7297f956849",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5226a81b-55e7-4698-b0ad-003583d854a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4102dd-fb0d-4a83-88f5-2ca842e6bb99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634b3427-6c13-47ec-a49b-6c261a114e30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71785ee3-813d-4008-bb47-2935e153629e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a23be16-f276-4d8e-b9a1-e005dd661939",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e84d04-7a40-4465-b4eb-5a2c0d3cd704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a66cbbf-1d04-4ef6-8b46-6ce8717c7d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6e4943-0c5c-4c97-9330-7f5576ccb855",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2645cc38-f653-4e19-aa6c-09beed25b292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9172f403-c2c7-481a-a7e3-80e032c8ee86",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "362f0772-0c7a-4a99-bc1a-f8b5ccc20948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60818850-231d-4b62-83ae-74c35afd727b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9746b1cc-72f7-4f37-8882-208da7dad5a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1dc37d-001e-499a-95a6-6cc54a9c5537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0c6cdc-c512-41ba-b102-ca227e27bcca",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed40f7e3-5dcd-4870-a13b-dafeefd29f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5856fe2e-45b8-4c3a-8dd3-5f0cf37ce154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f423aa7-6cb5-4014-9187-19d85c5e4b29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caef3615-89b1-4b0f-9245-6156e5f8c36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be820a5b-d77d-42e0-87fc-aaa29e16e61c",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddba08e8-79f3-4a33-977e-68c6267853a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b2d1af-061e-496e-a5ea-2a0965d20c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff20a6d-e393-447e-8520-06eec0b0f43e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d2a96d-d634-4a54-9874-8832d0595f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4baf90-516b-46eb-87a3-36b6d18dcc00",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e0ee8c-44c2-4550-a65f-10f63c2522f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282ff330-a0ee-40fb-b8ed-c2a03b68b6e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26087a9-b9de-4f59-8183-7d810253d51d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e868106-7f04-4253-9187-b957c2b285b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b4288f-e817-4e88-ad84-4b3139eaea49",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfc44de-7d73-4949-ad5b-5bd9b1349f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb4b7dc-f307-4fb1-938b-b3cd8fe401f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c95f95b-644d-452e-995c-360d4848060f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe7eadc-ae8b-4dcc-93ee-b257055e4b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801d8d5c-464c-435a-98d7-0b89462acc9e",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0f448b-b372-4f48-8108-c9491057f993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99cdf73e-c887-44a6-91fd-cd4fb47319c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cebd1d-fd15-4480-b469-ec141c253092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d20b698-913a-4ed2-b1e3-c129a1c7aab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a3b86a-23b6-4430-96f3-ee1e0e5e8729",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244df3af-dcfc-4745-b6f7-45fd7b10ed83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6710556-2000-47a6-9f09-ae61f185a7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa2a027-2640-4cfd-b14b-3645cb152bd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "6923bd5a-89a8-40e3-a8b6-0642fb9dbed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b44fc3-44df-4528-b2a0-a16a28c15fae",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbb6f33-c191-42e6-baab-802e6b31f069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7c25f2-bce0-41d9-8a32-8c6ba0b6d967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f4e137-546d-4c51-a249-7da1b24ae103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "338c05de-898c-4096-a46e-d709f5c1ca0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d147afee-9fa1-43fd-b32a-623a50d65df8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03de15d0-80a9-4e02-82ff-38300df917b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3202fa97-eaee-4afe-b1ec-d6cdac18478d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d7b1fd-fb54-4f3f-b10a-81a919f7e628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32944ef8-17be-4756-9569-5e5a6cba3817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea9c869-ab70-4352-963f-390bebff056e",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660a1588-eb22-4272-8a05-7fa4c31b5419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1698fd85-edad-47ec-b723-554b245556eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03183fd2-2b60-4f8e-bcbb-dd4a6f439089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4692253-33b7-4bd1-96a7-80fe8c99f30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadfa352-4c9b-4f00-a812-11e96b6acde6",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d518d9-683b-41a8-8978-e5b4c45532eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef8a574-4d9e-426c-a308-e92023c8570c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9411231-454f-48b3-81c7-eaefc30adeb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "47164a03-9b10-4428-a3dd-787fbd71e31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fe6259-eb73-4ba8-9fb0-17c1c513b723",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9601cbab-230e-4e33-ae7e-1e55a8782ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef4292c-0bb9-48c9-b0a1-a7b6ae0e30a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbd9f24-e76c-4f4f-b6dd-583e0c8cb8ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "85485d36-fa87-4594-881a-cc055a522881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb556364-d4a6-4fc5-9454-58b564d5bfa8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f34302-ab8c-44a7-97a6-3973cc58ebe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5750b1f-dcdc-4c07-91fe-4436ed868100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f169e0d-f32c-4f36-a5e7-a4703b7c9a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7438fcb-f7d9-4bce-bd2e-3b2842f1f90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996a6dc5-0c55-4c8b-8932-da029388a4a8",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c427cf6e-465d-4280-9921-ef8273dfcc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca7ec89-cb41-49ed-82c9-c69a05bb4d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2706ee2e-ae95-4252-aab3-c3b9d900e386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68de2547-26da-4df2-97d9-407f3ecde431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01458641-4dd7-4ab1-9789-ed8f641b5914",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc13c76-2ab9-4f95-be39-2f2be13402f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76adf4e-7f29-4c20-8e0f-f0a917417fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a66be9b-1e64-41af-8130-5ca09f40439f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6810712-1e06-4dd8-a4a7-ccb82890e8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c949b0f8-b402-4a0c-9516-7c3d986d377d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe0d614-10e9-4337-b528-bdd4383c1583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859125d5-07e8-4101-9b0c-437d17c17a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648a516e-32c4-4880-9073-a43ddae99ccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77372856-fcc9-4683-80a9-b8bfa327266a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed80f4e-c190-4330-aa12-bf4c7c99c2de",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608716bb-86ac-456a-9eeb-e3249020a6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784ef5fd-2d8f-4f61-a07c-64f3da84a18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb069726-c6ae-46df-b6c9-9fcc1e00004c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f23c0214-9eb4-4c8c-a3f8-7fe843e70324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dccc373-4af8-4f1d-8f37-8e64819cb180",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefac7c3-15dc-4726-ae15-1848f8b6b490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a71391-e6ca-480b-a3b1-c074a732c592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6647b5-e571-43ad-b418-34479bf4942d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f47a164-2430-4e20-9f08-8cf8726e2b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b72224-dead-4cc9-b8c8-277a6d9b4f7d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb2da29-81cf-438a-9ab5-5708b04fe0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "691d98d6-f56a-4fa6-b8a3-121f7a95139d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c232250-2774-4933-9747-a5b5fbcae592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea5d7161-8b62-4365-8154-91c492bdd393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3550f79c-c5fe-4abc-bbeb-f38ec556684b",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dafac8-8155-4429-b44d-f781dd71a2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c359e4f-3cbb-48bc-80f9-d0691943d704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694b27b3-a70d-4c57-893b-c0817f383514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65808394-44d2-47dc-9631-691e72d4c8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e5cd00-c445-43c4-9584-66fc941cf8d1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e26893-8fd2-4c02-ace0-069bbafe19b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4abc9e21-5081-4288-b596-f1a96a584ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68ec4b4-40f0-41ad-82b4-4f2189d67510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4501e88-d0e3-4bba-8114-96c989cf9ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b0a1ef-6b2a-436c-b6d8-82c9194be9fa",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73c9c02-1699-417d-8b0c-39002b7cbb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebdc71b-a1b1-4d98-ad57-bdd3cb0f9677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fe13a1-f428-41f0-b836-c7a4e37e4f9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "300323c7-d30a-4a34-a4dd-7454bcd0bba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b621c44-6251-4b6a-9755-a473c3c86ce6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10feb35-518d-486b-b9a0-6428a079a4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3e9d6c-ee83-4d3b-b40c-b8d49487e984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773c6b3c-6b21-41c2-a671-e9ad40339730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08fc1f52-cf1d-46f3-b3e7-e72512b7e4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce90d87-bf95-4bde-93c1-62c064345054",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a9b8a3-8b5a-45e6-842b-b188bd8f2f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10fd390-e012-408a-9a50-3bf269585600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61145d1f-57d7-43c0-aff8-bdc51baf1e7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df9a2078-ccc0-498d-a05a-21821878a836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901c0b16-69bd-4a12-aab1-62522dab7548",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c3999d-3b83-4b36-a5b8-6d61112705f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e20fd6ca-b62b-4eca-b118-491df862037d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606baa7f-cc3d-4f11-a019-f482fec727b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34e88d1a-6a18-40a0-b833-e8ac2b51b04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17439970-9beb-4c44-a924-f348ca7047d8",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9553a749-bc86-4f6a-a150-65b10eb5adba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6163ef-f1cd-4f4f-a041-524b108e9106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98436f8-11fd-484e-8884-8bae5e3e2bd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5659857-36a1-44b2-a04e-aef6699c164b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a32b4a5-7763-4570-b6d4-d90bee2fa7a1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fed14c-4677-41fc-92f2-6665910e582c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f7c5d262-463a-4d51-8023-f140a8abfa77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99243e23-15cc-4cb1-a0e2-fd53bb4fce1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52af6b62-5546-4953-a79a-2851d0a2592d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6cae8b53-3617-4d1e-9a3f-0763b809f447",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ebc9e2c-ab2c-4510-92d1-295864c25ccf",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9516d611-5fd9-4659-a124-d0db592b389a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6c452e0-d7d2-493d-8c4b-a5f57dbe0f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc38bde-e4cc-4511-98f6-e364865ece9c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b5066a52-e19b-4c2f-9ac8-42efba32b679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8d26cf-7b92-4751-9ccb-2c08fc01d95a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d622a2-a119-414d-b4a9-6eebd43b8228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "130783c0-d5b2-47fe-84ec-4b994c84f648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129be1e6-4cf5-450d-9ab7-9e99c518cb39",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a33ffa5b-ee58-46ea-9488-20f8d3d93d65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "003093fe-b407-47c7-a88e-6ca2d2ab6b41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bf25238-813f-408d-bc08-4acbb1bcfb4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8875b59b-993d-4902-921f-d85cfa69faca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cfb0208-2ec3-442b-b6b9-ff9cddfe5154"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a9ae941-7188-47ad-83ae-0d09a368bd4a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "77808f4f-bf66-4b1a-856c-3b282daa0f3b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "99afcdd1-83a7-4b38-8433-a6a4310706b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "17fd8f1e-3eba-4b41-abcc-09179ae34099"
                }
              }
            ]
          },
          {
            "id": "6be3615a-5e6a-4ecd-948c-e0bcbbf43e41",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a170ba5-01c6-440d-9c6b-8d96b1d0a112",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63e5426b-3eb1-4f69-b03f-b75c41a83ef8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc1397ed-3499-46bd-9a7c-5a23e12b71f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8121c7db-a738-4181-bf5f-91dda402377e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3cd4c744-7cc9-4a57-ba8c-e4a7031a5131"
                    }
                  }
                ]
              },
              {
                "id": "60b79998-0f57-4323-ac09-fecb92108aaf",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dcce09e-bc92-4e44-a303-afb30f0fe2e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fdb79b89-d0dd-4726-a6ba-43bdd78caffe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dc3eccc-1b64-4919-85c9-9e2b6646adbe",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "16f23459-eb16-4da4-ace8-4538b07ed4ab"
                    }
                  }
                ]
              },
              {
                "id": "2e1800ec-aabd-4223-81b5-d279c37d4ec3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1cb1cce-1d97-44cf-a571-df323a7ae92e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06ba7bd7-d21e-42c1-8613-c1a6fb18a159"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ed695ea-3d3b-4c44-a300-972b319d989f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5f402f39-96af-4a6b-b5b6-d7619d305deb"
                    }
                  }
                ]
              },
              {
                "id": "31c9eea7-1fe7-4eac-85c4-73936d896ad3",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4b58fd6-e5e3-443b-969c-74a4b1e6b47b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1c09add-4e03-4b81-86ac-d3c802d52d6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08c0d54a-5f43-44cf-958d-11c23e8610f9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "00f9cce3-431e-4f7e-9f6d-6b31cbe83317"
                    }
                  }
                ]
              },
              {
                "id": "94057ebc-c2ce-44c7-941e-4a009cedbc53",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4162df19-01a5-4aa2-8818-fd788b4046d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "581fc8d4-15fb-43b2-8cf2-ef43df86fb30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4cd64c8-be8f-4530-8baf-8e911836bee8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ec123536-0918-4fd3-9c39-57c975a3c705"
                    }
                  }
                ]
              },
              {
                "id": "b8d3f980-4fa0-4116-ab17-c8ad8715b725",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "72db92cc-1e89-4cee-a20a-ae21491e9ce6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc393a40-a69c-4ec1-8640-df12ba97b6e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f71d09d0-e14e-480a-992b-034c6f9b3c0b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6861f3b1-4e5d-44f0-ab58-16963b849298"
                    }
                  }
                ]
              },
              {
                "id": "ed073841-18ae-432c-9cdc-5c66917589c3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e3867e1-3e45-4405-9f71-a3aaaee04516",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c140d820-a096-47b3-b18d-ca0e5443d9d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c1c5cec-c50f-496c-94eb-41a10eacf827",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "efdfd34d-5a2b-4b89-acc3-98d255189bd5"
                    }
                  }
                ]
              },
              {
                "id": "ce440d0d-3561-45bd-893f-599031dbe1a6",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00ae74af-0b20-436b-b656-5abc1bab1380",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51567cce-9dbc-4cc5-9d22-faea7b3e674e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73550e6a-f08b-463f-8d36-2df17d49bf3c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "25bc7ab0-5cfc-4eaf-9777-96c5a4a18794"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "46d4de87-683c-43fa-bb8b-58b823d04eb5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d81be1d4-b837-4f8c-bb6b-140c5dcca697"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b0d08df6-80dd-4f0a-9608-518b9ca09956",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "806e7394-bd1c-4948-9baf-c258d65287b4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6fc327c-6953-469d-94f3-35065acdc840",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "1ed068a7-e4e6-4c84-8287-69db2825e367"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "879346e6-589c-42c4-8585-200713f1ece7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84160da7-75c5-47a1-8232-469a0c9bd9cc"
            }
          }
        ]
      },
      {
        "id": "67e92c47-702d-460b-ab50-959f9e647f4f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0317ee86-5107-465b-8a1c-6887308cc46b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1918d41-10ff-4700-97c6-680314a76f2b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61c0faae-a02d-4640-8e9c-e49ca482b318",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1ae6f2-5d4a-401d-975c-5f8abab94f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b6e60d-7881-4bfd-9bde-97fbaf609e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9f3be3-bdc7-4d16-95b8-6313b3527e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1072d4e9-907f-4805-8cfc-00b778796c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6067b8ce-e46c-4b3f-8072-c72bade6fb74",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3ddad8-39c7-4564-b936-70116d25fcb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "64698a22-1317-4da6-8d46-962fd4f9af07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1924732c-64ea-4aec-a851-76f706487aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba8820df-9eb5-498f-bec6-b7b172a79a07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "855eb2e9-765e-441c-9f84-257fb9cfa14c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fcd965e-1d68-4a46-8caa-086bef95d406"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37d7a18b-cf0e-4c50-b4f6-cdc83dbf284c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "150e9260-32dd-439a-936f-72a47fc48678"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c5c8605-bc40-4f43-8d1e-bb3b6a2b5606",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "dffcbd79-be82-46ce-8c2b-790bdf70f5cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cd07ffc-8c9a-4a2a-acf8-d4842c1438b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8b12d0d-be98-447e-b649-3e16fcc36ce0"
            }
          }
        ]
      },
      {
        "id": "ea2e7c0e-f218-46b9-8187-ad5b65340cf2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b1ab025e-a0b5-4b9c-9fd2-8a3ca855db9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91390986-8b27-4b7b-bef7-372256e51938",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0192b2a6-b59d-4a6a-a1a3-0f4176b29f61",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ea802f-3ba9-4d14-b1cc-a9143041637a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "8fcbb3d7-268f-4eb6-980f-97ab768c5dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7552847-a96a-4c8a-a21a-dc85cdbd4727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23702841-4f14-4e72-b13f-0abcc621ea40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7ed470-97b7-4a46-9c03-eece07e388fb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb106c09-bc7c-484e-b48b-d6d049ba9e08",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "0e969725-f405-45a0-b09f-39fdbad8d1c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9def7326-404e-4d9c-a8b6-8ff364b629ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fce58531-1c93-4690-9eec-0cbc637f8d55"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a51d0214-93ef-45f3-933e-b1651fbdc4a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8786838-17a5-4250-8c82-c5ae8e86d564"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3f73628-4110-4b49-b2f9-fc2b3f5bfce6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "175fe72d-8e59-4bfa-b8bb-c9833fb3993a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68bcdf08-7223-42d1-b389-e29351e95de1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bbc210b8-3a41-477c-b5d7-db0d5a5398d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46e0b643-f6e6-4c80-a14e-c9eedc841d40",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac1e4469-6090-444e-a7ce-80581c0e4c6a"
            }
          }
        ]
      },
      {
        "id": "6e7ef4b8-3c4d-4c0d-8ef7-64ab0578f787",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "25d9d039-c7bf-47f7-88d6-99370217aa2c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b533f26-83d3-4124-aef5-e37e079731d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf3401d3-0748-43b6-81a1-d65043e7e1c0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624f5962-b280-435a-ba59-f8dfee0f4302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a3415d-5d83-4212-ac44-d55c8d072ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275d8c38-ee25-43ca-8c56-df89361defee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "002b03be-3638-4864-8685-a20afcf76325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e5a3f0-5154-47a9-b953-66862060bc5a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a554fed8-e249-4067-afe2-7dc36e70765f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e545c8e2-2477-48be-a025-d4e91366996a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8b209c-bccc-4a72-98e7-2be7a4f8561b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98d19546-1a4c-47d7-8ad3-8ae2d76feebc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7938f4c2-96ba-4638-9c31-959c1406b9f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "241f7017-32f9-42f1-9346-848dd0c11346"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4803128d-20f3-43c7-af88-1895c991e9f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b047744c-a3f4-4272-af1d-f56b609aaecf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3cee82a8-7667-4b21-aef4-87dbe01ff23b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "6234bfd3-a47d-47c9-b749-f9a1a2140e01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87b2ffec-6f66-4765-8bdb-7952bd5b02ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28f5d887-b729-4700-a6a3-fd927bed1fa7"
            }
          }
        ]
      },
      {
        "id": "254680b7-d32c-49d9-96dd-d7dc2f3683bb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "97b49560-c7d2-453a-a28d-6b8d593e8ae0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db928ca6-97d8-468d-84c6-d5693fb3eac8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f1de3bc-83ac-4d20-bbdd-dfcb955677e6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9d40cb-c09d-4be5-86eb-9869c74e2d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92babdb-0de7-418a-8ff5-7ae601e8b8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d9bbd3-6bce-489c-b761-f3af21cf55a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6f0668d-d742-41e5-9869-a583d5288489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7234a0-f5d3-441c-88f7-c5773e3e2458",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee0ee07-ddc1-46a7-941a-c76f85c34dc1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9d2bc54d-bf79-4047-a15c-981e00d35cfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a0b8a4-b175-4631-b680-8e9b9ed9e5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79e96e74-5cc3-41c8-89c8-d7e7e264dd6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d32410c-d7dd-4733-bdc3-503fba64517b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c84bd1e8-3e99-40c0-81c2-d26262d62f73"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "640cde6d-6ec1-46d8-83cf-b0a4659896c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afb4217b-07cc-4182-a2b7-5109036434bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a508814f-f689-4b40-8efc-e0b2530228ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "1f76967f-7d25-4806-9837-e0d6cbcbd471"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "391e0663-e027-4aca-b456-f8eac9155e20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "798bb1eb-4ef3-4ce7-bdae-c33aa5bc551b"
            }
          }
        ]
      },
      {
        "id": "095d500c-4b84-4945-bb5c-aa7d5bc1dde5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "af02605a-a1c4-4f7e-9738-3b1839d4069c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc3a5e68-d9e0-448d-becc-1b2df5b7f077",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d7768627-5fd4-43f6-b645-6151efc139bc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001e72de-705b-4818-8f03-7790eb205f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61d3a52-1427-48dd-b777-eb007a2e4ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d188ea44-ab2f-4b21-ab30-0d4afa0573f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f9ee764-584c-4860-bbaf-266ef3449b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964dd1e2-c306-4fc6-9a13-dffbb3629477",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1157a3ba-758c-4d9a-ad99-f0e64dce44fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "fa11f148-0675-4e70-a68f-ab1620631594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc169d4-82c6-4784-862a-6e9e91ce4caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "253b606c-2648-47ea-a9a3-aa2ddde44669"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e6ad58c-9d1e-4bc9-a61b-ed0d9793ac95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "132758e8-067d-4ca3-ac92-9f17fea4739b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5225d75c-6a9a-4b2c-8fe7-1a9ec2ae9966",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afe345a9-6ff9-4b90-bc56-6c14efcb75e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6c15619-cab9-480e-9cf3-a7a5c7a35a1b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "163e6159-637e-4efe-a058-d7724c1a990e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10e9c5a4-8c2f-44bc-baab-8ff2b8aeb3af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ead77be-866e-4cbb-bef7-712229ea2710"
            }
          }
        ]
      },
      {
        "id": "b979ec77-5d1d-4439-b486-93b202353e96",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "aba8867b-00ed-4acc-9417-b3385f4bdfad",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 98
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 48.616822429906556,
      "responseMin": 5,
      "responseMax": 524,
      "responseSd": 76.29316855048778,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661452885629,
      "completed": 1661452893897
    },
    "executions": [
      {
        "id": "393e225f-70c9-44b7-921a-18472be0e42e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d0e9152f-c925-4c8b-baf6-11c135a632ea",
          "httpRequestId": "23926473-57a2-4702-97fe-e835db740473"
        },
        "item": {
          "id": "393e225f-70c9-44b7-921a-18472be0e42e",
          "name": "did_json"
        },
        "response": {
          "id": "73442c1c-2468-480a-b7a2-b00c9bcbd2a9",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc3775e-1292-4105-9a1f-d6d86f254dfe",
        "cursor": {
          "ref": "52a3ff07-0f25-42b5-ab40-3a74fe5163b0",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "138aed22-a597-4252-8ad3-829c1ba8f064"
        },
        "item": {
          "id": "5fc3775e-1292-4105-9a1f-d6d86f254dfe",
          "name": "did:invalid"
        },
        "response": {
          "id": "58489b8d-ebfc-414e-8043-6e285982d44f",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc3775e-1292-4105-9a1f-d6d86f254dfe",
        "cursor": {
          "ref": "52a3ff07-0f25-42b5-ab40-3a74fe5163b0",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "138aed22-a597-4252-8ad3-829c1ba8f064"
        },
        "item": {
          "id": "5fc3775e-1292-4105-9a1f-d6d86f254dfe",
          "name": "did:invalid"
        },
        "response": {
          "id": "58489b8d-ebfc-414e-8043-6e285982d44f",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b8d012-1f70-42cf-8131-233118097470",
        "cursor": {
          "ref": "0bc9ee2a-783d-4228-8127-889a34c2f45f",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6f90cae8-5d49-4c33-98b9-612b1d19e80b"
        },
        "item": {
          "id": "e4b8d012-1f70-42cf-8131-233118097470",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e23f16fe-62a0-4bac-b0fd-1d6651320439",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 114,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "f4ee5f33-56fe-4227-b724-01b9408820db",
        "cursor": {
          "ref": "408e1ef2-bf6e-434c-b2b2-3132e08e7240",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "107bc320-fc27-40fb-bf14-b53ce5aaf306"
        },
        "item": {
          "id": "f4ee5f33-56fe-4227-b724-01b9408820db",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cd15ac56-3af6-4e32-b732-ac8fec231868",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2216195c-e325-4988-90ec-8c49d23ac705",
        "cursor": {
          "ref": "96efd35b-fb2c-46c5-837d-7ebf6c0cfe1f",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e2d17139-7533-4ea4-b055-04205dc7dc07"
        },
        "item": {
          "id": "2216195c-e325-4988-90ec-8c49d23ac705",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e93c1815-107b-49fe-aab3-f587a398e97f",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "34846c95-7f63-47ca-87d1-df7ec30cf51c",
        "cursor": {
          "ref": "14774acc-34b8-4038-8921-0edb7609a361",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5f75b39e-8abb-46b5-9063-c837d2dba459"
        },
        "item": {
          "id": "34846c95-7f63-47ca-87d1-df7ec30cf51c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5c4d8cc0-c5ab-4819-9500-b25c62c6f20f",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "34846c95-7f63-47ca-87d1-df7ec30cf51c",
        "cursor": {
          "ref": "14774acc-34b8-4038-8921-0edb7609a361",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5f75b39e-8abb-46b5-9063-c837d2dba459"
        },
        "item": {
          "id": "34846c95-7f63-47ca-87d1-df7ec30cf51c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5c4d8cc0-c5ab-4819-9500-b25c62c6f20f",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "81937c4a-7e1a-4430-991e-133f2441d99d",
        "cursor": {
          "ref": "d18c37b1-c709-40df-a232-b637915f78d8",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dd3372a0-3582-47ed-b2c0-0a48392a9f00"
        },
        "item": {
          "id": "81937c4a-7e1a-4430-991e-133f2441d99d",
          "name": "identifiers"
        },
        "response": {
          "id": "99e9ee3e-1e49-4a9d-aa46-e21637fb0db7",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb8bce6-5852-4a5c-8db4-d7b6c9332d1d",
        "cursor": {
          "ref": "eae9d429-56e5-47d2-8c32-dbc4fba48b80",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "84a56a3e-2fb0-4e5d-a195-33cb72cfb6b0"
        },
        "item": {
          "id": "5bb8bce6-5852-4a5c-8db4-d7b6c9332d1d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2acb0298-4c01-465b-b665-d645f85af8a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 255,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5bb8bce6-5852-4a5c-8db4-d7b6c9332d1d",
        "cursor": {
          "ref": "eae9d429-56e5-47d2-8c32-dbc4fba48b80",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "84a56a3e-2fb0-4e5d-a195-33cb72cfb6b0"
        },
        "item": {
          "id": "5bb8bce6-5852-4a5c-8db4-d7b6c9332d1d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2acb0298-4c01-465b-b665-d645f85af8a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 255,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5bb8bce6-5852-4a5c-8db4-d7b6c9332d1d",
        "cursor": {
          "ref": "eae9d429-56e5-47d2-8c32-dbc4fba48b80",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "84a56a3e-2fb0-4e5d-a195-33cb72cfb6b0"
        },
        "item": {
          "id": "5bb8bce6-5852-4a5c-8db4-d7b6c9332d1d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2acb0298-4c01-465b-b665-d645f85af8a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 255,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "340c45cf-c218-429a-bc9b-0c231f16c3af",
        "cursor": {
          "ref": "a4c9ca2e-e1be-4e48-9d8f-a5deb9322bc1",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f39d9afa-4110-428a-8538-4a08469753b9"
        },
        "item": {
          "id": "340c45cf-c218-429a-bc9b-0c231f16c3af",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "12b7756f-2191-47dc-8a21-72b77dc247de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "340c45cf-c218-429a-bc9b-0c231f16c3af",
        "cursor": {
          "ref": "a4c9ca2e-e1be-4e48-9d8f-a5deb9322bc1",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f39d9afa-4110-428a-8538-4a08469753b9"
        },
        "item": {
          "id": "340c45cf-c218-429a-bc9b-0c231f16c3af",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "12b7756f-2191-47dc-8a21-72b77dc247de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "cf748874-5b8d-49d6-90d5-f7297f956849",
        "cursor": {
          "ref": "286b38ca-c6c1-4892-8987-1da1e03fa8d8",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a811e1ff-2ace-4b93-8eb0-177f7bd298ab"
        },
        "item": {
          "id": "cf748874-5b8d-49d6-90d5-f7297f956849",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "c60f2821-8380-43a7-aa3c-22e0b0c662e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "cf748874-5b8d-49d6-90d5-f7297f956849",
        "cursor": {
          "ref": "286b38ca-c6c1-4892-8987-1da1e03fa8d8",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a811e1ff-2ace-4b93-8eb0-177f7bd298ab"
        },
        "item": {
          "id": "cf748874-5b8d-49d6-90d5-f7297f956849",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "c60f2821-8380-43a7-aa3c-22e0b0c662e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3a23be16-f276-4d8e-b9a1-e005dd661939",
        "cursor": {
          "ref": "25b1568d-be67-4763-9e19-26cf6478e31a",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6d254e96-3b72-4ce6-b0af-f302cba86539"
        },
        "item": {
          "id": "3a23be16-f276-4d8e-b9a1-e005dd661939",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "1c2ebf33-0db1-4707-af6b-1af078ffe262",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "3a23be16-f276-4d8e-b9a1-e005dd661939",
        "cursor": {
          "ref": "25b1568d-be67-4763-9e19-26cf6478e31a",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6d254e96-3b72-4ce6-b0af-f302cba86539"
        },
        "item": {
          "id": "3a23be16-f276-4d8e-b9a1-e005dd661939",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "1c2ebf33-0db1-4707-af6b-1af078ffe262",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "9172f403-c2c7-481a-a7e3-80e032c8ee86",
        "cursor": {
          "ref": "19c975c0-b115-4af5-a5ac-4fc83063898d",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f43d3491-119b-4f3b-9986-e184e7bde896"
        },
        "item": {
          "id": "9172f403-c2c7-481a-a7e3-80e032c8ee86",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "c0ff18ab-c5f5-46b8-8c22-2a0a367ba34d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9172f403-c2c7-481a-a7e3-80e032c8ee86",
        "cursor": {
          "ref": "19c975c0-b115-4af5-a5ac-4fc83063898d",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f43d3491-119b-4f3b-9986-e184e7bde896"
        },
        "item": {
          "id": "9172f403-c2c7-481a-a7e3-80e032c8ee86",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "c0ff18ab-c5f5-46b8-8c22-2a0a367ba34d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "af0c6cdc-c512-41ba-b102-ca227e27bcca",
        "cursor": {
          "ref": "241d006d-8611-4190-82bf-060cb5dbe947",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a5aac091-d04f-4cc7-af34-c2f90a8f2611"
        },
        "item": {
          "id": "af0c6cdc-c512-41ba-b102-ca227e27bcca",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "009e438b-98c6-448a-abcd-b9babbf282c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "af0c6cdc-c512-41ba-b102-ca227e27bcca",
        "cursor": {
          "ref": "241d006d-8611-4190-82bf-060cb5dbe947",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a5aac091-d04f-4cc7-af34-c2f90a8f2611"
        },
        "item": {
          "id": "af0c6cdc-c512-41ba-b102-ca227e27bcca",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "009e438b-98c6-448a-abcd-b9babbf282c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "be820a5b-d77d-42e0-87fc-aaa29e16e61c",
        "cursor": {
          "ref": "372dafa2-decd-48cf-9e45-46bd6e9f40c5",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b41cada4-aad2-400d-9c99-2b092d4934e5"
        },
        "item": {
          "id": "be820a5b-d77d-42e0-87fc-aaa29e16e61c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "9841ba9d-c135-4621-a6a3-b6713e148b21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "be820a5b-d77d-42e0-87fc-aaa29e16e61c",
        "cursor": {
          "ref": "372dafa2-decd-48cf-9e45-46bd6e9f40c5",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b41cada4-aad2-400d-9c99-2b092d4934e5"
        },
        "item": {
          "id": "be820a5b-d77d-42e0-87fc-aaa29e16e61c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "9841ba9d-c135-4621-a6a3-b6713e148b21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "9b4baf90-516b-46eb-87a3-36b6d18dcc00",
        "cursor": {
          "ref": "b0171808-625f-4ba6-b984-f058f90fad45",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a475b23b-af2c-4044-9d1e-20038d946d03"
        },
        "item": {
          "id": "9b4baf90-516b-46eb-87a3-36b6d18dcc00",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "5a084374-1f19-48b5-a5c7-0dc660d114b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "9b4baf90-516b-46eb-87a3-36b6d18dcc00",
        "cursor": {
          "ref": "b0171808-625f-4ba6-b984-f058f90fad45",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a475b23b-af2c-4044-9d1e-20038d946d03"
        },
        "item": {
          "id": "9b4baf90-516b-46eb-87a3-36b6d18dcc00",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "5a084374-1f19-48b5-a5c7-0dc660d114b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "81b4288f-e817-4e88-ad84-4b3139eaea49",
        "cursor": {
          "ref": "937ae65e-85d0-451b-b0d3-2775258f8d7b",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4b87544c-9c91-4a67-bff7-af1e152de541"
        },
        "item": {
          "id": "81b4288f-e817-4e88-ad84-4b3139eaea49",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4a7bda74-5912-4908-9f80-72d2147b7d10",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "81b4288f-e817-4e88-ad84-4b3139eaea49",
        "cursor": {
          "ref": "937ae65e-85d0-451b-b0d3-2775258f8d7b",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4b87544c-9c91-4a67-bff7-af1e152de541"
        },
        "item": {
          "id": "81b4288f-e817-4e88-ad84-4b3139eaea49",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4a7bda74-5912-4908-9f80-72d2147b7d10",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "801d8d5c-464c-435a-98d7-0b89462acc9e",
        "cursor": {
          "ref": "8966d4d5-7067-4626-869c-d60d9dcef3bb",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4476f7c0-67ab-49a5-8270-98ec698e94f2"
        },
        "item": {
          "id": "801d8d5c-464c-435a-98d7-0b89462acc9e",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "3ae9ee14-5eb4-45c3-b740-7dfe4eaa4178",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "801d8d5c-464c-435a-98d7-0b89462acc9e",
        "cursor": {
          "ref": "8966d4d5-7067-4626-869c-d60d9dcef3bb",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4476f7c0-67ab-49a5-8270-98ec698e94f2"
        },
        "item": {
          "id": "801d8d5c-464c-435a-98d7-0b89462acc9e",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "3ae9ee14-5eb4-45c3-b740-7dfe4eaa4178",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "83a3b86a-23b6-4430-96f3-ee1e0e5e8729",
        "cursor": {
          "ref": "c13b5369-cc67-46f5-bb03-58dcd0ce40b6",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "aa3797b7-e6b0-4292-98b5-4b94743d3fc5"
        },
        "item": {
          "id": "83a3b86a-23b6-4430-96f3-ee1e0e5e8729",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "db2b57d2-76b8-4cf1-80a4-ab243663204d",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "83a3b86a-23b6-4430-96f3-ee1e0e5e8729",
        "cursor": {
          "ref": "c13b5369-cc67-46f5-bb03-58dcd0ce40b6",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "aa3797b7-e6b0-4292-98b5-4b94743d3fc5"
        },
        "item": {
          "id": "83a3b86a-23b6-4430-96f3-ee1e0e5e8729",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "db2b57d2-76b8-4cf1-80a4-ab243663204d",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "89b44fc3-44df-4528-b2a0-a16a28c15fae",
        "cursor": {
          "ref": "9310476a-6b04-4ffc-8153-7a58927b3fe5",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f16c2e30-af8c-4448-95bf-2d0cfca9d44c"
        },
        "item": {
          "id": "89b44fc3-44df-4528-b2a0-a16a28c15fae",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "98ece8ac-f834-4781-a1bc-63fe00ba2cae",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "89b44fc3-44df-4528-b2a0-a16a28c15fae",
        "cursor": {
          "ref": "9310476a-6b04-4ffc-8153-7a58927b3fe5",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f16c2e30-af8c-4448-95bf-2d0cfca9d44c"
        },
        "item": {
          "id": "89b44fc3-44df-4528-b2a0-a16a28c15fae",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "98ece8ac-f834-4781-a1bc-63fe00ba2cae",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "d147afee-9fa1-43fd-b32a-623a50d65df8",
        "cursor": {
          "ref": "9b7a18c5-0261-498c-9e0d-39efdc48735b",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "13ac6703-8da3-49e5-baef-ba4d7b706c80"
        },
        "item": {
          "id": "d147afee-9fa1-43fd-b32a-623a50d65df8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6ba225cf-3d38-4a94-918b-80b4031ad642",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "d147afee-9fa1-43fd-b32a-623a50d65df8",
        "cursor": {
          "ref": "9b7a18c5-0261-498c-9e0d-39efdc48735b",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "13ac6703-8da3-49e5-baef-ba4d7b706c80"
        },
        "item": {
          "id": "d147afee-9fa1-43fd-b32a-623a50d65df8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6ba225cf-3d38-4a94-918b-80b4031ad642",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "7ea9c869-ab70-4352-963f-390bebff056e",
        "cursor": {
          "ref": "d36a738b-0c7b-42ed-8f4a-c86042dc9034",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1855b8a4-adbc-4807-aaca-d0a6866f2c8c"
        },
        "item": {
          "id": "7ea9c869-ab70-4352-963f-390bebff056e",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "c6612958-fd2e-48f5-92b0-df63276f5560",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7ea9c869-ab70-4352-963f-390bebff056e",
        "cursor": {
          "ref": "d36a738b-0c7b-42ed-8f4a-c86042dc9034",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1855b8a4-adbc-4807-aaca-d0a6866f2c8c"
        },
        "item": {
          "id": "7ea9c869-ab70-4352-963f-390bebff056e",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "c6612958-fd2e-48f5-92b0-df63276f5560",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "eadfa352-4c9b-4f00-a812-11e96b6acde6",
        "cursor": {
          "ref": "256b4bfb-3e13-447a-966b-7617067df161",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8dbaa575-fa40-444c-bdc0-48f00193eb82"
        },
        "item": {
          "id": "eadfa352-4c9b-4f00-a812-11e96b6acde6",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "98862015-adae-4a67-8654-d8018d2f4bce",
          "status": "Created",
          "code": 201,
          "responseTime": 50,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "eadfa352-4c9b-4f00-a812-11e96b6acde6",
        "cursor": {
          "ref": "256b4bfb-3e13-447a-966b-7617067df161",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8dbaa575-fa40-444c-bdc0-48f00193eb82"
        },
        "item": {
          "id": "eadfa352-4c9b-4f00-a812-11e96b6acde6",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "98862015-adae-4a67-8654-d8018d2f4bce",
          "status": "Created",
          "code": 201,
          "responseTime": 50,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "77fe6259-eb73-4ba8-9fb0-17c1c513b723",
        "cursor": {
          "ref": "3a9d0a99-4e80-4ddc-8e09-3ba1b6ac31f0",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dad1fceb-4f0a-4c98-8b8e-4e5a67924736"
        },
        "item": {
          "id": "77fe6259-eb73-4ba8-9fb0-17c1c513b723",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c240e744-498a-4de0-b68d-d7d9e16af931",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "77fe6259-eb73-4ba8-9fb0-17c1c513b723",
        "cursor": {
          "ref": "3a9d0a99-4e80-4ddc-8e09-3ba1b6ac31f0",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dad1fceb-4f0a-4c98-8b8e-4e5a67924736"
        },
        "item": {
          "id": "77fe6259-eb73-4ba8-9fb0-17c1c513b723",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c240e744-498a-4de0-b68d-d7d9e16af931",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "eb556364-d4a6-4fc5-9454-58b564d5bfa8",
        "cursor": {
          "ref": "432e822a-474b-4abb-ae89-24f94e5ffd83",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "59166d8d-c48e-4c71-bfde-594750c13613"
        },
        "item": {
          "id": "eb556364-d4a6-4fc5-9454-58b564d5bfa8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d72a788e-acf3-4730-a284-225fec2faf56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "eb556364-d4a6-4fc5-9454-58b564d5bfa8",
        "cursor": {
          "ref": "432e822a-474b-4abb-ae89-24f94e5ffd83",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "59166d8d-c48e-4c71-bfde-594750c13613"
        },
        "item": {
          "id": "eb556364-d4a6-4fc5-9454-58b564d5bfa8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d72a788e-acf3-4730-a284-225fec2faf56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "996a6dc5-0c55-4c8b-8932-da029388a4a8",
        "cursor": {
          "ref": "72aaee74-fdc3-4fca-ac40-9a5c993b9f86",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5b7629df-169b-4cd1-9152-54c0b9eca26f"
        },
        "item": {
          "id": "996a6dc5-0c55-4c8b-8932-da029388a4a8",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "d1ef3f20-589b-4f90-ae01-057f89c5af3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "996a6dc5-0c55-4c8b-8932-da029388a4a8",
        "cursor": {
          "ref": "72aaee74-fdc3-4fca-ac40-9a5c993b9f86",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5b7629df-169b-4cd1-9152-54c0b9eca26f"
        },
        "item": {
          "id": "996a6dc5-0c55-4c8b-8932-da029388a4a8",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "d1ef3f20-589b-4f90-ae01-057f89c5af3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "01458641-4dd7-4ab1-9789-ed8f641b5914",
        "cursor": {
          "ref": "6856ccb8-5a59-4ee4-af20-a6cec3b8ea9c",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8e0657cb-300a-49b1-ae12-9376975f5690"
        },
        "item": {
          "id": "01458641-4dd7-4ab1-9789-ed8f641b5914",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5fd467b7-762f-41ef-815d-23d4c30783e2",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "01458641-4dd7-4ab1-9789-ed8f641b5914",
        "cursor": {
          "ref": "6856ccb8-5a59-4ee4-af20-a6cec3b8ea9c",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8e0657cb-300a-49b1-ae12-9376975f5690"
        },
        "item": {
          "id": "01458641-4dd7-4ab1-9789-ed8f641b5914",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5fd467b7-762f-41ef-815d-23d4c30783e2",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c949b0f8-b402-4a0c-9516-7c3d986d377d",
        "cursor": {
          "ref": "d750393a-0c65-4fe9-9e37-f145d883111e",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dc44ec11-d3c6-4a32-b165-614b89714283"
        },
        "item": {
          "id": "c949b0f8-b402-4a0c-9516-7c3d986d377d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7254e679-7411-4050-a71a-577b7fe67c94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "c949b0f8-b402-4a0c-9516-7c3d986d377d",
        "cursor": {
          "ref": "d750393a-0c65-4fe9-9e37-f145d883111e",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dc44ec11-d3c6-4a32-b165-614b89714283"
        },
        "item": {
          "id": "c949b0f8-b402-4a0c-9516-7c3d986d377d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7254e679-7411-4050-a71a-577b7fe67c94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6ed80f4e-c190-4330-aa12-bf4c7c99c2de",
        "cursor": {
          "ref": "fbbd1345-97dc-496c-a8fa-0f4835f6c1a4",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c4be711b-1323-432a-a9be-d3e466156184"
        },
        "item": {
          "id": "6ed80f4e-c190-4330-aa12-bf4c7c99c2de",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "7de21c4d-d380-471c-bf1b-2ec297d6d530",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "6ed80f4e-c190-4330-aa12-bf4c7c99c2de",
        "cursor": {
          "ref": "fbbd1345-97dc-496c-a8fa-0f4835f6c1a4",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c4be711b-1323-432a-a9be-d3e466156184"
        },
        "item": {
          "id": "6ed80f4e-c190-4330-aa12-bf4c7c99c2de",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "7de21c4d-d380-471c-bf1b-2ec297d6d530",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "6dccc373-4af8-4f1d-8f37-8e64819cb180",
        "cursor": {
          "ref": "7af1052b-c7bb-4367-a4e5-b5d2f65ac781",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ffcba23f-2498-407f-ac13-9a0bd727378c"
        },
        "item": {
          "id": "6dccc373-4af8-4f1d-8f37-8e64819cb180",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "adbb775f-b486-4ded-a669-2777aa997994",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "6dccc373-4af8-4f1d-8f37-8e64819cb180",
        "cursor": {
          "ref": "7af1052b-c7bb-4367-a4e5-b5d2f65ac781",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ffcba23f-2498-407f-ac13-9a0bd727378c"
        },
        "item": {
          "id": "6dccc373-4af8-4f1d-8f37-8e64819cb180",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "adbb775f-b486-4ded-a669-2777aa997994",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "66b72224-dead-4cc9-b8c8-277a6d9b4f7d",
        "cursor": {
          "ref": "50d200ec-e222-4c18-a404-394e7a30e214",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "20325670-f371-410f-b319-aed239b67dea"
        },
        "item": {
          "id": "66b72224-dead-4cc9-b8c8-277a6d9b4f7d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d47eec40-5e95-4183-beb3-7a05c6599aea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "66b72224-dead-4cc9-b8c8-277a6d9b4f7d",
        "cursor": {
          "ref": "50d200ec-e222-4c18-a404-394e7a30e214",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "20325670-f371-410f-b319-aed239b67dea"
        },
        "item": {
          "id": "66b72224-dead-4cc9-b8c8-277a6d9b4f7d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d47eec40-5e95-4183-beb3-7a05c6599aea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "3550f79c-c5fe-4abc-bbeb-f38ec556684b",
        "cursor": {
          "ref": "64ef16a3-8527-4dbb-b8a0-c116285be695",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "dd91cffe-b1ff-4362-9a3f-b825bd07c963"
        },
        "item": {
          "id": "3550f79c-c5fe-4abc-bbeb-f38ec556684b",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "5e62d94d-9fab-4951-af6d-8df7c6e2930d",
          "status": "Created",
          "code": 201,
          "responseTime": 86,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "3550f79c-c5fe-4abc-bbeb-f38ec556684b",
        "cursor": {
          "ref": "64ef16a3-8527-4dbb-b8a0-c116285be695",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "dd91cffe-b1ff-4362-9a3f-b825bd07c963"
        },
        "item": {
          "id": "3550f79c-c5fe-4abc-bbeb-f38ec556684b",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "5e62d94d-9fab-4951-af6d-8df7c6e2930d",
          "status": "Created",
          "code": 201,
          "responseTime": 86,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "08e5cd00-c445-43c4-9584-66fc941cf8d1",
        "cursor": {
          "ref": "84207052-1a4a-4806-8997-8f54a4a5375b",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3f700e8c-4cbd-4c2e-be56-17c4e67df186"
        },
        "item": {
          "id": "08e5cd00-c445-43c4-9584-66fc941cf8d1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "54013647-ab65-444d-93cb-7bb733221824",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "08e5cd00-c445-43c4-9584-66fc941cf8d1",
        "cursor": {
          "ref": "84207052-1a4a-4806-8997-8f54a4a5375b",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3f700e8c-4cbd-4c2e-be56-17c4e67df186"
        },
        "item": {
          "id": "08e5cd00-c445-43c4-9584-66fc941cf8d1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "54013647-ab65-444d-93cb-7bb733221824",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "63b0a1ef-6b2a-436c-b6d8-82c9194be9fa",
        "cursor": {
          "ref": "2abb1d89-642f-429e-ba1b-3a17dddd0a0b",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "da8342b3-c6c0-471a-8329-44987e94e4b6"
        },
        "item": {
          "id": "63b0a1ef-6b2a-436c-b6d8-82c9194be9fa",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "725700ea-ed63-4426-b6a2-1a90fef65ca3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "63b0a1ef-6b2a-436c-b6d8-82c9194be9fa",
        "cursor": {
          "ref": "2abb1d89-642f-429e-ba1b-3a17dddd0a0b",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "da8342b3-c6c0-471a-8329-44987e94e4b6"
        },
        "item": {
          "id": "63b0a1ef-6b2a-436c-b6d8-82c9194be9fa",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "725700ea-ed63-4426-b6a2-1a90fef65ca3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "8b621c44-6251-4b6a-9755-a473c3c86ce6",
        "cursor": {
          "ref": "868149cb-903d-4344-adad-09d50995f923",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c686bd75-fd1b-4a5f-9c8f-69816d433db7"
        },
        "item": {
          "id": "8b621c44-6251-4b6a-9755-a473c3c86ce6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2f2bc37d-bc5b-488b-bf95-a5e34fbbf2d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "8b621c44-6251-4b6a-9755-a473c3c86ce6",
        "cursor": {
          "ref": "868149cb-903d-4344-adad-09d50995f923",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c686bd75-fd1b-4a5f-9c8f-69816d433db7"
        },
        "item": {
          "id": "8b621c44-6251-4b6a-9755-a473c3c86ce6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2f2bc37d-bc5b-488b-bf95-a5e34fbbf2d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "1ce90d87-bf95-4bde-93c1-62c064345054",
        "cursor": {
          "ref": "fa245aa4-d44f-4c4f-ad8a-a97997d653bb",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c62fed52-f8b8-4bb3-bb39-cb4a94fc4b99"
        },
        "item": {
          "id": "1ce90d87-bf95-4bde-93c1-62c064345054",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "17367489-034f-4351-a703-6e996216f882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1ce90d87-bf95-4bde-93c1-62c064345054",
        "cursor": {
          "ref": "fa245aa4-d44f-4c4f-ad8a-a97997d653bb",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c62fed52-f8b8-4bb3-bb39-cb4a94fc4b99"
        },
        "item": {
          "id": "1ce90d87-bf95-4bde-93c1-62c064345054",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "17367489-034f-4351-a703-6e996216f882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "901c0b16-69bd-4a12-aab1-62522dab7548",
        "cursor": {
          "ref": "6d25baa8-8a97-4203-b845-33c2901de7bb",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "93b95e30-0729-42a7-9691-63d47996f416"
        },
        "item": {
          "id": "901c0b16-69bd-4a12-aab1-62522dab7548",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "5481dcbe-af3c-4071-961c-f3b614c68444",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "901c0b16-69bd-4a12-aab1-62522dab7548",
        "cursor": {
          "ref": "6d25baa8-8a97-4203-b845-33c2901de7bb",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "93b95e30-0729-42a7-9691-63d47996f416"
        },
        "item": {
          "id": "901c0b16-69bd-4a12-aab1-62522dab7548",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "5481dcbe-af3c-4071-961c-f3b614c68444",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "17439970-9beb-4c44-a924-f348ca7047d8",
        "cursor": {
          "ref": "d874077a-212f-481b-9133-eeb096667302",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4ae65dfa-f8fc-4a96-9eb7-61d180a02933"
        },
        "item": {
          "id": "17439970-9beb-4c44-a924-f348ca7047d8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ae40e93d-0753-4dab-809f-1d53c3891cfa",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "17439970-9beb-4c44-a924-f348ca7047d8",
        "cursor": {
          "ref": "d874077a-212f-481b-9133-eeb096667302",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4ae65dfa-f8fc-4a96-9eb7-61d180a02933"
        },
        "item": {
          "id": "17439970-9beb-4c44-a924-f348ca7047d8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ae40e93d-0753-4dab-809f-1d53c3891cfa",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "7a32b4a5-7763-4570-b6d4-d90bee2fa7a1",
        "cursor": {
          "ref": "69c5dea2-fb5a-47ea-bf97-290deabdff5c",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d087c752-a08b-4487-af39-17b2fa7234d0"
        },
        "item": {
          "id": "7a32b4a5-7763-4570-b6d4-d90bee2fa7a1",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "7a222287-2eab-44fb-b453-25b6df341dc6",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "7a32b4a5-7763-4570-b6d4-d90bee2fa7a1",
        "cursor": {
          "ref": "69c5dea2-fb5a-47ea-bf97-290deabdff5c",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d087c752-a08b-4487-af39-17b2fa7234d0"
        },
        "item": {
          "id": "7a32b4a5-7763-4570-b6d4-d90bee2fa7a1",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "7a222287-2eab-44fb-b453-25b6df341dc6",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "9ebc9e2c-ab2c-4510-92d1-295864c25ccf",
        "cursor": {
          "ref": "528aa664-06f7-4802-a8f9-669820b47955",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5dfacbd6-5a92-44b2-8830-36bea980d345"
        },
        "item": {
          "id": "9ebc9e2c-ab2c-4510-92d1-295864c25ccf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cd7990e6-0336-4dd8-b303-6a9eda6d5ea8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9ebc9e2c-ab2c-4510-92d1-295864c25ccf",
        "cursor": {
          "ref": "528aa664-06f7-4802-a8f9-669820b47955",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5dfacbd6-5a92-44b2-8830-36bea980d345"
        },
        "item": {
          "id": "9ebc9e2c-ab2c-4510-92d1-295864c25ccf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cd7990e6-0336-4dd8-b303-6a9eda6d5ea8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2a8d26cf-7b92-4751-9ccb-2c08fc01d95a",
        "cursor": {
          "ref": "5c8312a7-faeb-48e3-8b40-0ee733b94ef8",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c8933c5c-d815-4f67-bcf7-51839d0f6453"
        },
        "item": {
          "id": "2a8d26cf-7b92-4751-9ccb-2c08fc01d95a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "27d6568b-6b41-4bad-8c04-c605f759cfad",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2a8d26cf-7b92-4751-9ccb-2c08fc01d95a",
        "cursor": {
          "ref": "5c8312a7-faeb-48e3-8b40-0ee733b94ef8",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c8933c5c-d815-4f67-bcf7-51839d0f6453"
        },
        "item": {
          "id": "2a8d26cf-7b92-4751-9ccb-2c08fc01d95a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "27d6568b-6b41-4bad-8c04-c605f759cfad",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0a170ba5-01c6-440d-9c6b-8d96b1d0a112",
        "cursor": {
          "ref": "875ea0ac-ca77-4663-a5c3-f4996e065071",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fc4fdde4-3c4c-4018-9a3d-115e1bcdfe84"
        },
        "item": {
          "id": "0a170ba5-01c6-440d-9c6b-8d96b1d0a112",
          "name": "credentials_issue"
        },
        "response": {
          "id": "66b46e4d-cc79-471e-9fcb-effda8b1669f",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a170ba5-01c6-440d-9c6b-8d96b1d0a112",
        "cursor": {
          "ref": "875ea0ac-ca77-4663-a5c3-f4996e065071",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fc4fdde4-3c4c-4018-9a3d-115e1bcdfe84"
        },
        "item": {
          "id": "0a170ba5-01c6-440d-9c6b-8d96b1d0a112",
          "name": "credentials_issue"
        },
        "response": {
          "id": "66b46e4d-cc79-471e-9fcb-effda8b1669f",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b79998-0f57-4323-ac09-fecb92108aaf",
        "cursor": {
          "ref": "1a4300be-ebb6-43e1-afd7-6f666d95973b",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5845fc59-5cd0-4f1b-82e5-7771c6cad592"
        },
        "item": {
          "id": "60b79998-0f57-4323-ac09-fecb92108aaf",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d9c92312-935d-4488-ac47-7e6da6cd63dd",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "60b79998-0f57-4323-ac09-fecb92108aaf",
        "cursor": {
          "ref": "1a4300be-ebb6-43e1-afd7-6f666d95973b",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5845fc59-5cd0-4f1b-82e5-7771c6cad592"
        },
        "item": {
          "id": "60b79998-0f57-4323-ac09-fecb92108aaf",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d9c92312-935d-4488-ac47-7e6da6cd63dd",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "2e1800ec-aabd-4223-81b5-d279c37d4ec3",
        "cursor": {
          "ref": "205eefd3-4771-40f1-81d2-c56d941727f4",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f75972ef-4414-468f-ad7c-c39637f0904d"
        },
        "item": {
          "id": "2e1800ec-aabd-4223-81b5-d279c37d4ec3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b6ed3615-6e8d-4f5d-a3e3-6441c068f665",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1800ec-aabd-4223-81b5-d279c37d4ec3",
        "cursor": {
          "ref": "205eefd3-4771-40f1-81d2-c56d941727f4",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f75972ef-4414-468f-ad7c-c39637f0904d"
        },
        "item": {
          "id": "2e1800ec-aabd-4223-81b5-d279c37d4ec3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b6ed3615-6e8d-4f5d-a3e3-6441c068f665",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c9eea7-1fe7-4eac-85c4-73936d896ad3",
        "cursor": {
          "ref": "edd6f1da-e5f5-4f6d-999c-5e81a822afb6",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9fea2e9b-3154-4c6b-9ee6-d7722f90f575"
        },
        "item": {
          "id": "31c9eea7-1fe7-4eac-85c4-73936d896ad3",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "95b547e5-0102-49a9-a2b4-d1121bb1b112",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "31c9eea7-1fe7-4eac-85c4-73936d896ad3",
        "cursor": {
          "ref": "edd6f1da-e5f5-4f6d-999c-5e81a822afb6",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9fea2e9b-3154-4c6b-9ee6-d7722f90f575"
        },
        "item": {
          "id": "31c9eea7-1fe7-4eac-85c4-73936d896ad3",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "95b547e5-0102-49a9-a2b4-d1121bb1b112",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "94057ebc-c2ce-44c7-941e-4a009cedbc53",
        "cursor": {
          "ref": "bab02ef6-a3cd-4620-bc3e-cbe948adc48e",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e2a5f857-9862-4333-8ebb-c927773061ec"
        },
        "item": {
          "id": "94057ebc-c2ce-44c7-941e-4a009cedbc53",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "140d582d-4407-4a01-b842-a29f4ce63b9a",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "94057ebc-c2ce-44c7-941e-4a009cedbc53",
        "cursor": {
          "ref": "bab02ef6-a3cd-4620-bc3e-cbe948adc48e",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e2a5f857-9862-4333-8ebb-c927773061ec"
        },
        "item": {
          "id": "94057ebc-c2ce-44c7-941e-4a009cedbc53",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "140d582d-4407-4a01-b842-a29f4ce63b9a",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d3f980-4fa0-4116-ab17-c8ad8715b725",
        "cursor": {
          "ref": "23831d55-a36b-429e-842c-379c2cafb04e",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ce1ca6c4-f061-4360-8c85-c98abea80930"
        },
        "item": {
          "id": "b8d3f980-4fa0-4116-ab17-c8ad8715b725",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "39040b00-c310-4484-be9f-3567e9326c5e",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b8d3f980-4fa0-4116-ab17-c8ad8715b725",
        "cursor": {
          "ref": "23831d55-a36b-429e-842c-379c2cafb04e",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ce1ca6c4-f061-4360-8c85-c98abea80930"
        },
        "item": {
          "id": "b8d3f980-4fa0-4116-ab17-c8ad8715b725",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "39040b00-c310-4484-be9f-3567e9326c5e",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ed073841-18ae-432c-9cdc-5c66917589c3",
        "cursor": {
          "ref": "1766da18-696e-4b78-8add-e0350b3d1480",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bc57a272-24bf-4520-857a-cf6aa23caac1"
        },
        "item": {
          "id": "ed073841-18ae-432c-9cdc-5c66917589c3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2d56af66-acef-41ea-8372-5f76936c5a08",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ed073841-18ae-432c-9cdc-5c66917589c3",
        "cursor": {
          "ref": "1766da18-696e-4b78-8add-e0350b3d1480",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bc57a272-24bf-4520-857a-cf6aa23caac1"
        },
        "item": {
          "id": "ed073841-18ae-432c-9cdc-5c66917589c3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2d56af66-acef-41ea-8372-5f76936c5a08",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ce440d0d-3561-45bd-893f-599031dbe1a6",
        "cursor": {
          "ref": "fdfd5769-b8c6-4297-9c34-1eb850b218dd",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2962c304-6b85-4311-8116-a9881b34ca20"
        },
        "item": {
          "id": "ce440d0d-3561-45bd-893f-599031dbe1a6",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "9d8e2885-4f49-4513-b990-50836395b83b",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ce440d0d-3561-45bd-893f-599031dbe1a6",
        "cursor": {
          "ref": "fdfd5769-b8c6-4297-9c34-1eb850b218dd",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2962c304-6b85-4311-8116-a9881b34ca20"
        },
        "item": {
          "id": "ce440d0d-3561-45bd-893f-599031dbe1a6",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "9d8e2885-4f49-4513-b990-50836395b83b",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "61c0faae-a02d-4640-8e9c-e49ca482b318",
        "cursor": {
          "ref": "d342be01-2b55-4bf7-9075-e5799cc008bd",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8604179e-f46a-4517-925d-46c4d58a7ce2"
        },
        "item": {
          "id": "61c0faae-a02d-4640-8e9c-e49ca482b318",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d136aa5d-2836-4a58-96b5-ecc43cf9de92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "61c0faae-a02d-4640-8e9c-e49ca482b318",
        "cursor": {
          "ref": "d342be01-2b55-4bf7-9075-e5799cc008bd",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8604179e-f46a-4517-925d-46c4d58a7ce2"
        },
        "item": {
          "id": "61c0faae-a02d-4640-8e9c-e49ca482b318",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d136aa5d-2836-4a58-96b5-ecc43cf9de92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6067b8ce-e46c-4b3f-8072-c72bade6fb74",
        "cursor": {
          "ref": "5f15e9a3-383f-42aa-ab52-9a0a77e36941",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b070a101-ae9f-4053-bcaa-65e99db78dfe"
        },
        "item": {
          "id": "6067b8ce-e46c-4b3f-8072-c72bade6fb74",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3f7555b8-9c59-4d95-ac55-242314faee33",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 7,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0192b2a6-b59d-4a6a-a1a3-0f4176b29f61",
        "cursor": {
          "ref": "9c93c623-83c9-4236-bdb2-e497dd4007c3",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2b7d188e-8d26-4def-b0a5-ad6cc06abf49"
        },
        "item": {
          "id": "0192b2a6-b59d-4a6a-a1a3-0f4176b29f61",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0349adca-3131-4fcc-b2e2-042c72d8718d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0192b2a6-b59d-4a6a-a1a3-0f4176b29f61",
        "cursor": {
          "ref": "9c93c623-83c9-4236-bdb2-e497dd4007c3",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2b7d188e-8d26-4def-b0a5-ad6cc06abf49"
        },
        "item": {
          "id": "0192b2a6-b59d-4a6a-a1a3-0f4176b29f61",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0349adca-3131-4fcc-b2e2-042c72d8718d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "be7ed470-97b7-4a46-9c03-eece07e388fb",
        "cursor": {
          "ref": "084ae692-f51f-4b29-b54b-d84645ac9d0b",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7f395c72-d48f-44bf-959c-38f7f4cd2ff9"
        },
        "item": {
          "id": "be7ed470-97b7-4a46-9c03-eece07e388fb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "96500ea1-bd76-49c0-8d32-ffdc2bea11cc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "cf3401d3-0748-43b6-81a1-d65043e7e1c0",
        "cursor": {
          "ref": "3f5b1ee7-f214-4117-9621-4115a261897a",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fe3370cf-2f72-435e-b0d2-1c6d7a19dcf9"
        },
        "item": {
          "id": "cf3401d3-0748-43b6-81a1-d65043e7e1c0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b5affae8-8e30-4fdf-b98a-745a790150ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "cf3401d3-0748-43b6-81a1-d65043e7e1c0",
        "cursor": {
          "ref": "3f5b1ee7-f214-4117-9621-4115a261897a",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fe3370cf-2f72-435e-b0d2-1c6d7a19dcf9"
        },
        "item": {
          "id": "cf3401d3-0748-43b6-81a1-d65043e7e1c0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b5affae8-8e30-4fdf-b98a-745a790150ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "05e5a3f0-5154-47a9-b953-66862060bc5a",
        "cursor": {
          "ref": "77768948-f408-4003-a7d8-87f657fa846d",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c7ffb24d-a5ee-4413-9a14-7209c6e328d1"
        },
        "item": {
          "id": "05e5a3f0-5154-47a9-b953-66862060bc5a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3a0e5db6-3624-4f94-80d5-00aa5a840e74",
          "status": "Not Found",
          "code": 404,
          "responseTime": 7,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7f1de3bc-83ac-4d20-bbdd-dfcb955677e6",
        "cursor": {
          "ref": "02a8db3a-b3fc-4599-a69e-a2975ecaad95",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "030a8f5b-472b-4b02-9443-6d7eea0d545c"
        },
        "item": {
          "id": "7f1de3bc-83ac-4d20-bbdd-dfcb955677e6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bb5129c9-7e54-43ab-bb21-1a55065b3cfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "7f1de3bc-83ac-4d20-bbdd-dfcb955677e6",
        "cursor": {
          "ref": "02a8db3a-b3fc-4599-a69e-a2975ecaad95",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "030a8f5b-472b-4b02-9443-6d7eea0d545c"
        },
        "item": {
          "id": "7f1de3bc-83ac-4d20-bbdd-dfcb955677e6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bb5129c9-7e54-43ab-bb21-1a55065b3cfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "be7234a0-f5d3-441c-88f7-c5773e3e2458",
        "cursor": {
          "ref": "4ad91a33-80ce-4d90-a79a-d585382d5a43",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3e54093d-7a85-48bc-a9d8-8736b5d5c2ce"
        },
        "item": {
          "id": "be7234a0-f5d3-441c-88f7-c5773e3e2458",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9d1303d6-98ed-40be-b56f-c5bd8aa8ccb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "d7768627-5fd4-43f6-b645-6151efc139bc",
        "cursor": {
          "ref": "aa33ff9c-5c37-447a-8f0c-097233aedaa8",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "42d5f707-fe05-426f-bb65-065a03924049"
        },
        "item": {
          "id": "d7768627-5fd4-43f6-b645-6151efc139bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ecc2a71c-f6b5-465a-b587-bf07c47ab358",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "d7768627-5fd4-43f6-b645-6151efc139bc",
        "cursor": {
          "ref": "aa33ff9c-5c37-447a-8f0c-097233aedaa8",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "42d5f707-fe05-426f-bb65-065a03924049"
        },
        "item": {
          "id": "d7768627-5fd4-43f6-b645-6151efc139bc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ecc2a71c-f6b5-465a-b587-bf07c47ab358",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "964dd1e2-c306-4fc6-9a13-dffbb3629477",
        "cursor": {
          "ref": "5da30b9b-609a-499b-8c1d-cdc7ae43d108",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ef7b50cf-8d21-4f3b-b170-c1ccef772350"
        },
        "item": {
          "id": "964dd1e2-c306-4fc6-9a13-dffbb3629477",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "4e42ca9b-9911-4200-8418-68846a0461fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}