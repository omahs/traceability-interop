{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "606dc15f-facd-4924-ab73-51a9847924e8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1502e5a9-7960-4731-9843-1a526bd71339",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1028fc12-9ccb-4549-94cf-a6067579c7a6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "566d7f62-f9fa-412b-b8f2-e8556bc117e1"
                }
              }
            ]
          },
          {
            "id": "5ebde86b-e850-49be-8eeb-8fef9d9f6122",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d87169fe-7076-4505-af0b-06f410b80fe9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9ebee16f-ab67-4125-9b1a-600c10ab9f84"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a253c3b8-bd86-48d3-9aa6-28b2edb2a850",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "af1c4bba-c13b-43e7-a9b3-033b8c74a70c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e404a4cd-e9d1-492f-bf04-7f8740f9910d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5ffe370-5115-483a-83c9-eb86293d0dcd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "badce7b3-300b-42aa-a2fe-7010898ac1fa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e32e2e37-8283-4165-b4e3-4c326eea4291",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0175e61e-2550-4cf0-ba6d-c2ac8a707cde"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c345709c-c393-4a6c-9856-2b4fd59a85fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7440d1e-9a36-4bb9-a329-758e291dd624"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f373f3eb-a810-4369-b9db-251a91190ab8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "628fb7c9-6458-4bac-a05a-173e415b7481"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96c7ca31-94f8-48b5-8194-638e29eaaae1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f8ce6f2-86fc-41de-97b7-54b48a927dbe"
            }
          }
        ]
      },
      {
        "id": "ebe2acaa-7216-4d75-807c-64a6da185807",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "26b73b2b-32a6-46d5-b595-499c161539be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76de379e-2f3e-45a6-9271-ededc5826d87",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3280bdf6-26c0-4119-9456-1a311daf7df2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be0134b-a59f-4348-a6b1-dee0a5bca54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34766c4f-7a52-40ea-88da-a4ef4e23056a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c026d2f-9054-44c3-a63f-842fd39a1905",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adb25ab-88c8-4a2f-b513-7de91f5788a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32d3ce7b-8698-4cc3-8b6d-ba81e9568291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685c5a36-b99a-4a06-a996-7740a4d59c8a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d807e63e-67b4-4bc5-b1cd-ecf29a3c7bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34818245-0b36-4d2a-bdf2-6a7cd2f50d7f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "176f8030-0e01-4ab6-98d2-561716d65291",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80651044-8a56-4c78-8d58-fefc558a623b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804a4d36-a1f1-4038-9e35-5b2c3511e31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0b08bdd-6689-47d3-8d0d-4ae71458c075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd837b6-2573-4449-9253-95232cdec9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4f5dc4-d5f1-409d-b7fd-8aa300f4274a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cdec5d7-d936-42df-b1cc-d6a802355b62",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9def3b6b-903d-4916-a91f-46bc5877070f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2ea6350-a403-4f40-a814-a281d984fe7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6622dd-b46d-4bc6-bab8-0c3ce7469905",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "af9d52f5-155b-4bef-8a98-86a63ef785a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c61ee6dd-4776-4852-b0f7-5b00f456602a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6f8071ff-f934-4f84-bd3a-6debe9a6a701",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d76ccf55-f4ed-4e15-b86b-33eedcd5340f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dabf9aaa-0e2f-4a9c-9fc9-bcfcdea80a1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41d95f97-e29f-4fbd-b799-c85d7eda4062",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "29513829-3850-4847-b544-39e1c8bda004"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16b1207a-b026-4bc4-9ab9-18f8721593ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0b7142e-cbb5-4d89-bc3a-dfc26bd67e13"
            }
          }
        ]
      },
      {
        "id": "2cf0df4d-eaa9-47d0-af2c-74b98b414008",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fb10fcdc-31ea-4ede-a8f5-5fca6c31a204",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e091892d-2658-4c83-ba54-afd80f5a5919",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "46728032-f750-41b2-a5d4-f02997034143",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cc9878-039b-4d51-aaa6-5167c09c668a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e8163e-b8ed-43c0-8519-8678e0377857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7fc45c-5711-4cc9-9e37-0eca64e7e2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52a92372-a7ab-4e29-92c6-35c09f384315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f01611-ee8d-4124-a369-164c7e9a021d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3376d3fa-3139-4087-95f4-7e2e9a1e759f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497e733c-6c8e-4a4e-935e-40f2b85b13ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11553eb0-7793-405c-8f49-841dc3acb1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d307b30-ba24-40f6-85aa-2687aaa46dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c444cab9-358c-4269-a896-6997f39fab85",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b771c531-85bb-4efe-82ac-9508ec93b7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c095a811-90b9-44db-a7a1-cc04be029e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699c8ef6-f07f-46fd-a444-d47edff3f0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "827d9c51-0941-4f1f-993b-90e42aa23667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d03c499-fcec-4abc-93b4-01e997c3200d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267194be-3282-4da4-9bc0-c34074032879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b672bb-6c41-42a8-bfab-b8d20c0d89fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bfae96-3ff8-4450-95d4-b926b354fbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "844c9696-02ac-4c78-aa78-585f0badd751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8590c38a-5fc7-4941-b0b8-cbb894018b2f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8652f1-c7aa-4103-bfef-9d2c58318f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff2113b3-9751-458a-b055-769cbda72e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d763e96-80e6-4241-b244-f44284d2dff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e62fcc91-cba9-4234-8323-e900fa48c9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ff053c-dbbc-43ce-aa59-bd86954b20c9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d564769-fb16-478b-bb8b-ed7626332a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbe4177-defb-45f9-94a9-069584318216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49d3bce-e6fe-4c7f-9eb9-dd63ca187b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b250abb-d701-4077-a92e-07f3132c3fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a7d9d8-1e6e-4dac-a4b2-a4d7fc9ae21b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe4b603-1250-4f5e-b85a-a4df1d8cdbd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de26ae4e-7eed-48b7-abad-37d0687d67b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679776ab-bcde-423e-b6d3-4394204750ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "186aad33-bc37-4358-aa15-26f17215d42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddcfada-fa54-4dd0-ba4a-095f63b2a563",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f3d7d7-6bd9-4258-adbd-6854791269e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98c654d-0635-4d19-8c1f-2cd6ba1f373a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66277aac-856c-4e58-ab0a-de5fa50009a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d001f46-e4d0-4c82-910f-29d528e93ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d12d083-31a6-4457-b42d-93803a54a2a0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683c4720-1086-4c08-ba3a-9632208f2917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ce76d9-493e-4c7b-9e41-3775400109d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767faaa1-d960-4310-92d4-bcaefc043815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d519e40-44fe-40c5-908b-1ae790a0057e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a5d290-7712-4684-9344-088e176e20be",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154cea11-2a3b-4b34-ad3a-48a96e945a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e673ff70-ee70-44b1-b353-f256aa3d80fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a19db1-d453-4849-91b4-cb6764e59bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1b35d7d-c3c1-4051-9167-4321a9e3aa62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5730e0ad-ff70-449f-b78b-97eb428bbf3b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee608e30-956f-49da-9daa-b4422a5a909c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a60a6d-0709-499b-8f1a-0cfa051524b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53816f04-7ca7-4e12-a5b1-abe2ebc6e829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0b85d16-2ad5-4206-8f3e-f5d524c41ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9cd83b-63f2-4320-85a6-cbf7cbb49680",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ed4588-0934-4e84-9d26-ff9359bc2613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbefceca-be2e-4063-aebc-e94a0e4975fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48a715c-300f-43e1-9fc5-1b8f35da992b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61111bdd-37e0-4853-aecf-c1ecf56b3f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d35a83f-15d6-4ebb-ad54-e598f269cbe5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a83c4a-ac6b-458a-974a-a24ea0edcf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a56bf6-1853-47c3-80fd-a0e854ac04ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22438c7d-d4ab-45d5-830b-3c5934782b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80c2c76b-7892-4d18-b347-8ce3cfb008dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb845dcb-f46e-4618-a8fe-64525ef38f54",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372a5f82-6ebe-46cc-ae4f-e01491c832ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191e12b2-df28-4e75-91e0-ca89264acd06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314a8b39-d699-4c9c-9da0-d5a8637a82e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "928c336a-407c-4a33-b2d2-db45aefe09fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8087cd34-858f-481a-9620-4e8cb09dc3df",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd81980-8829-4df1-95cb-1e6eea6cf31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9df733-8267-4d1b-ab1f-7ea4ec4c7ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f080085-e791-42ce-821e-e9d274e1aa74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0bb67b3-99e3-48b9-9789-6e2a4ff315ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb54092-c232-49a2-a1e0-19042e8240e2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d783b20a-db15-4e14-a5e1-f825272e6b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c1898cc-7656-45c7-b530-76b0acc153e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51031e80-21dd-4166-9a8e-d5c8fb564ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c26af4a-b117-427a-9d13-5ff4699a0a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0e08a8-1e91-400c-8f3e-e174a6c25681",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0d921a-a5dc-4fa6-b85e-30932cfdb71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090a1b3e-727b-4b22-beeb-330e059d80a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144d0439-1a60-43b0-87c9-f9874fca5378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dad8b013-5a65-4ae6-bcfc-24cdb799d841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663f9b6c-71a3-43bd-871e-c7f1cb068159",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d89981-2e99-4e40-b1b1-1f957d66b39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8f67a2-19e0-4831-9a65-5dc4daf33ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5cbef3-906b-4e78-a10e-2370ac4c273a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d175495e-6c60-4b3b-af40-fc592fbf13d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92320a83-f4dd-4b9b-abd9-7cd6815193dd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a148eb-4490-4d78-8c79-cc199d893907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f215a02-471a-44f0-bff8-ea0f355f0665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8508fc9-ed61-477a-adaf-53c69861b6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a5b0b89-ac6c-48e9-9c36-6838fcbf7773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecbc53b-0381-4e0f-98ff-27b9ae639a82",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce46113-a786-496d-a2d2-d9d37709752f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85f4240-fb24-4839-ad17-81b052bb8167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ca1b34-a9ad-4d62-9ea6-ed8aa09e7c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef79e7a8-63e0-43c9-8a9b-f76fce55367b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdd8986-cef1-4761-919c-1c2addfeeb29",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9632d669-7f3e-4871-a911-36fb6b049a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1642751-e3f4-4e9e-b6b5-c2e3afed48cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec31efea-7be1-4672-af50-79571e9f246b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a8f692-5487-4a2b-9591-88b928c891d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38e4af2-66d3-4555-87e3-f737896bd4ec",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f98055a-d716-4c40-b4e0-a06b70224ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c5047c-a94a-4b21-be2b-7ccf2b4ad468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af79601-529b-4114-81e2-0ac8d1217d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10f9ec61-f969-4f8d-b08c-79a0de7c0170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b925c9-c8c5-4c5a-b29a-c1ca4b2d1f99",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428ca1f9-5ec6-4819-975f-7f878d368d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52f5071-a83a-4aa5-be8a-b6a58f0b880f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f980124-0c7e-43b9-90c8-873da20a6dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35ba3249-fec4-4ff5-ab3d-bb8c44c3e71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b04d6c-5499-4590-82b7-39746d7cf0a8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e9ef26-109a-4c22-bbe2-2e36706b0e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8576643a-8dea-49a1-870e-065feaede0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0130ff-bb60-4d7a-985d-b92c26176b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ce540b-6817-424e-b012-afa158f59872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84829fdd-eb41-4e3e-9385-f5854fbc5791",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c782ffa9-2b7b-4aaa-8507-61813eb86cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d48c593-8fe3-4954-89cf-420876655fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958ced0b-8a79-43db-9b91-296daf0aa76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9130f7bb-0f7d-4d61-9aa0-25bf2fa894ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a616ce39-f818-4c08-9287-122c92d61dbf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d06156-2d64-40f9-828d-de05423682cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63435fb5-3563-4310-8b34-7ce044b894f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0447cb0e-7224-4aad-8763-271cf6290e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eb54a15-e89c-4299-bb74-e7c86c674cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95853011-21f7-4830-a1ec-b4f8abbc1df3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2329ede1-51e4-4722-b89a-c775f523353d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75650dcb-47a1-4b58-8653-73b285b63eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408d77e0-8c8c-4aab-bf70-3246a16b7656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f5d8f0-1540-468c-b247-54a2efc2b7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4d09ca-fd0d-4084-b502-8e0307a5175a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3052e7-b137-445b-90e9-7399f20439b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4743779f-cf43-40e5-9ebc-c7300c4a86c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1980724-9d60-42d6-9293-1d5217b44658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b42f2e3b-6b35-4f9b-8ed0-32b2849efdb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dc58d3-d01e-4fc1-ac92-9b8bdc83182b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28cacf2-c47e-42f2-9261-d9bf07c0388f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3554af9-829e-4abb-aa38-5ae8b96a89f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d859f750-40e8-4385-a1ca-023a350f6f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c22c025d-e10f-4750-aad9-39d312139631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22017d29-761d-4e1f-8cab-ef9df35ddb51",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e7aa64-06cc-4ff2-8bb1-aa3c3a46a4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba1a984-3a83-4004-9f6f-d801129c251e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7739bb-5316-49e8-a5e8-68d53b299504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "842c6bc6-2dc0-4c72-9fb5-11eefbe9342c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f8c25a-f057-47c1-a2f7-1d614174ed73",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3793b73e-3bc4-4392-90c1-c233c0f4db71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ded1aa-2e3a-4ac7-8152-b68ed824fafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b541fc6c-e2c2-4b25-8f31-651e1a45d5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8db2d798-60b2-40f0-9bc2-2a4cc088d173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14913ad7-342d-4aaf-83f7-2c61ae52fe44",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3434b795-cdee-4a96-9e56-136a1a86ab0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ec36d4-1ac8-4fed-8e2e-b1e05832542e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af394a3-b167-4375-a645-bfe74debd2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0af2db28-88df-40bf-b75c-5f7356e3ae8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b01813-4afc-4332-8b9b-e032ddb8cb57",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f944eb7f-ffe9-4848-bb33-0616807e63a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b82d208-36b5-4cc3-9230-563926925e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb33e9d8-ac0a-4496-8047-3f43905cb3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "952d293b-ce83-4692-bccc-7e651e33b664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4c53ef-b9cf-4b70-8c45-8ae17e95bc54",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64df67f1-0d16-4ac5-894e-65a62a6db488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0121ef98-3d6b-4e11-97b0-9be37312ccda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f00e23-e6d4-4098-aad4-65b86ec2ca77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b96e1b39-1ea4-406a-a07c-897d4322841a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16102398-371c-44de-b4f4-965e3ced2cd9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96347c86-f96f-4615-9a99-9979c8584005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4afa252-b302-49c4-bc9f-3dced9c21ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e301e583-e1c3-4789-8e15-2833416dba01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "252ad117-b04e-4fbd-a1b6-5dca7a9d658f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90056d51-255e-43c0-9b86-394b41eb3cb1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d6f8a3-55fa-4d6d-9750-ecbf87172f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f712d3-c6a5-44ea-bd04-fd92d8a7deee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bdb0fe-c514-4019-9809-34f053e02448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d80ab2e-bc9c-4131-ae99-07ae970dfceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f15589-c66d-4e7d-a331-21d8ea3e03c6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abc44a7-581f-4cb1-a60d-94d820fc7f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e5319e-6639-48eb-aaaa-edbe375f353e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76768b68-ae7f-4cc4-b739-3b5ed388304e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2009f20a-18dc-485e-8aa5-73ed8fcc81fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e5980b-3271-4564-af03-90514aff62fe",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce2371f-7efb-44ad-897c-e32cab59041e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f91dd6e0-1c3c-45bd-a6cd-8611b1903b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee20821c-0259-45cc-be49-c5db3a16b8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "453c2cd4-76f0-46a5-a86d-96bb276a187b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca55e105-3eae-441c-b0fd-2340c57a508d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2e9d7b-cf5d-4de3-8105-17c6a05474bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f07bb52-eec6-4f96-8ae3-cbdba9bc7dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1aec12-680f-429e-8597-ddbb9a72ebd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4352754-4836-4c47-a810-7992c6fb84d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c31651c-395b-4bfa-9013-97893b3bbca9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c583f3-86e2-43e5-adb8-171f147c42f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a6524a-ab91-49d3-ae40-ff12f1a7da46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74db45fa-7c3a-4773-86fc-74995b5bd829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba71a00e-0370-41a7-9640-015dd16db050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cc38c3-cd06-4d91-a87c-24b558df2bff",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89aec739-83c8-413c-b2f3-1e8e7cec02d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0446e39b-9f5e-4988-9f59-7bbb4cd2a3cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9ae424-70e3-41b6-b3c4-6053bda9b2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b97302e-1a38-4796-923e-1aaa8e671932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bb1368-fa5b-44a1-91d0-7e00334842e1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6561fd23-6c5b-47af-9386-0d915d5b4669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56398038-40e5-49aa-9bc9-ed725e85787a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33b9786-e7ca-4bbc-9bac-6aadb5d4bffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cca4678-ff41-400c-b9a5-b539fa9a2904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bccd3ed-ae16-45ed-8e3c-eca02b18e1a2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f84c53-7082-4913-86aa-17438d4bd1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833d56d2-65f3-41f1-8262-5a16fe6961da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422d951d-3f45-4e0e-8eaa-82c825dfd8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa40535-0796-44e2-860a-314d3c633e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d369111e-25eb-4e5b-bbab-00da42478da1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4833ec-dada-4c55-b5b8-742a79a37bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d890f97b-690b-4493-b09a-1f25ad26a786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee98e55f-0f95-4a88-8be9-2f7da670aee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d3eb90d1-489a-42a6-be99-57f08dfb7761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab72c76-0d5d-4d5f-b146-60e0c2434560",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf6a6ba-97f7-4c5a-98da-b151222d7828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d13933-c618-4a55-b6aa-06ba621555c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31417b38-fd3f-4d3e-b6d9-d035e1d05612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdd7e05-f03f-4fc0-8f33-e666b51775f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262224a6-c0b4-4b84-9478-4c6a07ccc12e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14aee7c-f8d4-4355-9ef9-8954f5158b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20312ac2-d639-42bc-90be-2bb01316a727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17f0bd4-a18b-46f7-b868-c1b8cba21184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "39be5c43-f9b0-43af-bba0-6af2a30017bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4f337f-4b35-4294-85d7-1a4426d6b87c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cd9d33-1835-4371-a1b6-aa65e7be32c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b4761a-9140-494b-863a-9b0fce6588b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2a98f0-b005-4bb7-9cb6-11c0ec8e431c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a31fc47e-f572-46ca-ba24-203af4e633e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f490974-6cf7-4d52-b81c-a580d8e3f163",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2ff019-34c2-4c8e-afe2-c0ca2348d506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8913e075-4ec5-4e4c-a1bf-a20d1ccee592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbb7be1-6e98-4763-baa3-369eb421dd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "513e3d6f-3d04-4fa5-8f04-7668f2d32cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3b6183-2865-46c3-a0a1-40372d7a6bda",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bb2610-05fe-40e6-aa4d-10a52d32a065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c210ec-f852-497a-a857-aba412595675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d71d3f-e1bb-46d1-a8b5-f3e246178378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e59d311a-397f-4b75-be76-277729479f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c49c30a-67c2-46f1-8851-f015ddbd5994",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84aebfb-06f6-45ec-9baf-0da528165b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013de068-2272-493a-8a96-326529461216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c46228-cbb1-42e3-be7f-96f9ddcdf2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b836465-9e13-4925-8ba9-3c56592b3601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68962890-cefe-4502-99bc-d681c00b4c43",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92edbdbb-01fd-4fef-a0c2-4362fedc519d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6180ca70-9f40-44aa-b42c-8beed6c99cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8660b152-5dd7-414b-b975-0a0024955385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f64ab5-1ee8-4b49-9fd6-56a1568d6d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3950392-87f7-424d-92c0-8d35c815b486",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ef6507-c22b-4541-adef-e6b350e241af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7516064-225f-4a94-ae7f-6de5b96a8845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d57b5ca-8416-4bd0-9b88-d8cd9a6ba621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41ab922f-8266-4b6b-905d-bf12bf57605d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a14e810-1357-40e6-9ba8-a6be46a61d7a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a11d01-52e2-4239-a7d7-9b41144d3d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a4e495-39ab-4d1c-b8f7-b6f0dd3ee0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20de3d46-cb00-49cb-b159-975fa47f02f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba971d5b-b971-44f6-98eb-cfb05e450f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63aa8ca5-59e8-4afa-b7a2-c212988600d5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb799d6-3ae2-4c16-9a42-76f8a061dbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac449028-6406-4b34-94a4-96f3f3b68b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1caf4f-cf20-4804-96bd-f7628872c767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b94c39b2-6d56-4061-ab8e-87130557a0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2645ead8-b68b-4922-abd2-b74690216b14",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb04508b-5a9a-4633-a511-ed2f5c1bae78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554b97ff-3abd-43cc-bea1-2322fcbec862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8aa400-d69d-4fc1-9542-956751bdb5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1df62532-2936-45ba-971d-8e09184a972b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5baafa-9f1a-4118-9c2a-af18ec7072b6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa08fc3-acfa-4d57-88c2-af144f37eb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a11ae58-5622-47b6-a0b6-edd299606484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8e6bfc-5c5f-4f6e-a965-af45cf934d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ec3245-56ba-402d-8056-6446e146fd36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4c95d8-d674-4dac-bb7e-e5d9e1639e46",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96385f4-eda6-4a8f-912c-59a65a8948b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371c87e4-183f-477c-9dcf-ce6b2f0ce31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd3674a-e650-4042-bc59-9f97ccaf4c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "497ad885-a3af-42bc-be0c-420ebf30c2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fb1902-2c3c-4145-9de9-7157fc3887e6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064945ff-b3e5-4736-a81d-25b656231ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2f6650-801e-4f46-9f5f-ea95ae9a0d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b1fefb-87cf-4aa9-a61c-a959fe4885c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "06f61a86-caee-40dc-8185-5b304aa59491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914fcbc4-7cd8-4daa-a412-47d673dc443c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9a1330-0812-4cee-95a2-5942a2a7723e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5daa042-ba77-4188-9e07-12753c2fac26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd2b28b-6507-439b-8837-e2edccc68a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c98db9a1-654e-41b8-bd4d-5e0203228568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33666fe-b524-4423-a513-d06ae2e456e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1aba5ca-07be-4bd7-9052-a28bbd133f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f718b38-5828-4405-a0a3-3a80f4dbf0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c7108d-5d4c-4f64-9934-f910931ecae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1e55c3-bccf-485a-9f49-84ea7bee0885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7056f25b-163f-4c9e-bd7b-0c02e7cc5d55",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c49907-9d88-428d-8505-a80726314386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a317137-eeb7-4647-bd34-f4d48d9f8911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658bf9ee-228d-48ea-8364-2d9ae2c02742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c37c646c-951b-4a7d-8b94-1f8150350bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc4dd10-268e-4624-abd8-ad6be944ee3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b94e6d8-d850-4b52-98b6-99d2c351023b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3af688e-8e11-47bc-9322-66d2a4e40180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf956b4-814a-4dc5-ba2a-01287f7aeed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6021f5ad-5c8f-4f12-8e9a-1f403ffd0442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b5b4a3-aba7-49cc-819d-a5c400bad9b1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6147ca48-c652-4cb4-b987-a61a4cd129fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6bdefb-cb80-4cc6-98d5-2acc0d13a81a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b228c090-b2e0-415b-9adb-f8c9dd104db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "54a842a1-05b2-415f-9869-a7465b94bb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb883cb-3e69-4447-91ee-76319e564c5b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c944528-cc69-4605-b2b8-cb62bc719d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224454cc-a283-41b2-b4c6-3720de7a4510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fc12e3-574a-4d06-865a-667018f087ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "99ebfc02-3856-4d2d-8486-bcc6ec2e033c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a377bc9c-4012-4267-ae97-47663a454381",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e1df48-5801-469b-a419-b288ecfd357b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d599e9d-f8f2-4fea-903b-f6d920dcd664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9d7883-7d85-43f1-b20a-f7c00470c485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae1a2c6-9b1f-47a2-a3be-107eea10cad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efebd5d-d331-47f8-baa1-b1185e2e824f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59803776-1371-4626-b0b3-415cec5b03eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19af71a-5e11-4649-8537-0d10080d0dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6928dc5d-d828-43db-b573-63c3b6e77719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13fddcf9-4774-49a5-b061-bcb237b4be33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cc97a5-fa23-4634-bbe3-6d5232d628c0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8854ccb1-59d9-41eb-816b-b53e424e47b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93e98b1-2384-4dd7-8820-a5d7393fa237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f011d3-77d5-46a8-8821-756d6524233a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09c50706-84f5-4363-a85d-36039193d975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2c0c1a-dc17-4bd7-876e-56b470b7210d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d128b3e7-e10a-44f9-8ba6-3553d7076a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f44f040-dd21-4558-ae56-86da79a1f53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd1b227-23a3-4519-bd35-a85344eb36d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16c82ee3-b536-498f-8417-867d1d7363b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c6a712-0ac1-4f63-a6b8-e03bdcef4a3e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aceaae2-8ddf-46f1-9bff-88d41cc79fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e06f47-5de6-4eb6-8041-bb4b315b2a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fdff83-cbe4-4cd1-b468-789076dd555d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6ae58b-3461-4857-a2b7-e3cc3429e447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1663d8f7-ea0d-4881-a0c7-f8f3e9239662",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d09ddba-f2cb-4a0c-ba27-03150704dbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49e3926-8658-48da-a9a1-8ff4eef68030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac9d83e-1071-45b8-9168-22ac59c5fca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "34a974de-304d-477b-bdbf-54d57cbebe76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1981e1-5134-4b39-aae5-5461af9632fc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4147b81f-ec40-4a75-b2eb-beba882717fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9b2c55-d92b-4815-aa41-a6b60855c82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81db3940-d51d-46c8-8e3c-8f303c021a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "86d48f93-5689-4da0-a116-47cbb8c83351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a0c0cd-e4bc-4dc7-ac56-7b887941dc58",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da01e7c-0094-4467-a6ed-315779d719aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068bed4a-864a-4143-85e4-55c0aff99a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b652682-1fbe-45a1-afa9-1e0a5714978b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff448d8-c126-42a6-977b-89332c7cf7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbd2f55-f13a-48a6-8b8f-ed20669f3aa2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d81b44-1873-4010-a241-bee7691c87aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21245f21-5762-4e2b-8d98-0794d727386b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e4974d-8fa3-468a-a107-ac78dd07ebdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2ded22-5a9e-4b56-aa14-da0fbbff7ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e6e580-dc38-4b2b-8017-e5e406404d16",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920a3ff1-762c-4e0e-813e-762333cd947e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c28a92-ca7f-405d-82a6-908bb7bebdc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6cd575-b5f4-4736-9e2a-5f1f65e13359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2150e8a-f5e6-4156-80d9-21ae51f10799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4220b8ef-4741-459b-b281-fb2b7ad006ea",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767bb38f-72e3-471b-86ce-f6da437c8523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9589baf-6207-45b4-854f-d32e0d909eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d54647-62f5-4bbe-9d95-c3c06c69242e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a30af489-3f10-477b-8fa4-0e28b1a6c251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3394ee8-2e03-40ea-ba0f-642438c9f908",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a0a210-face-4e7c-80f3-f7d597b4dd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1070bd-4b04-43d2-8abc-0cc06a95c1d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6079b0d2-0a6b-4eb3-ab5e-cbf9815f4d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82be9a55-5d49-4865-be16-136090a2a42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4cfaa8-f07e-4183-b099-79e5454d548b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c50154-f217-4ec9-8388-6353edda0b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb9541e0-57d1-4403-ae52-fd487e41d375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c17613e-2c7c-4b3c-831c-605aaa4e975f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9df748b-7fef-4f4d-a381-5d1367ffbe94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdd8cd6-ac83-4c3b-9132-7c456a5f4b3d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ba9fbc-1763-416b-9767-d670d635851c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9975265f-0233-42a0-be25-611f26e8a67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4cf559-8fbc-4978-88e6-267a4b6ea853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2188897-8428-455e-9cfc-f179d6ae6757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242d445b-8bb5-4f01-afa0-444fb8fa6b90",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a78f205-cf8f-4101-8c51-ff5f5ecda1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbfe3c84-49f0-4cf9-a674-38dcd68f5489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd4e667-4e77-46fa-818a-88e0a45ffc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "669e7cf9-eed1-49e7-8651-38da6e0e0d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d998bf8f-c409-4014-8e70-5b4b581fcef0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b391d2-2c4c-4b91-8d5f-25841b97638d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9674ec-d055-43ed-8700-0ca0f5025dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d3e897-e929-4c73-8940-cca916a51bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0da80075-c1c0-4454-826e-0f2a5ca3fb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6656f73-05de-4306-938f-244beee5cebd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd44fbeb-7d42-4122-a863-bf7c2fe731f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59ce219-99f3-4caa-9fc3-29442f4494ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26953ada-d7ef-4349-8c16-108854a43165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29278e42-555b-4304-af58-42f9851b722c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b19c0b2-6d78-484b-a014-460cce1ef021",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70998762-9fc9-4bad-93f7-25fbd4d75a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d27f8c-0397-4207-9576-aee269b90c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdd2590-e815-4de8-b3ed-329e38377cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7666a30-88b7-4d07-922d-e1fc4ee985c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a385623f-c103-4ff7-9a89-93430d2b78f5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d5d61b-e6b5-4dd2-9833-2fa9919ed77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ac790b-f01b-43ce-8336-9c250acec99c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51528986-8d3e-41b3-869e-6e9c6bb8207e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c2ebb4-3d7b-42c1-a265-3e8acab6cdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb3f9d6-4042-4a95-bd1c-b9d1611a75f9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3000858-f393-4aa7-a6f8-724789bc0feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33228cdc-773f-43be-b77c-e4ae9a99769a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9da4d3-d7e4-4cd9-802b-0c2cc13ac541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d06076a6-669d-431c-bade-54d3d82b5115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2a9313-ad14-4505-9187-ae6e78aab472",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e285db7c-783c-4161-9e14-acb4a8d4722e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a86e627-5e36-443d-8074-447fde2893b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e20feec-3808-4333-b571-24f628fc2588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad88c156-2c8b-4588-9752-24985a3a3473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22ecfe2-3593-49cb-b3d9-98462c233043",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d953e476-f106-407f-86ec-f1bad850caf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a94f44-fb2e-48f6-84f8-671ce8e6fd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d04fe2-9c64-4757-8e25-fcb12f6a168b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42c0dc16-24e4-4a61-8392-a34fe949fb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660f491a-05a4-47f3-8029-27166c9d8e2c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4b7eed-324c-41a7-a739-eff50c08584d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498cec89-7193-4e9b-bf5a-1e23e035fd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec1567c-a21a-4646-82b9-37f4b9c42803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f570485f-33de-41a0-a283-ddea7ae13c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6a9c6a-0d73-4277-ae5f-f53d55c9b7d3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfaf9e6-8a58-4305-80df-93f1722223fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62308d66-379c-4f10-9566-95808a5f3f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33d47d5-910d-4454-b9a8-a460a5147576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "936c1a60-bb42-43ee-8c16-8bd279841239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46db0b41-a434-43d5-9ae9-de4dc803e858",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cdd87a-278e-4a85-802e-0e785e5444e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4613c6-6892-47cc-b731-aac30fc6177b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f748882-898e-4f53-b9e1-1f5d0c8d88f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccfdfdd4-294f-46d0-bb59-7f2cafc93153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b87a9b3-f609-4a18-b18b-18fccb1b5ca2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114598f2-42ed-4a59-9720-651f776784da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f5be35-f2e5-4e5a-b197-7a086f0b455d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315112ee-a445-4251-a7ec-117538bac0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "26481eb3-c124-455f-9d6b-26a14f7b7df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bec669-e3d4-44b3-ad41-75c2f2cf61c9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0700e351-cf5d-4fe6-bbe8-9fe61d1d7d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff90be32-7e62-435a-8918-44cfb7965a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17a5406-bef7-48af-9d53-bfefa871c3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d07453-f90f-4545-8272-bfe09bb4b6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb729db-11a0-4ed8-beea-52778310346b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac9b49b-8e3f-4ee0-a9b7-e12dcf20e1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c91652-2b47-446c-b792-c79ba3dbee82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b9504c-042d-4cf1-ba7e-0ff2169b718f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "72681157-fa18-4832-8708-c67eed1fa508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009518e5-61af-454e-b804-343b18b3373d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83214c3f-a893-48ee-a871-9b616a93a761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a086ad4-136e-403e-8318-959916e3873d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d5dcdd-b908-43f4-8ef0-67540ff4c025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e76df8-2df7-429d-8146-81d30ea5c036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0d4abf-91af-456b-887d-ed09b3141668",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12f4235-a3bf-4afa-baaf-d4c51878ab6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "70bbffde-7c47-49cc-b36d-6ed971345f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e6d00d-cfb9-4578-beec-8cb1263009f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "24cb5c1f-8652-40f4-bcc4-715c3cd20225"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a1bdce83-3f29-49d8-b447-19836900c252",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c39f85e1-6b74-4824-bf50-8b1921afce17",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed862c50-2385-47b3-bce1-47b823b0b951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e477410-a10d-4a9c-89df-72cf79626b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2809df02-ef28-49a6-9610-cca29dfe9c00",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4e7a15a3-3617-43d5-a48d-fef99d0fae90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70292a7-05b6-47b9-868b-5ed24fe19b52",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f2d79f-7f5c-42ec-8cf7-af89fa7842cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8df5b11-14ef-4690-8fb0-1ba41ad87733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a00dfdd-621d-4da7-97a0-02f88cf55389",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "de37ec53-80ea-4a11-83d4-17362c92e311"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5826ccde-c73f-411c-b951-7519ebfd74eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88c91f2f-afb8-444a-b8eb-a044944ad161"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e705f0c-621d-4240-b30e-ad152597f4a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c2ea3dc-bf19-4198-849a-2c82b65a8c14"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac5a44d0-a4cd-44b1-80ce-02abd6022979",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13757b33-2eed-4858-8faa-e762cc384d0f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ceab1ce0-9a1e-43d0-bfae-80561a8f1c67",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c90cfe46-a473-4cfe-8873-79d14393c54b"
                }
              }
            ]
          },
          {
            "id": "54563ee1-97e2-478b-b508-953a3edab514",
            "name": "Positive Testing",
            "item": [
              {
                "id": "859d4a67-321e-4946-a695-afe07a3428e9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1abb9677-f684-451f-a93c-3f33b257f601",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aaa37cad-562a-4fee-9ec5-9c79b3b7b5f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da6f5225-090b-4cb9-a9fa-971533c116cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "417bc89d-039c-4e77-8855-0d485b206f0e"
                    }
                  }
                ]
              },
              {
                "id": "07084e5e-07d6-4a74-b91c-29fe14bda618",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fae0f225-8639-4fff-830d-f5ee1d930942",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b6bc992-dae1-4ff8-b1a4-1037e8b4e582"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e98a6ed-00c6-4107-a0b1-ec37be14cfe9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eed2ecd3-61cf-47a7-9a9e-8a4eebdc145e"
                    }
                  }
                ]
              },
              {
                "id": "b2bd477f-1914-4d08-b191-8878fb87a76b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14b2604f-dd20-444b-96d0-80938c9f7784",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8656d36d-1757-4255-857c-bfaff9d1c44e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d116be86-4582-4ea6-a3d1-0986763a0261",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "24ee266b-9fdb-4bb9-ac62-53a6298cbbfb"
                    }
                  }
                ]
              },
              {
                "id": "edd08f72-bc47-41cb-8086-c20d8c11f328",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6da9c595-2e0a-42e4-89dc-80a49ae13aa3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ff8bfa7-b4f7-4536-887a-ada72b2cfb13"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f76fbe85-b02e-4964-bfa1-7e2b24591ccf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c8d02bc5-9996-4309-a7c7-1db2b941b01e"
                    }
                  }
                ]
              },
              {
                "id": "5c555595-2896-451d-92c2-a5181e42d717",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fac53c09-6f2e-41c8-81ee-c4a65b755733",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c64fa8ca-8db4-4c93-9adc-8aedf92511e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96f096b9-13be-422c-913e-15b1a3c203b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4f06a473-38cc-4592-8b3e-27916dda55b7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "172e0996-51b5-40b8-a5af-2207bbc7ec60",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4052b9ee-06e6-4a1c-b28e-909904b93f51"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad0db216-1250-410b-ab5b-bb1b85f2bb03",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66fdb8fd-e513-4ab9-9f78-d6854baca15a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0736051-01d1-40bd-8e6f-e250b865bbca",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fe7a51ea-0203-42e9-87b9-a6ccd73b4332"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d480d2a-1502-4024-9a2d-7abe72eb423d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4c9b6ee-06d6-4128-8d58-34ad28f570d1"
            }
          }
        ]
      },
      {
        "id": "4519ca38-31d6-4639-ab02-d63a1277e4dd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8fd49307-02b6-4a48-b9f5-511b112a17c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95b086c7-116d-43f0-bfb2-fb41b7cb4a95",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44cf4eef-cc63-4ced-9086-5cf3c9f31a4d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a495ea9-729f-420f-b6fc-b9ec07ab6ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d085aa5-ac15-42df-bc50-6bc33933cfcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981b300a-bcfb-4b81-93fc-f93dfebaa174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d24c5d-47fc-4a45-a0c8-3825a57bcfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea459452-eed0-4954-b0f5-88898c86e8a8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e940a3-160c-442f-9e48-d028f51cebe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4abc899d-299a-4c93-b642-90a874173a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c8bc30-251e-4ea6-ae5f-0212ee77cf04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c302f357-ccfa-420e-9e34-8357d1061776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060a6708-1e0d-4a2e-858e-868dfbbcd9a7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b748f7a6-eb7c-4f03-a819-84fb50ae0bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da58e8a-999e-42ce-8d6b-32bd922aac09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8799a1cb-b0c4-4bbc-b89c-c6fb03c54282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c57d7b4-df1c-4821-9f58-fb058cf9ca01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c25ab88-f717-4b00-ada8-17d510563fca",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f937072-3482-47b1-ba01-56d0e1f7488a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a8b347-48ea-4eb2-9449-2bd4d7a4eb89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2577d591-a0ff-49f8-806e-29374b590a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "375000e5-0521-4f31-9afd-042e0c3806b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd48b9c-62cf-46c7-b688-1e167a3c78a2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53829e06-bed2-41e5-a0ef-60af3a846073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34675b73-57b3-4587-a580-24a7af83c0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378f4224-7f5f-4c9a-8900-dab52125554c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee0e0b5-cb15-41c8-8609-823359041ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc03da3c-5856-4b09-aaa6-0b0ce4d639b2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312612bb-ecb0-4a35-9ad1-666062a30fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5462b36e-d4a1-4d2a-82d6-980d8d8e7da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e72e701-a276-47c5-aed1-f48bd7b040ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c311764-5d71-4aa9-a35c-0c81ef64a945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30abc825-ee54-4387-83a4-4dfffb22b6b2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f73869f-2312-4e64-87ae-02abf6c1b1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071dda56-b920-4d85-ab6b-76ba1b8f4d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2d3251-9805-4193-bbba-d14041a8f3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbab5cf2-8d9c-4d33-bc2a-5497a1aff7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872f5fdc-bbde-4530-b6f1-3eee7a3ddc1c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f0a6a7-ff4f-4c86-812f-0cd085001860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1e55f7-dd9d-480f-85e4-7bd9a7a843ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2adc7237-d3a0-48a7-8608-81798386fcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2346d9e3-5514-42a2-8760-94828c4cd353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fed6b43-3158-4efe-b45e-fb0e4c61bef3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667604c4-1d58-4c57-8390-ab20b1d2ca1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f901331-1d5b-4787-98c8-41220a147a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8459fad6-1933-4958-8e4a-0cc8b23ead80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdec8289-71e3-48de-ab67-6c67805186c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5898d8-d495-46ab-96e0-0a8779234bbc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15482240-b60a-4f4f-8804-2fe2bbd68a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb61147-5755-4ba3-97b7-ba4fa922a574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a675930-ab4a-4df6-aac7-7255e715bd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9a6937-d3d8-41d4-80eb-e9d6fd16d81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094c1bd7-3243-4f35-b343-635a7a8725ed",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49f427d-3947-48c9-9a8c-e7b505a33b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a47112-7aae-464d-a28f-e35b0e4d5852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfbe3d4-0fe5-467a-a2cd-4508836d970c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d8d739-c43a-4022-a6c1-dbec6e3f947a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce769b98-aa97-4848-b569-981dbfb7007c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf210af-3e45-41c3-81c7-022e8258a0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb3acd1-9fbe-4b1d-85e3-7ac8dc9e4cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c23733-0365-461c-8276-8457d62eda3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "95b880a1-7498-4b5b-909f-682873cc8e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beab3272-6ed8-463e-80dc-16f6ffc59dad",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c8ea0a-47fe-437d-affc-454a0e61f299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea181c4d-db0f-490e-b9b1-cb367c460a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71f489d-88f8-4c56-812e-437788e469bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1a9bc3-3dda-4806-93ba-ae02401d1360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a23fda-4f58-472b-92a0-897ad0d46d5a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1251dddd-d14d-44da-a860-f92729dddf63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460619f7-774a-4482-b05c-3b497de1a425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80f63d0-71e9-4e8a-8638-65efb33d5cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "66458aee-0e9e-434f-92fd-161ff9f49f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6d83bd-5184-4424-a5c4-532af3faa635",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc40d0f9-cc6e-4d51-98f9-60d76f0b33f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc548af9-cb23-429a-9464-1cc33ab8c583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2442d8-dff4-4269-bf72-d4135c7dfdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1b5be7-26db-4cee-9496-ed015f5f39ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76675482-b610-4ce4-8296-a676a6c356e5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029c6138-274f-43f5-acff-a89b00dcb01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e235b046-5de0-404d-bba5-41419ee99934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feed9fb8-b9c8-4b39-9f9f-791a13581089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a23f307d-5697-4615-9752-f1fa8abf0f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e4a50a-480a-4c87-9e1a-95abb1a7bace",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19eeaca4-53bf-4028-9a2e-3db685c2851a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11c1b49-4799-4077-8798-a20457bfd18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac56dd58-7b23-47d1-b061-b9da64e04ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "128052a1-566f-459a-b2e6-26bf4d34ba94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3826c950-c35f-4a47-9715-4b824ef87124",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d5f7ed-63be-4f7b-8cb3-1c7029f77f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5146c95a-479c-4612-b5e7-9c761a65eb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89537a39-8e4b-40d3-ab00-0f39ca240286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "29986c53-889f-498f-a7a1-a47a096d8051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d142a4b8-b721-4b2c-aca2-9baa68ce9a3b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a79adf0-7d45-4d7e-a846-525dfb435078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb46d862-ba1d-47ac-b6db-df287677b76b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcdb483-2fc3-4312-9fd0-01503cfed997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "864004b3-a995-42ac-b58a-3d062a063f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbefa282-1858-49f4-b234-c6dd9e425364",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe570cbb-5d4b-4f4b-bbab-da8020f0fc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1cc2f3-6daf-4271-9de3-7451b79b67d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10426cb0-37ab-4fb3-afa9-1ca0cff83558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78e3325b-2735-47dd-8987-cb69f90cdd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3bb2b0-6512-497c-b852-ac55899c7715",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef726156-60af-4374-8626-8447ccc19e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abde58af-19fa-44b8-a322-325bd7674d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803fa701-3a7c-41be-972a-4750ce5f98b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "623dfd4c-e0b1-4461-b56b-54942065c1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e525e2b-d9f7-4b11-bbfd-3ea8b5be4348",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9d4247-4f94-48e4-afef-db6313461b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008c7a8f-5ae7-4714-98c1-033bbaaa37c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4431eda0-c30b-4baa-9dfb-a71958289950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f69adb63-a836-42f5-b691-7b8582141a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0ae6ee-20c5-470c-8609-92e557cc2f52",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64577e20-0450-4281-b88d-802675ae506f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe4735f-1a2e-4efb-abfd-244e84b0c4d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bb2856-5a06-4de6-91e9-2a2430922e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01a24511-9f49-4d8f-987a-6cd1df6aa2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20718e36-ef9f-4a59-a8f2-ea6f9beb15a2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfc3110-b519-41fd-9093-d903c4368d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55c4209-455a-4224-af03-83c268077373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a767ac-f0d3-46c7-9f02-89fda6ca5750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "caaf37df-77c5-4d2a-b569-c6abd04224aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2681500-95dc-4173-a171-0f9e5369523c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7a9715-3d5a-4bb9-ab0e-60cc1169d683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca24f527-05dd-4138-8c1b-48da64319e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304c2340-eb45-4d6c-b446-acc910386268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf1cf51-38ba-472c-a842-f03a24236693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc0f143-2805-45fd-a0af-3db5d172c28b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c267503-cc71-46b9-8249-6cdf7ba08577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efc54ec-1c3d-4e03-8185-bdb894153d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1528924-3c5b-43fa-833d-74ab0d52600e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "895316c6-aa39-444c-8d23-f3d3449db6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735b6ac7-9abd-4c5f-aeef-476107a80a71",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acb0688-1707-4f03-8feb-1cd984208fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "248a13ea-0d09-4b7c-bc52-0a4803549f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec14b1ca-b2ec-4f97-863b-ceee631a0c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e91b979-8e2f-41ce-9497-581ac4d4b11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dee2252-04f2-474c-82af-07d8ec0ab8d0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f887faa-2ccc-4338-81cc-d4a27d52a937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce214f1-5dab-4d01-97ea-7f8309828f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716aba57-0417-4c67-961d-0fb02ce167ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3168220-639e-4872-8e59-669b20fbbf18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75b3883-903a-4fcb-a97e-8f6f377694df",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818270f1-ccbd-4b70-b022-1c69282bb4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e380c3ef-e0ce-4cb3-9798-0239d4efbbad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed04992-d749-4c1b-b8e0-82874db2f874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77259a5a-8dfc-469c-be79-7d82cad327fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb464d2-b0ca-4db8-92c8-706eaa1f8198",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb87f74-a1a2-4a8e-bd11-0bf42922ca15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f326d23b-acbe-49a7-967b-73cc1b0e1376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c39a62-3a1b-4ff7-8327-816dc1803c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9965487-dd57-4743-a594-73d0dad49f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e58f3bf-732d-4d56-b94a-51d0074a04a8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35d3f3f-ced2-4b06-8c6e-6c736ad27050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe06a054-ac33-4602-ae05-54b64cdb17af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048362e3-5a48-4a6e-adcd-ae4af182fed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "317752f9-5fa9-466c-b5d5-d29ee6b6a3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d6c33c-10e4-4d9d-9fe5-4e564428e3f5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afd35c4-51b9-4494-8c15-8e38ac4fcfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a5f8d3-cb8a-4af0-b0ca-27a821aea18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77611ca-460e-4f5a-bd96-708fbce9bb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fca8a5e-4f1c-4e1f-a355-801f0a9a92f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1a553a66-690d-47b6-ac25-b67dc2ef9668",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af34f5b7-3434-47e7-8ad4-abb1e37d57c6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6c2f49-b0a2-427c-a914-c88148ef0544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0e7ec9-42ee-4320-96d4-f0be91eec95b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54721f7e-c1c6-4cf2-8b01-d11928aa0ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4afb924f-75d0-48eb-8a3b-6dd7d7083020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffae2bb-3f79-4003-b873-249a3593746e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67183a1-6335-4210-9ac4-5393ab6687b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7c4c2c62-78da-4b12-85f2-134c20b7dc9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf395b67-f059-4f28-a708-4ba66d4bfd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86300d7d-2892-46cb-a208-fdf547cdebe5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37a74d6c-9827-4b66-9842-98e417b36df4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfb7d28b-3ce1-45f9-92c6-25a5ab68331c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1536d7f6-bc38-4bf1-a2b4-d3dbf2d63e20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00ecfb7f-a74c-4ccc-8f20-1b46178e6a1e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6764ec1-c09d-40ee-9c2e-710cc89ec78f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2a2eb5a6-19f3-4aa3-b1ac-9bf50e4f62bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b745afab-ca77-4d57-8845-4551b54a73cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b567e389-d42f-42e3-9076-472a8538a8a2"
            }
          }
        ]
      },
      {
        "id": "b8766369-9744-4088-a5e1-4f23bee23978",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b33f74da-57c3-4507-9186-77e76c8c5cbd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d83f52a1-e13c-4fa9-ad10-757775dfacae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a6c418e7-3893-4baf-95f2-a1eb29c6cd43",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d45437f-7575-4027-a6ee-62d729e1034c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45efe8a-7b05-4ce0-831e-0f2e5fdb540f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9085f646-194c-4a16-9de6-0339562cd043",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7321170-d9cb-4b6a-9499-61469fa19d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ffe224a-270c-42b9-a4df-46e55d7d32c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6de6c5-0e66-450b-87d1-7ce65fd56014",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d563b0d7-4d02-4786-a519-9c64fb1f97fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c647a30-b592-4d31-92c4-86506b80f699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676c984c-62d3-45c4-a3ee-d13549bdb7a8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fcf232-202a-4e14-9f0a-d170b1706b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0703ae55-02f8-4cd9-b5fe-17e457168442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e222983-9fe0-421e-9708-a2ee41cfe13b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a505712-9000-4531-9cd1-def6abca42b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ea246f-2637-421b-b08f-3e34de41a51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b50743d-99a3-4c59-94ee-354418a9cc36",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a9859d-5677-4ce5-b5be-79bcf6a1a3ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c98a2c-1c63-43b9-b648-3f61c6d79afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a64361a-0d70-4757-9fc8-20bfda2204dd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6e6c05-eb44-44c6-92a3-1b8f7fb68ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d045cc65-8132-421a-b568-2c9d617275f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc615f7-f987-48a5-b2a0-dcf3d1132b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84453ed3-60b7-43c6-a25c-df06cfa25eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f11525-a90d-458e-abe7-dc4685f425ab",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5756aef1-6a8d-40e8-a37e-156d6771be08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb2eae1-de58-48f6-ba26-e4cc74308604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bc8af9-7335-4dfa-83ba-fb252dba736d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b797918-3b6b-4bc2-b1b1-3223ec652b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cb244f-6fc1-41ee-8911-1cc0110b8ca7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd0fcf9-cc48-4d24-81c3-2f4b5f0b1b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6b889ff-0508-4a96-9b64-d4419aca87db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be824bf-1975-4c9e-b1eb-03c3177ba554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63837e2-6ee0-4217-9932-6e3ee802ea0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef9ed9e-3f4a-42c8-b028-3ba718aab1fc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1925a7-7b22-40bc-b3e1-df170eda5e78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a06844a8-e234-4d40-83a5-6ba4c935e661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e515163-7a18-4852-bca6-d74144d26bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a31fbb6-a846-445f-983b-e3c1d6fd5105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893fb784-a420-47f8-8e74-3cea34ddb33c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ce28fe-29c2-4e18-b80d-b1889abf00b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9b596c-c1b0-4e6f-af49-af943b4d9dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23856866-e730-4341-a6b0-bef8fba05b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f37868-e492-4fa9-b8fc-aa9aabcb8caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308c1c85-4178-4012-a37c-1b7a42ea9073",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4da86c9-9cff-4fcc-aa38-327e0eb41819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51e3811-fc40-409a-953c-b3e7edd8c8b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b984f76-36d2-467f-ae3d-3703c76a8268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd408ff-867d-4cd5-9768-5a5a313211f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bc8e5d-a073-4862-a033-584ada286f35",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a90d4a3-efdf-44b7-9f43-a2f0e2fde864",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c49346-a98d-4a80-a1d2-06c1c2209792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f573c5-0564-4bec-8708-4704b82b0d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be2a19b-7800-4fd7-8ef8-6d438059a57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69522d3-4f91-471d-af5e-02cbd63836e1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e787405-f232-45a3-bc8a-43b8f437a3e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4e3cae2-6590-4934-9767-9d095b370f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a00e9a-ec58-4a4d-90c9-d37286d4d942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e84e881-46e6-4963-aeaa-f1e16eee6b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7fabbba-6890-4445-84d0-77c2a1a6d2e4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2664ee-6c5e-4dbd-9990-de7319a70baf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88075359-1c7c-4471-bb5d-2d71bcbd1438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c925da54-ff4a-4b16-a5b2-45ec392eee72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa177d8-8a14-45e2-8f0e-72b6227dc001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc228c6-0a01-4047-9163-7cfcaf2031f4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe53fe8-1e43-49b6-b672-514c74e8656b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "134cb585-3a10-4c5c-980a-2fd04bcb7a4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881f7f1b-bafb-4bdf-8a00-8d4a334dfbc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbad63a-31c0-44b9-a87c-c187e1424555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d66fa2e-0ac8-4117-9080-75f6f2d58b58",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eda66d2-1a52-43a9-99ef-f6e9065f854c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc08158a-a325-4d0a-af54-b3102cb885dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e617d22-68bb-482b-861b-e022127d802f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbe5512-c8ba-4290-95c1-b51fcccbcc13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a23a2d-7aaf-4aa3-af51-25ed17c3fce1",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aaa64f2-b33b-4b3d-acff-4223e35822e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c8c501-8505-455b-b9b4-a8dcbce8cd41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db272278-d0db-489d-8309-d254217a2187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da01de7d-6597-422c-b6dd-31b820fed859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147ea53e-aeaa-495d-9192-008aecb2f5bd",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e995c2ab-e992-4171-9056-793e4251c795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437c36c3-431d-4509-987d-e15c820eeec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6efec36-3134-4749-999e-b66273240ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60e2de7-739b-4cf6-b2aa-ec2c791fcc86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d35a5a-fcce-4679-bae8-b4f2e8b5d2d1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb139564-f5d9-4c75-bf2f-aba20a443ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4926fd-7bf9-4f4d-a00a-030744d19b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be361eb8-7b7d-4130-b0ce-086fe41e1a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7851004d-ae3a-4f40-9aef-95b82c6de73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07c4b22-c1b5-4659-9a19-620afb6c0cdf",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0345ea30-d27a-49b3-a33e-2d47ad6e1a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f13d4b-ffe2-40c9-817f-8ee1e889d806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9978e45-d3cb-4be3-87a6-1aa82dae8556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f092ec5-8b6c-401c-9a1c-9da97d0a46a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79bf5d4-a1fa-4183-8933-d2613286e4ce",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12060733-8136-4f0d-9588-f6aedff4602d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c1bfd5-1125-4071-912e-38b0bf6ccfac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a9d1a0-c712-48d7-b698-716adf480d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27225bb-6f6c-47ba-acfa-bb59db1c30b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d52b431-c5d5-4254-ab1b-a08fa7006e62",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56049675-e387-4f56-a3c5-b79caac2ce94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b755e20e-0636-419b-be1f-311c2cdd1b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2b5e49-d548-4e1b-b6b9-2e8fc8130ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69d09fe-47c8-42d7-b4a4-1aa59ab403f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755ebf2f-5e9f-4dd6-8ca1-c4d362789446",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbafbb9-7dcc-4db8-9b1c-dad4877ebb9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6868e4-9d2f-4ea0-b40a-fec6adda12ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b72595-a829-4a52-af18-ecd5e7a59227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb12958c-e99e-45e6-88ae-cf825692b9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5ddfab-34e7-4316-a5b3-f9d1031bb856",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6e3ac0-cb46-45ef-9872-dc8ab6cc704b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c207a6c4-96f7-4998-b34a-21ce2770eb03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e71e90f-172f-4e15-a688-b1fd3ca70063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ffd4b0-fe77-44b4-ba16-49870e769b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff9fc50-23ee-49ae-8492-1b38e00454f7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f620d0-63d5-4f83-b2be-2be27fd53390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba62acfd-940d-4ac5-a370-ad6b9671dfa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba47930-b0cf-4a9f-ad4c-8178b13e9d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c1ce18-e364-4695-b796-8d36ebc12910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a25095c-3d1b-41d2-9bcb-ee672de85c6c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25caea88-de00-411b-b030-766e32a9707b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e62a9bc5-272d-46ed-8c50-24c8fdaa5f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "951d8708-a3da-4606-8b93-8e64b31a12bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08df1fd4-061f-4eac-bfa6-f8e3b4fefc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682401ec-fb02-40e0-8a6d-0b6ba66007b9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3ad444-d583-442b-b531-ffec95152577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfac31c7-8ff7-41a8-8090-7ae415f1a3d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c8de14-97e7-48a8-94c0-32961e96ad04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b139f6f2-ab2f-488b-aefa-c4021a111353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce5d674-6d97-48ed-b2f9-cc119d73e058",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85938d53-0e53-4878-a3c5-00d4a02efe66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0ea5eb-6b63-4703-afe5-d9fc0b3b9025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9197e785-95bb-4ca2-8a51-2c299d26d108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59c43bb-0bf1-402f-bb3d-2db51a186d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1912e96f-f25b-4eb8-b729-a00cb51ceb82",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8addfa8a-9b0d-4c59-9e2a-6d5272abcf47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c539e1a2-7c47-44d5-9e10-9c3abf0668f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b866ad-6e99-4957-b501-48595a21ae78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad61fa15-52cd-4990-b7fa-942288505239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b786c04c-1a67-45d5-a00f-98892a90a62d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b18f44-cabc-4e2b-8097-b7bfffd5253c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "672637e2-04ff-4ec8-ae30-2872041b89ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1b0df4-fc26-4a75-a3de-da70571d66d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad12d51-bdd9-4ea0-842e-c7bff0a75c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23230452-9567-49a8-99cf-dd4bbebf5c65",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2371014-b7c4-4be3-bd1d-dd61c7598039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f24d822c-27ae-4a03-baeb-147e493f4e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a8ff35-b4fa-4f2f-9dc2-a4e51d3ebb8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cae214-57af-4363-89bd-a126bc624781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b24f8e6-26df-49e6-9a89-5d6b763d1b98",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4634f5b6-64a5-49fb-9ce7-663894a530af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa8c0a43-6067-4b29-8627-d226c09a7e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bbf74f-dd5c-4694-8069-16d8f1e2aa67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1bccab-47f0-4215-9f2b-84eb61bec438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322e0819-554b-48c7-8734-665a03aa2968",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f72965-9be3-42d9-9f42-90fd66cdbaaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13a8734b-7d63-4c74-a974-3dbae3c4ae97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413c5007-d3a4-493a-ad3d-eb60cef0fa0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2faf9c00-f42e-49e4-8a24-8090fae75740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed572e76-fb28-46bd-928a-e23b38198862",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18c4d43-2237-4e61-b361-9b44a0fac86d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55930b3d-c4e6-4173-ac3f-1acf63ba65c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87930e70-e237-4af7-b735-fe4076a5ae65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a33da59b-c598-40e0-8854-b0391128c166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8746ea61-3c57-465a-a5fe-5a73dff00ede",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271c73ed-f744-4891-ab4d-15312ead1bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f3278c-55fe-4c8c-8739-35ef0dc780d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ed92d5-4006-45f5-9b40-59863798da2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e52113f-5ebd-42e8-998e-0ac3aa816621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc428fbc-b262-449f-b032-e8f5f4fcb2d1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1916af2-6b4b-4797-a10a-ad601e64ae72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3da58fa-dae5-484c-9cbf-0dd8debf5e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c335d7f5-0233-4b69-a081-0ff1667f8c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933ebeb8-ccc1-4ae4-b292-b1ab215da9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1160b6-cad0-4fb4-a2b4-272483ef7fd4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd030f4-9e07-4bb0-a245-d0007352efaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa633601-28ba-4342-942d-85deecd4cc9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea372ea-ed93-4cd9-80d0-f9feff75c01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e89847-8252-4675-9134-65a3921a88a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f9ee70-2d27-4598-b44e-94b61c277079",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bfd66b-ced7-4be9-8ae1-821e098b2deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ff17fc-c3a6-45ed-a062-9fb4b7a9a959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "144580e2-c8ba-4c09-af44-d5c3a0e01f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa3d629-c4ee-4c8f-8abe-15d8fccd0238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868d8399-9199-465b-9ad2-3d2984132281",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e24162-edf3-49f7-8aeb-0d1ab96ce21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57acf70c-446f-425f-8437-06afb46d85d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78262f36-b2ef-44dd-8697-987911bda7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41233568-1b2a-4cc8-9fd6-15c76eb0420c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44a0d5d-130e-4f8d-a0f4-549bd12913af",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fffe34-8ded-4e16-ad9f-c8d1acd65f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5d4fbe-4d12-42db-bf53-db7dca8bb32a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21acf354-4adb-4c5c-b45b-a8ba0cdee7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ff75ad-74d2-41b3-ad3e-1bec07514ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11f0c85-e545-4e34-8c01-e781b19bd6a2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08035f3-a64d-42c9-97b2-44520052a9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aad32aa-c428-4788-9c49-dc8da901be1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b8e2ab-72fe-451d-ad91-15d331c4c3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c36deb-92c3-4e0d-bbcd-d99a0257c12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af5eebd-0de6-4887-8bc2-eb604f04955f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f22970-62d1-4dfe-8de5-a2905b928c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7669f2aa-52e5-4814-abc6-0e82dcf239c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3709da-6c9c-46c1-8a81-8b921ce1f452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e802da4b-a1a2-4d05-9abe-364425a24482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9098b240-a395-4469-ad63-53db8cd86706",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd2fb8e-2c69-4794-9773-41af1e911bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "928d028f-3baa-474c-a2cd-cdaf0e5418ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9386bd-21ef-4ea9-a0bd-1f6911f6cf74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08e1a6d-f2e0-48ee-b315-6ab74e51bd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84963011-03e7-40f3-bc19-b40918b39e33",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3237abde-cfe0-4541-a72d-deff47ed4845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b922d3-9ff2-4740-8003-d092c8b4af10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a631b4c4-f510-4d22-8eef-c78ccd18f338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64dd88b1-7f96-483f-a1f7-f81a9439b6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93eade31-8894-478c-94bc-014aa9e7b65e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f2a235-69b2-484c-9f60-5910e18f1165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6288dd4-6c4d-4cef-917c-a1447fbc81ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898109a5-49f4-431b-98df-2808a5174b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f17dba-0b58-4e96-89a6-b39606367a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316a2312-5eef-4ebd-8137-ba0cb3eb3160",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d69c261-0aad-4a76-990d-2f5b62b5ed14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3e8fb3-91e0-4bde-8aee-9e5a6da01a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cd47a3-1411-4ef3-b757-5cdbdfbd63b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c5767e-d92f-4f84-b8a2-ccb27c9315f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096daccc-ed84-49c1-8585-c200f5067723",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acddfa71-4430-46e7-8045-1d94c4fe2d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf000a1-851b-4b26-bc1d-0325ca501eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58acbefa-5e1f-4d51-bd38-937e4e825186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7483988-bd81-4849-8c35-398e841bbd5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3a5b35-39b6-4168-ab46-fa58e7b276f3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73727448-c0c1-4fd9-8730-b69cae4fdce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd451f9-d78e-4ad2-aac0-041d68232689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a146daef-aee7-42e0-b1b7-2e60f797a866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3963c6-1f55-49b6-8be6-3cc4f27423ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa72c0ae-0169-4b3f-a4fa-eaacd825ec63",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9f8ed2-d4fe-4577-b6f4-f509695d9f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239d1a26-361c-465d-ac93-1a860d9be07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266d5238-75a7-45ca-9737-b2f30c9f8fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2bc4fb-69f5-43a1-8822-562663a8f052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b42852-47a4-41ab-a18e-f2eee26362aa",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93bcdd7-dee0-4950-9dca-db12ee12a664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71693703-d619-48fd-b896-b919f7e5942f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176c22a9-d0a1-4418-90f0-b1987e894978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4db7287-52d8-48be-8cd1-9cb5e21098f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9423bdab-a8c8-4872-9bfc-3edcc3b149d0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc4a1e4-f5ad-4315-a279-fc4d4535b1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e542d797-d066-4587-a782-c91ffbb8841e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07f7b90-3cdb-4d0c-8219-e40faeb605ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf7b4ee-3b06-4f54-8a63-78d7546c75e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4619e69c-02ee-4d0c-b46f-71657551599f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b4c123-400f-487e-a4e0-2e976903ec61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0407a16c-a0d2-411f-8a15-fdbe7c8fc914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817483a1-79d3-49b2-bd56-e0250ace31b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9374500d-c197-4586-b697-742d42e1b31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de95a158-28d0-494a-a942-938c3257e21c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0150b05f-bab2-4cd2-aa94-719a82bbc018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc534d6-1a32-4dd9-b228-4d5102f715fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5c8895-5155-4181-abce-479fcc41e455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb81e251-7338-4e51-ac57-c13003e4b94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b307f3f6-9213-4b08-b8bf-7e2a4b797cbb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e2189f-c6b8-4e1f-9c36-8e22bf821e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1135c6df-26a7-4bdf-9e82-aec2aa6395cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec984ef-816e-411b-b440-a7dc53ec6d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a888dc-2927-4329-b101-e01ee38c2b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2224c0f8-0f11-40e2-961d-9958ff094d74",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff091636-0ca3-448c-8917-b5a3fa011a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48bda6d3-7928-41e3-8a91-f3b3a9b6168a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ba37e0-1e62-459a-bf15-aad57e73fc6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f30e6a-4ff1-41df-9841-7331030af55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb616ac-4522-4570-b326-a398d0905139",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f21aac-9600-4a9b-86bb-0aa765bfd88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8edd5cc8-91a7-4f38-a712-69abcf431242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddcf1a9-8dc1-433d-9150-d63a0d117e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440b3144-382d-4a07-a677-ccfa803dddbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e79f06a-e297-4893-ad9d-37dba62a764a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f110c711-f389-44f3-ad16-0ffec82dafea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff544a2-6917-4d44-9fbe-015be9f4b93b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4b2a9a-0f52-40aa-ba17-2b7680f5d4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4059a47e-9b5c-433c-8d11-0a0f9fcdba23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6faf88c7-bdc9-4e4c-9a08-9680cccbffbf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097308af-0251-441e-abf0-ef124024f5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43636c4-a3e8-4798-aed3-f754b432b81f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7d1731-814b-48e8-94bb-70ab41e08bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aff16b2-1232-409e-99cc-e69c7bb3ce37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa64f27-f5bd-457b-8561-1e67b7d19a9d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45294068-4eee-42f1-9b94-d8e94a760d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd6be9e-7d7b-41fc-ad2c-a27d714b3a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82590294-e549-4eb8-9b77-a38d6aaced4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da19db7f-a97e-4cb0-bda0-bc99e32ce8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2169f176-baef-4f36-9a2c-4aeb2fe800e2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8480943-b4d9-44f5-8511-900851a6a858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88fb9e80-1a79-4178-bb83-8f4442d0954d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082dc1de-3f36-422b-9706-f63b12a3b257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c6f294-62fc-4908-aebb-837076381bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a8cc79-66f2-4c42-9bf3-152b3a40f8ed",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823aa14c-f9cf-4f34-9f4f-5616710ffde9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772dfebf-59ac-401f-85d5-536912319e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcd68a8-59c1-40a3-a5e7-4bb79e0bd40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2174d947-ebd6-4cf9-882a-a93de49a5ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670d7ea4-be9d-4a22-bfe7-b2ca68d2c7a3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb79ba2-641c-4a01-a8f9-15a6dfd651fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e34d4b9-f5ff-4a4a-9276-707a8d4c686e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d403fc-6305-417b-9d4f-6dcfd3f5cdba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a78cc677-14de-474f-8529-4c88e80ded22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adb8a1c-99ef-4c29-9820-ea7f01460e0e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe95a0f-2a3b-4e53-8406-84068a0cb849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e1e56f-c2f9-4b76-9356-734eb0f82215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "409282b7-1d9e-401b-bfad-1603dbc603cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74a5d5e-587f-4223-8807-43cc9ca1cb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc47fe73-5166-4bfc-8460-e8dc1569ecf1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf571b1-66cd-4c69-a9ef-fc77953c4da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b84b762-39bc-49e2-9064-e62cdd2603d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b557c13-2d3c-45c4-bc8b-de3d44b7305e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d851321-983f-4f28-8633-af4f19a19e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e263490-6a7a-4834-afd0-047d788373c7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8b715b-5551-4e64-a6b1-f935251750da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8806b359-87b0-4a5c-ba47-b2662367cb06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a83192-fa6d-432d-8b4d-c7bc3f4d19f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3b2e91-8bea-49e8-9155-f98155a6b4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2f53af-f632-48b3-abd5-bef01121e85f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f060187-eba2-4555-8c3c-768d7a62de55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9662c6b-ef4c-433e-ae77-7d22939a41af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d72f38-fcd1-4ebe-9c61-55cc0fba0940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc54da6a-f1e0-419a-88a7-d25215a70726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba0ee1d-a252-458f-ad0e-8d534228c209",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1d2a40-03e8-4949-be67-a96425fba2f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "602e6251-7f06-4ecd-8b9b-1db2a1c21b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27f3943-81c6-4732-87c8-85ba5f25c034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6418083-70c9-43c4-9fea-59c504e7977f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4316e8-9787-43c5-b311-ae605bd2cb77",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17491ffe-6046-4b39-a80d-86a7a7dc8295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d1e47fa-5e77-462c-a071-5230e6f58848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfbb5c0-06a2-497f-91d4-b2598624b99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d443b1d6-2a80-4f5f-a362-31df126c8170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174db892-ea7f-4c1b-bdd3-f3c516a5c3df",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aace78fd-cf62-4176-a455-2008bc3eb9c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9da0ff71-273f-4dfc-8d1e-7b7058ec6d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0c44b7-9a26-4dcd-bd05-e66ea8d7cb04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19bb096-6c71-4297-9b3f-8813704e541c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8945d5cb-e3ea-4a18-99f0-0282d24ab647",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70c7497-87dd-42b7-af52-48248a8dc25e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d16929d5-989e-45e2-b085-a1c808c1b97e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fd0633-6f55-4fde-ba41-76ef9aa95e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff92161-64b1-465d-963d-2d17497c9a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff9c0e9-6dce-4227-9901-ac11503a1f2e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6643db6-d3e1-42c6-a8b5-73279399693a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e625bb2-c344-4aa9-a2aa-c8f4375fe7c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be62cdc-a343-4143-b841-3c5852f6e0c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efdc309-0da6-408c-b9c8-32ee7b625afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31ff2e4-b455-4101-b30d-7f7ee90023d4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5582fb8b-9b04-48cc-8349-4c5b24ac1acf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29be3e6d-c310-43f8-ab1c-c712d5af51d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b99f1b-6e57-417c-873c-e0a1350b38cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29c4f50-3b02-4afd-9f89-5ec0ca335375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a8b33c-ceb7-4069-970a-eaa2ae000544",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17e7494-cdff-4c95-b5f8-62fa286d2c30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cde7a17c-47e0-40ad-986b-83f440c84c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "869c7a3c-1cbc-41a5-91e1-c1c8641d1cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe85fc61-cc63-4d52-b2c8-ebaa5966427a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbe4c2a-1046-4e63-9c13-e24c7558e9a4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7fbaf3-9ab2-4428-8042-f458522ab569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "febe19f5-80b8-4c4f-ac1d-dc1064890850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422c9bcd-12b6-4f7a-acbf-87af8094efe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5d18e3-afb8-465f-8439-1577dfd3f1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4639a5-dc3d-4345-92dd-2f4103d14c20",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b0b8a0-3b9c-4a35-b3ae-c2857416e577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf804011-f52b-43a0-bdd1-5d2970e64b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92405fc-cefb-46f9-b925-c84b3339b77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7098130a-fced-44a7-9635-4c334920ffa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1f0808-2e1f-4f10-94ad-8856de311bea",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c540329e-35df-4ffa-a9bd-590c162f14f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbe5db4b-386a-4785-9717-c84c0e47cfdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8912cf83-a833-4cf3-b142-9dc9ee2d797d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a6b6ab-290a-4dfd-9a0a-e84c3fa628fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c684891-034f-4240-bc1a-1c3523a8179d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cd7ff8-5f17-41b0-83db-e64e630f6391",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7a78a08-2ef5-45f9-a04c-34b442191ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93230e40-a008-4317-bf88-14ee902b65c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41058cb-36e4-4b6b-a796-588937709165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bf916d-0521-4438-8af5-e64c6e5c154b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52f82b6-3519-43ee-a429-23965d606ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "235c6e0a-9a5c-4835-8a4e-d7b972dd9f8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9865ccf3-d6f5-4026-b74d-cb7349d5ab60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b45bf25-309e-439c-8375-06f429c1d819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362d2014-a224-4986-a456-c6cc531df621",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f062fc87-76e5-43b7-b009-52c98c3bec2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3161be0d-6705-4e40-8400-147a2c97d48d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "386f0d98-6ae1-405e-ad73-1fd51633bb24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c5a2ec-f345-435a-9f44-11711859f83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c69368-ef64-4fb1-b5c1-21c0f3e5bcbe",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e39d08-6f93-4473-a7ba-09d095788f23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41b25845-67b2-4d0a-845b-c34e024954df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e3ff78-b558-4e56-8d80-b9d01feaf82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f76fa407-55a5-4582-8de3-f7310393e706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804f5fd4-5ead-435c-9e67-faab2691c243",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76204ea9-2696-4962-9aa0-ec9d605e4b86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088316c2-0d85-4bef-a50a-f8f1db580323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86605c9-e0f6-46ee-8c14-9f31faff9f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d9d8a34-ab47-419b-8ab7-aff343e1e2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c5f8e9-87d9-4aaf-9c3c-be269e2319dc",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cad117b-4297-48f3-9045-6ebc30864156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7367ceeb-2629-467f-bed6-ecfcd2005d73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662909b2-0eec-4fc3-b802-a2bff0b4fc32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cb114d-7e60-4359-82a2-f54e90a22825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1b3d87-5eb9-4f17-81d7-ef9c4cb23f1f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d4078b-761b-4460-af50-6608a1f0b75b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dde1535-2058-48e7-9944-1cb1e55bf192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85e8b4e-cabd-4fab-8ed2-e6915db220af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f409bea-86f3-4139-b341-1e2b71a3a44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d3fbaf-22fc-4d7b-a934-36969c7a768b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d43702-9836-4ddd-b047-538adfeb887d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c2848f1-4dc6-444d-9a7e-98e27395fd47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c6286e-35f4-4a17-9fd6-5f892a3c33c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82cc4cff-6843-4159-bbeb-bc95df182228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50706d39-9b4b-49fb-ac22-5e41ce8856fc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bed84c3-230d-40f4-896c-b14c743d6266",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c3189a7-5012-475f-996c-1fa49dafa13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b52919-ed41-4a07-8be8-86d0b4b5b62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16eb9530-542d-4861-9a2e-fce0a3e24350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3438db38-aa89-469c-ab5e-b068fc0d329b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1efb98-83b6-487b-b85b-3566cdc868d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "195d79c9-8cb7-42d7-8fb0-581f26605191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ad0de9-201f-4e43-a8a5-ddf502012207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08dd4550-3ac9-4785-b7d6-96e2325ef1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fd52e5-9741-4666-8c1a-76ca6d5c3df5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6c1308-5a3a-461c-97a0-5537124d3da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "368efcdb-f681-4975-841f-6508e332efd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04090f39-f79f-4ef2-865d-153cb102034d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cba79cf-4964-4fff-95d1-a27f28660d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ab0f78-7a57-4db9-a2de-0eac7348812a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba54377-f479-47b2-a8c2-7a1823853de2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeab2e3b-c72f-485c-9f3d-9cdd0e49da21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252a73fa-ee04-47df-9226-0738f334d46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9a539e-5cd1-4d7c-aa34-568e4432cd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c1e291-82b1-4160-9da8-ffc9ae37042c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12591c1-62be-473e-9d91-b6cc306498ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebc89636-1490-4a24-999b-f498c0457408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e2b24b-d21f-450a-a1f3-b233a9f49ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce4a0c3-047d-4751-baee-7b8427dadde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835a33f9-0869-4ed1-81b8-7fb90b23e92c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06380ba0-4680-4b63-8fbb-143ef22661da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d0d1602-2e5b-4b0a-a812-3224c0e8fa19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea46481-3b27-4cb1-9200-0e9048c29094",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cccd040c-f68e-43ad-8c05-0642fe8bb8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7094de85-44cf-4bec-9e8d-7a677303166a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09133a57-5828-416f-a3e4-1a89b57e366a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90e73c4b-57ad-457f-9a6a-0623dc4368b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aa44df-9ee2-4fca-bb49-72028594455d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bfeed16-9c6d-44df-853f-017f28f5f613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07a0e65-acd8-493f-87df-5426f31d5acf",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fb2233-cee0-4acf-9628-e48e6b6926cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3534b0f3-41d4-42e2-aae3-1db9b911005e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2625185-7b13-4647-bdc2-08aaaa0c6cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b0fbac-e5de-493b-a12f-f00422416a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee24243-f745-480a-b28a-4cf4c3fda302",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45aa1a2-d9b9-4711-b15e-1fbf833cb2a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c172e4b-4eb6-43ac-98f4-410a1004c00f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df57e5a2-4b65-4e53-9abc-390c64834e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaaf2204-2b4a-4b06-ae8d-66fa672a0832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37dbf2cb-7c1c-482d-93a8-8ec9e1a3bc7f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47577155-ade4-4004-9cd6-dd3d86301b74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aab3d79-2dd5-4451-a7e1-4e9ae2fb53ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9f5e95-383c-4ef2-b851-d00a7e2e38ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fc5fa5-eb9a-4c31-8192-0f069ed817dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73e85dc-fb59-4a33-9efd-193296d50148",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdaab35-b73a-42b7-b95a-70dc6804e850",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2031889-60cb-42ee-8a18-df3808401da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be177186-3b80-45d4-9b55-4dc7d19eed95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e882e77-5aa5-4eca-a771-597a91669b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c33e3c0-24ff-400e-8d77-dbdbcca621f2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c601fb4-1a41-4ff2-941d-6342a0c61ec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d05d27-0156-4c6b-94a5-515156491d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4549df0f-3976-4258-84db-14cde77f4b8c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1fff10c-d6ff-4986-adf2-7d4596ac2ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84776998-3cfe-4a12-973e-e3c9bacd35de",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82206034-7929-4c3d-9ce7-b84a40d42baa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6725007e-bd43-4fdb-aef4-6794438255f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e8b0df-6634-4dab-8f30-3441b34dd1f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6246d1-0eb1-4300-8b87-33429c6dee0e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f028f02-7b0c-4993-99b8-0125db318338",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1f41e50-a881-4d1b-aabb-51ad12dd6202"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e19afc5-e7e0-4f02-b853-95abffb4281c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59de1d21-05cc-488a-9819-a62342d73370"
                    }
                  }
                ]
              },
              {
                "id": "96f7e6e0-7396-492c-9302-c74daaddcf40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "79a8e7f8-fb40-41fb-b50f-159f331be5cf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b65210-f5c4-48fe-81a0-dd1709e69854",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2bdea3bb-10f2-4bbe-b972-6bb39d4a6025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaef1f9-61b5-4fff-8455-1ad951724d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28d3db35-1e01-41bd-9d36-2014955fa872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad64e89-4261-4b97-b2a8-6054693d050d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eeb8d90-c2fc-4aef-a497-7bc11c7d1100",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9e49564a-74c7-4323-b5fb-a2ec65bb836a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db0ac67-2b6d-4575-bed2-63a0446b508b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f90a8832-74bb-4cfc-a40e-b64b5eb4e90d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b97be9fd-f3fd-4fc1-a099-71d564e80e58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8695f6e1-8ec9-496d-b832-8fc4292cc6c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7c8f8a1-0386-479f-89b2-31f6a40c0a5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fef9c791-e637-4426-befb-fa42cb725bc9"
                    }
                  }
                ]
              },
              {
                "id": "94f9dd85-6267-41d9-b787-c82b44141e21",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5ad43f99-b95c-4af3-b84a-0e38a09081bc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2793d697-7f82-439c-a720-a6d970969138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ca37112c-1ac2-4c6a-96ad-e309966297b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471aeda9-0414-46a8-9e12-b707ec43bc61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e344125-1c7b-4f9c-8352-8068d0ac3561"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "100fda00-ec7d-4910-b788-d41d6e8e03c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "756e2c67-ebc5-47cb-8996-673a70484851",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87a74344-27f6-4c7d-931b-074a2bd88acc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2d78e643-13d3-4e7b-818f-6bee30a28536"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7d2e3cb-227a-4f5d-92a9-f374fcad8e86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a51a8cd0-e51a-4f38-9bfc-336f8726fbf8"
                    }
                  }
                ]
              },
              {
                "id": "547170e2-561c-41b4-8158-e93943814f56",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63edd21e-8f53-486b-b8d6-206b82161411",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0e436211-b84c-44b2-bb0f-81b0c6135eee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dba4c009-fefa-44e9-9aaa-9bf4b609c363",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa7560fd-4c4d-4175-8b1a-45ae72d3aced"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "771dd150-747e-446d-b6a2-0356a9f1a5e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2bef77c6-fd00-4528-8f08-4a68780e10f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cd6da74-cadc-4c68-acca-839b2a58da65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "591b1ab2-8d1d-4489-ab60-c40898721029"
            }
          }
        ]
      },
      {
        "id": "f40718e0-eef0-42bd-b545-eb99e095636f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f21a3874-fd56-439d-8942-61642d5605a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0329f336-6eb0-41ce-8262-b912829a1867",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2173a383-97ba-49e7-bce3-57285528c3df",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3566774-4721-479a-b86d-72b59516746d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "885d8855-1865-418c-b928-8f1d86f98794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9258167c-5faf-48a6-90e2-ad10aef1192a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74841b5b-2710-44fa-9296-04354ff6fdb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d0337a-e616-431f-8c42-4b1a20860ade",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73aba3e-1448-45d5-b305-a1cef0f41a86",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6b7a3d4a-00de-4755-8a51-d968bff6587f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b626459-9ca1-4178-84d3-8a8b033bb312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19100efb-13a5-4a0e-8968-db4b6b549627"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a78791d2-6d39-4e6d-ba21-5d2971abd0ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1388cb5f-baa7-4737-8fea-812e3b2d5198"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8ca7603-0598-49e0-8ea9-33bc8c98ec55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3aaa864-2154-4539-b18c-0c5105b74f27"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e21881fb-3f0e-4051-8053-7aa933dca680",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "56547b5d-9712-4b1c-b2e2-f47a2fd4469a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f69ed3c6-ae94-4c36-81aa-8184cee0ed55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa1087c4-0066-437d-b19d-a4e7405e894c"
            }
          }
        ]
      },
      {
        "id": "1b7a3c99-3c10-496c-947b-b3d40d1c369c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "113eb935-c891-4114-9a17-d30adfeec80b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "661e9609-ae78-462a-91df-fb9db499a7b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4af21adb-19f1-4ad7-b93d-a7f6c3ab7dee",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533e69b0-3bd6-4f53-94bd-7d82bb97b98f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "33aa6693-0e22-4724-b82c-62e8d0005613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0140bbd-66d5-47ef-94e4-dc28c188b1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3163629-beec-42e3-8be6-9e899c3ecdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d00bc8e-88ad-48db-898a-e94317c643dc",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46549a3-af5e-46de-850e-05d382b8d5c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c2f75a52-1a0d-43f3-a131-408f2dd72eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7e7056-c983-4f49-b282-daccbb936981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0fc29ee-5a08-4113-bca2-95f7ed329c2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21198aec-5e4d-4d4b-969c-2b9980cb9da0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1e259fc-0e87-419d-a043-34c42285e0e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b086cc1f-3522-49f4-bc2b-49717a18753c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4398eda-7f1c-4245-bd4e-bc4a10788dd2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d3f7f0c-d861-41d0-b3dc-a6a70e853074",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1746429e-bf69-456d-9204-ba1607728122"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7317da27-7de1-4045-8bac-a38673a3408e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0f4a501-a3ae-44b7-bd73-4e76b89fa34c"
            }
          }
        ]
      },
      {
        "id": "571ba2d6-d4ce-4234-b5e8-901e49b4be88",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "167d0740-fe21-433e-a70c-01af161084b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b41ebf22-9e0a-4d4f-9f68-cc5eeabb8269",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1b2d269-1c43-423a-880d-5170d0d0c5ed",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdc5b79-a141-4c64-a78a-b2141ba6b524",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f2891be6-0de2-4d41-84d5-1deaccb014ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707dfb22-70c5-4189-9b9d-292c6c071b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af02c2d5-d233-4271-94b3-30bb14c8ae5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3ed78c-f3c3-4b70-8b9d-8db63953aed0",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214c362f-d4bf-4906-8b18-df18ed644171",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "749cdbc8-0784-4943-a4ea-81a58b55de28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9fe50b-99a7-4637-bccd-0f6cb596c097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "526532b3-3551-418b-8b67-2aadbea99ddc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35e1a4e9-6cf6-4d65-931b-51e2a5d812fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9821bf0-3fb1-4229-8f3d-ff6dc0ef5758"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "543020c0-0853-4765-9d70-6784796f7c07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dde71737-c7fa-4247-8774-bbe0a22477c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f95a0b3-565c-4652-88b5-6bd020282525",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "88ef1814-8a1f-490c-971b-74d933562a45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71a2e79b-5b9c-44c7-8089-34df54710e86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23db2643-30c8-4841-bb20-66be25c5b204"
            }
          }
        ]
      },
      {
        "id": "2dfa371c-3884-4f13-bb23-4c87f61ba246",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e845d92-8fe3-4068-84a7-9ad7aef5f097",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b69b3765-6480-4711-b99a-d61c61c830b8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "69a22404-cd88-4ad6-b62f-463c0c9a8630",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79cb4c24-1384-443f-858f-b4b613c55e55",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5a2dccf-7d69-40fb-af13-df662fc94e3d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 470
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 221.118188436975,
      "responseMin": 10,
      "responseMax": 5959,
      "responseSd": 883.79285424442,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672360691308,
      "completed": 1672360789940
    },
    "executions": [
      {
        "id": "1502e5a9-7960-4731-9843-1a526bd71339",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "49e3f80d-c22c-44b5-808f-a10069af2b23",
          "httpRequestId": "c42709c3-f96a-43d5-8727-0dcf428df118"
        },
        "item": {
          "id": "1502e5a9-7960-4731-9843-1a526bd71339",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6dc645b9-9038-4a6d-9492-488b5c6a5f94",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "5ebde86b-e850-49be-8eeb-8fef9d9f6122",
        "cursor": {
          "ref": "fa21d4fc-0277-4682-8d36-a3d3671ede43",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "598a57a9-cc4a-45da-9292-92331f6717f6"
        },
        "item": {
          "id": "5ebde86b-e850-49be-8eeb-8fef9d9f6122",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "39b7a01e-6643-4ba7-b309-6730b9dc3981",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "e404a4cd-e9d1-492f-bf04-7f8740f9910d",
        "cursor": {
          "ref": "e8cb4393-5b9c-4bc5-bc56-a62539006cfd",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7687a47a-01a0-4ee7-a4a5-3e43800936e5"
        },
        "item": {
          "id": "e404a4cd-e9d1-492f-bf04-7f8740f9910d",
          "name": "did_json"
        },
        "response": {
          "id": "ab70aca3-ce14-4e88-b46d-65a7361dde68",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3280bdf6-26c0-4119-9456-1a311daf7df2",
        "cursor": {
          "ref": "32b8cadb-6c55-44e5-bcd9-df88b471abaa",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "71d3f4e0-4540-4161-a5a3-060f212ddd50"
        },
        "item": {
          "id": "3280bdf6-26c0-4119-9456-1a311daf7df2",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f6b3b27-229e-491a-b1db-a899c3668a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3280bdf6-26c0-4119-9456-1a311daf7df2",
        "cursor": {
          "ref": "32b8cadb-6c55-44e5-bcd9-df88b471abaa",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "71d3f4e0-4540-4161-a5a3-060f212ddd50"
        },
        "item": {
          "id": "3280bdf6-26c0-4119-9456-1a311daf7df2",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f6b3b27-229e-491a-b1db-a899c3668a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c026d2f-9054-44c3-a63f-842fd39a1905",
        "cursor": {
          "ref": "2c1847b5-c38c-4837-b115-f9278e1797c5",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c5914b56-3c1a-4a4c-814f-ce7545f23180"
        },
        "item": {
          "id": "7c026d2f-9054-44c3-a63f-842fd39a1905",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "307fabfe-6796-4036-841a-a7083b937bfa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 126,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685c5a36-b99a-4a06-a996-7740a4d59c8a",
        "cursor": {
          "ref": "fb1f77cf-d6aa-41c1-9b66-db6b77b7801e",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "35f42c6c-d2b0-47b3-aa90-090e55411d11"
        },
        "item": {
          "id": "685c5a36-b99a-4a06-a996-7740a4d59c8a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "df6d3670-a904-47bc-bc0f-d641a2417054",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80651044-8a56-4c78-8d58-fefc558a623b",
        "cursor": {
          "ref": "54a64c98-c677-4a57-adf6-d45aeed3b12d",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ade57225-3ca8-47c9-8c85-5f880777ba56"
        },
        "item": {
          "id": "80651044-8a56-4c78-8d58-fefc558a623b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "93daab9a-18c0-4c07-89d7-ed0c69a857d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cdec5d7-d936-42df-b1cc-d6a802355b62",
        "cursor": {
          "ref": "30f346de-b47f-4e12-bd4a-b8bd4454219c",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6b785fb7-2c3e-4120-a50a-20ee37b87263"
        },
        "item": {
          "id": "1cdec5d7-d936-42df-b1cc-d6a802355b62",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "dbb45f63-054b-4fde-b885-8a7425ec95ab",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1cdec5d7-d936-42df-b1cc-d6a802355b62",
        "cursor": {
          "ref": "30f346de-b47f-4e12-bd4a-b8bd4454219c",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6b785fb7-2c3e-4120-a50a-20ee37b87263"
        },
        "item": {
          "id": "1cdec5d7-d936-42df-b1cc-d6a802355b62",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "dbb45f63-054b-4fde-b885-8a7425ec95ab",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6f8071ff-f934-4f84-bd3a-6debe9a6a701",
        "cursor": {
          "ref": "3a5488ac-8bf6-4733-ae00-97a0cee4c8df",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4e15336f-817a-4a1f-bafd-0a37d63bc45b"
        },
        "item": {
          "id": "6f8071ff-f934-4f84-bd3a-6debe9a6a701",
          "name": "identifiers"
        },
        "response": {
          "id": "400a7f45-7875-49d6-9d14-a52079c555ea",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46728032-f750-41b2-a5d4-f02997034143",
        "cursor": {
          "ref": "124e2275-4c1c-453d-a4eb-64ef003d9e8e",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1a19da44-4b29-497f-b5d8-4c6466e64858"
        },
        "item": {
          "id": "46728032-f750-41b2-a5d4-f02997034143",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f4f467bf-2628-4be8-bc5f-9d74aca995c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "46728032-f750-41b2-a5d4-f02997034143",
        "cursor": {
          "ref": "124e2275-4c1c-453d-a4eb-64ef003d9e8e",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1a19da44-4b29-497f-b5d8-4c6466e64858"
        },
        "item": {
          "id": "46728032-f750-41b2-a5d4-f02997034143",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f4f467bf-2628-4be8-bc5f-9d74aca995c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "47f01611-ee8d-4124-a369-164c7e9a021d",
        "cursor": {
          "ref": "c2c9ce9c-9eda-420c-8d1c-0158f7c93625",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9455c92b-0ace-436b-a612-9d75b92b755e"
        },
        "item": {
          "id": "47f01611-ee8d-4124-a369-164c7e9a021d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e9a388eb-0060-4efa-b276-436afb202e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "c444cab9-358c-4269-a896-6997f39fab85",
        "cursor": {
          "ref": "c0e3e558-9340-4fb1-bbe9-7b79a295a0c6",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "19290ef0-b0c3-49af-82a1-752d7315e32d"
        },
        "item": {
          "id": "c444cab9-358c-4269-a896-6997f39fab85",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "0f6fb7bf-cec0-47f5-b59f-87e28cbbd148",
          "status": "Created",
          "code": 201,
          "responseTime": 122,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "1d03c499-fcec-4abc-93b4-01e997c3200d",
        "cursor": {
          "ref": "ab67e952-fddd-46df-83f3-98235dfd3721",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d81e2639-bcd2-4f6b-9e78-895d0b55561a"
        },
        "item": {
          "id": "1d03c499-fcec-4abc-93b4-01e997c3200d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d3769122-c7f9-42d3-8598-8056a44598b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "8590c38a-5fc7-4941-b0b8-cbb894018b2f",
        "cursor": {
          "ref": "155817e0-6625-4c01-af7c-4694bcdd893a",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a0989084-9f09-494c-ad2e-de81d36bb2cb"
        },
        "item": {
          "id": "8590c38a-5fc7-4941-b0b8-cbb894018b2f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5ca25fde-f432-49b0-b1e9-d3ade302a7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "f7ff053c-dbbc-43ce-aa59-bd86954b20c9",
        "cursor": {
          "ref": "42da43a2-20c3-426c-bacf-c1aa68dd4c4d",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "93bb0481-735b-4115-a627-4a700ece79bd"
        },
        "item": {
          "id": "f7ff053c-dbbc-43ce-aa59-bd86954b20c9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ee39fd95-1ccc-4361-8855-69e803e79928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "79a7d9d8-1e6e-4dac-a4b2-a4d7fc9ae21b",
        "cursor": {
          "ref": "9eaa16d8-75e9-4d3b-8ace-f0f7fef452db",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "872a3bb4-228a-4033-832c-4e69020f1a1f"
        },
        "item": {
          "id": "79a7d9d8-1e6e-4dac-a4b2-a4d7fc9ae21b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c5fcc83f-31f8-48c4-abbc-0a695a2ab058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "bddcfada-fa54-4dd0-ba4a-095f63b2a563",
        "cursor": {
          "ref": "27d8c3f4-d503-4607-913b-ac8e9b8f1d30",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a4b7897b-2499-47e3-abad-faa47a4594fa"
        },
        "item": {
          "id": "bddcfada-fa54-4dd0-ba4a-095f63b2a563",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "47677b9b-5da3-4061-8d82-ab90b279a066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "9d12d083-31a6-4457-b42d-93803a54a2a0",
        "cursor": {
          "ref": "c3f3738b-3b61-4306-a32e-375a8ba6aac1",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b20853d1-376d-48b2-9f73-35f10f45b8d6"
        },
        "item": {
          "id": "9d12d083-31a6-4457-b42d-93803a54a2a0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3afb7098-81e2-43b8-a59b-51cf51fdb38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "01a5d290-7712-4684-9344-088e176e20be",
        "cursor": {
          "ref": "12f751de-ba06-4a03-b4d0-63e5b496835d",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f826f473-7c5e-4b7b-8369-7aa831edee16"
        },
        "item": {
          "id": "01a5d290-7712-4684-9344-088e176e20be",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "98fb2c51-8989-4fac-8e1e-5f288ee9017e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "5730e0ad-ff70-449f-b78b-97eb428bbf3b",
        "cursor": {
          "ref": "2393a563-28ec-4ac2-86a4-38dbae318f32",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "08cc50d1-8cef-4dd0-a8f6-86747fe49819"
        },
        "item": {
          "id": "5730e0ad-ff70-449f-b78b-97eb428bbf3b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "101eb9b8-f649-4cfc-b80f-b3e13b81f2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "ac9cd83b-63f2-4320-85a6-cbf7cbb49680",
        "cursor": {
          "ref": "a5a609fb-ecdd-4e4f-bac9-51bb9d43b329",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "270bd049-7771-465a-998f-b3c17e3642c4"
        },
        "item": {
          "id": "ac9cd83b-63f2-4320-85a6-cbf7cbb49680",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8a645086-5eef-490f-ae5b-9418c3f8cc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "4d35a83f-15d6-4ebb-ad54-e598f269cbe5",
        "cursor": {
          "ref": "15980108-9360-4b5a-acb0-2aaee1b390e8",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b16b368f-1515-4f3c-b0d4-fb622dd7191b"
        },
        "item": {
          "id": "4d35a83f-15d6-4ebb-ad54-e598f269cbe5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d51131d2-0e2a-4485-afd0-2e63dff84424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "bb845dcb-f46e-4618-a8fe-64525ef38f54",
        "cursor": {
          "ref": "9251fb86-f47e-462c-b0aa-5083837cde72",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "30c4dc5c-7a16-42bd-9d6b-deccfcb66d61"
        },
        "item": {
          "id": "bb845dcb-f46e-4618-a8fe-64525ef38f54",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "7a59ac89-e62a-4cfb-bd22-e1c6244859c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8087cd34-858f-481a-9620-4e8cb09dc3df",
        "cursor": {
          "ref": "be8ae78f-0191-4725-b485-faa2a0e68a5e",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "64866625-e876-4b59-b2be-465bea342011"
        },
        "item": {
          "id": "8087cd34-858f-481a-9620-4e8cb09dc3df",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "99fc7b00-2859-4556-80ee-bd526370a24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "0cb54092-c232-49a2-a1e0-19042e8240e2",
        "cursor": {
          "ref": "eb3ecf23-5642-4a4e-b600-95f87f48e509",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0471591a-8642-4881-ab09-af9a32dee7f4"
        },
        "item": {
          "id": "0cb54092-c232-49a2-a1e0-19042e8240e2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "598e7ca7-42ad-4991-97f5-10802deae9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "6b0e08a8-1e91-400c-8f3e-e174a6c25681",
        "cursor": {
          "ref": "c8558e3f-3d3c-4232-82be-661c4c459b29",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "42024e2d-6a3b-4f32-9bfe-fd4ad829b9ee"
        },
        "item": {
          "id": "6b0e08a8-1e91-400c-8f3e-e174a6c25681",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f0d69511-e229-4f69-9156-40342757af33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "663f9b6c-71a3-43bd-871e-c7f1cb068159",
        "cursor": {
          "ref": "c220b3fa-d880-413a-84f0-cad3699b269a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7bf6d389-9273-4833-abe7-396e3c5d973f"
        },
        "item": {
          "id": "663f9b6c-71a3-43bd-871e-c7f1cb068159",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "376040a5-f96a-40df-b57d-5e810b4dd1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "92320a83-f4dd-4b9b-abd9-7cd6815193dd",
        "cursor": {
          "ref": "76f28428-974c-443e-aa52-cd29cf3d6829",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5cf7062f-0fe5-4a57-ab8f-fb388f2e6d83"
        },
        "item": {
          "id": "92320a83-f4dd-4b9b-abd9-7cd6815193dd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0a8f12e0-daa0-41ce-875a-902673eb185e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "cecbc53b-0381-4e0f-98ff-27b9ae639a82",
        "cursor": {
          "ref": "4f166dc0-cb2a-4045-a609-2ac7e6d7dd2d",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "69235810-fd93-4882-ae77-1ace704f1fa7"
        },
        "item": {
          "id": "cecbc53b-0381-4e0f-98ff-27b9ae639a82",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d20970e7-c19b-4957-b0a1-fc2a5a5e730e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3bdd8986-cef1-4761-919c-1c2addfeeb29",
        "cursor": {
          "ref": "03329fc7-267c-439e-8024-1e6307b6e565",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ef24b0dd-42c4-452d-9c66-f9a16ab8c710"
        },
        "item": {
          "id": "3bdd8986-cef1-4761-919c-1c2addfeeb29",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9dd18725-4160-4faa-8038-739f1e466bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "e38e4af2-66d3-4555-87e3-f737896bd4ec",
        "cursor": {
          "ref": "87fdd613-0631-4241-a59e-2de3602720f5",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "eb9087bc-2181-47d5-9958-bef911b3c283"
        },
        "item": {
          "id": "e38e4af2-66d3-4555-87e3-f737896bd4ec",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e0eae7e2-1d7b-45cd-afdb-5a91d52fe4f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "91b925c9-c8c5-4c5a-b29a-c1ca4b2d1f99",
        "cursor": {
          "ref": "644d1f05-79f7-451d-8017-129effa73206",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fc28209a-1461-4bd3-821c-8dce302437b0"
        },
        "item": {
          "id": "91b925c9-c8c5-4c5a-b29a-c1ca4b2d1f99",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dfd1c8a5-5726-49e6-bbc7-ecceba33eb17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "22b04d6c-5499-4590-82b7-39746d7cf0a8",
        "cursor": {
          "ref": "ab6db201-24f0-4904-849f-2e1d95e8c117",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4733a045-61f4-46d5-a790-97e3f7359886"
        },
        "item": {
          "id": "22b04d6c-5499-4590-82b7-39746d7cf0a8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "13bcad67-5d6f-43d3-839c-adcfc886e16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "84829fdd-eb41-4e3e-9385-f5854fbc5791",
        "cursor": {
          "ref": "f0502ca9-ba79-4f2d-984f-128b176a0c5d",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "970e27ca-416a-4dc3-a663-754c274fcb04"
        },
        "item": {
          "id": "84829fdd-eb41-4e3e-9385-f5854fbc5791",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9c86f11a-3976-4a11-b430-222a44b7c319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a616ce39-f818-4c08-9287-122c92d61dbf",
        "cursor": {
          "ref": "9d344ce3-02d7-4cff-a4ee-12d58574ebd3",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "43fbd1bc-8c71-4c6b-a18c-1b99c094f107"
        },
        "item": {
          "id": "a616ce39-f818-4c08-9287-122c92d61dbf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "538b114c-952c-4707-8b7a-042aac9bfb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "95853011-21f7-4830-a1ec-b4f8abbc1df3",
        "cursor": {
          "ref": "583919e0-b9c3-473c-af4b-0f488e805a94",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "acc72cfa-ead0-4948-a659-70297488c368"
        },
        "item": {
          "id": "95853011-21f7-4830-a1ec-b4f8abbc1df3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6dec06d0-cda7-4b27-bb2e-835c6c2d5adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4282,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "2f4d09ca-fd0d-4084-b502-8e0307a5175a",
        "cursor": {
          "ref": "13de9cd2-d3e3-42a8-8757-1fd7cd9c09e7",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ae28b4b9-2b81-41e9-b63e-569b0e44af8b"
        },
        "item": {
          "id": "2f4d09ca-fd0d-4084-b502-8e0307a5175a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b3fb6ec0-c483-4109-a1dc-8f1a41fc57aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5959,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "03dc58d3-d01e-4fc1-ac92-9b8bdc83182b",
        "cursor": {
          "ref": "4696fd7a-022a-4330-8e69-246999c4b277",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7502ebdd-57ce-4602-8494-f74521afad64"
        },
        "item": {
          "id": "03dc58d3-d01e-4fc1-ac92-9b8bdc83182b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8a6bd84a-cdec-4201-9524-ba165b1a9d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3658,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "22017d29-761d-4e1f-8cab-ef9df35ddb51",
        "cursor": {
          "ref": "e1245bcf-bdd5-4e18-a4d3-ee782547e28c",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a35dfc84-3937-4485-b258-68f8503763dc"
        },
        "item": {
          "id": "22017d29-761d-4e1f-8cab-ef9df35ddb51",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6104b554-4756-4f02-9c46-f198fc3ea2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3947,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "99f8c25a-f057-47c1-a2f7-1d614174ed73",
        "cursor": {
          "ref": "49aeb41a-8f2f-462d-9dfe-840e136e413e",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a774ca45-2558-43ad-9db3-0f860d7ad1f4"
        },
        "item": {
          "id": "99f8c25a-f057-47c1-a2f7-1d614174ed73",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "93da2f2d-557f-4c55-a420-8fcd34dfd29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3655,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "14913ad7-342d-4aaf-83f7-2c61ae52fe44",
        "cursor": {
          "ref": "18ed5b89-77ef-48f6-aa0a-78b4bfc20823",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "91a413c8-6fde-49c6-9b26-c8b0a8f2cf57"
        },
        "item": {
          "id": "14913ad7-342d-4aaf-83f7-2c61ae52fe44",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2a4b2c0e-40b7-4c16-96b9-2f4549620828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f8b01813-4afc-4332-8b9b-e032ddb8cb57",
        "cursor": {
          "ref": "12faf179-8a97-4216-84c4-8086d9528727",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5130f96b-5c8d-45f0-a393-c6fc532e4c04"
        },
        "item": {
          "id": "f8b01813-4afc-4332-8b9b-e032ddb8cb57",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d08a987c-662d-4d37-9138-3f17b066a028",
          "status": "Created",
          "code": 201,
          "responseTime": 3682,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "1a4c53ef-b9cf-4b70-8c45-8ae17e95bc54",
        "cursor": {
          "ref": "fe4258d3-4b85-426c-b612-5b9393e24e88",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9454a6b4-babd-44b5-a7d0-aa8b20f9a84c"
        },
        "item": {
          "id": "1a4c53ef-b9cf-4b70-8c45-8ae17e95bc54",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8a5fe8e7-9924-4860-8e30-2def0c5b9c93",
          "status": "Created",
          "code": 201,
          "responseTime": 5118,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "16102398-371c-44de-b4f4-965e3ced2cd9",
        "cursor": {
          "ref": "5c8221f0-3728-4695-bd33-03800e772424",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2a45548f-a4fb-4d2d-becf-b37f84e58e46"
        },
        "item": {
          "id": "16102398-371c-44de-b4f4-965e3ced2cd9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "43e349f3-d651-4405-8ccf-9726c05bfda2",
          "status": "Created",
          "code": 201,
          "responseTime": 4287,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "90056d51-255e-43c0-9b86-394b41eb3cb1",
        "cursor": {
          "ref": "a659878e-5c8f-477d-985d-dc1c1ea599a5",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ca2b07b2-34c2-42da-aec8-f368b517ae55"
        },
        "item": {
          "id": "90056d51-255e-43c0-9b86-394b41eb3cb1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "11db806e-ef22-4acd-945f-4773e72bf5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "98f15589-c66d-4e7d-a331-21d8ea3e03c6",
        "cursor": {
          "ref": "fb9c8821-a302-446e-9ef9-d85b8844de55",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c7f69c60-33aa-4907-91b7-1011fb9ea10f"
        },
        "item": {
          "id": "98f15589-c66d-4e7d-a331-21d8ea3e03c6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "95eba832-7c64-4082-bdf2-7c28f8430e97",
          "status": "Created",
          "code": 201,
          "responseTime": 3750,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "43e5980b-3271-4564-af03-90514aff62fe",
        "cursor": {
          "ref": "f58ee718-da1c-454d-94cd-f9102c6a57cc",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a73c61e7-05a8-412d-9f95-20248325102d"
        },
        "item": {
          "id": "43e5980b-3271-4564-af03-90514aff62fe",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "86c7a031-8e23-4eca-aae7-2fb686220725",
          "status": "Created",
          "code": 201,
          "responseTime": 3744,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ca55e105-3eae-441c-b0fd-2340c57a508d",
        "cursor": {
          "ref": "cc8391a1-9a26-4ab3-a486-83093d020df1",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f873f9b9-934b-4a0f-b0d0-7a5c7c18c35b"
        },
        "item": {
          "id": "ca55e105-3eae-441c-b0fd-2340c57a508d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b7b28d3b-36ad-4e79-b22e-9e5dc348beb1",
          "status": "Created",
          "code": 201,
          "responseTime": 3743,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3c31651c-395b-4bfa-9013-97893b3bbca9",
        "cursor": {
          "ref": "5387a5fe-a080-491f-bf8e-3838cd7400e5",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "43a4b6b5-1aa1-4dfd-8486-9ffced522fd8"
        },
        "item": {
          "id": "3c31651c-395b-4bfa-9013-97893b3bbca9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5962d1a1-351a-43f7-beea-ae7ff43fc813",
          "status": "Created",
          "code": 201,
          "responseTime": 4114,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "58cc38c3-cd06-4d91-a87c-24b558df2bff",
        "cursor": {
          "ref": "4852e5c3-1a67-4373-ab6d-7f69e6e87e9d",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1e5484aa-9fc9-4610-9174-bb5bd626b6a6"
        },
        "item": {
          "id": "58cc38c3-cd06-4d91-a87c-24b558df2bff",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "091546be-614d-458a-85a8-3234f451d6ff",
          "status": "Created",
          "code": 201,
          "responseTime": 5223,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "88bb1368-fa5b-44a1-91d0-7e00334842e1",
        "cursor": {
          "ref": "69f08a8b-975b-4cdf-94e9-122bce33d2e7",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "db3a738e-52f3-465c-a606-52beb4f1c1f8"
        },
        "item": {
          "id": "88bb1368-fa5b-44a1-91d0-7e00334842e1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4e99e047-79c5-4724-b4b7-900d28f4c75b",
          "status": "Created",
          "code": 201,
          "responseTime": 4005,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2bccd3ed-ae16-45ed-8e3c-eca02b18e1a2",
        "cursor": {
          "ref": "2ae30ee1-b499-4069-a716-b47f701c1abd",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "136b1c1d-8769-4377-b68b-7de71228d6ec"
        },
        "item": {
          "id": "2bccd3ed-ae16-45ed-8e3c-eca02b18e1a2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4b9623be-0cdd-43f0-8bc1-d7ebb6db7940",
          "status": "Created",
          "code": 201,
          "responseTime": 3612,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d369111e-25eb-4e5b-bbab-00da42478da1",
        "cursor": {
          "ref": "a66dac7b-aef1-496a-a4bb-fc293389b5fe",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "998dad9f-d9db-40e6-a8a1-ee27605123c0"
        },
        "item": {
          "id": "d369111e-25eb-4e5b-bbab-00da42478da1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d0fcffa1-2fa5-4592-9fb9-be886f1a668f",
          "status": "Created",
          "code": 201,
          "responseTime": 3758,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "2ab72c76-0d5d-4d5f-b146-60e0c2434560",
        "cursor": {
          "ref": "434cbd0f-273b-42d8-bdb2-57447be2ffe5",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a5be0d96-cb0c-499d-b5ad-1d3101875fe3"
        },
        "item": {
          "id": "2ab72c76-0d5d-4d5f-b146-60e0c2434560",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4c7a936a-697c-4e3e-8f99-54a0cf5cc7e7",
          "status": "Created",
          "code": 201,
          "responseTime": 3562,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "262224a6-c0b4-4b84-9478-4c6a07ccc12e",
        "cursor": {
          "ref": "1258814e-f748-473b-bd8f-edc8d922847b",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "edbe518e-64f8-4903-91f6-3cc2646103c2"
        },
        "item": {
          "id": "262224a6-c0b4-4b84-9478-4c6a07ccc12e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "47393178-6271-4330-82a8-403298207228",
          "status": "Created",
          "code": 201,
          "responseTime": 4808,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "6a4f337f-4b35-4294-85d7-1a4426d6b87c",
        "cursor": {
          "ref": "52a40a9e-a033-4782-80ac-6c91a9aec279",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4f0f6085-e18f-4751-89b8-9160849fdadc"
        },
        "item": {
          "id": "6a4f337f-4b35-4294-85d7-1a4426d6b87c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bdae8a5f-7df6-4a4c-811c-702e283c5c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "7f490974-6cf7-4d52-b81c-a580d8e3f163",
        "cursor": {
          "ref": "e5bdd266-b94e-41ad-bf24-e63bb202dace",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a5315ecf-49b6-4bc4-8862-0612241a459a"
        },
        "item": {
          "id": "7f490974-6cf7-4d52-b81c-a580d8e3f163",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6ee63b8f-b998-4a64-90b4-9a32397d4c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "ad3b6183-2865-46c3-a0a1-40372d7a6bda",
        "cursor": {
          "ref": "d89de09d-db94-4521-bd20-81725c72e73f",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "640b94c5-1d1d-4071-9b1f-f63c443a44a6"
        },
        "item": {
          "id": "ad3b6183-2865-46c3-a0a1-40372d7a6bda",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d9af0219-daa2-47db-8290-90734ec897c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "4c49c30a-67c2-46f1-8851-f015ddbd5994",
        "cursor": {
          "ref": "55909e43-2dc5-4aa3-9a43-dc27f3dd86ab",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a9e54d7c-566d-4c77-a3dc-ca95631e7438"
        },
        "item": {
          "id": "4c49c30a-67c2-46f1-8851-f015ddbd5994",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "53f63be9-0df6-4837-91e7-207997b69a7b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 3284,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "68962890-cefe-4502-99bc-d681c00b4c43",
        "cursor": {
          "ref": "245fd2ca-d44e-4718-926d-b2d8ec8c7c41",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5836ed5e-e84d-4b4a-baf3-017ab6762d36"
        },
        "item": {
          "id": "68962890-cefe-4502-99bc-d681c00b4c43",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a3c6c727-ea3a-4464-b49f-7fc31d60ffe5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c3950392-87f7-424d-92c0-8d35c815b486",
        "cursor": {
          "ref": "394fda7b-c963-45a2-ac3f-fcef5f596bd6",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f672a22b-ee46-4177-971f-56b38ffd4aad"
        },
        "item": {
          "id": "c3950392-87f7-424d-92c0-8d35c815b486",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d352f0c3-d88e-4301-91c6-8c330a7e5a02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "2a14e810-1357-40e6-9ba8-a6be46a61d7a",
        "cursor": {
          "ref": "e02c3449-42e1-4e45-a477-28c52c0b2c65",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "275a991a-e48b-4c69-8027-56f534d583ea"
        },
        "item": {
          "id": "2a14e810-1357-40e6-9ba8-a6be46a61d7a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2b222d74-eee7-4001-9dba-0cea7ad2ac9a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "63aa8ca5-59e8-4afa-b7a2-c212988600d5",
        "cursor": {
          "ref": "1b2fac7d-8ca4-45bb-a37e-be3033ee2824",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "333e053b-c187-47f5-ba6b-29bf1f808f69"
        },
        "item": {
          "id": "63aa8ca5-59e8-4afa-b7a2-c212988600d5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "abf217c0-78e3-4fd3-8c3a-564a9bda0672",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "2645ead8-b68b-4922-abd2-b74690216b14",
        "cursor": {
          "ref": "32d3e7e1-69f8-4b89-8973-a1c140ee309e",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9d6a9da5-39a2-4d01-86c6-9c23199cb474"
        },
        "item": {
          "id": "2645ead8-b68b-4922-abd2-b74690216b14",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "06a8f5a4-990c-42fa-bac2-264596526b69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "ed5baafa-9f1a-4118-9c2a-af18ec7072b6",
        "cursor": {
          "ref": "439e8a96-c7e3-4763-820a-389befc1cb8e",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4c5eb0e1-ec0b-43c4-b948-9df742592e4e"
        },
        "item": {
          "id": "ed5baafa-9f1a-4118-9c2a-af18ec7072b6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "503f025b-e632-4deb-8c78-be667e18d196",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1c4c95d8-d674-4dac-bb7e-e5d9e1639e46",
        "cursor": {
          "ref": "52307f36-2325-4b24-ab79-36d6b2ec0d3f",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "167fffcc-8599-4f69-913c-4432157bb7c0"
        },
        "item": {
          "id": "1c4c95d8-d674-4dac-bb7e-e5d9e1639e46",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2e672a5c-c772-4249-8696-ce68b66850d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f7fb1902-2c3c-4145-9de9-7157fc3887e6",
        "cursor": {
          "ref": "7af4e64a-d0d1-479b-b296-7acc9e05b505",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "da3f8c07-2ca8-481e-9c67-f58a5d238ca2"
        },
        "item": {
          "id": "f7fb1902-2c3c-4145-9de9-7157fc3887e6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "22684b2c-bd3c-40e3-ae49-a86055782cdd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "914fcbc4-7cd8-4daa-a412-47d673dc443c",
        "cursor": {
          "ref": "6e96f5eb-f51d-4a94-91a0-39966d371ac8",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "248a6913-5db6-4fea-a6c3-34b52ed90661"
        },
        "item": {
          "id": "914fcbc4-7cd8-4daa-a412-47d673dc443c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b1285b09-4d4e-4432-8edb-73dc9995a4b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f33666fe-b524-4423-a513-d06ae2e456e1",
        "cursor": {
          "ref": "9c5fb901-3698-44ad-80b2-2f8737176ce6",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4ef04b1c-b622-4d08-b27a-dfa5a5d76c46"
        },
        "item": {
          "id": "f33666fe-b524-4423-a513-d06ae2e456e1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "da6b5e4f-ad28-4b16-ad90-05de1999263d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7056f25b-163f-4c9e-bd7b-0c02e7cc5d55",
        "cursor": {
          "ref": "df2dcb69-fb1f-41e6-af1f-c808c7d8e7e7",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2c5f665c-5a47-4e54-a0a1-2844c950a615"
        },
        "item": {
          "id": "7056f25b-163f-4c9e-bd7b-0c02e7cc5d55",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "36189da1-cf3d-4c9b-b8e4-7e714ba2ffdd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "2fc4dd10-268e-4624-abd8-ad6be944ee3c",
        "cursor": {
          "ref": "6590e763-3c32-45cd-9e5a-5ffc83f6e400",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ead92f9f-0f45-485c-b5ce-68399a743c4b"
        },
        "item": {
          "id": "2fc4dd10-268e-4624-abd8-ad6be944ee3c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e5cbd1c5-8e1c-4b0a-8887-eece35b2b2cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "09b5b4a3-aba7-49cc-819d-a5c400bad9b1",
        "cursor": {
          "ref": "39661603-3396-4827-9aae-694e7cec1bf2",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a732f4af-4616-4e75-aa1a-19c46d9f0c2e"
        },
        "item": {
          "id": "09b5b4a3-aba7-49cc-819d-a5c400bad9b1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3158b9ad-0b18-48d7-a48c-b2f24e1c9a09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "4cb883cb-3e69-4447-91ee-76319e564c5b",
        "cursor": {
          "ref": "1ba18cc1-1feb-45b3-96c9-aa2f589c8507",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4209a813-3dac-4385-89ab-dc7d8b1c9750"
        },
        "item": {
          "id": "4cb883cb-3e69-4447-91ee-76319e564c5b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e02674b1-3504-4e84-81e9-50c0070b22ab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "a377bc9c-4012-4267-ae97-47663a454381",
        "cursor": {
          "ref": "36d93a8f-10e8-4210-ae21-8a72fd55eff7",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2bade971-6728-4940-9258-247aea5a216c"
        },
        "item": {
          "id": "a377bc9c-4012-4267-ae97-47663a454381",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "93ae53e1-76c3-487c-8cb0-5e4bb8b482db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "7efebd5d-d331-47f8-baa1-b1185e2e824f",
        "cursor": {
          "ref": "81204523-ff03-4a2d-8820-a490781c907a",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "63032ae1-07f4-4853-914c-79eeaeb4cef2"
        },
        "item": {
          "id": "7efebd5d-d331-47f8-baa1-b1185e2e824f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ca525264-5cb9-47ae-96da-46ee4f7a229b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "c5cc97a5-fa23-4634-bbe3-6d5232d628c0",
        "cursor": {
          "ref": "d8bad056-293b-41d9-9ac4-146f147d9ffd",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b2fc8e01-d879-4da9-8fe8-43dae160d907"
        },
        "item": {
          "id": "c5cc97a5-fa23-4634-bbe3-6d5232d628c0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b52beed0-bf24-4d6a-ad7a-44e62b1ddf80",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "7d2c0c1a-dc17-4bd7-876e-56b470b7210d",
        "cursor": {
          "ref": "fd9bb80b-5c46-4421-8b43-d578b2de7b38",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8e5a144f-c155-4861-8713-824a37360190"
        },
        "item": {
          "id": "7d2c0c1a-dc17-4bd7-876e-56b470b7210d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "537a0030-e4ff-4cf7-bc1d-1eeb7f547c39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "64c6a712-0ac1-4f63-a6b8-e03bdcef4a3e",
        "cursor": {
          "ref": "2900bad7-0166-4d01-9176-fec00c4e1ca6",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ddbe2f18-f73c-4dce-a08a-c9e847b0422a"
        },
        "item": {
          "id": "64c6a712-0ac1-4f63-a6b8-e03bdcef4a3e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "34f7ab4b-5d00-4e0f-bc22-c28f32229f5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "1663d8f7-ea0d-4881-a0c7-f8f3e9239662",
        "cursor": {
          "ref": "c15faac0-b969-4dab-94bd-41e77754f38f",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "addd448b-10a7-4e31-bfc8-8fbe4a6ad024"
        },
        "item": {
          "id": "1663d8f7-ea0d-4881-a0c7-f8f3e9239662",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "64e27f69-4b1e-4185-9d9f-7d479162c206",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "4d1981e1-5134-4b39-aae5-5461af9632fc",
        "cursor": {
          "ref": "6b2a8df8-9bfd-4766-b9aa-117664ffea83",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "877d5366-a507-4c54-88d7-b4ca43e910be"
        },
        "item": {
          "id": "4d1981e1-5134-4b39-aae5-5461af9632fc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a5c81dcc-59dd-43d9-9102-02b0aec2aabe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "e2a0c0cd-e4bc-4dc7-ac56-7b887941dc58",
        "cursor": {
          "ref": "dee033b5-1c31-43d1-bc14-e20694198091",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "23765bc6-454e-4b30-821a-f9e391b7eb58"
        },
        "item": {
          "id": "e2a0c0cd-e4bc-4dc7-ac56-7b887941dc58",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "26d4f004-fcc5-4431-818a-1735af699dba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "ffbd2f55-f13a-48a6-8b8f-ed20669f3aa2",
        "cursor": {
          "ref": "635c3aa9-f541-47a0-aba2-930669e1b07a",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f5241980-637d-4005-af5e-f3eaad9db437"
        },
        "item": {
          "id": "ffbd2f55-f13a-48a6-8b8f-ed20669f3aa2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "314eb2b9-d194-4e56-b7b5-95cbe83d75b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "34e6e580-dc38-4b2b-8017-e5e406404d16",
        "cursor": {
          "ref": "53a44663-efe9-4354-8eed-78a292a908bf",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9afff380-3215-46d3-86ca-4074d992077c"
        },
        "item": {
          "id": "34e6e580-dc38-4b2b-8017-e5e406404d16",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d6193344-2ce3-47f2-9feb-16c66e537e6c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "4220b8ef-4741-459b-b281-fb2b7ad006ea",
        "cursor": {
          "ref": "63d3459f-f8d5-47d5-91bd-381a6a11680a",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "47a18081-b136-4c27-b627-ef669689672e"
        },
        "item": {
          "id": "4220b8ef-4741-459b-b281-fb2b7ad006ea",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "63e266c3-369a-4dc1-8c72-bafba0d206aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "d3394ee8-2e03-40ea-ba0f-642438c9f908",
        "cursor": {
          "ref": "8f1a4d25-d77f-48eb-a18e-5221393e136c",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "43ab3ad5-376d-4aa0-9f16-4b0f3b7cbe88"
        },
        "item": {
          "id": "d3394ee8-2e03-40ea-ba0f-642438c9f908",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "70c0f0b2-76a7-4bb5-8a6f-6cce8ff04cf2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "5d4cfaa8-f07e-4183-b099-79e5454d548b",
        "cursor": {
          "ref": "96641761-d017-4225-b6ff-a3130f4bedba",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b9d5615a-1ec3-4ce2-ac02-499d6dc3daf5"
        },
        "item": {
          "id": "5d4cfaa8-f07e-4183-b099-79e5454d548b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b9d60832-657b-4463-88e5-907ed9c82f72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "5cdd8cd6-ac83-4c3b-9132-7c456a5f4b3d",
        "cursor": {
          "ref": "c3db97ca-ee99-46ee-88cf-e991e8aea468",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2938732a-d5b0-43a0-b9dc-0b2fd01fb47c"
        },
        "item": {
          "id": "5cdd8cd6-ac83-4c3b-9132-7c456a5f4b3d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "74d93a44-5078-4299-bac2-d8dacccf266c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "242d445b-8bb5-4f01-afa0-444fb8fa6b90",
        "cursor": {
          "ref": "97b53da6-6e24-4f50-bd0d-d4274ac70895",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "483f6fc4-6150-4054-b1d9-9acc959f14c1"
        },
        "item": {
          "id": "242d445b-8bb5-4f01-afa0-444fb8fa6b90",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "695732c3-f31d-421a-acd3-b55aefadaa62",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "d998bf8f-c409-4014-8e70-5b4b581fcef0",
        "cursor": {
          "ref": "97bbe9d0-b0db-42a9-8bdc-c7034fdf0ef3",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4b88d4ae-201f-4426-8183-80859a8ac7a2"
        },
        "item": {
          "id": "d998bf8f-c409-4014-8e70-5b4b581fcef0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fa4df2fa-a74e-4fc9-ac51-34b13ff523b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "a6656f73-05de-4306-938f-244beee5cebd",
        "cursor": {
          "ref": "243a98db-f0ed-4de8-84c7-98728f94784b",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "06645dea-ae5a-413a-8c20-eda7030592df"
        },
        "item": {
          "id": "a6656f73-05de-4306-938f-244beee5cebd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "aba0e78f-9bbe-4e85-9bd6-f9c6c88ddd20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "2b19c0b2-6d78-484b-a014-460cce1ef021",
        "cursor": {
          "ref": "c86984fd-2a34-434d-a2a0-6aa19d43151d",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "dd26543e-52d5-462c-a4f4-c0c40df1f9a7"
        },
        "item": {
          "id": "2b19c0b2-6d78-484b-a014-460cce1ef021",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "537063f1-bba0-4a89-92f5-73e6a973969b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "a385623f-c103-4ff7-9a89-93430d2b78f5",
        "cursor": {
          "ref": "d08a1c8c-1994-4ba7-8dd2-3f18a3945cd7",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a19208ac-64d3-4006-a322-01f7e6f9f3c5"
        },
        "item": {
          "id": "a385623f-c103-4ff7-9a89-93430d2b78f5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "152d7cf2-a3e5-43f0-b70c-efe6e52d0fef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "7eb3f9d6-4042-4a95-bd1c-b9d1611a75f9",
        "cursor": {
          "ref": "848dcf34-04b9-40dd-8d23-19a34525e5dd",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4b7e9cb9-bb6f-4a41-9f03-fa5867b06c45"
        },
        "item": {
          "id": "7eb3f9d6-4042-4a95-bd1c-b9d1611a75f9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7f99f37d-deb1-4385-9a1b-4070474837e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "3c2a9313-ad14-4505-9187-ae6e78aab472",
        "cursor": {
          "ref": "38990fc4-943d-47af-a382-0592534e2c09",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "559b82ad-c771-4275-a338-3d3801b04109"
        },
        "item": {
          "id": "3c2a9313-ad14-4505-9187-ae6e78aab472",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8145c448-3ac3-4769-9bfe-5a7484088077",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "a22ecfe2-3593-49cb-b3d9-98462c233043",
        "cursor": {
          "ref": "50f199fc-65bf-4447-95f8-80ea46b2b923",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fbb7e193-dacf-4f19-8140-fd32c08d33ad"
        },
        "item": {
          "id": "a22ecfe2-3593-49cb-b3d9-98462c233043",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fe03fca9-dff5-4a72-b2eb-5bd129ccf8cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "660f491a-05a4-47f3-8029-27166c9d8e2c",
        "cursor": {
          "ref": "bf6864c8-532b-499b-9214-0d31bfbbb427",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3103196f-5eaf-410b-9c94-56089c449e54"
        },
        "item": {
          "id": "660f491a-05a4-47f3-8029-27166c9d8e2c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "88117297-deca-4997-a42c-deb98beffb22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "9d6a9c6a-0d73-4277-ae5f-f53d55c9b7d3",
        "cursor": {
          "ref": "9bf53a03-aacd-4133-acbd-fa4ac338f37c",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cfa0e8d2-f0ed-4c3f-ad7c-c2a9173668b3"
        },
        "item": {
          "id": "9d6a9c6a-0d73-4277-ae5f-f53d55c9b7d3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4c41e0ba-1a34-40de-b995-fd1646d6a73d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "46db0b41-a434-43d5-9ae9-de4dc803e858",
        "cursor": {
          "ref": "6d4a42bd-4cf3-4a9c-9b15-dae8263fbb21",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9e5063de-958c-4ed3-9cef-1cc7b405cb6b"
        },
        "item": {
          "id": "46db0b41-a434-43d5-9ae9-de4dc803e858",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dc60f411-8b41-4f39-abd7-52d93712544b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "3b87a9b3-f609-4a18-b18b-18fccb1b5ca2",
        "cursor": {
          "ref": "5090edd4-a42f-4c37-bdab-b4a53d892124",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ad777beb-d7c0-46c0-a787-c6a1bdd5c134"
        },
        "item": {
          "id": "3b87a9b3-f609-4a18-b18b-18fccb1b5ca2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "91f266c9-d4dd-4db5-866c-4cb5f6fb6817",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "f1bec669-e3d4-44b3-ad41-75c2f2cf61c9",
        "cursor": {
          "ref": "9ea38a08-4b7f-4667-bbed-a2973779c817",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a20c7f88-c071-4fe1-b01c-d37558fa5c0c"
        },
        "item": {
          "id": "f1bec669-e3d4-44b3-ad41-75c2f2cf61c9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8a5a94a2-8560-40b4-8cd4-61b26ec01d7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "bfb729db-11a0-4ed8-beea-52778310346b",
        "cursor": {
          "ref": "52d81d6b-6b50-4041-9a10-2adf19cd410c",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2e75fe93-1620-4798-aa49-40a6e9f1c844"
        },
        "item": {
          "id": "bfb729db-11a0-4ed8-beea-52778310346b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "182f5092-5afd-41c0-82c6-d5c7b847b21c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "009518e5-61af-454e-b804-343b18b3373d",
        "cursor": {
          "ref": "96b0e9a4-abe4-4b7a-9474-45e9b3d91c3a",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9b83a775-865d-447a-9958-20ee065e27d3"
        },
        "item": {
          "id": "009518e5-61af-454e-b804-343b18b3373d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a544745c-c2d0-4d89-841f-034d861844b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "9c0d4abf-91af-456b-887d-ed09b3141668",
        "cursor": {
          "ref": "49e6c58c-a006-47ae-9540-1b55eaa45381",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bba3fe8d-e83e-4bdd-b95e-00f43d48fddf"
        },
        "item": {
          "id": "9c0d4abf-91af-456b-887d-ed09b3141668",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e0d70df6-2294-46f1-b469-03b40a459367",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "c39f85e1-6b74-4824-bf50-8b1921afce17",
        "cursor": {
          "ref": "e80a9e0f-faad-4bd6-994f-f82aa677d941",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "356cf303-9787-41f8-a13a-10aa340b9397"
        },
        "item": {
          "id": "c39f85e1-6b74-4824-bf50-8b1921afce17",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3eb8f6be-e89b-46c7-9da8-7064146500ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "d70292a7-05b6-47b9-868b-5ed24fe19b52",
        "cursor": {
          "ref": "fe77a4b9-779b-4176-a286-6a0cabe09f75",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "07300ca6-617a-4b22-bef9-3055f1c140c2"
        },
        "item": {
          "id": "d70292a7-05b6-47b9-868b-5ed24fe19b52",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4ab6855e-4260-4bb2-8714-72d120b9d0c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "859d4a67-321e-4946-a695-afe07a3428e9",
        "cursor": {
          "ref": "cd8d9446-630e-4cb1-a3f0-6d3a004742c0",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1b6eadf3-c741-4dfb-8b4c-24e987812170"
        },
        "item": {
          "id": "859d4a67-321e-4946-a695-afe07a3428e9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5de481b2-c1a0-4f04-8d7c-eae6ad9d60b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "07084e5e-07d6-4a74-b91c-29fe14bda618",
        "cursor": {
          "ref": "8f90dcfd-383c-4b10-9926-a4927385f94c",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cfb42a50-12a6-4d36-b713-41f3fe50e814"
        },
        "item": {
          "id": "07084e5e-07d6-4a74-b91c-29fe14bda618",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7298c1aa-8561-4376-854b-324f678f92ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "b2bd477f-1914-4d08-b191-8878fb87a76b",
        "cursor": {
          "ref": "73e1e87e-3b8c-4f25-b3dc-fda979a96071",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "af7a52b1-03d6-4a04-ba09-e6eba8b2fc3c"
        },
        "item": {
          "id": "b2bd477f-1914-4d08-b191-8878fb87a76b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b2feb69b-6a40-470d-bef3-3bd401e7e040",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "edd08f72-bc47-41cb-8086-c20d8c11f328",
        "cursor": {
          "ref": "7dad9a49-a450-4caf-9e98-1536eeb5095e",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8fb09d7d-081e-424f-bf58-2fe562643657"
        },
        "item": {
          "id": "edd08f72-bc47-41cb-8086-c20d8c11f328",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7e99ece0-1a26-496f-ba3b-1e2c9e2734ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "5c555595-2896-451d-92c2-a5181e42d717",
        "cursor": {
          "ref": "e76af189-1e06-4567-8ec1-bb6884444566",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d3a928b3-6750-4eb7-b6a9-58bbc091b61b"
        },
        "item": {
          "id": "5c555595-2896-451d-92c2-a5181e42d717",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1f673c61-d8a6-4aaa-a8e3-fbc012cecd8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "44cf4eef-cc63-4ced-9086-5cf3c9f31a4d",
        "cursor": {
          "ref": "43c1dc1f-7e54-4dc1-96ce-649bb162e9c1",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "15ccb729-f0fd-466e-bc4c-60997006d504"
        },
        "item": {
          "id": "44cf4eef-cc63-4ced-9086-5cf3c9f31a4d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f9db693d-fac0-4c53-9a28-29ecf14bb688",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "44cf4eef-cc63-4ced-9086-5cf3c9f31a4d",
        "cursor": {
          "ref": "43c1dc1f-7e54-4dc1-96ce-649bb162e9c1",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "15ccb729-f0fd-466e-bc4c-60997006d504"
        },
        "item": {
          "id": "44cf4eef-cc63-4ced-9086-5cf3c9f31a4d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f9db693d-fac0-4c53-9a28-29ecf14bb688",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "ea459452-eed0-4954-b0f5-88898c86e8a8",
        "cursor": {
          "ref": "3fba6967-6cb1-4388-8c35-9c9d5cdf93ac",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f6148a31-aa22-425c-bd29-f752fb4437ca"
        },
        "item": {
          "id": "ea459452-eed0-4954-b0f5-88898c86e8a8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "56d8060c-dadd-4f14-b188-8506e2239fd1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ea459452-eed0-4954-b0f5-88898c86e8a8",
        "cursor": {
          "ref": "3fba6967-6cb1-4388-8c35-9c9d5cdf93ac",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f6148a31-aa22-425c-bd29-f752fb4437ca"
        },
        "item": {
          "id": "ea459452-eed0-4954-b0f5-88898c86e8a8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "56d8060c-dadd-4f14-b188-8506e2239fd1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "060a6708-1e0d-4a2e-858e-868dfbbcd9a7",
        "cursor": {
          "ref": "8ef16140-483c-49ce-82b9-75a5fca3157f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ad359f9f-4f1c-4294-b2c8-ac639913e953"
        },
        "item": {
          "id": "060a6708-1e0d-4a2e-858e-868dfbbcd9a7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "de0d8067-034b-4247-bd54-d50c20bf26e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "060a6708-1e0d-4a2e-858e-868dfbbcd9a7",
        "cursor": {
          "ref": "8ef16140-483c-49ce-82b9-75a5fca3157f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ad359f9f-4f1c-4294-b2c8-ac639913e953"
        },
        "item": {
          "id": "060a6708-1e0d-4a2e-858e-868dfbbcd9a7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "de0d8067-034b-4247-bd54-d50c20bf26e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "9c25ab88-f717-4b00-ada8-17d510563fca",
        "cursor": {
          "ref": "677e4b40-0464-41ff-86a4-82909394a879",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "29df9442-3c14-4b87-a1b3-2fe873df972c"
        },
        "item": {
          "id": "9c25ab88-f717-4b00-ada8-17d510563fca",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c6acb187-7f29-44bd-a446-6fa383a12114",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "9c25ab88-f717-4b00-ada8-17d510563fca",
        "cursor": {
          "ref": "677e4b40-0464-41ff-86a4-82909394a879",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "29df9442-3c14-4b87-a1b3-2fe873df972c"
        },
        "item": {
          "id": "9c25ab88-f717-4b00-ada8-17d510563fca",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c6acb187-7f29-44bd-a446-6fa383a12114",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "8dd48b9c-62cf-46c7-b688-1e167a3c78a2",
        "cursor": {
          "ref": "60a7ea2d-760e-40e7-b216-3af6c72f97b6",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8579f113-8e22-4701-bbd9-870cde741140"
        },
        "item": {
          "id": "8dd48b9c-62cf-46c7-b688-1e167a3c78a2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f03760cb-7ab8-4b8a-a345-b305c77cf836",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "8dd48b9c-62cf-46c7-b688-1e167a3c78a2",
        "cursor": {
          "ref": "60a7ea2d-760e-40e7-b216-3af6c72f97b6",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8579f113-8e22-4701-bbd9-870cde741140"
        },
        "item": {
          "id": "8dd48b9c-62cf-46c7-b688-1e167a3c78a2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f03760cb-7ab8-4b8a-a345-b305c77cf836",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "bc03da3c-5856-4b09-aaa6-0b0ce4d639b2",
        "cursor": {
          "ref": "28bc97e0-0e09-4862-baea-51bec078f917",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "af3bb98b-0e47-43f4-8107-e54061fd4085"
        },
        "item": {
          "id": "bc03da3c-5856-4b09-aaa6-0b0ce4d639b2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e1854114-c2c2-4532-9510-c6ceaaf8fd8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "bc03da3c-5856-4b09-aaa6-0b0ce4d639b2",
        "cursor": {
          "ref": "28bc97e0-0e09-4862-baea-51bec078f917",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "af3bb98b-0e47-43f4-8107-e54061fd4085"
        },
        "item": {
          "id": "bc03da3c-5856-4b09-aaa6-0b0ce4d639b2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e1854114-c2c2-4532-9510-c6ceaaf8fd8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "30abc825-ee54-4387-83a4-4dfffb22b6b2",
        "cursor": {
          "ref": "38081032-7a50-4b0e-9e9d-3ee62270f917",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "becf8804-f9f6-445c-b5c4-28fd81863491"
        },
        "item": {
          "id": "30abc825-ee54-4387-83a4-4dfffb22b6b2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d8ecda09-ba43-4c21-b8a7-3bb6580d60c4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "30abc825-ee54-4387-83a4-4dfffb22b6b2",
        "cursor": {
          "ref": "38081032-7a50-4b0e-9e9d-3ee62270f917",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "becf8804-f9f6-445c-b5c4-28fd81863491"
        },
        "item": {
          "id": "30abc825-ee54-4387-83a4-4dfffb22b6b2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d8ecda09-ba43-4c21-b8a7-3bb6580d60c4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "872f5fdc-bbde-4530-b6f1-3eee7a3ddc1c",
        "cursor": {
          "ref": "c73ce1ae-3d9d-4bf2-ba17-ab7c2024f4cd",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1b5b3742-e4ff-4e89-9015-5b48322db69b"
        },
        "item": {
          "id": "872f5fdc-bbde-4530-b6f1-3eee7a3ddc1c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a71670e5-9b0e-4377-ba94-f5fbe22fd447",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "872f5fdc-bbde-4530-b6f1-3eee7a3ddc1c",
        "cursor": {
          "ref": "c73ce1ae-3d9d-4bf2-ba17-ab7c2024f4cd",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1b5b3742-e4ff-4e89-9015-5b48322db69b"
        },
        "item": {
          "id": "872f5fdc-bbde-4530-b6f1-3eee7a3ddc1c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a71670e5-9b0e-4377-ba94-f5fbe22fd447",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "2fed6b43-3158-4efe-b45e-fb0e4c61bef3",
        "cursor": {
          "ref": "c520152b-c075-4ee4-98dd-fd7e57880bbe",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "16b372c8-13d3-4ae7-9d4a-03f1557a0434"
        },
        "item": {
          "id": "2fed6b43-3158-4efe-b45e-fb0e4c61bef3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "220d6abf-0919-4628-9cf2-abb1bdd073ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "2fed6b43-3158-4efe-b45e-fb0e4c61bef3",
        "cursor": {
          "ref": "c520152b-c075-4ee4-98dd-fd7e57880bbe",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "16b372c8-13d3-4ae7-9d4a-03f1557a0434"
        },
        "item": {
          "id": "2fed6b43-3158-4efe-b45e-fb0e4c61bef3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "220d6abf-0919-4628-9cf2-abb1bdd073ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4b5898d8-d495-46ab-96e0-0a8779234bbc",
        "cursor": {
          "ref": "58e150c2-5b48-42db-b270-67654839ab0b",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "79febfe4-2f69-43bf-9a36-b394a8d51244"
        },
        "item": {
          "id": "4b5898d8-d495-46ab-96e0-0a8779234bbc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5c90f68f-4189-4daf-8f1a-879cca56acb0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "4b5898d8-d495-46ab-96e0-0a8779234bbc",
        "cursor": {
          "ref": "58e150c2-5b48-42db-b270-67654839ab0b",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "79febfe4-2f69-43bf-9a36-b394a8d51244"
        },
        "item": {
          "id": "4b5898d8-d495-46ab-96e0-0a8779234bbc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5c90f68f-4189-4daf-8f1a-879cca56acb0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "094c1bd7-3243-4f35-b343-635a7a8725ed",
        "cursor": {
          "ref": "894e1e2c-97f0-4f9b-8e36-3366d42a1ed9",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b8640d22-837f-4fc9-a7ee-30380756df38"
        },
        "item": {
          "id": "094c1bd7-3243-4f35-b343-635a7a8725ed",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b9426207-b017-4880-98b3-5990d47690ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "094c1bd7-3243-4f35-b343-635a7a8725ed",
        "cursor": {
          "ref": "894e1e2c-97f0-4f9b-8e36-3366d42a1ed9",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b8640d22-837f-4fc9-a7ee-30380756df38"
        },
        "item": {
          "id": "094c1bd7-3243-4f35-b343-635a7a8725ed",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b9426207-b017-4880-98b3-5990d47690ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ce769b98-aa97-4848-b569-981dbfb7007c",
        "cursor": {
          "ref": "3f6414dd-2427-4f79-a8eb-49c77bb6bb9d",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "186918f4-baf4-4f90-b385-74b776483e0b"
        },
        "item": {
          "id": "ce769b98-aa97-4848-b569-981dbfb7007c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "74e52bfb-a72b-4375-b510-8b06b9645d12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ce769b98-aa97-4848-b569-981dbfb7007c",
        "cursor": {
          "ref": "3f6414dd-2427-4f79-a8eb-49c77bb6bb9d",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "186918f4-baf4-4f90-b385-74b776483e0b"
        },
        "item": {
          "id": "ce769b98-aa97-4848-b569-981dbfb7007c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "74e52bfb-a72b-4375-b510-8b06b9645d12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "beab3272-6ed8-463e-80dc-16f6ffc59dad",
        "cursor": {
          "ref": "f56f9380-1859-4088-93a5-4ef8a5926f0c",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4ac6eeba-4857-4d6a-b74e-e5771498792f"
        },
        "item": {
          "id": "beab3272-6ed8-463e-80dc-16f6ffc59dad",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0bd58b64-fbfa-4292-a5c0-99fd0ebe2396",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "beab3272-6ed8-463e-80dc-16f6ffc59dad",
        "cursor": {
          "ref": "f56f9380-1859-4088-93a5-4ef8a5926f0c",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4ac6eeba-4857-4d6a-b74e-e5771498792f"
        },
        "item": {
          "id": "beab3272-6ed8-463e-80dc-16f6ffc59dad",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0bd58b64-fbfa-4292-a5c0-99fd0ebe2396",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "72a23fda-4f58-472b-92a0-897ad0d46d5a",
        "cursor": {
          "ref": "7a48e6f4-2061-4cae-9c30-09ac34bffe05",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "204aa00e-a398-4972-91b8-1134a147d117"
        },
        "item": {
          "id": "72a23fda-4f58-472b-92a0-897ad0d46d5a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e06ac4e8-0293-4abc-9a32-43fae2cfb7a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "72a23fda-4f58-472b-92a0-897ad0d46d5a",
        "cursor": {
          "ref": "7a48e6f4-2061-4cae-9c30-09ac34bffe05",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "204aa00e-a398-4972-91b8-1134a147d117"
        },
        "item": {
          "id": "72a23fda-4f58-472b-92a0-897ad0d46d5a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e06ac4e8-0293-4abc-9a32-43fae2cfb7a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "ba6d83bd-5184-4424-a5c4-532af3faa635",
        "cursor": {
          "ref": "b301a4aa-353e-4922-9f1d-b65c0dcf13a1",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "18e9acd8-aa80-496a-a379-48f45ed88454"
        },
        "item": {
          "id": "ba6d83bd-5184-4424-a5c4-532af3faa635",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ae98a399-5905-4fdb-ade0-94f7705258ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "ba6d83bd-5184-4424-a5c4-532af3faa635",
        "cursor": {
          "ref": "b301a4aa-353e-4922-9f1d-b65c0dcf13a1",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "18e9acd8-aa80-496a-a379-48f45ed88454"
        },
        "item": {
          "id": "ba6d83bd-5184-4424-a5c4-532af3faa635",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ae98a399-5905-4fdb-ade0-94f7705258ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "76675482-b610-4ce4-8296-a676a6c356e5",
        "cursor": {
          "ref": "a6c1e390-673b-4509-8587-93ae1963df26",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "19bcc3fd-4d0b-4924-84db-7d55e8e10ad2"
        },
        "item": {
          "id": "76675482-b610-4ce4-8296-a676a6c356e5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a2dfe2ac-9e4e-44f4-ae22-4bd9944bce10",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "76675482-b610-4ce4-8296-a676a6c356e5",
        "cursor": {
          "ref": "a6c1e390-673b-4509-8587-93ae1963df26",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "19bcc3fd-4d0b-4924-84db-7d55e8e10ad2"
        },
        "item": {
          "id": "76675482-b610-4ce4-8296-a676a6c356e5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a2dfe2ac-9e4e-44f4-ae22-4bd9944bce10",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "83e4a50a-480a-4c87-9e1a-95abb1a7bace",
        "cursor": {
          "ref": "a5dc53e8-eb3a-475e-af9a-813ba1be1d47",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "be469f56-4c93-4603-9cf7-6ca70983388a"
        },
        "item": {
          "id": "83e4a50a-480a-4c87-9e1a-95abb1a7bace",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "68b97f6f-f453-4230-9ede-c78d9344aaeb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "83e4a50a-480a-4c87-9e1a-95abb1a7bace",
        "cursor": {
          "ref": "a5dc53e8-eb3a-475e-af9a-813ba1be1d47",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "be469f56-4c93-4603-9cf7-6ca70983388a"
        },
        "item": {
          "id": "83e4a50a-480a-4c87-9e1a-95abb1a7bace",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "68b97f6f-f453-4230-9ede-c78d9344aaeb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "3826c950-c35f-4a47-9715-4b824ef87124",
        "cursor": {
          "ref": "7e19f4f2-2142-4e11-aeef-2cd717daa610",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9d674da2-07bc-469c-abdb-b4f7574f91a7"
        },
        "item": {
          "id": "3826c950-c35f-4a47-9715-4b824ef87124",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "66333f91-c00d-4cb4-9865-54188e62b47d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3826c950-c35f-4a47-9715-4b824ef87124",
        "cursor": {
          "ref": "7e19f4f2-2142-4e11-aeef-2cd717daa610",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9d674da2-07bc-469c-abdb-b4f7574f91a7"
        },
        "item": {
          "id": "3826c950-c35f-4a47-9715-4b824ef87124",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "66333f91-c00d-4cb4-9865-54188e62b47d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d142a4b8-b721-4b2c-aca2-9baa68ce9a3b",
        "cursor": {
          "ref": "e0bf6a7d-5c92-4342-ae92-29a677337ad5",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8605e527-6ad3-4bf4-a285-ef89c1197234"
        },
        "item": {
          "id": "d142a4b8-b721-4b2c-aca2-9baa68ce9a3b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6d6ba5b6-d200-41d1-ba48-029fccc22374",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d142a4b8-b721-4b2c-aca2-9baa68ce9a3b",
        "cursor": {
          "ref": "e0bf6a7d-5c92-4342-ae92-29a677337ad5",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8605e527-6ad3-4bf4-a285-ef89c1197234"
        },
        "item": {
          "id": "d142a4b8-b721-4b2c-aca2-9baa68ce9a3b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6d6ba5b6-d200-41d1-ba48-029fccc22374",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "cbefa282-1858-49f4-b234-c6dd9e425364",
        "cursor": {
          "ref": "a8776d03-4ac0-4b1c-96f4-7d6e2e656b73",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ccba38b4-5809-4f47-96e6-e8613be04588"
        },
        "item": {
          "id": "cbefa282-1858-49f4-b234-c6dd9e425364",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "30a4dbe9-d228-4746-8fe5-e3f861b18915",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "cbefa282-1858-49f4-b234-c6dd9e425364",
        "cursor": {
          "ref": "a8776d03-4ac0-4b1c-96f4-7d6e2e656b73",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ccba38b4-5809-4f47-96e6-e8613be04588"
        },
        "item": {
          "id": "cbefa282-1858-49f4-b234-c6dd9e425364",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "30a4dbe9-d228-4746-8fe5-e3f861b18915",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "3c3bb2b0-6512-497c-b852-ac55899c7715",
        "cursor": {
          "ref": "08e175ce-4c70-4e1d-9589-b65e1fb23226",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e85f180d-ea4d-4030-babc-d0a52f27d29c"
        },
        "item": {
          "id": "3c3bb2b0-6512-497c-b852-ac55899c7715",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "db0aa033-e24f-46e9-975d-6753b6c11b1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "3c3bb2b0-6512-497c-b852-ac55899c7715",
        "cursor": {
          "ref": "08e175ce-4c70-4e1d-9589-b65e1fb23226",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e85f180d-ea4d-4030-babc-d0a52f27d29c"
        },
        "item": {
          "id": "3c3bb2b0-6512-497c-b852-ac55899c7715",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "db0aa033-e24f-46e9-975d-6753b6c11b1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "5e525e2b-d9f7-4b11-bbfd-3ea8b5be4348",
        "cursor": {
          "ref": "e220598b-b171-428e-a5ed-64bffa755a3a",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "40b63343-acdb-458b-b6d7-162bc4b6cf1d"
        },
        "item": {
          "id": "5e525e2b-d9f7-4b11-bbfd-3ea8b5be4348",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0fb9f6a9-35bd-49de-9179-5c80919dea5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "5e525e2b-d9f7-4b11-bbfd-3ea8b5be4348",
        "cursor": {
          "ref": "e220598b-b171-428e-a5ed-64bffa755a3a",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "40b63343-acdb-458b-b6d7-162bc4b6cf1d"
        },
        "item": {
          "id": "5e525e2b-d9f7-4b11-bbfd-3ea8b5be4348",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0fb9f6a9-35bd-49de-9179-5c80919dea5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "0c0ae6ee-20c5-470c-8609-92e557cc2f52",
        "cursor": {
          "ref": "30d39286-68e8-441e-8b1d-066e72cd88a5",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a242edec-413b-46ea-9bad-f0abfe33cbce"
        },
        "item": {
          "id": "0c0ae6ee-20c5-470c-8609-92e557cc2f52",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5c833288-3f3f-4d96-9d74-97d1e3e9b413",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0c0ae6ee-20c5-470c-8609-92e557cc2f52",
        "cursor": {
          "ref": "30d39286-68e8-441e-8b1d-066e72cd88a5",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a242edec-413b-46ea-9bad-f0abfe33cbce"
        },
        "item": {
          "id": "0c0ae6ee-20c5-470c-8609-92e557cc2f52",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5c833288-3f3f-4d96-9d74-97d1e3e9b413",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "20718e36-ef9f-4a59-a8f2-ea6f9beb15a2",
        "cursor": {
          "ref": "5df08e1e-96fb-4581-9189-f72f57b5f2f6",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f1032174-b8a8-4989-b489-add1100e4051"
        },
        "item": {
          "id": "20718e36-ef9f-4a59-a8f2-ea6f9beb15a2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4bb8cb2f-05c8-4b1f-a075-3de8806b705a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "20718e36-ef9f-4a59-a8f2-ea6f9beb15a2",
        "cursor": {
          "ref": "5df08e1e-96fb-4581-9189-f72f57b5f2f6",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f1032174-b8a8-4989-b489-add1100e4051"
        },
        "item": {
          "id": "20718e36-ef9f-4a59-a8f2-ea6f9beb15a2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4bb8cb2f-05c8-4b1f-a075-3de8806b705a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a2681500-95dc-4173-a171-0f9e5369523c",
        "cursor": {
          "ref": "e0dff98b-85f9-4919-ad63-e1e1bae2965f",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b6e46295-72b1-4b69-9849-7caf6141e958"
        },
        "item": {
          "id": "a2681500-95dc-4173-a171-0f9e5369523c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "37c82f2b-3450-4360-b5eb-f650c35664b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a2681500-95dc-4173-a171-0f9e5369523c",
        "cursor": {
          "ref": "e0dff98b-85f9-4919-ad63-e1e1bae2965f",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b6e46295-72b1-4b69-9849-7caf6141e958"
        },
        "item": {
          "id": "a2681500-95dc-4173-a171-0f9e5369523c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "37c82f2b-3450-4360-b5eb-f650c35664b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ecc0f143-2805-45fd-a0af-3db5d172c28b",
        "cursor": {
          "ref": "fbfc89f2-da1b-4d5a-a2bf-2665cca157c6",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f8bdfd0f-7959-4837-b9f8-3a419286de9a"
        },
        "item": {
          "id": "ecc0f143-2805-45fd-a0af-3db5d172c28b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ffce4cc5-a26c-4aa3-bebf-3f39fd5e5b3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ecc0f143-2805-45fd-a0af-3db5d172c28b",
        "cursor": {
          "ref": "fbfc89f2-da1b-4d5a-a2bf-2665cca157c6",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f8bdfd0f-7959-4837-b9f8-3a419286de9a"
        },
        "item": {
          "id": "ecc0f143-2805-45fd-a0af-3db5d172c28b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ffce4cc5-a26c-4aa3-bebf-3f39fd5e5b3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "735b6ac7-9abd-4c5f-aeef-476107a80a71",
        "cursor": {
          "ref": "b1d911e9-d82b-48e9-9c4b-0a653b11f86e",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f6274434-6494-48ca-ad36-41cf203b7adb"
        },
        "item": {
          "id": "735b6ac7-9abd-4c5f-aeef-476107a80a71",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6aa0933a-ac41-4853-86d5-7f2e88d9a0f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "735b6ac7-9abd-4c5f-aeef-476107a80a71",
        "cursor": {
          "ref": "b1d911e9-d82b-48e9-9c4b-0a653b11f86e",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f6274434-6494-48ca-ad36-41cf203b7adb"
        },
        "item": {
          "id": "735b6ac7-9abd-4c5f-aeef-476107a80a71",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6aa0933a-ac41-4853-86d5-7f2e88d9a0f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "8dee2252-04f2-474c-82af-07d8ec0ab8d0",
        "cursor": {
          "ref": "2166b4d0-edab-404e-8bdc-621b97be6f8c",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fcdca90c-2c59-4cd1-94d1-5852703d7999"
        },
        "item": {
          "id": "8dee2252-04f2-474c-82af-07d8ec0ab8d0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "494be213-bbb2-4daa-bd15-0ae1353aad8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "8dee2252-04f2-474c-82af-07d8ec0ab8d0",
        "cursor": {
          "ref": "2166b4d0-edab-404e-8bdc-621b97be6f8c",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fcdca90c-2c59-4cd1-94d1-5852703d7999"
        },
        "item": {
          "id": "8dee2252-04f2-474c-82af-07d8ec0ab8d0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "494be213-bbb2-4daa-bd15-0ae1353aad8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "d75b3883-903a-4fcb-a97e-8f6f377694df",
        "cursor": {
          "ref": "cdd40215-750a-4d78-8a26-7a931422234e",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "65d2e1ab-051a-4666-bfc0-02408edc4e50"
        },
        "item": {
          "id": "d75b3883-903a-4fcb-a97e-8f6f377694df",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "71ac0d07-d1ce-41a6-8a8f-823418521af7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "d75b3883-903a-4fcb-a97e-8f6f377694df",
        "cursor": {
          "ref": "cdd40215-750a-4d78-8a26-7a931422234e",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "65d2e1ab-051a-4666-bfc0-02408edc4e50"
        },
        "item": {
          "id": "d75b3883-903a-4fcb-a97e-8f6f377694df",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "71ac0d07-d1ce-41a6-8a8f-823418521af7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "3bb464d2-b0ca-4db8-92c8-706eaa1f8198",
        "cursor": {
          "ref": "1ab4ebb3-0313-48a6-a3c3-42033247ee6c",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9e6f9f85-7f23-431f-a504-4b780d1369f2"
        },
        "item": {
          "id": "3bb464d2-b0ca-4db8-92c8-706eaa1f8198",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3ce51c91-c644-4607-959d-79094c63f09b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3bb464d2-b0ca-4db8-92c8-706eaa1f8198",
        "cursor": {
          "ref": "1ab4ebb3-0313-48a6-a3c3-42033247ee6c",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9e6f9f85-7f23-431f-a504-4b780d1369f2"
        },
        "item": {
          "id": "3bb464d2-b0ca-4db8-92c8-706eaa1f8198",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3ce51c91-c644-4607-959d-79094c63f09b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4e58f3bf-732d-4d56-b94a-51d0074a04a8",
        "cursor": {
          "ref": "b0697382-b93a-4f24-ace1-2c7089f0ab31",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4c498965-bde5-4f36-935c-6e2e7a562b80"
        },
        "item": {
          "id": "4e58f3bf-732d-4d56-b94a-51d0074a04a8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7ab15f8b-62b8-40de-afe4-fe6cd25856cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "4e58f3bf-732d-4d56-b94a-51d0074a04a8",
        "cursor": {
          "ref": "b0697382-b93a-4f24-ace1-2c7089f0ab31",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4c498965-bde5-4f36-935c-6e2e7a562b80"
        },
        "item": {
          "id": "4e58f3bf-732d-4d56-b94a-51d0074a04a8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7ab15f8b-62b8-40de-afe4-fe6cd25856cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "25d6c33c-10e4-4d9d-9fe5-4e564428e3f5",
        "cursor": {
          "ref": "d1d9191b-f28c-427c-bf5a-9bda3eaeec35",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "59717876-44f7-4f4e-a33c-60c061a90bd3"
        },
        "item": {
          "id": "25d6c33c-10e4-4d9d-9fe5-4e564428e3f5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "eee6ba50-b2a2-4fac-878a-8a91d0cbce1a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "25d6c33c-10e4-4d9d-9fe5-4e564428e3f5",
        "cursor": {
          "ref": "d1d9191b-f28c-427c-bf5a-9bda3eaeec35",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "59717876-44f7-4f4e-a33c-60c061a90bd3"
        },
        "item": {
          "id": "25d6c33c-10e4-4d9d-9fe5-4e564428e3f5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "eee6ba50-b2a2-4fac-878a-8a91d0cbce1a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "af34f5b7-3434-47e7-8ad4-abb1e37d57c6",
        "cursor": {
          "ref": "698f2ca5-aaee-4112-bab2-78f39ea8f096",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "12f789ca-70ec-4801-aebe-429242d250d2"
        },
        "item": {
          "id": "af34f5b7-3434-47e7-8ad4-abb1e37d57c6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c8bc89fb-22d0-4da3-9fda-7a9397af8ea7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "af34f5b7-3434-47e7-8ad4-abb1e37d57c6",
        "cursor": {
          "ref": "698f2ca5-aaee-4112-bab2-78f39ea8f096",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "12f789ca-70ec-4801-aebe-429242d250d2"
        },
        "item": {
          "id": "af34f5b7-3434-47e7-8ad4-abb1e37d57c6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c8bc89fb-22d0-4da3-9fda-7a9397af8ea7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "1ffae2bb-3f79-4003-b873-249a3593746e",
        "cursor": {
          "ref": "4a640412-97d7-4f60-9fae-dd676eaf7f92",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e19bd5e4-63d9-462b-bef5-04802db2c2db"
        },
        "item": {
          "id": "1ffae2bb-3f79-4003-b873-249a3593746e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "cf9f403e-6304-4e39-88e8-93d76691677e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "1ffae2bb-3f79-4003-b873-249a3593746e",
        "cursor": {
          "ref": "4a640412-97d7-4f60-9fae-dd676eaf7f92",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e19bd5e4-63d9-462b-bef5-04802db2c2db"
        },
        "item": {
          "id": "1ffae2bb-3f79-4003-b873-249a3593746e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "cf9f403e-6304-4e39-88e8-93d76691677e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "a6c418e7-3893-4baf-95f2-a1eb29c6cd43",
        "cursor": {
          "ref": "2e0a2b6c-91ea-47cf-9387-c94c36980f80",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ab035f2a-61c5-44d9-95ae-943b8b995a31"
        },
        "item": {
          "id": "a6c418e7-3893-4baf-95f2-a1eb29c6cd43",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5a5d4c29-4a2f-4c1b-a5a2-250322412e2a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "a6c418e7-3893-4baf-95f2-a1eb29c6cd43",
        "cursor": {
          "ref": "2e0a2b6c-91ea-47cf-9387-c94c36980f80",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ab035f2a-61c5-44d9-95ae-943b8b995a31"
        },
        "item": {
          "id": "a6c418e7-3893-4baf-95f2-a1eb29c6cd43",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5a5d4c29-4a2f-4c1b-a5a2-250322412e2a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "9085f646-194c-4a16-9de6-0339562cd043",
        "cursor": {
          "ref": "df0cee0b-0afa-4c27-a03a-82a307d285c9",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d209cb3d-63a5-4bd2-96f9-65e0bf70fd9a"
        },
        "item": {
          "id": "9085f646-194c-4a16-9de6-0339562cd043",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a7f9c382-9709-4bb3-899e-0e593f653a05",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "9085f646-194c-4a16-9de6-0339562cd043",
        "cursor": {
          "ref": "df0cee0b-0afa-4c27-a03a-82a307d285c9",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d209cb3d-63a5-4bd2-96f9-65e0bf70fd9a"
        },
        "item": {
          "id": "9085f646-194c-4a16-9de6-0339562cd043",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a7f9c382-9709-4bb3-899e-0e593f653a05",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "cf6de6c5-0e66-450b-87d1-7ce65fd56014",
        "cursor": {
          "ref": "8d35c8ba-5db9-43b2-8d4d-50968f7b7a7f",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8ac0a37b-6594-4bca-93ec-3b6859e339a5"
        },
        "item": {
          "id": "cf6de6c5-0e66-450b-87d1-7ce65fd56014",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f11b6dfa-b5e7-48d8-9fa4-9b562ae28f0d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "cf6de6c5-0e66-450b-87d1-7ce65fd56014",
        "cursor": {
          "ref": "8d35c8ba-5db9-43b2-8d4d-50968f7b7a7f",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8ac0a37b-6594-4bca-93ec-3b6859e339a5"
        },
        "item": {
          "id": "cf6de6c5-0e66-450b-87d1-7ce65fd56014",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f11b6dfa-b5e7-48d8-9fa4-9b562ae28f0d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "676c984c-62d3-45c4-a3ee-d13549bdb7a8",
        "cursor": {
          "ref": "8a8a4307-9fee-456e-862a-4f552aa61d7f",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9e0ce1cc-7f07-466c-ae26-7d9813f0b1c7"
        },
        "item": {
          "id": "676c984c-62d3-45c4-a3ee-d13549bdb7a8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2b1dcc5c-9968-449c-a76d-9e0d77ead88c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "676c984c-62d3-45c4-a3ee-d13549bdb7a8",
        "cursor": {
          "ref": "8a8a4307-9fee-456e-862a-4f552aa61d7f",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9e0ce1cc-7f07-466c-ae26-7d9813f0b1c7"
        },
        "item": {
          "id": "676c984c-62d3-45c4-a3ee-d13549bdb7a8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2b1dcc5c-9968-449c-a76d-9e0d77ead88c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "5e222983-9fe0-421e-9708-a2ee41cfe13b",
        "cursor": {
          "ref": "dc3ce264-362d-470d-8fce-dff5037071a6",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c2a6d640-e389-4378-b263-65464a361587"
        },
        "item": {
          "id": "5e222983-9fe0-421e-9708-a2ee41cfe13b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1e475390-b840-48a3-9e1e-98d52a6b8618",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "5e222983-9fe0-421e-9708-a2ee41cfe13b",
        "cursor": {
          "ref": "dc3ce264-362d-470d-8fce-dff5037071a6",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c2a6d640-e389-4378-b263-65464a361587"
        },
        "item": {
          "id": "5e222983-9fe0-421e-9708-a2ee41cfe13b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1e475390-b840-48a3-9e1e-98d52a6b8618",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "2b50743d-99a3-4c59-94ee-354418a9cc36",
        "cursor": {
          "ref": "8b12c4f1-52bc-4013-ac6d-579397aea8e9",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cbd9fa32-ce19-4ae0-847a-4b0b5162fcca"
        },
        "item": {
          "id": "2b50743d-99a3-4c59-94ee-354418a9cc36",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1a178cb1-6a68-4c52-b404-7039925247fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "2b50743d-99a3-4c59-94ee-354418a9cc36",
        "cursor": {
          "ref": "8b12c4f1-52bc-4013-ac6d-579397aea8e9",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cbd9fa32-ce19-4ae0-847a-4b0b5162fcca"
        },
        "item": {
          "id": "2b50743d-99a3-4c59-94ee-354418a9cc36",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1a178cb1-6a68-4c52-b404-7039925247fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "0a64361a-0d70-4757-9fc8-20bfda2204dd",
        "cursor": {
          "ref": "a1ba10ce-5402-434f-b21a-169b77c31bbf",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ea426af9-bcc3-4765-a9e7-19f7da6e1e9b"
        },
        "item": {
          "id": "0a64361a-0d70-4757-9fc8-20bfda2204dd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "079c0bd6-a993-413c-88f6-f14d93cd58f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "0a64361a-0d70-4757-9fc8-20bfda2204dd",
        "cursor": {
          "ref": "a1ba10ce-5402-434f-b21a-169b77c31bbf",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ea426af9-bcc3-4765-a9e7-19f7da6e1e9b"
        },
        "item": {
          "id": "0a64361a-0d70-4757-9fc8-20bfda2204dd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "079c0bd6-a993-413c-88f6-f14d93cd58f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "a8f11525-a90d-458e-abe7-dc4685f425ab",
        "cursor": {
          "ref": "068e9418-4fab-4598-8135-172eab50591d",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b50ac36b-5423-4512-b8ec-1214f963822d"
        },
        "item": {
          "id": "a8f11525-a90d-458e-abe7-dc4685f425ab",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1e6d1cb5-3c49-4dff-a9d3-53ad6a343826",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a8f11525-a90d-458e-abe7-dc4685f425ab",
        "cursor": {
          "ref": "068e9418-4fab-4598-8135-172eab50591d",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b50ac36b-5423-4512-b8ec-1214f963822d"
        },
        "item": {
          "id": "a8f11525-a90d-458e-abe7-dc4685f425ab",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1e6d1cb5-3c49-4dff-a9d3-53ad6a343826",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e6cb244f-6fc1-41ee-8911-1cc0110b8ca7",
        "cursor": {
          "ref": "156c32df-6147-4e2f-ab0e-60f1b47aa99f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "005967cc-d720-4f82-bfe8-ac3b22925479"
        },
        "item": {
          "id": "e6cb244f-6fc1-41ee-8911-1cc0110b8ca7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e7914dfe-a0fa-404c-9f4e-08bbf50d8ea8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "e6cb244f-6fc1-41ee-8911-1cc0110b8ca7",
        "cursor": {
          "ref": "156c32df-6147-4e2f-ab0e-60f1b47aa99f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "005967cc-d720-4f82-bfe8-ac3b22925479"
        },
        "item": {
          "id": "e6cb244f-6fc1-41ee-8911-1cc0110b8ca7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e7914dfe-a0fa-404c-9f4e-08bbf50d8ea8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "eef9ed9e-3f4a-42c8-b028-3ba718aab1fc",
        "cursor": {
          "ref": "81b8b249-d638-4c8c-a2d0-3eebb431f66d",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f8d82400-e57c-4ab3-83e0-6c3b698b3381"
        },
        "item": {
          "id": "eef9ed9e-3f4a-42c8-b028-3ba718aab1fc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5e3c3da5-7622-46de-b784-986c9cb79ba6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "eef9ed9e-3f4a-42c8-b028-3ba718aab1fc",
        "cursor": {
          "ref": "81b8b249-d638-4c8c-a2d0-3eebb431f66d",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f8d82400-e57c-4ab3-83e0-6c3b698b3381"
        },
        "item": {
          "id": "eef9ed9e-3f4a-42c8-b028-3ba718aab1fc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5e3c3da5-7622-46de-b784-986c9cb79ba6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "893fb784-a420-47f8-8e74-3cea34ddb33c",
        "cursor": {
          "ref": "0246ee38-93a6-49e3-b3f7-7a87b6e79577",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5cfff8e6-a29e-416c-8e02-1b394ff3f01c"
        },
        "item": {
          "id": "893fb784-a420-47f8-8e74-3cea34ddb33c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5de1d779-5776-47c6-816a-528f62b1250a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "893fb784-a420-47f8-8e74-3cea34ddb33c",
        "cursor": {
          "ref": "0246ee38-93a6-49e3-b3f7-7a87b6e79577",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5cfff8e6-a29e-416c-8e02-1b394ff3f01c"
        },
        "item": {
          "id": "893fb784-a420-47f8-8e74-3cea34ddb33c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5de1d779-5776-47c6-816a-528f62b1250a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "308c1c85-4178-4012-a37c-1b7a42ea9073",
        "cursor": {
          "ref": "4441f528-4f0b-4f23-ac5a-04d5ab46b26d",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ac04723b-cd99-4fe2-ae08-4299b1e76bdb"
        },
        "item": {
          "id": "308c1c85-4178-4012-a37c-1b7a42ea9073",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ef81261c-99d4-45a0-a4d5-6afcf2567d2e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "308c1c85-4178-4012-a37c-1b7a42ea9073",
        "cursor": {
          "ref": "4441f528-4f0b-4f23-ac5a-04d5ab46b26d",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ac04723b-cd99-4fe2-ae08-4299b1e76bdb"
        },
        "item": {
          "id": "308c1c85-4178-4012-a37c-1b7a42ea9073",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ef81261c-99d4-45a0-a4d5-6afcf2567d2e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "76bc8e5d-a073-4862-a033-584ada286f35",
        "cursor": {
          "ref": "ca40b324-5289-4142-803f-e10232ccc55d",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1921ed68-d99b-4183-9424-9de3053229ae"
        },
        "item": {
          "id": "76bc8e5d-a073-4862-a033-584ada286f35",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6bbf2784-5643-4774-bea6-34f0a0a794a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "76bc8e5d-a073-4862-a033-584ada286f35",
        "cursor": {
          "ref": "ca40b324-5289-4142-803f-e10232ccc55d",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1921ed68-d99b-4183-9424-9de3053229ae"
        },
        "item": {
          "id": "76bc8e5d-a073-4862-a033-584ada286f35",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6bbf2784-5643-4774-bea6-34f0a0a794a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a69522d3-4f91-471d-af5e-02cbd63836e1",
        "cursor": {
          "ref": "ccfbf425-309f-4128-b9ee-2ebd85c73cb7",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9afa2434-d9dd-4244-bce8-d08fe16211e7"
        },
        "item": {
          "id": "a69522d3-4f91-471d-af5e-02cbd63836e1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0a0c34df-e825-4988-9dc5-7afcce3cbc5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "a69522d3-4f91-471d-af5e-02cbd63836e1",
        "cursor": {
          "ref": "ccfbf425-309f-4128-b9ee-2ebd85c73cb7",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9afa2434-d9dd-4244-bce8-d08fe16211e7"
        },
        "item": {
          "id": "a69522d3-4f91-471d-af5e-02cbd63836e1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0a0c34df-e825-4988-9dc5-7afcce3cbc5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d7fabbba-6890-4445-84d0-77c2a1a6d2e4",
        "cursor": {
          "ref": "57815dbd-4874-4a97-8966-9c5e0ce3a2bb",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cbbc9aa6-eb65-41ef-8a09-b019e5279313"
        },
        "item": {
          "id": "d7fabbba-6890-4445-84d0-77c2a1a6d2e4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fc8a4da2-35ab-498d-a17c-0d696ac684c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d7fabbba-6890-4445-84d0-77c2a1a6d2e4",
        "cursor": {
          "ref": "57815dbd-4874-4a97-8966-9c5e0ce3a2bb",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cbbc9aa6-eb65-41ef-8a09-b019e5279313"
        },
        "item": {
          "id": "d7fabbba-6890-4445-84d0-77c2a1a6d2e4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fc8a4da2-35ab-498d-a17c-0d696ac684c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "8fc228c6-0a01-4047-9163-7cfcaf2031f4",
        "cursor": {
          "ref": "84510fb4-a6cd-49f2-8d76-461f78823200",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "263c07dd-6374-427d-b50b-30a4d50fcac9"
        },
        "item": {
          "id": "8fc228c6-0a01-4047-9163-7cfcaf2031f4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "536639c7-3675-4bc3-aabf-6bdd2c02daac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "8fc228c6-0a01-4047-9163-7cfcaf2031f4",
        "cursor": {
          "ref": "84510fb4-a6cd-49f2-8d76-461f78823200",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "263c07dd-6374-427d-b50b-30a4d50fcac9"
        },
        "item": {
          "id": "8fc228c6-0a01-4047-9163-7cfcaf2031f4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "536639c7-3675-4bc3-aabf-6bdd2c02daac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "5d66fa2e-0ac8-4117-9080-75f6f2d58b58",
        "cursor": {
          "ref": "cc8d03af-b8d9-4f2a-8367-01ccd1246d76",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bee61f14-2113-422f-8ac2-6677309063ab"
        },
        "item": {
          "id": "5d66fa2e-0ac8-4117-9080-75f6f2d58b58",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4589749a-7e02-4b70-9fc9-fc4b5299bc32",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "5d66fa2e-0ac8-4117-9080-75f6f2d58b58",
        "cursor": {
          "ref": "cc8d03af-b8d9-4f2a-8367-01ccd1246d76",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bee61f14-2113-422f-8ac2-6677309063ab"
        },
        "item": {
          "id": "5d66fa2e-0ac8-4117-9080-75f6f2d58b58",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4589749a-7e02-4b70-9fc9-fc4b5299bc32",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "a8a23a2d-7aaf-4aa3-af51-25ed17c3fce1",
        "cursor": {
          "ref": "00b447c7-6d30-4b81-b0bc-60cd66fa5cee",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ab428148-bdbf-426a-a5c2-8386b3feb30f"
        },
        "item": {
          "id": "a8a23a2d-7aaf-4aa3-af51-25ed17c3fce1",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "9afd0f5e-9a89-458d-899f-bb9e38e440df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "a8a23a2d-7aaf-4aa3-af51-25ed17c3fce1",
        "cursor": {
          "ref": "00b447c7-6d30-4b81-b0bc-60cd66fa5cee",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ab428148-bdbf-426a-a5c2-8386b3feb30f"
        },
        "item": {
          "id": "a8a23a2d-7aaf-4aa3-af51-25ed17c3fce1",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "9afd0f5e-9a89-458d-899f-bb9e38e440df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "147ea53e-aeaa-495d-9192-008aecb2f5bd",
        "cursor": {
          "ref": "2232ad79-2dae-48e8-88e2-5b240e18330f",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "40002bc2-0167-47ea-b7ba-e6fcd4e5a4af"
        },
        "item": {
          "id": "147ea53e-aeaa-495d-9192-008aecb2f5bd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "198f509d-daa0-4fe1-b4ea-2600151a7a87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "147ea53e-aeaa-495d-9192-008aecb2f5bd",
        "cursor": {
          "ref": "2232ad79-2dae-48e8-88e2-5b240e18330f",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "40002bc2-0167-47ea-b7ba-e6fcd4e5a4af"
        },
        "item": {
          "id": "147ea53e-aeaa-495d-9192-008aecb2f5bd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "198f509d-daa0-4fe1-b4ea-2600151a7a87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "d4d35a5a-fcce-4679-bae8-b4f2e8b5d2d1",
        "cursor": {
          "ref": "1cc0c774-b2e5-4b02-9614-064d696bb320",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "893fbba0-e3d4-4aa2-b0d4-695b5176d4b0"
        },
        "item": {
          "id": "d4d35a5a-fcce-4679-bae8-b4f2e8b5d2d1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7d2d47a8-4304-4438-9009-8c58f2598671",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "d4d35a5a-fcce-4679-bae8-b4f2e8b5d2d1",
        "cursor": {
          "ref": "1cc0c774-b2e5-4b02-9614-064d696bb320",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "893fbba0-e3d4-4aa2-b0d4-695b5176d4b0"
        },
        "item": {
          "id": "d4d35a5a-fcce-4679-bae8-b4f2e8b5d2d1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7d2d47a8-4304-4438-9009-8c58f2598671",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "c07c4b22-c1b5-4659-9a19-620afb6c0cdf",
        "cursor": {
          "ref": "d269cdf2-95d2-42c8-a5c1-a9dd36ea4d5a",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9c68d964-4688-4c1e-894e-1405245116d5"
        },
        "item": {
          "id": "c07c4b22-c1b5-4659-9a19-620afb6c0cdf",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9eac0572-1a4c-4d99-9297-4a26c9e96fec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "c07c4b22-c1b5-4659-9a19-620afb6c0cdf",
        "cursor": {
          "ref": "d269cdf2-95d2-42c8-a5c1-a9dd36ea4d5a",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9c68d964-4688-4c1e-894e-1405245116d5"
        },
        "item": {
          "id": "c07c4b22-c1b5-4659-9a19-620afb6c0cdf",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9eac0572-1a4c-4d99-9297-4a26c9e96fec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "f79bf5d4-a1fa-4183-8933-d2613286e4ce",
        "cursor": {
          "ref": "35605ffb-f39f-48f5-852f-7384bef01484",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6c8b5416-daf9-40a1-8af1-299f2f0c56a6"
        },
        "item": {
          "id": "f79bf5d4-a1fa-4183-8933-d2613286e4ce",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bf625392-d43a-423a-a4ab-91f8fc8e1979",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "f79bf5d4-a1fa-4183-8933-d2613286e4ce",
        "cursor": {
          "ref": "35605ffb-f39f-48f5-852f-7384bef01484",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6c8b5416-daf9-40a1-8af1-299f2f0c56a6"
        },
        "item": {
          "id": "f79bf5d4-a1fa-4183-8933-d2613286e4ce",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bf625392-d43a-423a-a4ab-91f8fc8e1979",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "3d52b431-c5d5-4254-ab1b-a08fa7006e62",
        "cursor": {
          "ref": "66a655a6-b5a6-4f92-a8f0-35fd2e37182f",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "41908821-9569-4a92-955c-802ac4657fcf"
        },
        "item": {
          "id": "3d52b431-c5d5-4254-ab1b-a08fa7006e62",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "714c1125-78a3-41af-90fa-a92dcb0bcf6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "3d52b431-c5d5-4254-ab1b-a08fa7006e62",
        "cursor": {
          "ref": "66a655a6-b5a6-4f92-a8f0-35fd2e37182f",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "41908821-9569-4a92-955c-802ac4657fcf"
        },
        "item": {
          "id": "3d52b431-c5d5-4254-ab1b-a08fa7006e62",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "714c1125-78a3-41af-90fa-a92dcb0bcf6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "755ebf2f-5e9f-4dd6-8ca1-c4d362789446",
        "cursor": {
          "ref": "45f21065-283a-4ae5-9953-fa85474c1cd9",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9da77b34-2d3d-4013-a740-0b86d44aaa9a"
        },
        "item": {
          "id": "755ebf2f-5e9f-4dd6-8ca1-c4d362789446",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dd90bb9a-8969-4059-b265-88e622359fbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "755ebf2f-5e9f-4dd6-8ca1-c4d362789446",
        "cursor": {
          "ref": "45f21065-283a-4ae5-9953-fa85474c1cd9",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9da77b34-2d3d-4013-a740-0b86d44aaa9a"
        },
        "item": {
          "id": "755ebf2f-5e9f-4dd6-8ca1-c4d362789446",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dd90bb9a-8969-4059-b265-88e622359fbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "7c5ddfab-34e7-4316-a5b3-f9d1031bb856",
        "cursor": {
          "ref": "82479f75-bd1d-41d6-a755-c629574afc1b",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e9f83ff1-adf2-4223-9647-3bd5ff6a4050"
        },
        "item": {
          "id": "7c5ddfab-34e7-4316-a5b3-f9d1031bb856",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "81ef050f-fe7e-4782-a97c-dad2854f32d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "7c5ddfab-34e7-4316-a5b3-f9d1031bb856",
        "cursor": {
          "ref": "82479f75-bd1d-41d6-a755-c629574afc1b",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e9f83ff1-adf2-4223-9647-3bd5ff6a4050"
        },
        "item": {
          "id": "7c5ddfab-34e7-4316-a5b3-f9d1031bb856",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "81ef050f-fe7e-4782-a97c-dad2854f32d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "2ff9fc50-23ee-49ae-8492-1b38e00454f7",
        "cursor": {
          "ref": "225e880e-9897-4e78-b510-6efc252bfb5d",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a4f79cbb-394a-450d-8743-4d6ebf51ed26"
        },
        "item": {
          "id": "2ff9fc50-23ee-49ae-8492-1b38e00454f7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fb64c8a5-2661-4a75-918a-602814606803",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "2ff9fc50-23ee-49ae-8492-1b38e00454f7",
        "cursor": {
          "ref": "225e880e-9897-4e78-b510-6efc252bfb5d",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a4f79cbb-394a-450d-8743-4d6ebf51ed26"
        },
        "item": {
          "id": "2ff9fc50-23ee-49ae-8492-1b38e00454f7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fb64c8a5-2661-4a75-918a-602814606803",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "1a25095c-3d1b-41d2-9bcb-ee672de85c6c",
        "cursor": {
          "ref": "61125db6-7cd4-4270-8059-66cbc65971a2",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "60a40f42-2c6e-4814-8c0f-893caa273a02"
        },
        "item": {
          "id": "1a25095c-3d1b-41d2-9bcb-ee672de85c6c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "01b07129-a151-4d46-b0f4-3bb5b00b2aa8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "1a25095c-3d1b-41d2-9bcb-ee672de85c6c",
        "cursor": {
          "ref": "61125db6-7cd4-4270-8059-66cbc65971a2",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "60a40f42-2c6e-4814-8c0f-893caa273a02"
        },
        "item": {
          "id": "1a25095c-3d1b-41d2-9bcb-ee672de85c6c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "01b07129-a151-4d46-b0f4-3bb5b00b2aa8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "682401ec-fb02-40e0-8a6d-0b6ba66007b9",
        "cursor": {
          "ref": "ba05307c-834d-4cf9-9f8b-c97bfd5d7484",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0da150b5-8208-4de7-a36f-b8f3cca7ea42"
        },
        "item": {
          "id": "682401ec-fb02-40e0-8a6d-0b6ba66007b9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "74a8a2f2-a777-4afa-b205-ba40a7d0fbfa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "682401ec-fb02-40e0-8a6d-0b6ba66007b9",
        "cursor": {
          "ref": "ba05307c-834d-4cf9-9f8b-c97bfd5d7484",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0da150b5-8208-4de7-a36f-b8f3cca7ea42"
        },
        "item": {
          "id": "682401ec-fb02-40e0-8a6d-0b6ba66007b9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "74a8a2f2-a777-4afa-b205-ba40a7d0fbfa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "8ce5d674-6d97-48ed-b2f9-cc119d73e058",
        "cursor": {
          "ref": "5938a160-f4e9-4bad-b06c-2a21dcc538e7",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "20ad327c-224b-48d9-b57c-34eb98444b4d"
        },
        "item": {
          "id": "8ce5d674-6d97-48ed-b2f9-cc119d73e058",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6460f535-92a9-4c1f-a763-ef5ad729390f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "8ce5d674-6d97-48ed-b2f9-cc119d73e058",
        "cursor": {
          "ref": "5938a160-f4e9-4bad-b06c-2a21dcc538e7",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "20ad327c-224b-48d9-b57c-34eb98444b4d"
        },
        "item": {
          "id": "8ce5d674-6d97-48ed-b2f9-cc119d73e058",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6460f535-92a9-4c1f-a763-ef5ad729390f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "1912e96f-f25b-4eb8-b729-a00cb51ceb82",
        "cursor": {
          "ref": "9da271d4-d34e-4bd7-9bfc-444aec9449f9",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "caa28fb8-73ac-4a25-868a-85d84226815e"
        },
        "item": {
          "id": "1912e96f-f25b-4eb8-b729-a00cb51ceb82",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "57278088-be1f-44d3-a5cc-40d441ac5c58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "1912e96f-f25b-4eb8-b729-a00cb51ceb82",
        "cursor": {
          "ref": "9da271d4-d34e-4bd7-9bfc-444aec9449f9",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "caa28fb8-73ac-4a25-868a-85d84226815e"
        },
        "item": {
          "id": "1912e96f-f25b-4eb8-b729-a00cb51ceb82",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "57278088-be1f-44d3-a5cc-40d441ac5c58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "b786c04c-1a67-45d5-a00f-98892a90a62d",
        "cursor": {
          "ref": "7ffd6f37-114f-4e68-b0ed-5abed5d2429f",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f6c04efd-f993-4c72-bec4-7a4e48d666e4"
        },
        "item": {
          "id": "b786c04c-1a67-45d5-a00f-98892a90a62d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "82143963-caa8-4665-8c7b-f348a9f86735",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "b786c04c-1a67-45d5-a00f-98892a90a62d",
        "cursor": {
          "ref": "7ffd6f37-114f-4e68-b0ed-5abed5d2429f",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f6c04efd-f993-4c72-bec4-7a4e48d666e4"
        },
        "item": {
          "id": "b786c04c-1a67-45d5-a00f-98892a90a62d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "82143963-caa8-4665-8c7b-f348a9f86735",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "23230452-9567-49a8-99cf-dd4bbebf5c65",
        "cursor": {
          "ref": "c56b0ef9-fd4f-4e07-b06c-31452722090e",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c87fb365-ffea-4c33-9a37-15fbc01a3e68"
        },
        "item": {
          "id": "23230452-9567-49a8-99cf-dd4bbebf5c65",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2de379e8-e9b4-4a00-a131-4d87dd3c7e7f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "23230452-9567-49a8-99cf-dd4bbebf5c65",
        "cursor": {
          "ref": "c56b0ef9-fd4f-4e07-b06c-31452722090e",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c87fb365-ffea-4c33-9a37-15fbc01a3e68"
        },
        "item": {
          "id": "23230452-9567-49a8-99cf-dd4bbebf5c65",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2de379e8-e9b4-4a00-a131-4d87dd3c7e7f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "1b24f8e6-26df-49e6-9a89-5d6b763d1b98",
        "cursor": {
          "ref": "a8741bfe-0ae0-4271-b260-a3a73d390100",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2941842b-d3ed-47ba-8b29-b89757036691"
        },
        "item": {
          "id": "1b24f8e6-26df-49e6-9a89-5d6b763d1b98",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8f487cf8-d145-4288-904f-04b657b5a5ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "1b24f8e6-26df-49e6-9a89-5d6b763d1b98",
        "cursor": {
          "ref": "a8741bfe-0ae0-4271-b260-a3a73d390100",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2941842b-d3ed-47ba-8b29-b89757036691"
        },
        "item": {
          "id": "1b24f8e6-26df-49e6-9a89-5d6b763d1b98",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8f487cf8-d145-4288-904f-04b657b5a5ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "322e0819-554b-48c7-8734-665a03aa2968",
        "cursor": {
          "ref": "a7d8bcdf-2efb-4746-afe6-288e6eecd20b",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "070062bb-4c7b-4b6a-8a8e-0527b048d5cb"
        },
        "item": {
          "id": "322e0819-554b-48c7-8734-665a03aa2968",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "672d3fad-484a-4301-8c20-8a268129ca1a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "322e0819-554b-48c7-8734-665a03aa2968",
        "cursor": {
          "ref": "a7d8bcdf-2efb-4746-afe6-288e6eecd20b",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "070062bb-4c7b-4b6a-8a8e-0527b048d5cb"
        },
        "item": {
          "id": "322e0819-554b-48c7-8734-665a03aa2968",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "672d3fad-484a-4301-8c20-8a268129ca1a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "ed572e76-fb28-46bd-928a-e23b38198862",
        "cursor": {
          "ref": "59b6afe8-1331-47e6-a3c5-37711d01154b",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bbabe2f1-5f59-4a43-9a16-5fd21694a77e"
        },
        "item": {
          "id": "ed572e76-fb28-46bd-928a-e23b38198862",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b7fb4e3c-09f1-4b11-b2b4-bc41fd2ec1ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "ed572e76-fb28-46bd-928a-e23b38198862",
        "cursor": {
          "ref": "59b6afe8-1331-47e6-a3c5-37711d01154b",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bbabe2f1-5f59-4a43-9a16-5fd21694a77e"
        },
        "item": {
          "id": "ed572e76-fb28-46bd-928a-e23b38198862",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b7fb4e3c-09f1-4b11-b2b4-bc41fd2ec1ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "8746ea61-3c57-465a-a5fe-5a73dff00ede",
        "cursor": {
          "ref": "0085617d-efad-4a10-863e-688dfc5980e5",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ed109032-3d03-4d64-b6ac-d8f1b235eb6c"
        },
        "item": {
          "id": "8746ea61-3c57-465a-a5fe-5a73dff00ede",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d06b3be6-6827-47cc-a4c6-fc44790229b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "8746ea61-3c57-465a-a5fe-5a73dff00ede",
        "cursor": {
          "ref": "0085617d-efad-4a10-863e-688dfc5980e5",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ed109032-3d03-4d64-b6ac-d8f1b235eb6c"
        },
        "item": {
          "id": "8746ea61-3c57-465a-a5fe-5a73dff00ede",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d06b3be6-6827-47cc-a4c6-fc44790229b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "cc428fbc-b262-449f-b032-e8f5f4fcb2d1",
        "cursor": {
          "ref": "9d56405c-0310-4452-a0d5-576b89402755",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "82cdb929-7574-4291-9fe5-02dfec463668"
        },
        "item": {
          "id": "cc428fbc-b262-449f-b032-e8f5f4fcb2d1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8f9975f6-b041-467d-b749-814caac5b03d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "cc428fbc-b262-449f-b032-e8f5f4fcb2d1",
        "cursor": {
          "ref": "9d56405c-0310-4452-a0d5-576b89402755",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "82cdb929-7574-4291-9fe5-02dfec463668"
        },
        "item": {
          "id": "cc428fbc-b262-449f-b032-e8f5f4fcb2d1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8f9975f6-b041-467d-b749-814caac5b03d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "5c1160b6-cad0-4fb4-a2b4-272483ef7fd4",
        "cursor": {
          "ref": "1b5e9f02-56e2-4996-a2b4-cd8848173155",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "307f2a6d-bc53-4787-a6f8-f6cb7d04226e"
        },
        "item": {
          "id": "5c1160b6-cad0-4fb4-a2b4-272483ef7fd4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b0150070-1d7a-45f9-8273-3cb12951e844",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "5c1160b6-cad0-4fb4-a2b4-272483ef7fd4",
        "cursor": {
          "ref": "1b5e9f02-56e2-4996-a2b4-cd8848173155",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "307f2a6d-bc53-4787-a6f8-f6cb7d04226e"
        },
        "item": {
          "id": "5c1160b6-cad0-4fb4-a2b4-272483ef7fd4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b0150070-1d7a-45f9-8273-3cb12951e844",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "47f9ee70-2d27-4598-b44e-94b61c277079",
        "cursor": {
          "ref": "4818dd08-ad61-4435-b28a-8f5625e73270",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "807f928a-38e8-4cce-88f0-cb07e94484e2"
        },
        "item": {
          "id": "47f9ee70-2d27-4598-b44e-94b61c277079",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6b0122ad-3eda-4bec-9cba-a005b44353eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "47f9ee70-2d27-4598-b44e-94b61c277079",
        "cursor": {
          "ref": "4818dd08-ad61-4435-b28a-8f5625e73270",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "807f928a-38e8-4cce-88f0-cb07e94484e2"
        },
        "item": {
          "id": "47f9ee70-2d27-4598-b44e-94b61c277079",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6b0122ad-3eda-4bec-9cba-a005b44353eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "868d8399-9199-465b-9ad2-3d2984132281",
        "cursor": {
          "ref": "7736c0d3-1c0b-48b9-8dbe-7d6c2027aa42",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "eed39bed-fca4-43fc-b715-1a77f8446bf1"
        },
        "item": {
          "id": "868d8399-9199-465b-9ad2-3d2984132281",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d44ecabb-0c41-41f4-9cdf-8e009d08ae03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "868d8399-9199-465b-9ad2-3d2984132281",
        "cursor": {
          "ref": "7736c0d3-1c0b-48b9-8dbe-7d6c2027aa42",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "eed39bed-fca4-43fc-b715-1a77f8446bf1"
        },
        "item": {
          "id": "868d8399-9199-465b-9ad2-3d2984132281",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d44ecabb-0c41-41f4-9cdf-8e009d08ae03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b44a0d5d-130e-4f8d-a0f4-549bd12913af",
        "cursor": {
          "ref": "d4990e6d-6706-41a1-8b1c-789d0cef1570",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5208b2c5-9d56-495e-8ec0-1575de35f68b"
        },
        "item": {
          "id": "b44a0d5d-130e-4f8d-a0f4-549bd12913af",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "10f28aff-854b-435e-a894-c31e1d2172bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b44a0d5d-130e-4f8d-a0f4-549bd12913af",
        "cursor": {
          "ref": "d4990e6d-6706-41a1-8b1c-789d0cef1570",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5208b2c5-9d56-495e-8ec0-1575de35f68b"
        },
        "item": {
          "id": "b44a0d5d-130e-4f8d-a0f4-549bd12913af",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "10f28aff-854b-435e-a894-c31e1d2172bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a11f0c85-e545-4e34-8c01-e781b19bd6a2",
        "cursor": {
          "ref": "4c28ed3c-6364-4171-80ea-598225b819bb",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "98445b51-364d-4fdb-b9fb-62a5cfb76177"
        },
        "item": {
          "id": "a11f0c85-e545-4e34-8c01-e781b19bd6a2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4fb80f08-10e2-4d03-8cbd-c4cdcdbcc039",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "a11f0c85-e545-4e34-8c01-e781b19bd6a2",
        "cursor": {
          "ref": "4c28ed3c-6364-4171-80ea-598225b819bb",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "98445b51-364d-4fdb-b9fb-62a5cfb76177"
        },
        "item": {
          "id": "a11f0c85-e545-4e34-8c01-e781b19bd6a2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4fb80f08-10e2-4d03-8cbd-c4cdcdbcc039",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7af5eebd-0de6-4887-8bc2-eb604f04955f",
        "cursor": {
          "ref": "0d2b3268-71d6-4ff3-83b3-529b248028e7",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9280beec-10b2-4e6d-bc29-f61f4b8140e3"
        },
        "item": {
          "id": "7af5eebd-0de6-4887-8bc2-eb604f04955f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1c54fb71-d590-4393-b8f5-732ee3244781",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "7af5eebd-0de6-4887-8bc2-eb604f04955f",
        "cursor": {
          "ref": "0d2b3268-71d6-4ff3-83b3-529b248028e7",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9280beec-10b2-4e6d-bc29-f61f4b8140e3"
        },
        "item": {
          "id": "7af5eebd-0de6-4887-8bc2-eb604f04955f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1c54fb71-d590-4393-b8f5-732ee3244781",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "9098b240-a395-4469-ad63-53db8cd86706",
        "cursor": {
          "ref": "02b00391-578b-4fc7-b4af-03be320d57e8",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "72d75b54-54f7-4c9e-a892-fbfac5fd8fd2"
        },
        "item": {
          "id": "9098b240-a395-4469-ad63-53db8cd86706",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7f88efdd-caa4-49cc-9a61-f37f5d744e7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9098b240-a395-4469-ad63-53db8cd86706",
        "cursor": {
          "ref": "02b00391-578b-4fc7-b4af-03be320d57e8",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "72d75b54-54f7-4c9e-a892-fbfac5fd8fd2"
        },
        "item": {
          "id": "9098b240-a395-4469-ad63-53db8cd86706",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7f88efdd-caa4-49cc-9a61-f37f5d744e7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "84963011-03e7-40f3-bc19-b40918b39e33",
        "cursor": {
          "ref": "04773882-17dc-4f92-9fac-3136e7b0f65b",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "45f97d87-af09-4495-a680-3302cdc1baea"
        },
        "item": {
          "id": "84963011-03e7-40f3-bc19-b40918b39e33",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "26c19608-f30f-404d-bffe-b383b2b02a99",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "84963011-03e7-40f3-bc19-b40918b39e33",
        "cursor": {
          "ref": "04773882-17dc-4f92-9fac-3136e7b0f65b",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "45f97d87-af09-4495-a680-3302cdc1baea"
        },
        "item": {
          "id": "84963011-03e7-40f3-bc19-b40918b39e33",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "26c19608-f30f-404d-bffe-b383b2b02a99",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "93eade31-8894-478c-94bc-014aa9e7b65e",
        "cursor": {
          "ref": "c1473d96-d6a3-44b2-a8d5-15fa22f72c3e",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2bf7457e-808e-4b0d-aaaa-b3275f80b703"
        },
        "item": {
          "id": "93eade31-8894-478c-94bc-014aa9e7b65e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a35813c8-43d6-4569-af7d-77428b5631da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "93eade31-8894-478c-94bc-014aa9e7b65e",
        "cursor": {
          "ref": "c1473d96-d6a3-44b2-a8d5-15fa22f72c3e",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2bf7457e-808e-4b0d-aaaa-b3275f80b703"
        },
        "item": {
          "id": "93eade31-8894-478c-94bc-014aa9e7b65e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a35813c8-43d6-4569-af7d-77428b5631da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "316a2312-5eef-4ebd-8137-ba0cb3eb3160",
        "cursor": {
          "ref": "8adf96ee-f2ea-460f-8468-d2c9c9b9c839",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "faf1ff61-02c4-4929-a920-8d3f63aebff0"
        },
        "item": {
          "id": "316a2312-5eef-4ebd-8137-ba0cb3eb3160",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b4f971e0-e379-4d95-aab2-465294c281db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "316a2312-5eef-4ebd-8137-ba0cb3eb3160",
        "cursor": {
          "ref": "8adf96ee-f2ea-460f-8468-d2c9c9b9c839",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "faf1ff61-02c4-4929-a920-8d3f63aebff0"
        },
        "item": {
          "id": "316a2312-5eef-4ebd-8137-ba0cb3eb3160",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b4f971e0-e379-4d95-aab2-465294c281db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "096daccc-ed84-49c1-8585-c200f5067723",
        "cursor": {
          "ref": "0ea6116f-8ae2-4773-a829-1b49d1bf6a85",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2fec5394-230c-4c25-82a7-492a7d3d7ffb"
        },
        "item": {
          "id": "096daccc-ed84-49c1-8585-c200f5067723",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b2039aa7-48ad-4ed5-9f59-acbf62453400",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "096daccc-ed84-49c1-8585-c200f5067723",
        "cursor": {
          "ref": "0ea6116f-8ae2-4773-a829-1b49d1bf6a85",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2fec5394-230c-4c25-82a7-492a7d3d7ffb"
        },
        "item": {
          "id": "096daccc-ed84-49c1-8585-c200f5067723",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b2039aa7-48ad-4ed5-9f59-acbf62453400",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "5e3a5b35-39b6-4168-ab46-fa58e7b276f3",
        "cursor": {
          "ref": "29d386e9-024c-432b-9372-b3452bbf8d0f",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "512995af-da4e-4f7b-b138-b3b8a85ef2f3"
        },
        "item": {
          "id": "5e3a5b35-39b6-4168-ab46-fa58e7b276f3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a337cf66-951d-4fe4-b429-0bc8ee7990f8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "5e3a5b35-39b6-4168-ab46-fa58e7b276f3",
        "cursor": {
          "ref": "29d386e9-024c-432b-9372-b3452bbf8d0f",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "512995af-da4e-4f7b-b138-b3b8a85ef2f3"
        },
        "item": {
          "id": "5e3a5b35-39b6-4168-ab46-fa58e7b276f3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a337cf66-951d-4fe4-b429-0bc8ee7990f8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "aa72c0ae-0169-4b3f-a4fa-eaacd825ec63",
        "cursor": {
          "ref": "28db5ccb-d542-4223-be84-57d6ab3693da",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a8759f63-f7e2-4c60-aa2f-a715ed6aba3e"
        },
        "item": {
          "id": "aa72c0ae-0169-4b3f-a4fa-eaacd825ec63",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "150cdabf-1216-47de-a4e5-43251e90ffb0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "aa72c0ae-0169-4b3f-a4fa-eaacd825ec63",
        "cursor": {
          "ref": "28db5ccb-d542-4223-be84-57d6ab3693da",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a8759f63-f7e2-4c60-aa2f-a715ed6aba3e"
        },
        "item": {
          "id": "aa72c0ae-0169-4b3f-a4fa-eaacd825ec63",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "150cdabf-1216-47de-a4e5-43251e90ffb0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "03b42852-47a4-41ab-a18e-f2eee26362aa",
        "cursor": {
          "ref": "b119987b-2049-4e9a-b8f9-cba93fb54eda",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fa7e7a96-8577-4f10-95df-ddc3cf3f5c4c"
        },
        "item": {
          "id": "03b42852-47a4-41ab-a18e-f2eee26362aa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6e3ee3ad-1361-4ace-b519-c3e7917f4451",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "03b42852-47a4-41ab-a18e-f2eee26362aa",
        "cursor": {
          "ref": "b119987b-2049-4e9a-b8f9-cba93fb54eda",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fa7e7a96-8577-4f10-95df-ddc3cf3f5c4c"
        },
        "item": {
          "id": "03b42852-47a4-41ab-a18e-f2eee26362aa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6e3ee3ad-1361-4ace-b519-c3e7917f4451",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "9423bdab-a8c8-4872-9bfc-3edcc3b149d0",
        "cursor": {
          "ref": "8559add1-8895-4a58-a80f-6aca2024d9a0",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b667ecb5-08e9-4545-98a6-fb3049ed4399"
        },
        "item": {
          "id": "9423bdab-a8c8-4872-9bfc-3edcc3b149d0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cac06af9-6fdd-42de-8fa5-85e56c79c454",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "9423bdab-a8c8-4872-9bfc-3edcc3b149d0",
        "cursor": {
          "ref": "8559add1-8895-4a58-a80f-6aca2024d9a0",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b667ecb5-08e9-4545-98a6-fb3049ed4399"
        },
        "item": {
          "id": "9423bdab-a8c8-4872-9bfc-3edcc3b149d0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cac06af9-6fdd-42de-8fa5-85e56c79c454",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "4619e69c-02ee-4d0c-b46f-71657551599f",
        "cursor": {
          "ref": "94d8db82-fc67-4f69-ad90-8356e58bf401",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b60acbd4-ba5e-467a-88c7-d5f1d3fe39ce"
        },
        "item": {
          "id": "4619e69c-02ee-4d0c-b46f-71657551599f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a0420574-c1f0-4cec-8656-1d82c6bcd2af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "4619e69c-02ee-4d0c-b46f-71657551599f",
        "cursor": {
          "ref": "94d8db82-fc67-4f69-ad90-8356e58bf401",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b60acbd4-ba5e-467a-88c7-d5f1d3fe39ce"
        },
        "item": {
          "id": "4619e69c-02ee-4d0c-b46f-71657551599f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a0420574-c1f0-4cec-8656-1d82c6bcd2af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "de95a158-28d0-494a-a942-938c3257e21c",
        "cursor": {
          "ref": "a3df04ea-734e-46e5-ac50-6be2309fa459",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bf2194c9-caf2-4d98-a5f5-3dd35e273f7b"
        },
        "item": {
          "id": "de95a158-28d0-494a-a942-938c3257e21c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0166c6fe-3248-46a7-95f7-e31595c51e09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "de95a158-28d0-494a-a942-938c3257e21c",
        "cursor": {
          "ref": "a3df04ea-734e-46e5-ac50-6be2309fa459",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bf2194c9-caf2-4d98-a5f5-3dd35e273f7b"
        },
        "item": {
          "id": "de95a158-28d0-494a-a942-938c3257e21c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0166c6fe-3248-46a7-95f7-e31595c51e09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "b307f3f6-9213-4b08-b8bf-7e2a4b797cbb",
        "cursor": {
          "ref": "8b413bf0-3d2d-4286-9cbf-421ea226f874",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "13713fa2-595a-423c-a397-9008ff2045dd"
        },
        "item": {
          "id": "b307f3f6-9213-4b08-b8bf-7e2a4b797cbb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "56ba6cb7-b70d-4f5d-9325-a1f77253909d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "b307f3f6-9213-4b08-b8bf-7e2a4b797cbb",
        "cursor": {
          "ref": "8b413bf0-3d2d-4286-9cbf-421ea226f874",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "13713fa2-595a-423c-a397-9008ff2045dd"
        },
        "item": {
          "id": "b307f3f6-9213-4b08-b8bf-7e2a4b797cbb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "56ba6cb7-b70d-4f5d-9325-a1f77253909d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "2224c0f8-0f11-40e2-961d-9958ff094d74",
        "cursor": {
          "ref": "1c269bc1-45f6-4ade-a82a-5d6991419f5d",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a3cb2c51-ba28-48f1-a554-f894679419ac"
        },
        "item": {
          "id": "2224c0f8-0f11-40e2-961d-9958ff094d74",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a00c39a7-420a-4763-859a-2cfb0663190e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "2224c0f8-0f11-40e2-961d-9958ff094d74",
        "cursor": {
          "ref": "1c269bc1-45f6-4ade-a82a-5d6991419f5d",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a3cb2c51-ba28-48f1-a554-f894679419ac"
        },
        "item": {
          "id": "2224c0f8-0f11-40e2-961d-9958ff094d74",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a00c39a7-420a-4763-859a-2cfb0663190e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "edb616ac-4522-4570-b326-a398d0905139",
        "cursor": {
          "ref": "2ca2a08d-3bb6-444b-9e4e-6a04101853f5",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "afd72af9-5f0c-4202-9944-3e384880febb"
        },
        "item": {
          "id": "edb616ac-4522-4570-b326-a398d0905139",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dec33d8e-bb44-4125-b132-a1e3c4edd700",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "edb616ac-4522-4570-b326-a398d0905139",
        "cursor": {
          "ref": "2ca2a08d-3bb6-444b-9e4e-6a04101853f5",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "afd72af9-5f0c-4202-9944-3e384880febb"
        },
        "item": {
          "id": "edb616ac-4522-4570-b326-a398d0905139",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dec33d8e-bb44-4125-b132-a1e3c4edd700",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "0e79f06a-e297-4893-ad9d-37dba62a764a",
        "cursor": {
          "ref": "92fd7ad7-fde5-4821-a3cd-d963f90434b9",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "199ed7db-1fb9-4ee5-a198-fb9fd6301330"
        },
        "item": {
          "id": "0e79f06a-e297-4893-ad9d-37dba62a764a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b3533200-90cb-4825-bc11-bd11753a33d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "0e79f06a-e297-4893-ad9d-37dba62a764a",
        "cursor": {
          "ref": "92fd7ad7-fde5-4821-a3cd-d963f90434b9",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "199ed7db-1fb9-4ee5-a198-fb9fd6301330"
        },
        "item": {
          "id": "0e79f06a-e297-4893-ad9d-37dba62a764a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b3533200-90cb-4825-bc11-bd11753a33d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "6faf88c7-bdc9-4e4c-9a08-9680cccbffbf",
        "cursor": {
          "ref": "2ecbf20b-3784-4303-ab69-8475b2c847be",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9305f260-3b4e-4eee-bb61-44ef5f0f6f2b"
        },
        "item": {
          "id": "6faf88c7-bdc9-4e4c-9a08-9680cccbffbf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "21fbb4b4-e2a0-4fef-86fd-6de57794146c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "6faf88c7-bdc9-4e4c-9a08-9680cccbffbf",
        "cursor": {
          "ref": "2ecbf20b-3784-4303-ab69-8475b2c847be",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9305f260-3b4e-4eee-bb61-44ef5f0f6f2b"
        },
        "item": {
          "id": "6faf88c7-bdc9-4e4c-9a08-9680cccbffbf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "21fbb4b4-e2a0-4fef-86fd-6de57794146c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "caa64f27-f5bd-457b-8561-1e67b7d19a9d",
        "cursor": {
          "ref": "12355463-39b0-4777-8ee2-2617134548bf",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6373f1ba-55f7-4a29-b548-8936955b6fdb"
        },
        "item": {
          "id": "caa64f27-f5bd-457b-8561-1e67b7d19a9d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "265dca47-c8da-4776-afea-e51fdf978237",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "caa64f27-f5bd-457b-8561-1e67b7d19a9d",
        "cursor": {
          "ref": "12355463-39b0-4777-8ee2-2617134548bf",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6373f1ba-55f7-4a29-b548-8936955b6fdb"
        },
        "item": {
          "id": "caa64f27-f5bd-457b-8561-1e67b7d19a9d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "265dca47-c8da-4776-afea-e51fdf978237",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "2169f176-baef-4f36-9a2c-4aeb2fe800e2",
        "cursor": {
          "ref": "4a05bde3-6954-47fa-915c-8fa884b77439",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "09da7f85-963b-4f98-bb37-efca92bf575e"
        },
        "item": {
          "id": "2169f176-baef-4f36-9a2c-4aeb2fe800e2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a6fba84c-ccfd-4fb6-9238-a009d943c246",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "2169f176-baef-4f36-9a2c-4aeb2fe800e2",
        "cursor": {
          "ref": "4a05bde3-6954-47fa-915c-8fa884b77439",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "09da7f85-963b-4f98-bb37-efca92bf575e"
        },
        "item": {
          "id": "2169f176-baef-4f36-9a2c-4aeb2fe800e2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a6fba84c-ccfd-4fb6-9238-a009d943c246",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "26a8cc79-66f2-4c42-9bf3-152b3a40f8ed",
        "cursor": {
          "ref": "33d0b0c5-7c54-4d5f-80c8-b763513e9637",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "95863e77-31d2-4bf7-8652-a2a188e51ba9"
        },
        "item": {
          "id": "26a8cc79-66f2-4c42-9bf3-152b3a40f8ed",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cd8c35bc-7b7c-4ea0-bffd-6b47b8d8e44a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "26a8cc79-66f2-4c42-9bf3-152b3a40f8ed",
        "cursor": {
          "ref": "33d0b0c5-7c54-4d5f-80c8-b763513e9637",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "95863e77-31d2-4bf7-8652-a2a188e51ba9"
        },
        "item": {
          "id": "26a8cc79-66f2-4c42-9bf3-152b3a40f8ed",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cd8c35bc-7b7c-4ea0-bffd-6b47b8d8e44a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "670d7ea4-be9d-4a22-bfe7-b2ca68d2c7a3",
        "cursor": {
          "ref": "9d792251-8641-4e7f-a63b-652adf97789d",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7e961e8b-6668-4b52-8395-5578a14a6bb9"
        },
        "item": {
          "id": "670d7ea4-be9d-4a22-bfe7-b2ca68d2c7a3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a28b590e-7da1-457b-8c36-935315ca14d1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "670d7ea4-be9d-4a22-bfe7-b2ca68d2c7a3",
        "cursor": {
          "ref": "9d792251-8641-4e7f-a63b-652adf97789d",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7e961e8b-6668-4b52-8395-5578a14a6bb9"
        },
        "item": {
          "id": "670d7ea4-be9d-4a22-bfe7-b2ca68d2c7a3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a28b590e-7da1-457b-8c36-935315ca14d1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "3adb8a1c-99ef-4c29-9820-ea7f01460e0e",
        "cursor": {
          "ref": "5df2c08a-9686-4d2e-8108-6b180db7ed98",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d696d266-6fa8-4819-9a51-b2331a79a2da"
        },
        "item": {
          "id": "3adb8a1c-99ef-4c29-9820-ea7f01460e0e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "01f0db4d-9d54-463b-ae76-fcfb59624c1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "3adb8a1c-99ef-4c29-9820-ea7f01460e0e",
        "cursor": {
          "ref": "5df2c08a-9686-4d2e-8108-6b180db7ed98",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d696d266-6fa8-4819-9a51-b2331a79a2da"
        },
        "item": {
          "id": "3adb8a1c-99ef-4c29-9820-ea7f01460e0e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "01f0db4d-9d54-463b-ae76-fcfb59624c1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "dc47fe73-5166-4bfc-8460-e8dc1569ecf1",
        "cursor": {
          "ref": "936c8441-3ca7-41f9-b081-5bfd4458ca9d",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "44d803a3-92d2-44ee-8d20-fbfb15253b9d"
        },
        "item": {
          "id": "dc47fe73-5166-4bfc-8460-e8dc1569ecf1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "492aa3a1-a1f9-4463-b247-e02fac9b661f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "dc47fe73-5166-4bfc-8460-e8dc1569ecf1",
        "cursor": {
          "ref": "936c8441-3ca7-41f9-b081-5bfd4458ca9d",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "44d803a3-92d2-44ee-8d20-fbfb15253b9d"
        },
        "item": {
          "id": "dc47fe73-5166-4bfc-8460-e8dc1569ecf1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "492aa3a1-a1f9-4463-b247-e02fac9b661f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8e263490-6a7a-4834-afd0-047d788373c7",
        "cursor": {
          "ref": "3f320417-38c6-4baf-93da-cdcb5ea1d5b1",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b68e993b-23ad-41b8-a765-1e2ebf46fef1"
        },
        "item": {
          "id": "8e263490-6a7a-4834-afd0-047d788373c7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ce46092d-a972-47cc-a874-1dc4a8ab1d82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "8e263490-6a7a-4834-afd0-047d788373c7",
        "cursor": {
          "ref": "3f320417-38c6-4baf-93da-cdcb5ea1d5b1",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b68e993b-23ad-41b8-a765-1e2ebf46fef1"
        },
        "item": {
          "id": "8e263490-6a7a-4834-afd0-047d788373c7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ce46092d-a972-47cc-a874-1dc4a8ab1d82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "ca2f53af-f632-48b3-abd5-bef01121e85f",
        "cursor": {
          "ref": "643be521-25a8-4a20-9ca7-c15598ebdac6",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f25f94c5-a89e-4990-8def-06f64aa5c4a9"
        },
        "item": {
          "id": "ca2f53af-f632-48b3-abd5-bef01121e85f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "58270302-7f46-4fb1-a215-9ff772805329",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ca2f53af-f632-48b3-abd5-bef01121e85f",
        "cursor": {
          "ref": "643be521-25a8-4a20-9ca7-c15598ebdac6",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f25f94c5-a89e-4990-8def-06f64aa5c4a9"
        },
        "item": {
          "id": "ca2f53af-f632-48b3-abd5-bef01121e85f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "58270302-7f46-4fb1-a215-9ff772805329",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "7ba0ee1d-a252-458f-ad0e-8d534228c209",
        "cursor": {
          "ref": "022b7da2-5a21-42a1-8a82-0dffbec9ad0e",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "30706640-7bb1-4488-b37d-64a5174e6c14"
        },
        "item": {
          "id": "7ba0ee1d-a252-458f-ad0e-8d534228c209",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dedb2fa6-4d15-49c7-adcb-d85fcc1f705a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "7ba0ee1d-a252-458f-ad0e-8d534228c209",
        "cursor": {
          "ref": "022b7da2-5a21-42a1-8a82-0dffbec9ad0e",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "30706640-7bb1-4488-b37d-64a5174e6c14"
        },
        "item": {
          "id": "7ba0ee1d-a252-458f-ad0e-8d534228c209",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dedb2fa6-4d15-49c7-adcb-d85fcc1f705a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "ac4316e8-9787-43c5-b311-ae605bd2cb77",
        "cursor": {
          "ref": "aed5ce27-6369-4917-b06c-fee294e5e6dd",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ff46aa1f-9a8d-4906-8ae7-117694963c96"
        },
        "item": {
          "id": "ac4316e8-9787-43c5-b311-ae605bd2cb77",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b7039e40-b552-4860-888e-d89b74ce76a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "ac4316e8-9787-43c5-b311-ae605bd2cb77",
        "cursor": {
          "ref": "aed5ce27-6369-4917-b06c-fee294e5e6dd",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ff46aa1f-9a8d-4906-8ae7-117694963c96"
        },
        "item": {
          "id": "ac4316e8-9787-43c5-b311-ae605bd2cb77",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b7039e40-b552-4860-888e-d89b74ce76a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "174db892-ea7f-4c1b-bdd3-f3c516a5c3df",
        "cursor": {
          "ref": "2a1245f2-9f3b-4c00-ad98-b7df3e6aeaf6",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b31fdf70-2c7e-4d9d-88d0-bb37f4676b63"
        },
        "item": {
          "id": "174db892-ea7f-4c1b-bdd3-f3c516a5c3df",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2b0263dc-97c3-48cd-b5f2-7d81d12be4df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "174db892-ea7f-4c1b-bdd3-f3c516a5c3df",
        "cursor": {
          "ref": "2a1245f2-9f3b-4c00-ad98-b7df3e6aeaf6",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b31fdf70-2c7e-4d9d-88d0-bb37f4676b63"
        },
        "item": {
          "id": "174db892-ea7f-4c1b-bdd3-f3c516a5c3df",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2b0263dc-97c3-48cd-b5f2-7d81d12be4df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "8945d5cb-e3ea-4a18-99f0-0282d24ab647",
        "cursor": {
          "ref": "bf535f6b-72a9-4984-ac70-efbe59280136",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "40c8dcda-7449-4ce4-b359-3270e59b2eaa"
        },
        "item": {
          "id": "8945d5cb-e3ea-4a18-99f0-0282d24ab647",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "394780df-e403-447b-92d6-b858542578c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8945d5cb-e3ea-4a18-99f0-0282d24ab647",
        "cursor": {
          "ref": "bf535f6b-72a9-4984-ac70-efbe59280136",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "40c8dcda-7449-4ce4-b359-3270e59b2eaa"
        },
        "item": {
          "id": "8945d5cb-e3ea-4a18-99f0-0282d24ab647",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "394780df-e403-447b-92d6-b858542578c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0ff9c0e9-6dce-4227-9901-ac11503a1f2e",
        "cursor": {
          "ref": "5de022fb-f73f-4cc0-bb0b-2cbf0b37e580",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6578af9e-d9d7-4efb-86f3-b92238d44ef8"
        },
        "item": {
          "id": "0ff9c0e9-6dce-4227-9901-ac11503a1f2e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2e419b66-76ab-46f1-9cf6-c1df1ca91325",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0ff9c0e9-6dce-4227-9901-ac11503a1f2e",
        "cursor": {
          "ref": "5de022fb-f73f-4cc0-bb0b-2cbf0b37e580",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6578af9e-d9d7-4efb-86f3-b92238d44ef8"
        },
        "item": {
          "id": "0ff9c0e9-6dce-4227-9901-ac11503a1f2e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2e419b66-76ab-46f1-9cf6-c1df1ca91325",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "a31ff2e4-b455-4101-b30d-7f7ee90023d4",
        "cursor": {
          "ref": "bdc669ce-7fc4-4c70-81b0-682c3d6b9e00",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "32e12e2d-9841-400b-9f5e-2574df4e4ec8"
        },
        "item": {
          "id": "a31ff2e4-b455-4101-b30d-7f7ee90023d4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "60257698-51ed-40c4-b5a1-4cf355d216e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "a31ff2e4-b455-4101-b30d-7f7ee90023d4",
        "cursor": {
          "ref": "bdc669ce-7fc4-4c70-81b0-682c3d6b9e00",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "32e12e2d-9841-400b-9f5e-2574df4e4ec8"
        },
        "item": {
          "id": "a31ff2e4-b455-4101-b30d-7f7ee90023d4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "60257698-51ed-40c4-b5a1-4cf355d216e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "99a8b33c-ceb7-4069-970a-eaa2ae000544",
        "cursor": {
          "ref": "71b3ceca-c5fc-4c97-8d69-db7f1a16eca1",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "95d7d0db-2ea5-4fa9-ad76-380c51461ccd"
        },
        "item": {
          "id": "99a8b33c-ceb7-4069-970a-eaa2ae000544",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "85809746-a36f-41a9-a503-1f8e867f2d67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "99a8b33c-ceb7-4069-970a-eaa2ae000544",
        "cursor": {
          "ref": "71b3ceca-c5fc-4c97-8d69-db7f1a16eca1",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "95d7d0db-2ea5-4fa9-ad76-380c51461ccd"
        },
        "item": {
          "id": "99a8b33c-ceb7-4069-970a-eaa2ae000544",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "85809746-a36f-41a9-a503-1f8e867f2d67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "8dbe4c2a-1046-4e63-9c13-e24c7558e9a4",
        "cursor": {
          "ref": "23cc528e-b4fc-47bf-8c91-3be9d34fed38",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0bfa2fbb-2d23-4281-a047-d54a1454bf20"
        },
        "item": {
          "id": "8dbe4c2a-1046-4e63-9c13-e24c7558e9a4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "85e81cb3-7cd5-4bc7-9a71-a246f215e657",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8dbe4c2a-1046-4e63-9c13-e24c7558e9a4",
        "cursor": {
          "ref": "23cc528e-b4fc-47bf-8c91-3be9d34fed38",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0bfa2fbb-2d23-4281-a047-d54a1454bf20"
        },
        "item": {
          "id": "8dbe4c2a-1046-4e63-9c13-e24c7558e9a4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "85e81cb3-7cd5-4bc7-9a71-a246f215e657",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0a4639a5-dc3d-4345-92dd-2f4103d14c20",
        "cursor": {
          "ref": "b302fc60-086d-4470-bc0b-938c3215d408",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8dd6ef51-6134-45e9-ae1a-68e1542d41d8"
        },
        "item": {
          "id": "0a4639a5-dc3d-4345-92dd-2f4103d14c20",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5292e68e-2418-4df8-b20d-81c84f2d9a47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0a4639a5-dc3d-4345-92dd-2f4103d14c20",
        "cursor": {
          "ref": "b302fc60-086d-4470-bc0b-938c3215d408",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8dd6ef51-6134-45e9-ae1a-68e1542d41d8"
        },
        "item": {
          "id": "0a4639a5-dc3d-4345-92dd-2f4103d14c20",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5292e68e-2418-4df8-b20d-81c84f2d9a47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "3d1f0808-2e1f-4f10-94ad-8856de311bea",
        "cursor": {
          "ref": "48f787c9-3a9c-4515-9565-793021340e3d",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "22415f0b-549d-4759-bed5-3fcadf9e79d9"
        },
        "item": {
          "id": "3d1f0808-2e1f-4f10-94ad-8856de311bea",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b016e3fa-6ec1-4c74-ae0f-7ef9a0c9793d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3d1f0808-2e1f-4f10-94ad-8856de311bea",
        "cursor": {
          "ref": "48f787c9-3a9c-4515-9565-793021340e3d",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "22415f0b-549d-4759-bed5-3fcadf9e79d9"
        },
        "item": {
          "id": "3d1f0808-2e1f-4f10-94ad-8856de311bea",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b016e3fa-6ec1-4c74-ae0f-7ef9a0c9793d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6c684891-034f-4240-bc1a-1c3523a8179d",
        "cursor": {
          "ref": "780cae3f-590b-40c0-9a0a-7522b4dc4aa5",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5fdcf6be-6315-4d6a-8127-07d9ae9359a2"
        },
        "item": {
          "id": "6c684891-034f-4240-bc1a-1c3523a8179d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "856f9602-bb3b-4820-b0a7-f78b2d80d03c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6c684891-034f-4240-bc1a-1c3523a8179d",
        "cursor": {
          "ref": "780cae3f-590b-40c0-9a0a-7522b4dc4aa5",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5fdcf6be-6315-4d6a-8127-07d9ae9359a2"
        },
        "item": {
          "id": "6c684891-034f-4240-bc1a-1c3523a8179d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "856f9602-bb3b-4820-b0a7-f78b2d80d03c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "83bf916d-0521-4438-8af5-e64c6e5c154b",
        "cursor": {
          "ref": "9ca08d9e-88ae-46ae-af2c-cfdb708442a8",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "728cb07e-173a-48b3-a944-caea71a522dd"
        },
        "item": {
          "id": "83bf916d-0521-4438-8af5-e64c6e5c154b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "502f1414-3721-4b1f-8e45-f0ea977e5bf7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "83bf916d-0521-4438-8af5-e64c6e5c154b",
        "cursor": {
          "ref": "9ca08d9e-88ae-46ae-af2c-cfdb708442a8",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "728cb07e-173a-48b3-a944-caea71a522dd"
        },
        "item": {
          "id": "83bf916d-0521-4438-8af5-e64c6e5c154b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "502f1414-3721-4b1f-8e45-f0ea977e5bf7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "362d2014-a224-4986-a456-c6cc531df621",
        "cursor": {
          "ref": "cc135863-96bd-4207-a473-8b07aae428e3",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a1109bbd-47b3-4154-a725-12b21d4cd89b"
        },
        "item": {
          "id": "362d2014-a224-4986-a456-c6cc531df621",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8774e743-8ab0-4e91-8906-0125008d735b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "362d2014-a224-4986-a456-c6cc531df621",
        "cursor": {
          "ref": "cc135863-96bd-4207-a473-8b07aae428e3",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a1109bbd-47b3-4154-a725-12b21d4cd89b"
        },
        "item": {
          "id": "362d2014-a224-4986-a456-c6cc531df621",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8774e743-8ab0-4e91-8906-0125008d735b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "47c69368-ef64-4fb1-b5c1-21c0f3e5bcbe",
        "cursor": {
          "ref": "e07c6c44-126d-4dd7-9ea8-20e3cd0b3bda",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "52a7a3ae-855c-49ed-ac46-30bc2e3aa6a3"
        },
        "item": {
          "id": "47c69368-ef64-4fb1-b5c1-21c0f3e5bcbe",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cd67a2e2-8e1a-4dcd-bfa9-d760cd34882c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "47c69368-ef64-4fb1-b5c1-21c0f3e5bcbe",
        "cursor": {
          "ref": "e07c6c44-126d-4dd7-9ea8-20e3cd0b3bda",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "52a7a3ae-855c-49ed-ac46-30bc2e3aa6a3"
        },
        "item": {
          "id": "47c69368-ef64-4fb1-b5c1-21c0f3e5bcbe",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cd67a2e2-8e1a-4dcd-bfa9-d760cd34882c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "804f5fd4-5ead-435c-9e67-faab2691c243",
        "cursor": {
          "ref": "29f6aac4-c0ca-495e-928b-73aef620a6ed",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ba670e63-9643-456b-b244-f92e5ddd923b"
        },
        "item": {
          "id": "804f5fd4-5ead-435c-9e67-faab2691c243",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3b7f2ba2-08f4-46a4-90ba-740566cc0234",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "804f5fd4-5ead-435c-9e67-faab2691c243",
        "cursor": {
          "ref": "29f6aac4-c0ca-495e-928b-73aef620a6ed",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ba670e63-9643-456b-b244-f92e5ddd923b"
        },
        "item": {
          "id": "804f5fd4-5ead-435c-9e67-faab2691c243",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3b7f2ba2-08f4-46a4-90ba-740566cc0234",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "c2c5f8e9-87d9-4aaf-9c3c-be269e2319dc",
        "cursor": {
          "ref": "306cb4a8-a6a1-4d0b-8b98-88486d6c2fa1",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ed82d9e5-c397-4e17-ad76-1a0e2348e48c"
        },
        "item": {
          "id": "c2c5f8e9-87d9-4aaf-9c3c-be269e2319dc",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5e49a283-1a2b-468c-8bc6-b6ea152b4bcd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "c2c5f8e9-87d9-4aaf-9c3c-be269e2319dc",
        "cursor": {
          "ref": "306cb4a8-a6a1-4d0b-8b98-88486d6c2fa1",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ed82d9e5-c397-4e17-ad76-1a0e2348e48c"
        },
        "item": {
          "id": "c2c5f8e9-87d9-4aaf-9c3c-be269e2319dc",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5e49a283-1a2b-468c-8bc6-b6ea152b4bcd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "0a1b3d87-5eb9-4f17-81d7-ef9c4cb23f1f",
        "cursor": {
          "ref": "08575446-0d65-48dd-9857-d7681cd4f6cd",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bae609be-bf28-418e-ab45-4fda00179232"
        },
        "item": {
          "id": "0a1b3d87-5eb9-4f17-81d7-ef9c4cb23f1f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "bc157924-ce65-4a5d-bdae-ae2a98c3ea2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "0a1b3d87-5eb9-4f17-81d7-ef9c4cb23f1f",
        "cursor": {
          "ref": "08575446-0d65-48dd-9857-d7681cd4f6cd",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bae609be-bf28-418e-ab45-4fda00179232"
        },
        "item": {
          "id": "0a1b3d87-5eb9-4f17-81d7-ef9c4cb23f1f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "bc157924-ce65-4a5d-bdae-ae2a98c3ea2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "e8d3fbaf-22fc-4d7b-a934-36969c7a768b",
        "cursor": {
          "ref": "2aa19e72-42d6-455c-959d-2e92d910c634",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "05cf29ae-1e03-4600-898a-1516301c0700"
        },
        "item": {
          "id": "e8d3fbaf-22fc-4d7b-a934-36969c7a768b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6730e1bc-e4e5-4c6e-b646-744b9f7c87c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "e8d3fbaf-22fc-4d7b-a934-36969c7a768b",
        "cursor": {
          "ref": "2aa19e72-42d6-455c-959d-2e92d910c634",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "05cf29ae-1e03-4600-898a-1516301c0700"
        },
        "item": {
          "id": "e8d3fbaf-22fc-4d7b-a934-36969c7a768b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6730e1bc-e4e5-4c6e-b646-744b9f7c87c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "50706d39-9b4b-49fb-ac22-5e41ce8856fc",
        "cursor": {
          "ref": "2ac16c49-3f10-4206-b3fc-a4695504c6be",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0ba80559-e119-4b71-8625-e0213593cf27"
        },
        "item": {
          "id": "50706d39-9b4b-49fb-ac22-5e41ce8856fc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "aa78a1e7-7622-4429-8b38-2d2b9378ab0a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "50706d39-9b4b-49fb-ac22-5e41ce8856fc",
        "cursor": {
          "ref": "2ac16c49-3f10-4206-b3fc-a4695504c6be",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0ba80559-e119-4b71-8625-e0213593cf27"
        },
        "item": {
          "id": "50706d39-9b4b-49fb-ac22-5e41ce8856fc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "aa78a1e7-7622-4429-8b38-2d2b9378ab0a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "3438db38-aa89-469c-ab5e-b068fc0d329b",
        "cursor": {
          "ref": "f9d419cf-7869-4b21-81aa-e463d7c5ce50",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "16bf3068-bf99-46b7-a85f-58f16ad44cdc"
        },
        "item": {
          "id": "3438db38-aa89-469c-ab5e-b068fc0d329b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1ffd7762-14b8-457c-b3be-42093d52194a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "3438db38-aa89-469c-ab5e-b068fc0d329b",
        "cursor": {
          "ref": "f9d419cf-7869-4b21-81aa-e463d7c5ce50",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "16bf3068-bf99-46b7-a85f-58f16ad44cdc"
        },
        "item": {
          "id": "3438db38-aa89-469c-ab5e-b068fc0d329b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1ffd7762-14b8-457c-b3be-42093d52194a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "44fd52e5-9741-4666-8c1a-76ca6d5c3df5",
        "cursor": {
          "ref": "1742d410-0244-48cd-a024-4002a1fccf32",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b52f7d1f-fa00-4e5e-b885-31a76494d7c0"
        },
        "item": {
          "id": "44fd52e5-9741-4666-8c1a-76ca6d5c3df5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6d6cb785-88a7-4b1a-913e-7892067486e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "44fd52e5-9741-4666-8c1a-76ca6d5c3df5",
        "cursor": {
          "ref": "1742d410-0244-48cd-a024-4002a1fccf32",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b52f7d1f-fa00-4e5e-b885-31a76494d7c0"
        },
        "item": {
          "id": "44fd52e5-9741-4666-8c1a-76ca6d5c3df5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6d6cb785-88a7-4b1a-913e-7892067486e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "04ab0f78-7a57-4db9-a2de-0eac7348812a",
        "cursor": {
          "ref": "03dc5220-a647-4b04-ad0c-a0394295f17c",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "375a9d90-d99c-44ca-96e9-2b3867141474"
        },
        "item": {
          "id": "04ab0f78-7a57-4db9-a2de-0eac7348812a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3a7d4665-c4df-432c-936f-76da98d39a13",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "04ab0f78-7a57-4db9-a2de-0eac7348812a",
        "cursor": {
          "ref": "03dc5220-a647-4b04-ad0c-a0394295f17c",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "375a9d90-d99c-44ca-96e9-2b3867141474"
        },
        "item": {
          "id": "04ab0f78-7a57-4db9-a2de-0eac7348812a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3a7d4665-c4df-432c-936f-76da98d39a13",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "67c1e291-82b1-4160-9da8-ffc9ae37042c",
        "cursor": {
          "ref": "115d7599-e80d-4190-b549-5de6aed5e14d",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2ce78965-6d86-4f98-9b29-73d94cc68200"
        },
        "item": {
          "id": "67c1e291-82b1-4160-9da8-ffc9ae37042c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "24b7a806-4ba4-4405-86c2-0f066c13d73c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "67c1e291-82b1-4160-9da8-ffc9ae37042c",
        "cursor": {
          "ref": "115d7599-e80d-4190-b549-5de6aed5e14d",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2ce78965-6d86-4f98-9b29-73d94cc68200"
        },
        "item": {
          "id": "67c1e291-82b1-4160-9da8-ffc9ae37042c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "24b7a806-4ba4-4405-86c2-0f066c13d73c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "835a33f9-0869-4ed1-81b8-7fb90b23e92c",
        "cursor": {
          "ref": "0bb047c6-7547-4ec1-b4c8-b564c475d533",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f962de54-2a1a-4418-9d49-c077c4ffe6b4"
        },
        "item": {
          "id": "835a33f9-0869-4ed1-81b8-7fb90b23e92c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "20c89e1f-26f3-4381-933b-cdb8dc028c8a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "835a33f9-0869-4ed1-81b8-7fb90b23e92c",
        "cursor": {
          "ref": "0bb047c6-7547-4ec1-b4c8-b564c475d533",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f962de54-2a1a-4418-9d49-c077c4ffe6b4"
        },
        "item": {
          "id": "835a33f9-0869-4ed1-81b8-7fb90b23e92c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "20c89e1f-26f3-4381-933b-cdb8dc028c8a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "7094de85-44cf-4bec-9e8d-7a677303166a",
        "cursor": {
          "ref": "4ec4c590-b5e9-4f87-a7e1-6e8f0eb1cce5",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e751ee03-723a-4cb2-b871-09c1bc6905c4"
        },
        "item": {
          "id": "7094de85-44cf-4bec-9e8d-7a677303166a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "51b2cf01-8dc9-46c3-926d-8e0da59964e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "7094de85-44cf-4bec-9e8d-7a677303166a",
        "cursor": {
          "ref": "4ec4c590-b5e9-4f87-a7e1-6e8f0eb1cce5",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e751ee03-723a-4cb2-b871-09c1bc6905c4"
        },
        "item": {
          "id": "7094de85-44cf-4bec-9e8d-7a677303166a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "51b2cf01-8dc9-46c3-926d-8e0da59964e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "f07a0e65-acd8-493f-87df-5426f31d5acf",
        "cursor": {
          "ref": "cebdb8bd-aa7b-43f8-a6c0-ec401b286b13",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ed312b2e-04d0-4089-b2ee-4a455f5c0cbf"
        },
        "item": {
          "id": "f07a0e65-acd8-493f-87df-5426f31d5acf",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "87724c1f-0f64-4f94-9851-33bf927cd5e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f07a0e65-acd8-493f-87df-5426f31d5acf",
        "cursor": {
          "ref": "cebdb8bd-aa7b-43f8-a6c0-ec401b286b13",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ed312b2e-04d0-4089-b2ee-4a455f5c0cbf"
        },
        "item": {
          "id": "f07a0e65-acd8-493f-87df-5426f31d5acf",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "87724c1f-0f64-4f94-9851-33bf927cd5e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "6ee24243-f745-480a-b28a-4cf4c3fda302",
        "cursor": {
          "ref": "413d8d63-a332-4380-b7ec-bea5bac1b376",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4d873c56-3ded-4e02-aa68-c20654d5e9b5"
        },
        "item": {
          "id": "6ee24243-f745-480a-b28a-4cf4c3fda302",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b2fdc372-550e-41dc-9615-fcefac129c19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6ee24243-f745-480a-b28a-4cf4c3fda302",
        "cursor": {
          "ref": "413d8d63-a332-4380-b7ec-bea5bac1b376",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4d873c56-3ded-4e02-aa68-c20654d5e9b5"
        },
        "item": {
          "id": "6ee24243-f745-480a-b28a-4cf4c3fda302",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b2fdc372-550e-41dc-9615-fcefac129c19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "37dbf2cb-7c1c-482d-93a8-8ec9e1a3bc7f",
        "cursor": {
          "ref": "c6d85149-3c89-4b74-8819-b5eedb1bf7f2",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "99364fde-42c2-4e38-9540-dcb5803a0bf4"
        },
        "item": {
          "id": "37dbf2cb-7c1c-482d-93a8-8ec9e1a3bc7f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4e7f6e7a-f1de-4afe-8c32-0512c32065ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "37dbf2cb-7c1c-482d-93a8-8ec9e1a3bc7f",
        "cursor": {
          "ref": "c6d85149-3c89-4b74-8819-b5eedb1bf7f2",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "99364fde-42c2-4e38-9540-dcb5803a0bf4"
        },
        "item": {
          "id": "37dbf2cb-7c1c-482d-93a8-8ec9e1a3bc7f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4e7f6e7a-f1de-4afe-8c32-0512c32065ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a73e85dc-fb59-4a33-9efd-193296d50148",
        "cursor": {
          "ref": "ec1a9965-1b8c-448f-9277-b71c7005e2c8",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ee04e77c-d183-4174-96ae-3c49e4a3491c"
        },
        "item": {
          "id": "a73e85dc-fb59-4a33-9efd-193296d50148",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "73e84d4e-aa30-4f4d-9dbd-ae85c3f19493",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a73e85dc-fb59-4a33-9efd-193296d50148",
        "cursor": {
          "ref": "ec1a9965-1b8c-448f-9277-b71c7005e2c8",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ee04e77c-d183-4174-96ae-3c49e4a3491c"
        },
        "item": {
          "id": "a73e85dc-fb59-4a33-9efd-193296d50148",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "73e84d4e-aa30-4f4d-9dbd-ae85c3f19493",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7c33e3c0-24ff-400e-8d77-dbdbcca621f2",
        "cursor": {
          "ref": "099cd710-de0e-4cb9-9434-9bd9cbeafe2c",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cc7b24dd-1970-4828-bfe4-d316e684b783"
        },
        "item": {
          "id": "7c33e3c0-24ff-400e-8d77-dbdbcca621f2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "faca1631-fe57-427c-a054-c7d4b58b8745",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7c33e3c0-24ff-400e-8d77-dbdbcca621f2",
        "cursor": {
          "ref": "099cd710-de0e-4cb9-9434-9bd9cbeafe2c",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cc7b24dd-1970-4828-bfe4-d316e684b783"
        },
        "item": {
          "id": "7c33e3c0-24ff-400e-8d77-dbdbcca621f2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "faca1631-fe57-427c-a054-c7d4b58b8745",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "84776998-3cfe-4a12-973e-e3c9bacd35de",
        "cursor": {
          "ref": "d4276c4b-804f-4b3d-8fa7-dd5bbacd3e7a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8139c7db-196c-4337-8c0b-c8833da73b38"
        },
        "item": {
          "id": "84776998-3cfe-4a12-973e-e3c9bacd35de",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "10ce7bc1-e0db-4ce0-9864-6c36b44eda5e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "84776998-3cfe-4a12-973e-e3c9bacd35de",
        "cursor": {
          "ref": "d4276c4b-804f-4b3d-8fa7-dd5bbacd3e7a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8139c7db-196c-4337-8c0b-c8833da73b38"
        },
        "item": {
          "id": "84776998-3cfe-4a12-973e-e3c9bacd35de",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "10ce7bc1-e0db-4ce0-9864-6c36b44eda5e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "79a8e7f8-fb40-41fb-b50f-159f331be5cf",
        "cursor": {
          "ref": "fdef9a39-37ef-4e66-8b6b-0c7f6fdbc1a9",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "89fab34e-47d7-4d16-a34b-1a95799ba34e"
        },
        "item": {
          "id": "79a8e7f8-fb40-41fb-b50f-159f331be5cf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4a9dc640-9671-42e4-b03f-995d666beabd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "79a8e7f8-fb40-41fb-b50f-159f331be5cf",
        "cursor": {
          "ref": "fdef9a39-37ef-4e66-8b6b-0c7f6fdbc1a9",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "89fab34e-47d7-4d16-a34b-1a95799ba34e"
        },
        "item": {
          "id": "79a8e7f8-fb40-41fb-b50f-159f331be5cf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4a9dc640-9671-42e4-b03f-995d666beabd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "dad64e89-4261-4b97-b2a8-6054693d050d",
        "cursor": {
          "ref": "e5506d3c-5cf5-411d-9ac6-ad2610755798",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2355434f-a4b3-455f-8c42-f0b5cb2bd4f6"
        },
        "item": {
          "id": "dad64e89-4261-4b97-b2a8-6054693d050d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0f611875-8a10-4ca2-a173-fae642a0d2af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "dad64e89-4261-4b97-b2a8-6054693d050d",
        "cursor": {
          "ref": "e5506d3c-5cf5-411d-9ac6-ad2610755798",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2355434f-a4b3-455f-8c42-f0b5cb2bd4f6"
        },
        "item": {
          "id": "dad64e89-4261-4b97-b2a8-6054693d050d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0f611875-8a10-4ca2-a173-fae642a0d2af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "5ad43f99-b95c-4af3-b84a-0e38a09081bc",
        "cursor": {
          "ref": "7df281cc-8bf0-4dfe-9b52-154ac17c6e10",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7c859a74-c1a4-480c-87c2-15860bcd9f62"
        },
        "item": {
          "id": "5ad43f99-b95c-4af3-b84a-0e38a09081bc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e16d35aa-e137-4ceb-b244-4631247a425a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "5ad43f99-b95c-4af3-b84a-0e38a09081bc",
        "cursor": {
          "ref": "7df281cc-8bf0-4dfe-9b52-154ac17c6e10",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7c859a74-c1a4-480c-87c2-15860bcd9f62"
        },
        "item": {
          "id": "5ad43f99-b95c-4af3-b84a-0e38a09081bc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e16d35aa-e137-4ceb-b244-4631247a425a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "756e2c67-ebc5-47cb-8996-673a70484851",
        "cursor": {
          "ref": "61a303e3-74e5-4c6b-b347-218cfff9d634",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "44219b61-fb94-40e7-942a-ece9764520c3"
        },
        "item": {
          "id": "756e2c67-ebc5-47cb-8996-673a70484851",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8a9b0bcc-f1eb-458a-9d12-10c7a96ea958",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "756e2c67-ebc5-47cb-8996-673a70484851",
        "cursor": {
          "ref": "61a303e3-74e5-4c6b-b347-218cfff9d634",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "44219b61-fb94-40e7-942a-ece9764520c3"
        },
        "item": {
          "id": "756e2c67-ebc5-47cb-8996-673a70484851",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8a9b0bcc-f1eb-458a-9d12-10c7a96ea958",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "547170e2-561c-41b4-8158-e93943814f56",
        "cursor": {
          "ref": "903b96e4-17f7-418c-840a-7517fbd3343f",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d8990e6c-ca4f-4490-83a5-59dd0202dcdb"
        },
        "item": {
          "id": "547170e2-561c-41b4-8158-e93943814f56",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dac8a34a-59f2-4aa1-b6be-aeee401b01ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "547170e2-561c-41b4-8158-e93943814f56",
        "cursor": {
          "ref": "903b96e4-17f7-418c-840a-7517fbd3343f",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d8990e6c-ca4f-4490-83a5-59dd0202dcdb"
        },
        "item": {
          "id": "547170e2-561c-41b4-8158-e93943814f56",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dac8a34a-59f2-4aa1-b6be-aeee401b01ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "2173a383-97ba-49e7-bce3-57285528c3df",
        "cursor": {
          "ref": "bc38fcbd-a1ca-4b0c-993c-68a8e88bc352",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f6bc6ed2-44c1-4d16-84a0-467144fa75ad"
        },
        "item": {
          "id": "2173a383-97ba-49e7-bce3-57285528c3df",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2173a383-97ba-49e7-bce3-57285528c3df",
        "cursor": {
          "ref": "bc38fcbd-a1ca-4b0c-993c-68a8e88bc352",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f6bc6ed2-44c1-4d16-84a0-467144fa75ad"
        },
        "item": {
          "id": "2173a383-97ba-49e7-bce3-57285528c3df",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2173a383-97ba-49e7-bce3-57285528c3df",
        "cursor": {
          "ref": "bc38fcbd-a1ca-4b0c-993c-68a8e88bc352",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f6bc6ed2-44c1-4d16-84a0-467144fa75ad"
        },
        "item": {
          "id": "2173a383-97ba-49e7-bce3-57285528c3df",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f9d0337a-e616-431f-8c42-4b1a20860ade",
        "cursor": {
          "ref": "ccce26ba-6159-4430-a98d-964212b0763a",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "53912811-e6ae-4178-846f-7b165350b096"
        },
        "item": {
          "id": "f9d0337a-e616-431f-8c42-4b1a20860ade",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f9d0337a-e616-431f-8c42-4b1a20860ade",
        "cursor": {
          "ref": "ccce26ba-6159-4430-a98d-964212b0763a",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "53912811-e6ae-4178-846f-7b165350b096"
        },
        "item": {
          "id": "f9d0337a-e616-431f-8c42-4b1a20860ade",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f9d0337a-e616-431f-8c42-4b1a20860ade",
        "cursor": {
          "ref": "ccce26ba-6159-4430-a98d-964212b0763a",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "53912811-e6ae-4178-846f-7b165350b096"
        },
        "item": {
          "id": "f9d0337a-e616-431f-8c42-4b1a20860ade",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "4af21adb-19f1-4ad7-b93d-a7f6c3ab7dee",
        "cursor": {
          "ref": "2126b906-e644-4899-99af-a00e4e4ce4b7",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b45d0f77-1476-44d9-9413-c69b087efb6f"
        },
        "item": {
          "id": "4af21adb-19f1-4ad7-b93d-a7f6c3ab7dee",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4af21adb-19f1-4ad7-b93d-a7f6c3ab7dee",
        "cursor": {
          "ref": "2126b906-e644-4899-99af-a00e4e4ce4b7",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b45d0f77-1476-44d9-9413-c69b087efb6f"
        },
        "item": {
          "id": "4af21adb-19f1-4ad7-b93d-a7f6c3ab7dee",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4af21adb-19f1-4ad7-b93d-a7f6c3ab7dee",
        "cursor": {
          "ref": "2126b906-e644-4899-99af-a00e4e4ce4b7",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b45d0f77-1476-44d9-9413-c69b087efb6f"
        },
        "item": {
          "id": "4af21adb-19f1-4ad7-b93d-a7f6c3ab7dee",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9d00bc8e-88ad-48db-898a-e94317c643dc",
        "cursor": {
          "ref": "f6aa40d9-5732-4de9-b299-78839ba724b7",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "627c92e1-4c6d-4827-ab13-7276fa44d2a4"
        },
        "item": {
          "id": "9d00bc8e-88ad-48db-898a-e94317c643dc",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "9d00bc8e-88ad-48db-898a-e94317c643dc",
        "cursor": {
          "ref": "f6aa40d9-5732-4de9-b299-78839ba724b7",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "627c92e1-4c6d-4827-ab13-7276fa44d2a4"
        },
        "item": {
          "id": "9d00bc8e-88ad-48db-898a-e94317c643dc",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "9d00bc8e-88ad-48db-898a-e94317c643dc",
        "cursor": {
          "ref": "f6aa40d9-5732-4de9-b299-78839ba724b7",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "627c92e1-4c6d-4827-ab13-7276fa44d2a4"
        },
        "item": {
          "id": "9d00bc8e-88ad-48db-898a-e94317c643dc",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b1b2d269-1c43-423a-880d-5170d0d0c5ed",
        "cursor": {
          "ref": "fca29847-3123-4903-95ee-aeba4516cfda",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0b791830-9859-4a6a-bd36-c923f937e4ba"
        },
        "item": {
          "id": "b1b2d269-1c43-423a-880d-5170d0d0c5ed",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "b1b2d269-1c43-423a-880d-5170d0d0c5ed",
        "cursor": {
          "ref": "fca29847-3123-4903-95ee-aeba4516cfda",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0b791830-9859-4a6a-bd36-c923f937e4ba"
        },
        "item": {
          "id": "b1b2d269-1c43-423a-880d-5170d0d0c5ed",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "b1b2d269-1c43-423a-880d-5170d0d0c5ed",
        "cursor": {
          "ref": "fca29847-3123-4903-95ee-aeba4516cfda",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0b791830-9859-4a6a-bd36-c923f937e4ba"
        },
        "item": {
          "id": "b1b2d269-1c43-423a-880d-5170d0d0c5ed",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fd3ed78c-f3c3-4b70-8b9d-8db63953aed0",
        "cursor": {
          "ref": "68a4e2c5-07fc-43fa-82a7-37559a904075",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6c95573c-682f-4bdc-8b14-910f5def6fdf"
        },
        "item": {
          "id": "fd3ed78c-f3c3-4b70-8b9d-8db63953aed0",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "fd3ed78c-f3c3-4b70-8b9d-8db63953aed0",
        "cursor": {
          "ref": "68a4e2c5-07fc-43fa-82a7-37559a904075",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6c95573c-682f-4bdc-8b14-910f5def6fdf"
        },
        "item": {
          "id": "fd3ed78c-f3c3-4b70-8b9d-8db63953aed0",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "fd3ed78c-f3c3-4b70-8b9d-8db63953aed0",
        "cursor": {
          "ref": "68a4e2c5-07fc-43fa-82a7-37559a904075",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6c95573c-682f-4bdc-8b14-910f5def6fdf"
        },
        "item": {
          "id": "fd3ed78c-f3c3-4b70-8b9d-8db63953aed0",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}