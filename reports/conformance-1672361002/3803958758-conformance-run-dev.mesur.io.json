{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "62705215-a1fd-42ff-95d1-185b5b5b3612",
        "name": "Clear Cache",
        "item": [
          {
            "id": "017760ea-4612-485e-94fc-d22c02d93bf1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d6fe926b-e865-4337-bc21-390b71325ba2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "41c5f81b-2535-434d-8e79-873c13187399"
                }
              }
            ]
          },
          {
            "id": "6dbd1338-4a9f-4149-aeab-76795e7b8467",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "674f8dde-2a82-4570-b340-aa16633f67f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "412da4ff-0752-497a-b459-24d8a4eaf611"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b4368562-9bc8-4b33-982a-eb8ebd8a868b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "755b85eb-4186-4be4-b7e6-1a3b42b48e88",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f5d9eeb-128a-4a3c-9f35-d6f1fd4e81c8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5c55fa2-44ea-4d91-a475-167b97229ab5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a80b351b-d10a-4b36-bdb1-0106132683f1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0fefc2fc-4d7f-4e2f-a0db-4164146b1035",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "209fcc9a-2234-489c-be44-9b18c100ef54"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ba264eea-6e8f-444e-97ca-bd0f0198910e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b541407-f57f-46ff-980a-0751270c8ef3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4476b858-27d0-4abc-ac37-c89bc279c9c4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0a452dc5-3bb5-444d-8982-388f1cbf50e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20a5e9c9-ebba-4601-9bef-4f4519b45b14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7cef3e9d-a28b-480e-8690-5eadc0ea66c9"
            }
          }
        ]
      },
      {
        "id": "9933af7c-4d24-4a3a-9a56-e45ef08fab6e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "59e30245-ed2e-498a-b47e-90c97704a3f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3bca4eb2-9a76-4a4c-9a82-d0093929a573",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ad7f98b0-c683-45a5-88cb-e1eec117bfe1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095585e7-770f-4f91-9b36-78e8c9fa6995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f253c8d-cadd-4887-af6c-eb5bfd415ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f909f34-265f-4245-b8f2-90b349b3a4a3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9271e037-b80c-486a-b395-caf72509e443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d1048d0-a9df-49a2-86ed-7b53828f09d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25564294-c233-4514-b2dd-27d66739bda0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67401239-27fc-47e9-b007-f255dc9cc002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53293c20-8321-42d5-831a-7403f8fcc822"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bdc7cc10-f1ef-40c3-b8e0-44d490fa79bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "037d8833-349c-4dc3-a1bd-876c23db2286",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263120ff-6ac4-4c4a-8311-18a3b3a92bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3812515-bb33-4a2a-9445-cfa9bd95fa48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d68b8b8-c616-4f7f-9779-61e64c23e1b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6545f2-0d12-448f-80d4-83a3601c59f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4bfd6b-cefd-4906-99ab-00d1faef7e9b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5e170d-26b8-46a6-accc-f63b13ee2cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba15386a-3202-4663-aa90-2b874440a379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e770ee1-de19-4c4e-92ea-48494a4f64ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "fab1d9d1-ae92-4abc-9a07-69af12c5396e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f42b48c5-b862-42f8-b3e5-437b3f488de3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9dcfcfd5-3da3-4199-ac78-cea80bdb7a76",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c55f494-d1d5-4447-afb2-5503fc03f7e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b882ce8c-ec3d-484e-8d69-50e46722b7dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cf260f5-cdf2-49d1-9a0a-f55fed4314ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "fa7bb594-ceb2-449c-8201-6d9de815b9b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebda9cd4-e3ce-4112-a663-31bcab57213c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ecd5ed86-7b7a-451a-8f38-063dc504514e"
            }
          }
        ]
      },
      {
        "id": "3ebf2548-a04b-45de-8b93-5f4e90bdd23f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "172443fa-b25a-4e1c-855f-cfd5809f5d5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ad62c966-6594-4a07-8d88-3eb5bf97ca21",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9147bc06-6be9-43bb-8c4e-075978805826",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db3331c-14fb-4464-896e-45d61d5add5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bfe91e9-04d6-472e-a328-109c1ac4dcc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6601cb-cfc9-4621-8aec-751edaac1bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d85cff86-fd91-49e9-9f80-e9d8a3555a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49e08e1-393a-4d69-b71a-a4c9b8d0b5be",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d895a6a-ac7a-4fb1-a6dd-2d6286e6716d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2698e29c-3cb1-4af8-b89c-cb8be7e8f21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc24328b-8731-4349-a6cb-c25497c82a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3eefe61f-d6c1-48ef-a351-bd1e1ef71825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cd957b-57c1-4b24-87a3-4f8e2c2c4adc",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336326aa-f1aa-4c33-ac23-094ad601c850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8448618-734d-4485-b02d-c10bd92e01ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b393b249-0408-4e79-9286-b24827000800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea7e7d07-03f4-4204-a647-f59e8754413a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb3c626-c33a-4c92-93a9-4af4ca1cdb62",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7263334-fdbc-4421-8715-b95bb36106f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d9d2c3-2f99-4fc5-8923-f183b1b6118c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed07bc0f-3b43-415c-8fc4-e4c8b220f01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e12252fe-2f04-4752-8943-2d775d3c8698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7172068b-f1c9-4164-adfd-210b6e45e6aa",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d425d9-f93c-42e5-bbfa-94463c47cf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7841a254-d400-477a-8efa-f018e2134bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61db45b9-677a-4fc1-b528-408584b41008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e677a5ae-c0ca-44bd-810f-f2d40aed80c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9bab7f-63e7-4e2c-b783-00b8ff439cb7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5c836a-aab7-485f-9ba5-ac25e8761ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3540d39-7eca-4c57-aae7-164a84b41884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbe4ea8-2fd8-4ccd-bab5-dd87b1706dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f4dd2be-404c-4176-9a13-8cd0d0138f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d6a43d-12dc-453f-91e8-1e230e91463a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cad259-e8d8-4173-a0de-e6e4b3b34dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10f30ab-1368-434c-b967-a46b08b7fdd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e364063-da14-471b-adbd-fd3756fd3f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00f736a2-de26-4e79-8bc6-7a80aa3d0a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe19f666-e21f-4aa7-9745-db1f258c367c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f708fa1d-7dad-43c5-bed8-d8989412f3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c16ae35-1969-42a9-9de6-bcc6fa364c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b349e0-7e98-4b68-a45b-936f11262ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08acfb66-b86f-4747-8778-4a3a49404eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e84350-3505-4ce9-926c-ef2b122b354a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cb0fde-d1c5-47ff-91b5-ccf16a651235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0cd982-049f-4e29-a518-d569001a0863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc092a5b-c48d-435c-aee6-a3e69f885af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2eaac22e-7ccd-4a27-89ed-ce047fe0c50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6821ce9-0878-4ac0-9386-120e2ed036e1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ce3b49-314f-448d-8ed2-7089fb6d1f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a626071-456d-4e95-bb4e-3e1035e4e300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b2fc6c-7333-49e8-8e55-43beb1418f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07054562-4f41-4a9f-beb2-9e4e8f37f9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce7bd2b-cfc6-4831-a269-44deaee25755",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f5964a-e491-4d35-acee-0b29339aaf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5793ee-2de9-4845-ac1c-f056a322a9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092bc92b-c22b-4f56-b5a8-ec1732232d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e0c56f9-cdca-49a5-bae4-e57a90292f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15558796-ab83-4179-b9bc-09a87c593e75",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8543eb6b-2b3c-461a-8fac-a61d545ec280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a05bc46-a32b-47f1-80d5-624e8a571ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23403606-61e7-4bde-a97b-1381af961914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6efc1afe-06d4-414c-9488-d41077917e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6178b0ef-1f55-431d-bc40-9b1b1942f917",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6f9a12-6ec8-403b-9348-528814030cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b9bdbb-94c7-4963-beea-1cdd5ffbc2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d31a40-36da-44ee-ae85-cf24daf85237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12bdb53e-903e-40b5-af59-82628e461bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08d8946-1859-4892-924d-b2cd93b2d27a",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8053020f-7c73-44b3-be3c-e605909189c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3252f3-6c97-4150-88fa-b3bd40c0bff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa60015-a44d-4f3c-8c39-fefc930233ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "313f6807-3d5f-45c3-b553-d219cd046041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed1d007-86b3-4bd8-9c6c-61644265165c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f264dc61-c36b-4eaa-bc00-2b9ffec0fe22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c99707-c770-433c-9119-c43bd933ca39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f0a3e9-1b9d-4d2c-8313-7e5538b52223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b05961dd-db3e-4e9f-a53b-a08fc32d7172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b08873b-d403-4e52-9504-f306160c205d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7032d28c-fb4d-4787-9f2b-e7ca55f8c8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ef6ecb-d7ba-4c1f-b2a7-e222f6e2f130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bee97f-1d7a-4933-ab7c-7c939ae46d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75fae2b5-da18-45a2-abba-4aad29769009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fd249a-70b3-4799-8f0a-cab304129057",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74adee8e-920f-4e62-9704-20f3f8d7bf9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "049b6e21-2e63-4aca-956a-2f4d2ae91456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5e1b80-416b-4fd6-b25c-93fdd887672f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcc6d1f3-74fb-4b5e-95e7-54d9452b8590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1818f8b3-10b3-4825-b315-cbd11ebc2902",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394ff023-7022-466c-873e-6ebc665d735a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7445d8b4-c0da-4234-805f-7bc29935108d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e70981-d484-4184-a72f-8562d8dcdf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd8595bf-289b-4a88-9a82-52eb1248db9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceaeceb8-f475-43db-bbf8-875b04ff14ef",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3c0b99-62ca-46a4-b263-c7f490b35450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90141c84-4024-4839-b697-778fda66aa56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98e385c-0a0d-49d1-9a86-b7f3cb05366b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4263423b-2cfd-412a-9110-aef91ab47965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68385d1-1982-43d0-9afd-4ab5d876e50f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20feda90-69e3-4747-b31f-dfc75d3f97da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4135577-7c6b-42ff-8dec-d497388d6e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aee0abd-2388-47ef-b70e-93f2ccae8bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "044c7443-045b-4b37-8389-8c34900e4e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f976ce12-7145-4ed6-b319-95da0d05632c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518ecb8d-4333-4a34-a6b5-2935446ea860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b32b56b-ea2d-4266-9e48-081b7029243c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f837cfdb-a451-4747-b43b-f7f47d3e1027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae61e18b-0639-4587-a9a6-888a84b9c877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fb0866-6057-4f50-a440-b19aa3181a5d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a9a65b-0c75-4121-83af-43d5ec182f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7faa6f-cd08-46d6-bb43-ef0168ef1eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4458171-4d02-4b2e-a46c-0159c657d0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "030ba0d6-6594-4777-86cb-13be9670a78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7f7bb6-889b-4619-87d3-5db2f72f3bc0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead929a5-9041-41d3-8bd2-6ec4e263c4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a24cc062-1fc3-4cad-8e3f-a03a574daf17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91f9379-ac90-4d20-93cd-d8a042360a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5463deb-cc1b-42b3-86c9-5d7c290b5da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9033df-5da9-4cde-bf9e-8dcbed3ec4db",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b038505-c294-40be-a158-39441fd2f8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852982b4-1014-4d7d-ad30-264ad0755cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda87fef-d3de-4549-a359-025a121db7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f831089-2586-4f72-9d4c-a2baf6365a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61181db-7e8d-45dd-a569-74e047045d66",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01bc5a5-b77e-46da-8699-8cda17e7dfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e62da58-d122-4478-b8a6-323fac36ff76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7856b2ac-e016-45ba-a9d3-4071fe2db7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f8fd871-1382-49b6-ad87-f50212583c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b6048f-e492-4c9a-955a-4c7cae38bdef",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e74552c-6c1c-4909-9f2b-575d84479718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895f14ad-ca07-4f29-ad83-00d0bae4792f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3fa4af8-32e4-4b2b-b171-e781efa6b2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdefb0c3-028f-491a-970f-3732a931109e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefbc6fc-94bb-4369-b650-68207b7ed773",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fc4bb7-c8fc-4410-a5ba-622b4f0fadcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68fdd2a-e082-475f-a129-a28c9b806bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d322a672-6dce-4687-a44c-a39e2c51dd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d03368f6-385a-4721-b775-2733b41534ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6d95d7-8381-4906-af63-dc486b858a47",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23503f2-efc6-40b6-aac6-b41c0e0bf074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc83de31-5ade-409a-a9ae-db90a7050cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95dae2e-cd8e-4ff6-9857-60ebb4716263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "103f1f9a-e86c-40aa-b3d1-36d698f0ad2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799ca617-0ff8-434d-bd98-a66a66894038",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c8bc96-8226-4d37-8b5d-bd8232a7604f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d091e1-9812-4ad4-80ff-8103dad4ad7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfa64f1-8c2f-4215-9b7b-1b2a8de3e1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "27aaf62b-50fb-4085-bd77-c6d859fdcca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5047275-e68e-4d47-82ca-ffd45e7c031a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f07e915-4c43-4ceb-9111-c0371aaff664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd501f4-f6ca-42a7-98b0-1aac4f4587cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a594fe3d-bbbe-43f9-a9a2-62d6db8c3840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32379f5d-6907-4945-9993-285e5bcfb1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f321c238-f276-424e-a857-0928ee8dff9b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ecf058-4638-4b09-bff6-e4e2ce67ce57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3da220-d58c-4983-b438-ea3e7620c82e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d930a45f-c05c-4672-9412-ff0885fa3f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3858c8ef-0134-4769-9e72-ac8cc65027cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a519de-7263-4828-8cca-70fa6ca92547",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b562ab90-c0e3-4d7f-8d21-af95da507518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74e5034-4aed-42ba-bf9f-5a3a17ce4ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a65a84-e380-446f-bb06-9587e7dcb9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "41e90f10-1a36-4d75-96eb-3b65c9eaa0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5916cd4-5d48-4840-b2c1-b6be48d8c6c1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940d72ae-3d10-4440-aa0a-8c1b28511092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0b1f45-06e5-407a-a404-e644eb6ed26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a9753a-4f06-494a-8f7b-493bd727b0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8373d18-c383-4b68-8916-e63dd0d61ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7c8595-9591-4b80-9772-cbafde277607",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9bad1a-741e-40df-a099-b5ca20d27fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac368ac-2b7b-414e-a6ad-4a387864e400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53fc9d6-65c1-4c06-9b97-d34d31c8974e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73910e67-719e-4593-b511-63b4ae2d0f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83b29bf-cc1f-499c-b7d8-484765844c72",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e19ee4-20b9-4736-96e3-c8a7d4048b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1c3066-b541-438a-a1d5-581cbb15c9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6664b553-7331-4e5d-804f-0654e47dfe87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "650c7ed2-05f2-457f-9f37-0862d6e281b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ee08b3-d274-4c9e-96e4-203c0018c599",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45d4758-fd4d-4a40-87a6-7066e2537be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c7c1c8-697e-47df-99b0-25c8543b0ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e92c1e5-7d24-4aa4-bebb-4a2e1988ed57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d7a3ac-ec6b-44c7-8160-6c49e6ff9814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dce497-455b-4d44-aede-b2b7fc479d2a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cc31c4-41ca-4071-aa6c-d920fe012ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6f1434-7de9-4f0f-91b9-b14bcbfaa3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea284c9-aa46-4ca6-947d-e70eaf0fac89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6e1cc7-bd7f-42ea-a5e3-90a933a63468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f9b69f-be62-48a9-a961-f8d6e4885ce6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab65463-ef79-47e0-8bfb-d5ce5c16e7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cad89bad-bd4f-4900-922d-83b72edb0ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49c1151-c17d-439b-9c84-726ee0e5f96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9740487-dd82-4cc1-84e2-242f6498f607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768a89b7-15f6-486b-ac75-bc8e7c311b0d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8247e037-61d9-4fa7-9192-c517d8d2cc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1cd314d-47c9-4aa7-85b6-f013f3f93ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbce76b-d5b0-49c9-b5bd-807e31d07859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58c853e6-2a33-43a8-b1ef-c64fff24145a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7343a1d0-5c2a-46f9-84e6-61b3920bdd64",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1360a8c-3e3d-4e96-9b06-13c48a4b1b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc246b5b-7b3d-4d41-8418-c4ac90283f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bc6978-3208-4038-8aa9-1e64a60adecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "17e4067d-cd9d-4801-ac47-b72cce41a447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14a3234-5327-49c0-baae-ed4d64aa8cc7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f20767-a881-4ef6-9275-b2affb31a37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9cbac34-dbff-4f26-af5d-5dfb4116065d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b7f365-72d7-473d-89ea-3b7405ef4deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1709572b-db72-4a62-a868-a30713a4e370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0282365-e005-48a0-bd97-93cdb3e2692a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc3abed-34ba-42bd-b853-9b664aed3609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc90d154-d37c-42ef-93e0-b01eff4b8e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65c32a8-7130-4cec-8c14-a550f5a25e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c241116-38a1-49ac-b1f9-408f45dea68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7036638-4d35-448c-b707-e580043ace30",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10ed396-5dbd-43fd-b82b-7de0d4841830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc570c4-c34f-4ee6-8624-9356ec789dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41c88b5-2fef-4c9c-9afa-6d7896cb17b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "41c0fbbb-8a3b-45b2-8a09-9bf008f4bac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cb944c-19c9-433a-9aad-7af0ac6c28f4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a90d7c-52f1-4d7d-85c4-630c5aae181a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151db537-9b2a-4367-ac1a-48d2f0197f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84e1633-867d-4505-88ba-95050c739086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "38475922-10a4-40d6-8414-ee405bfb333f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61a2678-cc0a-4328-a29d-269234906336",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a066d762-9953-43ed-838f-6e9eaa5862e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d15d080f-9dd2-4dbc-b6dc-b679c40c9bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388d27fd-0598-4a18-8581-05dea3f6b8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff68dcc3-452b-4064-a1b5-af5199691fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f7ce26-ad3c-420f-ab0f-07c7d7ee9cb7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d998bf-fe3d-43f1-b541-ca456232983a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb909ca4-8270-434a-95e9-26574442235a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe16f86-fc45-442b-abf3-5ee2bb585831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3517269a-7800-44d6-8b0f-ee2f38fc0fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9eb3c8-6110-4c2c-a5ed-d7e8ec1a42fe",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf59c75f-e265-4704-9a82-cd42a8affc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2268011b-2839-45dd-bdda-125e1b977bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16aa6098-20f6-4d1d-a9ed-254d2fee3fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "668c7aea-c71a-41e1-8382-a23bcb21caa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794e4ea3-5b2e-43e1-b68c-8bd03a98adad",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f80598-e8e1-4fe3-a97e-0554a6ef85f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2534e47c-2d66-44cc-87af-3917c83e69a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e419d1ea-0ff3-4681-a528-d9a58f769bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a8a160-156e-46fc-966f-0571099934e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee01eb97-7774-4e41-85bc-33cdde8a0855",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69aaeb0d-e885-4540-beab-b770b1441db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c479d424-3d66-4481-a4c8-c2b428fd51f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ef0314-e296-458f-a60e-f5c451842083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55341e8d-a7be-4af9-822b-4b34f347d629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f684ded-d057-4f58-b5a3-3530d71bc29c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16849db0-1a48-4ef8-acd1-23eefa83510e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144f98b1-5827-4db7-9c0a-dc551813bdfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a308c1-1c8a-4008-a5a6-10c860ef936f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1245446c-df70-413f-b697-34604778c88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04c050b-a144-4b62-8273-eb726f192b79",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d729cdd-cb1a-4e33-8c00-6ecc1423f4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f98482-b3ad-4c6c-a0d1-3cf139a28e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893f7df3-edae-4138-adac-9b04f576cb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41e97286-24b6-4dc2-b9c3-94bb897ea394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8620e8b-9cc7-41a7-a519-8c058368dbf1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10115247-df6b-4190-ae7d-f1e3ffd62a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c9c25a-1d22-4201-b68a-bfbee07c1e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4024f5b8-0503-480d-8dd2-4ca81c574a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fd3f23-bc10-4c8e-a702-c113c98473b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb559dc-47b1-4066-836c-c28feb06dc44",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8c5af3-0b39-45d5-9e48-d72fddf04fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56176794-6752-42bb-ae0a-7543afeea02d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a878b6-97ea-470d-8c97-eef639fac0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8612fd2d-09d1-403f-9b58-268d3bfbfbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ed709c-80f0-4be9-a608-b41b66152a2f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e416e1-4dcb-4cdc-9396-45112d338639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1dd00cd-fc9f-474e-a7f3-816701c433b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73729501-be6c-4a8b-8bcb-5243ecc36140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef7b6fb-68cf-46bd-8d4c-e22bd0928973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3fdec2-755a-495c-bda2-1345a7f40bf6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5fe4fd-da25-4b42-9d82-1928eb981621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04989f86-8497-4a36-911e-ab5912b2e23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5be3ec-f13d-4f6b-aaf8-3ba72196a191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3bdaa9-90b6-429a-8142-5d37969f3e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8b7de8-7736-4e5c-accf-4d7e1e6a6cd9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "889d61e9-a938-41ff-93bf-02746fbbb687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3d201c-0cef-4ffd-b3dd-0e32facef063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89f892f-da9c-4423-adfd-76b4a968d858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa0bfdf-aa59-44f9-a1af-6585704e1178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533940d2-4210-4d8b-9e01-dec93415478a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359ec27e-c311-41a2-a74b-54f23cbd2b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a39b5329-448b-4c43-832f-86385a7e0cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86245f0d-4730-4db1-b542-90e1e91c4ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1add25-d21e-40a9-a039-a19e8781b1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5859aae2-d48d-46d0-91e7-c9b2944db225",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d2c896-29bf-4009-a7b6-9b8fbeb8f0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0cccf7-b85e-4b82-bbd9-a0b5beff6a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3230c206-3548-484c-9eb1-bdfe3b8c37a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "304c1827-1dbc-46d6-b179-7862e0e02ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5aa49d-ef4f-4b62-a9d3-72771ca9866b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b52b76-419f-4947-aa62-d1d253a884c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b2386f-0fea-4493-b3d2-00c1a11437b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d44ec0a-bb73-4af8-aaaf-284641fd56c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "51867c89-2cda-4d86-ac64-edc3d8f20f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8576a6f7-688f-4163-9536-425f8ed0d16d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ccdcf7-62bf-4f67-afb5-09480a947882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331b3ab6-97e1-4d18-9aa9-a8fb60f4cf7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313c93b9-78b3-4cc4-9676-20a3701da6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "23835018-938a-4e2b-84b2-1d02de93fbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19384608-fc81-4f00-96dd-5474dab95417",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13b0365-2cfd-4834-80f5-45042301c95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e524a4-996c-4b17-aea5-adfd0f52cfa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146f5dca-64c3-4d94-910b-49ff8fca333d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e09f5bfc-be1f-41b9-a17f-3eaaad908950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d795ec4d-ddf1-48dd-b615-64db184b4f1d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febc79f0-502b-4aa4-87b3-1e7344cb81d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65570088-dd1e-4c6f-97d7-cac04093fa63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46c6e37-b8bc-40c0-a7d8-214e1a2c4b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d7c2f6-306a-400a-8a5f-05162e30e7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7015a0b0-4e34-46f1-a68c-5c7cafced930",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b28ec21-86d9-4bc1-9a3b-e87e765cdda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b95df20-cae1-4bf0-a7d8-0086a5a01413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe6ffe4-903d-4414-8fac-d839b1fe2216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9cb5be-9cc1-4d60-b045-03e24a2a9a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1525e75b-899b-4227-b7d6-1a714c3045c4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b320702-0bdd-48c7-a846-1c47025f1750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d0fd0d-98bd-4243-b6e1-119d9694545b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6308a172-6e2f-4194-a82f-40b4510ba183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e97dac3-3af6-49de-b52c-367b755f6b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63c1a4f-b7fc-4dc0-ab45-47aefb182cad",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1fad70-a56f-41a3-a89c-11157e9244f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e9e099-e8d6-49ee-931c-70b23b0f8263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fc7045-9cec-41b2-b11a-f56eae89ec96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f58f1440-bfc5-4dbc-824b-ddd471a052f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec495476-3340-4686-8318-ec0cb34c41b0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4c4a46-54d8-4f95-9750-df8aa372a013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af483943-2a0f-4916-9fa0-e0d995680c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a9c846-86f3-46ae-b1ba-6ada3a643463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fed3c165-9ec8-433d-a923-9964485844db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca59a59d-6b89-40bf-a5d0-8c1f6eafc2fc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8636b83-99cb-4426-ba66-331cd0d56214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79096c32-d711-4b29-887b-39f92c940cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7353113-720c-49d1-b364-de48482c361d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5422ddc-1335-4d20-8c52-71fc7007abbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b106df-456a-4151-b0df-9825b58843b3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a6eba7-4a88-463e-9f51-86b39ea7c279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d466f1-7598-4693-9382-f11c3526d7a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61488ae-d294-46a4-85d1-030c789fa621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5e2e9cb-cf8e-4f52-83a6-7f9c77c1968c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc8df60-dfac-4f21-8d6e-fa97c6cd4fb5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020c0b48-c111-4ae1-bab7-68f82e2440e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119590e7-debc-49ad-9852-c8bc7b1d28f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6327972b-2ae8-4cad-8a09-1e43f200ad26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e04741e8-9dc9-4712-b892-b51296e392ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20380cf5-47cb-4d71-87f0-04673078bc1d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ec0260-bd7a-4c74-a3d1-40bb3351c69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f748b0-5059-4df7-95bf-ff490fb14eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3078e40b-d59d-4e28-9500-e981b4567ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7eec45-14a6-477f-8b7e-3661c30825ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c916bdb-ccfb-4d4b-8a44-69eab9200eb4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50be84e3-fa00-4fc2-8be7-2d6cc45daa9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9d622d-7174-4a10-a7a8-23e0498a980e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e46a5e3-35f2-4c84-a9cf-986fd687612d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b89746-242f-457d-b473-eb4088877716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830f0cbc-5f3f-4ac7-8407-af478a3428ab",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582f2943-7f7a-42e2-ad3d-407bb9328c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94af317-6c14-47b0-8552-b1e865da1e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af16ecf0-a435-45db-aaba-38144eb6a1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "542c236c-d0d4-45dd-ba81-54e2ed39271e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42467b88-de8e-43fe-8cfa-4c1d1779472b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1296ae-02f0-4b64-954a-0c7b6449dafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3b3994-2f8f-4b1f-969b-919f1b76a4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd21d416-0f02-4024-8ec3-d569d913234a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34e81c3f-0869-4b90-993a-ca08233b5ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999afe03-8d9f-40b0-8a33-47523ee95cbb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580ea715-1deb-4bd7-88a3-9f41d6bceb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297ef288-54e7-463b-bb05-34e93bbe6aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d872ae-dcb9-4c77-9b86-e2094beb8103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a29d8897-393b-4297-8c72-8cae9aa98d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f37652d-532d-400f-aaa9-d300acdf2cab",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cf7610-f0d9-4ed9-8312-67de1e92845a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d24c3eb-fd41-4bf4-81e4-d9e9da493862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f5a73e-698e-46c8-ade6-46d9ec117f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b9eb82-244a-44d9-b3db-5c515ef54033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ec5874-09db-41d5-bcf0-6ee2b1e8add3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108e091f-2604-410a-acf4-368b41ea52cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "514cad4b-8366-43f0-b307-1d757572ec2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e109ca2d-ea43-46a4-af94-55e03e903b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d19f2dde-46a0-4de5-9585-dfbf88cc1f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a2f8ca-e5fb-4119-bc69-c78cb1830bed",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e2d74f-3d4e-40b1-8129-3a7f2b4cba6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628a65a1-2af2-447c-835e-458e3e27c96b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bc6680-fa5a-4689-adf9-9eaa7d4644ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31b8f96c-d2bd-4a79-8f9f-cc2a6a2e66f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa22bad-13a6-45d6-b029-e960a8006f3b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b591d66-6e33-4b51-a8ee-4910018f21eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be3e5dd-312d-4c99-b3a2-d34f35fee97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22471252-4134-4582-ae51-84617c1ec68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "997e24d7-730e-4a91-8a21-1f43fe531a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4059f5ec-8e23-4b4f-9739-9e2a829fab50",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf11742-ac04-4687-a16f-f7261829e137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b29f481-85d8-483e-a223-cefc0e3276a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f78af8-af36-4dad-880e-35ce412ea33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd80f548-1baf-450e-99a8-1dbcfb695671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455f0a48-dc4f-4e18-b65e-c9f564a9f0ce",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af33c046-4164-4303-be98-7e7381ad29af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1cdf0a-4a9e-44a2-beb7-ee0cbb4cfae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a5b0f0-d8dd-42b4-9a73-cabf0691b299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b000541b-1f2a-4aa2-af1a-4177e0c2eaae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a1cb85-f5c0-4946-9b56-98cf7c91be81",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52cea43-e6c9-4a9d-b273-cc85389d828a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d19d8d7-7f21-4a00-b279-94c70f1489e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9a3f5f-1e1e-4830-888f-0cea89270e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e5a11e-20d3-4c2c-8a8c-386a2adbe03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b663fb9-08dd-47e7-9614-a7ed64dec5b9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54293c28-f15e-4856-bda1-144e823e46b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "988ae077-e51a-4812-bfb0-0ad0b8ecfb74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa918354-3110-4a4b-9cde-573393fefaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bee097da-2c9c-4c7c-a9bd-57e89f8c10d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10185f92-6c2a-45d2-9f02-e99f42c80db5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86508638-06af-499e-ad26-15270bbc6ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc7ecce5-dcfb-4af0-ac8b-872b155e6e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a31c0c-5316-40de-8fdd-6aa94a7d2baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a81b6d60-be60-4e08-a817-ee3cb5cea571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11b41c2-ab7b-4405-a720-ed93fd4051bf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e298c86-58cc-46e2-b8b2-bd64866154d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dee1b7a-2ba0-464d-83ed-2ce3f89b12f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c45804-1fdb-445a-85e4-5679c6a4d8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "877cb9cd-98f7-4d34-bef2-d7538144edfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e73345-92fb-41fa-a5fb-e73d857e3974",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e64acd-09c3-4877-a283-e30ed0b3c181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083cd807-f534-4262-b07d-971577ae297b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f001c59d-2a8e-40e7-9830-e96440438a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd9fbb82-01c3-48af-89d9-add041ea18cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4165f7ae-5920-4165-a1e8-71f2913f909e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4507f2a-9cf6-4ac4-bc70-d2f73524297b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7005a8ce-f33f-4f40-a194-0512ab34a068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2955866c-fd6b-406b-a31a-1abc259e146e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a11e0b-6e77-48f8-8d95-fd1baf7353bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba0d0a0-4094-471d-9682-fde7b826fd03",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc96ea0-2d40-4d78-bcf2-59d4ae31c290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab88f739-6f18-4de4-82a3-1418f5bc1266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fe4ba1-f423-4ac6-bf9d-226a0a76eb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb83297b-62d5-406b-baed-a7edda4f743d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764d3791-3123-4fb0-997d-cbcae78ad66d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b74a29-4aa7-4730-b69e-f326d60eeea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f53018-dd5f-49fa-90b1-4d69cd67926c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fc3d03-6616-4c6a-8779-1e93539d9c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85e65523-2dbf-4a07-82e9-ce2e69f7f727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3274f36-1bce-48ea-8a7a-acf93c319fe3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f75eaa-a38c-4c8b-a205-5fe00c802eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83230a8-e5f9-4b12-ab4b-ab3084be7e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab9422b-5644-4970-a6ba-267310e1a980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c9b8f43-0666-4703-9ad4-9488ac118c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a71b2d-0ab6-4f4e-a49b-eeaea9e08de8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db12856-387c-48bd-8267-b2a54a17277d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be07b5e2-7ca2-45fc-ae66-2f0120ad5486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e388b4d-13c1-410f-acc6-85ff6d6d544c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a73743b-874a-4553-8b13-42146c84335c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8dcfe3-ee67-4a52-9994-ace7076161f7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b202745-b671-4691-bbce-8e1522e9682b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e99d3e3-8593-4fce-9dc4-06122bcef455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9e6f11-6170-429d-b648-e46de6553f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e8f0a2b-a0de-422b-8589-deb6f5313ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90aa908a-6135-4fa4-9fd7-7ca3844abdf6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46f1cb0-cb4b-45d9-8ff8-c46ddb4b466f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52be0206-8d3b-43d2-925c-1fbeeed8e098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7712d9-4da2-49dc-8f36-71ec0c3b4e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d46f76b9-41a2-4923-aee6-78262de6af9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f36f53-703e-426f-9ed8-5fa249ddb93f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ad8335-7a88-43bd-85a1-a23c7235ba4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76a9996-ab9e-46c9-bf75-263bf6f31fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd644c9c-569e-497f-a7e9-0a1b01575166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "72efc699-b6a9-47e7-807c-b05c6b979ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab231cd-2d23-4901-9ac2-03cdc428f378",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5552b75c-ee53-4743-8e93-c8aedb2e8276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0aade924-9748-4bf2-a964-ca63f9f88a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7bf9a8-9f04-4718-abbb-bdaab30da1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "074787e5-6059-45e5-8393-4b3bdcf9f05f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "507c20e7-2530-45e2-937d-081a57bebe86",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c86e87f-aa4b-4929-bb5c-ab66624a80a0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8595fea5-f7eb-46c4-ba98-54d08d91bd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f972bece-a2cc-41e5-95a2-6157e9cc447c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6157de22-b011-4156-adce-887ade6bd91c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "71685d13-3c0c-4603-9e5a-15fcc8273e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756a1373-9b0c-406d-b98a-d0a78df06c3c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928e328c-d63c-4858-a95d-fb51303b0954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05f4fad7-e814-4e65-b28a-4fb1098e4221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d354b5-90a8-4a50-8b74-7dae8f9dffad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7de27151-bb9a-432d-8e25-ceee532fd203"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e46dea52-5f3c-4f0d-b999-07fdd0532621",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08ac5c13-59e6-458d-a047-1e25efc8de3b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b43d2b57-8d54-4ed2-a478-f857992cfef3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccdcf11b-2e33-4e98-8d1b-a4db6fe801ce"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0dd11176-3037-4bb8-91e2-0be55bf1c0f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "425d3139-9186-4474-9bfa-1d5141c7d9bc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e5d7b4ac-582f-4149-9e84-f5afc606dd24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12f3cbf4-08e3-46aa-b5dd-9fbc3a673b3b"
                }
              }
            ]
          },
          {
            "id": "5d12b4c7-7d34-47bf-95a6-5dad99350ced",
            "name": "Positive Testing",
            "item": [
              {
                "id": "adaf4830-c71f-4078-a4e6-9e0ce5df8c9d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fa68794-4a0f-451f-9cfd-e8d853501f72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e6e56da-bc28-4a27-88c6-66795f931eac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b63f690-89b4-4ac3-b44b-43f99a059c9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c1af6f01-40ad-4330-bdd1-ca1ba77910b3"
                    }
                  }
                ]
              },
              {
                "id": "af455971-c4bb-4a3c-ab81-fc3b89c1a29a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "255b6f87-b9e9-47e7-b285-97488385a0ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0db274d9-6a2d-49a0-a959-e8951989642a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5c560ce-3ecd-41c5-9727-64b2e55956b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b5fd762f-88e6-43b3-b21b-6575fe507899"
                    }
                  }
                ]
              },
              {
                "id": "751c2608-377b-47ed-bb85-09de197f0258",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f54288f-7006-454e-b2a5-a8b7ed5c5df8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "907f091b-0417-4cd3-99f1-538aa7cddf77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8dbc828-99d3-4ed5-94b7-9632f4565a7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1f9cfdb1-3d89-4998-9594-028fa266f871"
                    }
                  }
                ]
              },
              {
                "id": "dc3d00a2-7f1f-487c-bc6e-8dda05afff96",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22d89e1a-1d67-455e-b970-d3bd3ea710d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f311daa7-4ef9-4d24-8f70-c85dd8612a90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67f8db4a-f3fe-40d6-9565-f898eab14d26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a2ad4c7d-a47f-4a19-9e1d-e4ee8a187451"
                    }
                  }
                ]
              },
              {
                "id": "9ddf7729-9b24-4495-af30-3f2de4dfb26e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e28625a-60fe-4f10-9311-ced73af550b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3007c4f9-fad4-402a-98ed-ccb79474b905"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57eeb945-07f4-4c1e-ae83-c688bd65d775",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34b1b30a-14af-4e18-9226-93a340590709"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "625c9702-21d9-4fc2-ab52-7b876b6a94cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c237277-b638-4e70-a1e3-defe7a518bb4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f5f54312-982d-4939-b1f7-2e57437861d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "138a2fde-9e53-46dd-8b75-918fd9262a52"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bd91a07-d2ad-4284-b340-870362711d0c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "594e9ab2-2b91-4e6f-81fe-cecea8f82fdb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "183d1b18-c443-4d86-bfb1-0fb0164ed4b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "43961956-983b-450a-af4f-4467b2952704"
            }
          }
        ]
      },
      {
        "id": "4dd85817-2fa3-4351-8bcb-1b1d87a672c6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "91d23542-3efe-4a5c-91dc-3f75e05a0802",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df63a2f1-4990-41c5-9ff0-cf1d5a072433",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d25afb6f-7362-4618-86d2-364dddc75a3f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440582a9-954e-4694-bc53-e8c8ab443710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b8d9cd-046d-463c-9c2a-e38d2aa34191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6033a33f-be80-47e9-b960-d81382cf3655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "833e17f3-81ed-4a90-8142-2e3e01f20a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00085b7-2a87-47ee-877f-a0ad69f70ad4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7038d5ed-928a-429d-a7a6-0f29c015717a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c19a74-e6b7-4916-890b-bd0afb4acc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ac257b-0342-41c5-879a-f525ba70c15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1c2e5a-0895-4340-afe0-cf24cb52c71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55409c89-1a37-48fd-83e0-bdeb75d9993e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c4e89d-f97a-4fdb-9f6e-76e532bcec23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17af130-8a8c-4f1a-a548-ae8eaaabebc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618e0dd7-1f25-41a2-9afc-09bfec5c5fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "173aa30b-c1ca-45cd-ba53-3f1af430933b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aeefc4e-13da-4ea2-b91d-a733dca4256d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e187d08-f4b6-4746-8e9a-45c929b15b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fab46f-63f5-4c7c-90bf-1a7af9f2a66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0941410-36c2-4361-ba1c-e685ea5aff68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1555b1b3-647a-4d85-8880-24884eb03112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712d46ba-5aa2-4ce0-a1d1-a182c7f15a4b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c99ccf-19a8-442c-8078-9af102415aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902da0cf-7ed0-44a0-93fd-ce586360ce66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dd80fe-6717-4570-8f88-bdde44e24fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f08548e7-bc19-44fa-b244-7f01e16e7296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3f35fc-4ba5-4851-9011-994994fa57f3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3161652f-4d83-4e25-9f2d-8c58f2c2cfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2a8ef8-7e32-4f8f-a4ee-4e328256e330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3acd16-5b48-484c-a5e6-33b7ff28bc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5db54fda-2d5d-46f9-a37c-256e4f67f4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba35ab1-8a51-4c7f-82d5-60021f34befd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84636912-0e44-4d5b-a652-6b5db0845616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580fc17e-6403-41b0-a887-755c705523a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd8bb37-a439-475f-ac9e-e3e8c4abab4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc0662f6-38f3-40f4-878a-af610ab87d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863cb5b6-1860-475a-a143-b84e7618eb6a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837a406c-9327-4a1b-95ba-450677c0ab87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e610ed61-4c70-448e-8d18-a2a123291888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c50f393-47ba-49f9-a409-f4e9fb1bec24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4a7d4c-4079-4a65-81e1-cdd9609e6e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2dd355-ea90-4a5b-b808-0bae956f4605",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd5b63a-58ea-403f-bc12-fdbf55bc52ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7500d251-f76b-4a9a-9296-3861da186a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5733f411-a93f-4897-a272-53461373e6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0367a38c-96c1-4a01-b329-7baa2423d9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482f5734-292c-419f-bcd3-e38468761a15",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c9ecf5-c3da-41e8-b447-790e5bd7294d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee081dd-d612-49a7-849c-8e001938c5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0331bacd-a086-4fb0-90e2-49f98c289058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f70d4e0-2a78-4a0a-8aaf-675d526fdbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74baf977-23dd-4d4a-868d-9ed824935ed5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95319218-3ed1-46d5-8a8b-dcae3d988791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379fbdc2-a70d-498e-86c7-bc7ee33c0368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83748b1-e7ac-4c9e-9b01-831ff317d321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf715aa-b1a7-49c4-aaf4-74d529b94189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8633c2e1-636d-46f5-9d31-157cbb33f3ad",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50b702a-87e3-4df5-8dba-55c30251a593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0a1ce6-2b78-44c9-bed0-b8cd43370d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4648400-c786-43af-a48d-cf4b7fdf828b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6456eb-1e23-40d4-84da-9144c789a867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae94d14e-257b-46d3-9bb5-a56be833d988",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7d36d4-2f50-4e28-a466-e8a89b8ef912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c2ea9c-7856-43f4-a961-c2c39298e38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d33b1b-3613-40a9-b02f-504fc9df6129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "622180b1-35a6-43d6-8edc-911d7cbcdc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bca18d-545d-49ca-91e5-91cfadc12347",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88eb1ff7-352b-4252-b332-12f4bf83afcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d696ca-4762-4385-bc2f-4163ee944428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee06812c-1c1c-46a9-a8f5-86c05b1890a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4503c363-bfed-4f21-a881-afc58ea25b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004ac4df-faf5-497c-9c07-558bfeef0725",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03eb37fe-5cda-453a-927d-5416043dc0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146f87eb-4020-4d90-b6a9-b0a852d3ff63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7da247-a868-4f00-8163-7a8dfb0838bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e30028a0-70fb-4b9a-b920-061b9d60bbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4269dbc8-2c63-4d20-9e2b-b0670e61322b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a97f8b-d110-4ef8-97b7-8c21f7b56fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f77c83-a9d0-42f2-a09a-ebae2b37d6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd25574e-33fe-4382-b1c1-db3452f7aa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d39be2-7e5e-441d-81b2-3851725f5ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb449854-5dd6-4fd6-be7e-9276aef5581b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382205f7-9791-4509-9bff-110e2c1bd945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509a0c80-ad8f-4f4b-928d-fb314e5759f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96959c5-ca9f-4c5d-a03b-f6d6c366efb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e720c9a6-74ac-4f9e-90d2-e5f0d6b2b64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02982122-7d28-4d35-b411-0cee393dcd78",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf3dee5-346d-4b4b-abd8-f77bd73663cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccf1c2e-a292-4071-a00c-25481ab1faf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7593f4-098c-4815-be46-3e741b2e1047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e168248a-017b-4d6a-8bb2-52975922fd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb1d2dd-09ac-465e-b04e-807d4e6dc449",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a449161-27b0-48c8-bca9-6a2c910ea649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0108d6cc-1776-4358-815f-18584fc35d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b44eae-8418-44d3-a1cc-77383c1a0136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "417645f3-5f89-4f23-8f82-56c760f1b6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f669442-79c2-4a30-b8ff-e8b6509586ad",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212f8d62-8998-425a-8c41-694073f35cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ababa36d-a5ac-4943-bc99-814cdca67889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e0ece0-a020-4eb7-acb6-3e95df5ef842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3789b1df-b624-44b8-b7ff-581e1d25bd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e1502e-d3e8-496d-b600-6fc4647355e5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b696846d-c713-4200-b72e-34e16ae8f5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f07ee0-478a-4d81-ab55-cdb6ad9a83bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44fa593-67e2-4a0c-95f3-172e84bef361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5f718e-8e6d-4d97-90d5-6d2bb5e4a023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812bb02d-77ba-4f2e-8872-3e14ebe159dd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b5759c-dbcc-4c68-9b94-5426e9e5e0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9aab8e-e0b0-4af8-b9d0-7b82504df54d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c7f73f-b741-4e26-8159-2f4fb677a811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1f949d-c222-46d0-8ea7-d3496c5157f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cba2f98-ae4e-42fb-b9d0-a29fa984f8ba",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002b1c6a-6fb4-4a99-a8c7-5663410791b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeba968e-889c-47cf-8e1c-944c80aa2119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3868313c-6744-4315-97d9-247c2aa0c7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c043040-3737-4c57-81ac-736eda379e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436c91eb-2d8f-4cb3-8c3b-34d4cdb2a222",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402e8e28-9934-4622-9f2e-d15e0f27543e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf4a059-d5cb-4d62-a5f7-6ce45ae9ccad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477a91b2-d9a2-4c64-954e-f6dab049c546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec918ac4-9922-4b22-976b-298ae25530cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a896f38-3d18-4760-84a0-81ebc549bcdd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceeb8e08-dddf-4d75-b4ca-3a848ce5c4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54bf7a4-1b8e-4221-9799-c1c6492c5bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29168f08-4b10-4bbc-8a16-17989faefbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c19ac2b-dfef-4949-922a-199d32ed0704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3062ef-bfed-46a0-bce1-43de5d14cb0e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0511ee-4713-4f57-96ea-a29671c50f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf25460-732a-4a02-bbc5-778e0d667f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b186e5-dfd6-48c9-950f-0218877151eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "797f95b8-4bdb-4a67-b51e-96abd4249a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314e3c46-699a-4241-a7e1-ebd166d76769",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32195d34-12d3-44a1-8acc-296016f4953a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00fd7f5-5bc9-4805-a057-7d139295c641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4739bd71-a110-4ba5-b7fc-c2fe0326de0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27dd399f-80b3-40ec-a60d-f5bcc65f31e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4a2413-691d-40d7-b69f-0199793f4626",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dff47b8-1a06-44bc-85d9-533fcab6a69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b1c4a6-fce3-4df6-b108-ed4879b2548d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28b4278-c37e-4a2e-a369-aa45a46b854f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3d14e7-4da7-41a8-b2dc-c09e7f8340b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd2c0c9-f601-4f46-9706-bfe4e7e24831",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24fe3a8-843c-4547-814b-5f7f489a7b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd27978-5400-451f-aa83-9fbadcb910fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6b7bc8-6efb-4e8c-9be9-4a5d9546429a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d833ada8-3a09-48e4-aee4-92bd94c1b1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c009a38-3712-43af-9ea0-a66d247526ae",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713cb1dd-436f-44e1-b5ca-bf385a430fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eddf7342-fdc8-47d8-bc49-579f717c5847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683b4f16-082f-48a1-9fa2-81a0b6a3a858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31d4c1d3-0d6b-4ed5-b907-a35477376e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743148fe-1173-4698-86ca-32ecdf22c47f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9768f3dc-adea-451e-a20a-2431d8a9ff79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b042531-de0a-405a-be05-9bc9624b2d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b14865-a50e-4db3-8f29-0a7713de2420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4284ca55-3ac2-4f4e-b522-e07e3de10649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa8cc85-9bbf-40a8-a4ca-6a0b2e73123a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e562fc-085d-47e5-a870-8c4a9eae75d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1e9aa3-a805-4551-9993-3d9dbb75acf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4a6086-ed58-42dc-a5c5-16cd9aefe0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2319826f-d75e-476f-8868-28444460bdbf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5bdd638e-e619-4af4-868b-732da9494b29",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02466873-fbcb-45a7-9eb3-61052eddba92",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475f94bc-7e4b-4e44-ac83-270548997217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04922d5-b7d8-42be-9694-a32ed248ce01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7793eeaf-2eec-41c0-8f9b-83b4cffa2af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7325b2a-5b88-447c-9ee1-d0a156d5aa6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e185c22-208d-42d4-8745-14d707f334e0",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a9451c-fef3-45dd-9f89-5d3a410179c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7c8c20ba-0fbb-4ae1-8e31-0562e37d1c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e92df3-1b0b-4146-be4a-d0fda6d9213d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c8c51bd-5d55-4637-8d3f-7ca67bc7b33f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b91bd2b-898e-4aef-8d83-06bb0aef280a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8798e228-0f52-4c0f-bfb8-01820f197d01"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63dc2504-101e-4159-8ba1-7f0582911bc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8806c968-35f3-4cb7-9a03-14c473eee4b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07c599f1-d906-4787-ba61-9a04eff0527e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0227d3e5-edb6-4fc4-890a-6763d85f1b41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bdb7a84-1d3c-4d6b-8f3d-131bbfaf3ab3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae985172-b474-438f-9fa4-1a1afc0ba431"
            }
          }
        ]
      },
      {
        "id": "4030e48a-ffdc-4c4d-b521-44dac3024f17",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f295b472-050e-46b8-b9f5-53c3639dcf24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f44ac2e-288d-460c-8175-09e5fb1bbee0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bcbfda0c-0829-42dd-a0e9-78d5600c992a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0b4620-49f4-4fb0-904b-7f129328f738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da078651-0a90-4944-af60-6de9b28d3e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e3de79-1221-4e90-baa0-7198b61786af",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713b247e-83c8-4e7d-a71c-868fedb82c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095cbd4f-5fa1-4b59-b0ce-f1c282d8f2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d7dbce-fe28-4fc8-9a31-301441542a1f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b244490-4a9e-4a56-96e7-42f49e8a4850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489fbbca-7d19-45fc-aa0b-7d51ea47bcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72126f71-1bcd-4d05-b1aa-1df615554ba9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d6dd73-5c33-4e69-b2bf-4f78af02bec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3d0a25-9e94-4f31-a82e-6407175a575e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a803ceb-4681-402e-a1d0-cba08871fa0c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cd4785-7400-449c-ab1a-c7fdce5a55a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c617ea54-71cc-4896-a7c8-d86578d89a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba93d730-9aa8-4992-a0cf-4185b6e62370",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b257d583-3a67-42bd-8b1e-fd24a45995cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a1009b-0544-4f58-a534-637b3c46f607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5b1ec4-a335-4d98-99ed-b668382c0047",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43c6940-cbf5-481a-a413-934cfcd05938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77753033-1c58-496c-9949-f1a8cc0e37e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ea1123-0153-49da-ac86-1c7daae350d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a7d7c5-a4c7-4d07-abc5-f215cccb2223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891cf65f-de05-4564-a334-c40261c2daf0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8cbe49-b7b7-4b4b-86f3-fcb07fea793d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c7ecde5-802d-4a9b-a61a-197f13568eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ba8911-2cbd-4729-9f4e-ee34874bee3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad59b6a-99ee-4b88-8746-53d1fe83811c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cc5bbf-ea28-45a0-a239-bbb69f769a08",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5f944b-e993-4e7a-9a79-80dbca99e5c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f5a93f-f534-43a6-9977-b68d9a081b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b98688-59f0-4c73-9659-016514c7c115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816ff4c1-3863-4fb8-b8a0-20dd0184b9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cffefc9-645b-4d2f-830f-a86dbb2c2f99",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c51bae-24dc-40e4-9f06-82d1213a9570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc6fa849-3853-4228-909f-781cb9617ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e65b6c-76e5-4d21-8c2d-375ad0f6d068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c19fed-e8c2-4abb-a60d-bf5c8dd77ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784321e6-976c-48a7-bd1a-2af0cf753d9b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e26a236-1fc5-4742-86be-9b632f9710bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060fdb8e-6532-4d3f-a656-77e5a8ee6be8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a82357-4d0b-4f3f-905a-99f21218e7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd170d9-b237-4a66-8492-7ce9cb8349eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c0f00d-447d-46c3-ba35-9b1160ca62c0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb77cdcd-896b-4cbe-9378-99b9c0a2d342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e307b320-8e9a-4e65-941a-2d423ea76041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f33e8e-afa1-4b33-9374-28c747069347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d210db-1e18-472b-a0fc-eddfa1c223ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859fef4a-bb01-4b3b-b85f-cab94e2ffe61",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c23e499-995f-4a79-94b1-27a4c0406501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd21415c-cd77-4ff3-ab36-af437f24b1f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c720681f-c030-4728-9fbe-8fb5dfe1c012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18326f2f-70b7-4878-8414-535a82cd46bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd40de2-5a98-49fc-b75f-a1ff46d4605a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b27e7c4-1bf1-437e-9f5d-0ca950e295a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d549a60-fe60-4e1c-914f-c99312708857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4894a71-1177-4a8a-bb4c-ed8c9e07ff68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd82d6a-ab5d-4233-8ecd-b4557aaffd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5666fcf7-fb70-4f1d-94fa-4924de78adea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3e9c83-fde2-4587-9c84-60a63069431e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3bc6ef2-2e84-47eb-8932-010c42baac14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8aad0ee-916c-4e71-ad57-aada9415512d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dab88fc-6d10-469c-9395-937368303a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48f5595-cbb2-4824-a9b8-497b1ee51824",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c6908b-af85-4cf5-b11b-c8b19054c1f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd7c379-c335-4b82-924f-baa12624cbc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f519281d-19f8-4ea8-9f19-2ee5dceb1221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fbfadc-b066-4572-a4bf-635751cdb750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88bbb87-2704-469f-ba40-f374b04aab23",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a217a559-6b76-46c4-803d-2bbde13960e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d26405-ccdc-41b4-8452-d2b26a18d455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dc8d6c-12ad-4cad-b05d-5020851c25cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881e2559-417f-48b7-abdc-e999a8aa1421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708dc610-ade1-41d6-8ec5-cb4e1c313f16",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b235a8ed-ce4c-4a99-887c-4f69f549bfe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845cf4fa-1e0a-461f-a0c7-b6bb05fee416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d4b50a-55cc-4e44-9355-acd077a66d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9937fa2b-6b1f-4e8c-b67e-2160f64a64f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b93c66a-0784-44cf-99c8-c82cf5cf49bf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a92710-8ed0-482b-8db1-87cd29c9ae39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a53725f-c3ca-41a5-a44b-202f36f32bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03aa420-e236-4ccc-98f9-5786e1347fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55194fe-8425-4b46-8073-4629d546cd5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffca6af-e9f0-49c5-b53c-a9badc5b0f67",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6c48ec-0a2c-4f08-a182-74f931a3461e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fec93d6-11d2-4c94-b8a2-8b4aaa3eed26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dae9614-0e25-4654-89a1-31aa2e194f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a506f1-7adb-4498-82eb-406fa7225225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d64ece-2c88-4b02-9a9f-7cc22719a108",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddc0e31-6beb-4e55-8e5a-b3f05ac0a670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bce863e-9f61-4022-9d19-23bb6841bc5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b69036-63ae-492e-93b3-70326cb0b702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd56cf1-d12b-4c53-9b1e-0e1df19244dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05668e4b-10ba-4d40-b826-32eb30bb2e5d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262e000f-51d5-4ed3-9263-bebafe23595f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a57b35c5-74b8-4f61-90f7-3715094e95fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e438b8b4-0158-4e70-8ad5-3d526ba1292f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d9d216-d114-4f79-b1a1-34b9463ad35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc70760a-8103-4ed3-9f5a-fcec794871fd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb024b2d-4de5-4fd3-a204-b812846c6994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "999daf88-c835-45d4-85f6-baec8dcb0969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88db822a-208a-454d-8ad4-ce570f4dea0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d95ff6-b9bb-4d6f-8cf2-4feca8e4dc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c2ceb0-c8da-4082-9fae-1b9f55c5ed06",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32943584-35f2-40c8-a152-281ddbfbedf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12a6553-be7b-4538-afe8-701c6e2ab241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c3b780-5cd6-4319-af27-4337bb023a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e74450-86ee-40a9-b536-bc4cca8e9a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1541ba00-16ab-4c7d-9aa4-2f7fad62a188",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1cef2a-88f1-4351-b887-7c6f267cee84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bfd14b7-a18c-4c4f-b006-e16d5644ae07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd45b8b-6442-48f0-b9d6-9de659b22165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478e8164-fdd5-4f17-b5ef-abe72e11c96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800094ce-e26f-40b7-8823-abe5a49d66e4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba25b108-985f-4005-9ee9-e436c759449c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "134e8e51-ed16-46cd-b4f2-fa07aced224c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fa283f-affd-42ef-ab36-eaf4d64eb931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f09044-d50c-492c-b130-14c7f86d9ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a4ddc1-e7ed-4626-9762-7fdf0e0825e2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9e460f-cb0f-4709-83cd-c995a15398da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "375f8dfa-3dc7-43ce-915f-08f29a9061cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3821c7-f3c3-4861-ab47-e849eefc38eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4296b9ab-0d81-41b6-9a3a-fd8d481e7d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ebc770-2825-4e67-a58a-9c5b456a2bfd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f96bef-f90d-47c5-b3e6-67c2f6fea8f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0062923a-b80b-4f93-b1d1-1db2c98e30f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddf0611-7383-4670-97b6-e71e1ea24fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bebdb4-d5c2-485a-aa97-7fc4785ec636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fcc631-f25d-4e49-a4bf-0a89f2e2b0c0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61894e3a-3a8d-486a-83d2-0c0aae7a61f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051824db-5fad-4a1f-a9ec-7b5eb80c1058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "637c1d4d-3f9b-4b60-b40e-911dad7f7b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90daffb5-6a10-48f6-9a78-c59721e2d1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2feccd70-1ad7-40a2-995c-432a5d50533a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b35d916-7dde-48cb-befc-0f8fe4de859d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad2d79d-2fb9-4f48-b2ce-de155b3d1a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bd281b-eba6-4b4d-81ed-8b8c741d86cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ad5bd0-1785-4d2a-8a4b-300e0a898b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61de81e9-1d83-460b-a78f-1d0b3b2a7d6f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3ab73f-b963-496e-8dbe-3b00754b6ed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e365411-553a-429b-85d4-1fc2e7201f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2f90fd-1f85-477c-b6b7-692af7e93786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c150255-7bf4-4ab0-8892-45ff722ba878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58380c9-1fcb-4b26-a0c3-c158de42781c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b350e9-8451-49fa-8be9-efe021f78103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfebf9de-4087-4650-b59e-b2bda2599f7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "896c277a-47c6-4bce-b699-58610c458a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a826939-449e-465a-91ba-ce614cdafa71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e3dea-53ac-414d-b127-cacffc777e0d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08c245f-74a0-45a3-95e8-84778bbf7f10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7558c3d1-e4e8-4cae-8364-59e7be750a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab3316a-ffe4-4414-b196-0e7de27c8295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0638a939-b4a4-4c8f-a185-7ac058ff35a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81b2ebf-8d61-4c99-942c-15a27064c14c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e174557-f43f-4912-b8b4-be52b199a5ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "990524ab-3240-4b37-b284-0560f605b782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9837be-b36d-4973-83e9-3c1c9543456d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19bc5508-8355-49bc-a013-7418cb62fe5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfcfdbf-e862-4e6e-a73b-77f494280c8f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbb9553-4f74-4c98-a9f9-43d6f5f2f503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e242dd2-cbdd-47f2-a8c0-2e9805fd9656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7854f407-25fa-4255-960e-c286d5667d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad8cb90-7465-4d1f-8915-ed80f509bc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817d67d7-930c-434d-869c-b4fb851212a3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82589c0-5b0e-4030-a0a1-6ccb5976cfb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12705cef-0f52-4e8e-b48d-2ec530901a67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fc0f5b-5ec7-4583-8e21-c0d219a8ce58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a78be91-f027-4f0c-a33e-a2af97348e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9238cc8-1302-427c-af24-286261998e7b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7831961e-b222-45b6-9c59-b8e9dd799981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6c8b09-cc1b-43a7-9be3-d8a73265a7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b89d9d4-2a78-484c-a3c3-15520d6d040c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a118c9f-253e-444f-975d-40374966ac15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93dd6ec6-ae5f-4e7b-836f-56b1eacecf5a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236f6de6-3868-45d2-ad97-561c5ad7e918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b040e382-828b-4af0-8432-db099c07160b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13915562-db3e-4536-96cd-11d560ff351d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa136238-138d-4e38-a0fa-99b3ca27ac5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251631ff-a63c-48fc-bf4f-95ee16e3c534",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88876df-8487-47d4-bd0d-58de2a4807cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee640ce-53a4-4199-9d8a-b84f54c3c56f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9344aa-03cf-479f-a89a-537dee20dde6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf0bf01-615e-4ac5-9b5b-917ca9c5802e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2ab2ab-72a4-46c2-bce9-fb32cab1f692",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcac735-0f4e-4ff8-9343-61a4d83c817e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e04420-db92-4c1d-b779-b16b53994c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1d1de8-7646-4c59-8232-63afcc33c81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77642618-e2d3-4081-9ef7-45f9d6963942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b3d3ee-be90-411c-a640-4ee68b8cc320",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43238a27-796a-4765-b7a4-044bea9eab0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152cf28b-4c7e-41c9-b6c4-22356ee1e75a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52eacbb-5214-4c50-9793-b9e365eb938f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042ce9c5-7700-4336-a411-201731ba59c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa90001-7e68-4352-8bad-d45674c1d732",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949599c0-c666-431b-a931-8ac934a79ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19032ad-f8fe-4991-8aac-119173503cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d3006c-ba05-402c-b763-4f97faf2f07f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35b5a6d-6f6e-40e1-a113-fd64a2b29695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0b8043-ee4c-48a9-b8e3-7c49ac764f97",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c201d875-8e7c-48dc-a804-35b13c35067a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5354343f-9e09-4a84-8432-2a63c3cdbb8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "520d1e66-0286-4b92-beee-9b3e25622311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60efa242-224b-4616-ac1d-f2a6164c82ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d03311-7ebf-443e-8db1-8c3249f7f826",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b16448e-fb71-47c6-8441-96d02543d33e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252a6575-78c3-4b3f-bff0-02622f3d3b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f406aa5-a812-472b-9919-4813b4049427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df8b1cb-e148-47ac-86ce-1a7a11063612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483a1feb-e0e2-4375-ab06-e74f51f49522",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8c75f6-6a43-4c80-a31f-cd9c77a99ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92c95ef-5dcb-4a6e-a8f2-cf5881574340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae02025b-0500-484e-86a4-5b6c52b8ee88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cfdde1e-5307-48ee-b5c0-e9e7076038dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3ff0d8-6aeb-450b-8250-56cf7eefefe9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc67bfb-af67-4d5b-8a15-b855d89dd157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df11992b-7e61-4c48-9216-10a69d5a4b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755ce41b-138f-46ca-9d9d-8037ad582444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b1809b-4219-49cc-8e33-1a104774b8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50bf2578-00d8-4851-87e9-c9711ca7ee5d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce3ac2e-6127-4759-90ec-db826ad281d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb6da66-5f64-49ec-ac08-0fc9ec5b684d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae1b0d8-9647-446b-bde6-32b234a878cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938bfd15-4e9e-4ed0-a7a8-3b91c664ea57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93434199-8b3b-4b0f-8f2f-e435f77b3927",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d932de-091b-40e6-9c65-fe100e4156b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeeace1f-53ab-48e2-8f8b-6f028ec9f9a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b65b3d-fe21-4e4b-b673-f918306e4d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7385499-699d-4b28-b9fb-9e26a66090b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d104a9a3-880b-423f-8574-c672d176ef32",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb72c7ca-ba77-4f9a-8b85-523c80a7ea2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff87e97-617b-44d1-85b9-6c0838b19fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1942fd35-ce24-440f-9856-76a33294adef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a462b7b-6cc3-4909-af86-d622563edc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b562cf6d-9f41-43d8-9ab4-4ae2a57172a2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd50ef8-53e4-4a1e-b28f-c90dc998c9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b900b692-16bd-47b9-b793-ed9f12e01d72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe70bdf-2ea9-4ee7-ad72-adab87a2de82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a620bc7-cb3e-4a18-869d-862295234462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148733ad-9aca-4893-afe2-ccdb6394fde6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d565c7-60e4-4926-abc6-83e1dd5bba0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3eb3cc5-850d-494c-892d-14ffe9436a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af6be13-35c5-4b03-8c87-6643507df8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038653ba-e3f7-48f4-a9c7-a14a24c8bb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e981123b-5f2e-4b76-8ec4-158cd50a5ec3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee60d03e-65f9-40d6-8862-5bfc29defc9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbd9e4f-e17d-474d-bf05-bb41edc7c2e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93df24d-deb5-483a-a77e-826b2d2b7f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161f2001-c563-4cad-96a3-5571ace1cbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4872fc97-0b62-4a7b-8931-af9627e975f1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309b4f07-88ac-4719-a6ba-ec155d65477e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6082e339-5d21-46c1-81e9-48a5bfe41f48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f0a3e0-68b1-46c0-8238-d9a3b319d85a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdcb045f-555d-4eb6-bd99-8a63be2de5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3827469e-dd37-4b15-bc10-07b366bccb66",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354aa60a-d22c-45ef-bd1f-790f04df6939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f32a86-5278-4d67-833a-e4b89408d4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a29cbb3-638b-4dbe-90f8-b62c65d0389e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e4fda0-7133-49a1-a5f4-d3fec650f021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d305859-8573-4d5b-a98f-7d15e8c1da6e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4961e0-6fa8-4c41-84d2-9986d2106dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1be2cd2-b0c1-4ac6-aab6-a164df94431c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22df6e68-f38a-4508-927a-4f5a37914b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7c784d-3aba-4042-bf75-86c8d91eeafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74787c26-194b-40c9-8c3b-7e420f140f51",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f823a83-8bf4-4dd5-9808-63c267192ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31277f9-fa05-427e-815d-22cc0e79ef7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa9b4b4-298a-4711-976e-ce545283f977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d05836b-44fb-4278-b811-a3669a16d011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b1f7f7-8a65-4207-8c83-624017a41228",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3997647-7847-457f-a2ec-198b2b6f5ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcce4b6-11be-4fdd-98e6-c16acd9b920f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1653a4-aa96-4327-8e39-0ec477951f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a274172b-838c-49f0-8bf9-41f7f3a4b49a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60260aa4-f467-42e7-a1f3-4feb8fcdf9fd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa3be6a-e4af-4798-a319-acc7f158cf10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0983e49f-5356-4a1b-8472-3c9ee040ab17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac45b2f3-22c9-487a-ab72-fc7bc0caa615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2856673f-4630-4512-b32d-5a99d02fce8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e29fd2-dc0e-4175-bbac-e0429ac76824",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ea5338-9ba7-4c8f-a18a-547bb3ab3c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133c0a05-f7e9-4ce8-8433-ef261253f720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5efbf5e-6ae9-4c67-bbf3-3c1c6bc00bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc43a938-b7e8-42a4-aa42-a35f68d6a495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595d4fe9-bc9b-4592-bb67-f4ad4c673f3e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5877a510-bf26-442d-8ecc-8e452103b911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52df6b49-4f18-4a04-be3c-50141bc1c5eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88c5131-ae1a-4ba3-ab20-08f893933805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c68e9ae-ce00-4234-bc7a-3444795e2c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1624ac-4b5b-4f29-8539-2de2f6003a94",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f02330-50ea-4450-addf-c717ec88fbc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69afb689-ca7e-486b-9a75-cdc1df62483a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908ef3de-f2fe-4802-9e2e-aa3edd98fff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c618b18f-a02a-4780-a187-a99884cc5717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcb9b47-1ba2-4311-8b34-e2cb36fbfd93",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df2a13a-1574-400a-91b8-27f28e401500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a78c11-1985-4099-ad7d-a5918dd45232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac34a6c-01dc-4536-a33b-c49a3bbaf357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee5a13d-7e6e-4138-91cb-b12c9c02481c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02fff3c-aa18-43e2-82b2-0919b0733371",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9384101-825d-4cf2-b2d6-ffa75c4efbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9381f87c-9927-45a7-afd6-d24bdb79b843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13eecacc-ed01-4beb-90c1-d2b12f764e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6903d2d1-2abb-42ed-aaae-40858dc9b0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a66e00-ce50-4d01-b9f0-73bcce7ad8b0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cedca4-5fe8-4014-a5da-0220ca2d03c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755f9d4b-24a8-4544-8535-495ba53dcb22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ce42b3-e5cc-4e03-91a5-e1fc218382af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37acdb62-b6c9-4e2d-8eca-4c914251a8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f3a1fa-7ca0-4d4b-98f4-136706ae3fa2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db28b709-dc95-4ba9-9440-7122dfaa372d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89517ea9-b1ea-4e0e-8d69-d7e6312143a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ccd255-b659-41dd-a474-908ffc0e612a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b95da4d-2a5a-4af5-83ac-7aa587b8cbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f28c4f-da21-4985-83e2-3da3e76ead2e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4e585a-e3db-4d1a-8f21-c315cd200be9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3196597-1c6f-40ed-ab2a-431e729cea01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1af0b2-f7cb-4db4-ac18-fdc90bdb1155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17063d2-6df1-4e0e-91c8-cd7af6f48162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d592d04-5445-4532-89bf-a8c1e4033b39",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4423352e-27b7-489d-bf28-3ca09c273664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84c47b43-3c0e-4506-b8de-d743316a3f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3d47fd-0ab9-46d3-9e27-f2a721a1d1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58299ed-c8b3-4561-9235-7d1cb9127e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87a8df4-0494-4747-ba12-1638026b069c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e36744f-bd96-4161-8bf8-0843e93c74f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "164339df-8b02-487c-a29e-59e62080924a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "905756ef-44d2-4937-a804-46079eaa6a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a93ead-bcf3-4e8a-a53e-80ddd95dce47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b884b69-9c40-44ba-aef6-0ef5ee94562a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b9f90f-b54d-4607-ab29-ad09db91472e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f6bf8de-9777-4011-957d-c75b5235305f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247500a9-b137-4e0f-a1ee-91789e0dc5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51016018-6155-4b63-a389-57d56056e0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dabb1c3-b3c9-409c-8a09-3c788219e093",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a249bb8b-1582-4404-916a-2032463e9138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0053921e-2901-470f-aea8-a124a5c0ddc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae495f00-5c8d-424a-9572-b0fba9d0fcbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb48f60a-c4b7-42e1-a04d-229234d580a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd746650-2137-40cb-9fc0-d3084f949586",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fe4900-2321-4357-8084-58c1b5d3d532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b542a2d5-3e79-434d-9f53-df028822e5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0df473e-8b4d-4b60-8385-0d70e1577847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56690e8-12db-485e-955d-9ea1ad659cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd69525-6beb-410d-8861-8f475e554cdf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a3754c-ba78-4f4d-bb73-de4aa780cafb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7ea9d12-3031-41dc-b286-cf8fc5a45893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13490cef-5c99-4ff5-83d8-352f6e39f0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ec04d3-1106-48f1-9345-91d73ad2591d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459e80e0-80f2-48cf-b588-a9b82a075772",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4224d6c9-6890-4a06-9713-c75610b7c83a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "162a2229-def2-44dc-b322-9b466af986fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7f343a-46ee-435e-8c16-ef7f2d587de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67474d74-9854-44ee-b37b-07d61deacd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899cd158-637b-4441-bc95-cb188a9b6f2c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28df8620-c375-44b4-a48f-4b8f363cbedf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d352acde-163b-49f3-bb09-3060bd392005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5211f69d-d6de-4bcd-9d4c-82bc81309125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3ee762-b31b-432f-9b70-a178d3854518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb2aad1-dfa6-4837-9311-8b801ef916cc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329dbf85-c509-4dd0-b236-d71e38ec4fa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "608dc32f-28ca-43c6-af85-485cf7a11d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df817a33-f834-4cff-ba0d-002646a1f21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d1b494-bdf7-4d0d-bf1f-cf8826c8201e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8af260-509e-44af-93b9-ea051246ecdf",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d4d275-d8ad-4914-a5f0-1239c4667afc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26005d5b-8b3c-4a5f-9da6-0eb8c33ffdc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a02790-c43f-41ba-9320-ec97f7326c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d46790-026f-4a4c-9900-46588ba33c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d802c1-97ef-4d6c-9734-461e5e8526d4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84fe12d-2551-4758-bc95-696563d0902a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f9452b2-f60e-43df-a1ad-475b7c8a01c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd2d500-6f0b-4d13-9b5c-bb67d440919c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d3f5d6-69c0-4569-b495-8f8cd4e776ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911c3cbd-443b-4ef9-b331-5b0c2406ff91",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5351c3a5-89ea-4f06-a304-0a935b310345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55a7d80c-594e-48ec-9bdd-df4f2fca7faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee0879c-e635-4e55-83c6-a5832f4bb7a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fcb6a9-9fc0-4729-a7e9-097b44109b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054f816a-1d44-4732-8a1a-dbfba329471b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73d7c42-97ca-4257-b7c5-65f3d9b2ceca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e295f31-6667-47df-a0d0-11f1227c0a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6029966e-c50f-46d2-b9ad-c271c8655bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06080906-096c-401b-b8e2-e8397db1cae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d57ee56-8156-4337-b275-fe8eb4bd6c10",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441ef841-9d63-4b37-9de8-40c6da174ed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f655b7-e1cc-4f41-960a-9968a8dcdb94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70e1acd-7928-4117-9f2e-5f837f795041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dcef13f-4b60-4549-9a45-e9cbb6b8624b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce81a02-9531-407f-bd8f-17ffac87969b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019c2ea7-0a62-4b4f-8332-2fc2e8243716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27758dd5-a258-4bc6-90bb-7d8844a2c91d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cecce3-ed05-4b03-b498-de96afbe4236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909e08fa-1f2c-4087-a70d-37a33736c609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2a5c36-e49d-4b30-9b59-f54af2a18149",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c4d1d1-df52-4c7a-a698-6d72213251dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57fbee37-8237-4131-89aa-5fa5141f8879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ac59a1-9720-40b2-ba2d-88b5eb9c0f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71abdbd-8a84-4167-bb93-11fe08ecb6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092db8a4-1b55-490b-8b7e-f83001fed472",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8117396b-59ed-475c-9391-8e5cde78d042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53373d9a-5585-4ca4-8741-c9dc60e1cbc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d23f50-189e-4f05-b67f-776cf7b159d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46cbff8f-64dc-4f09-89f2-4b1adb5df84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03781cc7-4b37-470e-bcdc-3b898e088b1b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b84603-1414-4893-a267-63fbed4fde7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "513d2edc-c5e9-45b2-bba1-2a1a80bb0ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bb39bb-bd96-4c1f-8d8c-7e1802001940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3cde72f-58f5-4b68-8cee-c38eece45640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57b3760-b5ba-4ac0-a514-014b2a69918a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c48dc42-69b3-4042-87a8-f079a1866059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93fface1-c554-431f-9b91-cd4dd59f956a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fde2b7a-a1b2-4807-9fae-8a06eb94af2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95105e2-72b8-4a40-b58d-51f7eff6e635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fcbe8e-73c8-4282-95dc-2528ea2405a5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116b3d45-f528-451e-936a-7628d1227541",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e4ef8f3-53d7-46c3-8cef-44b1c5cd4265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "102617c1-8ea9-4d09-8832-720aa9b1cb9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc188117-f72d-48a2-9070-bcd8da7e4077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9079aecb-42c0-49be-b159-b23b9f99f190",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88e65e3-d4ae-4259-ba0d-1e4d38ea87d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92dcdcea-6dec-475b-a1da-8cad33e681d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e469dd-5a50-4aa3-ace9-a82344e167bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483fea9a-fb9b-4003-85b5-105512bf54fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85854bf4-a9f8-4788-aa8b-b77e88e5cdda",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7b19df-3ccf-4437-9a70-85702e0b9717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d442de28-1276-473a-be8e-ea2e9014642c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6e1dbb-045e-4821-9a21-1aad163711cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1dd387-8faf-4c06-a2bb-af03aaec458d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db62a55-60ab-460f-8faa-b431d16dae11",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be1f718-36a4-46b8-b6ef-4f63cd23fda7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96e2c4b6-4b5a-472a-a3d3-07f8dc3ce0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d069b1df-2445-4abb-8300-8947bd62ec26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2722d829-b9f2-47d6-91cf-d576c0b6d042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e73d880-c32f-4fdc-80d5-ff534a08d5bd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177cab30-470e-4e54-94bc-b6402bbd54f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12d64a11-7f02-4e8f-a769-7d16bf529572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776b0c56-3ced-4321-9407-4b5750f19d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093fc5e9-d5ca-4744-b9e1-f25bb135041e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b056c8f6-2d2b-4463-aada-e1fe1f2fdffa",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31698045-dc1b-4f84-ba66-a7821e41a427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd6e98de-7eee-424d-b032-82766cd6fdf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b13f5e-a5d1-4acc-b35d-2ad994181a5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de6dede-3fc9-486b-bd70-3ce08c0394e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0760511-cda9-4416-ad60-3d9f98fc595e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9afa15-cce9-4d78-828e-608a528e54db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96316a39-be53-4068-9667-0ea5f246e3f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7435940-696f-467a-8b23-f4d4070b207e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12bf862b-096e-4541-b634-9a76dd2dede5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78238ac7-4258-498e-8cd7-c56330fc00b1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89136c3-10c2-483b-ba2c-f4c31e52ee98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0035c2e6-da49-4abd-9d94-00cf781c3ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ef644b-b983-45c3-a14f-74dfebaae663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0dff26a-81ec-4740-96ee-ffcb5e309803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197a17a0-9334-454b-9346-172dc093d22a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b331ca2b-ff89-47df-844e-be8c6ba774b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc54e8a3-331f-456e-ba81-095487365a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d671e32-e8f5-4708-864d-b060831ad08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784f9b02-6140-4d23-a6d6-e7337fa5e203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b74991f-adc4-470f-b2d4-48c345f31878",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd04412a-187d-4557-bc58-56c9c213ca3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8812fad-c534-449e-8ab2-e7839b5da087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a53f5f-b4d2-4735-8956-e24c6e45281a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4615dee9-236b-422e-908d-799660831b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddce6c4-7839-4007-b856-d10fa650a172",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05df4a60-bcae-48c5-a26f-169e65136697",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f64b2218-26af-4bb1-b0cb-6b1fffa9da21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00265d39-5cd4-4a9b-ba49-8294578d814e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a548416-39b2-470c-b9d5-02f5d4678282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe8ef56-3432-45e7-b184-b765c2ea4276",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6729bb6-bab4-4e2c-a9b3-79bcaa12bdcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f97b5761-61d7-434f-bdf2-8003b61f307b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d67906-9aab-45fb-af41-cf2da03ab72b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec889ea-7a42-42f7-9fba-8b83782f6e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eaf63bc-40a3-4e37-8c46-6556f35c3bd4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4d8cc7-89e1-4fde-9a5f-0a6947a51cfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0f4dd36-5bc7-4a9d-a9cf-75b8576a996c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a95de91-ece9-4741-bead-1744846cfc82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c53347-6fd7-46ca-9f2e-b47b708f3f4d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c689729c-d0c0-4e02-9d8c-7e92e76430e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cac6e0a0-fb37-40fd-9ff7-88f0020dc519"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26c7ca2c-35e1-4c45-bfed-183e58b65fc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53676b22-c88d-4bcb-b75f-7fcb9da8475a"
                    }
                  }
                ]
              },
              {
                "id": "de037af9-1c4d-45df-961f-de3cdf99fd4c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "681fa739-c5d8-4453-acb6-1af57ffc98ba",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a029514e-2b95-4493-b6e2-f2e535afbc77",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8abc2623-e5fa-47b7-89f1-711b5e1564d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7533d147-b9d1-4195-8875-ca9718459744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b88b4cd9-3205-46f8-bd78-417eccbc6513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4911560-ea0c-497b-bfc9-bcb16c79f678",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bbeaf5-f16f-4da6-8261-5a87201e6bb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6cf9d4d1-7c81-4980-a8ae-737ae837e713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5679688-857f-402b-8afd-d7b54bac72a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af813f02-8734-47eb-b145-8d278f86a036"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8997803-f180-496c-8cdb-b6053b456f79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae3cd7bc-1190-4d2a-9f55-d1d44ded94e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee905c4d-729f-4dc4-93ac-78f9db7a92c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e77a31df-25ff-4dae-bf6b-9b8d06b0d5a2"
                    }
                  }
                ]
              },
              {
                "id": "fa37edde-2d1f-4d02-8a00-a0e70e863836",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "faaf2f9c-c67e-48a1-b6a5-5134bdd76432",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44f5339-7fc8-4d5e-8bab-945d9c568156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2ddbb683-c910-47e2-a18c-f44fdffd6286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa84b0d-3e48-4276-8308-d7fe1d20bb5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7681abf-ed67-484f-9e76-4ca9e4b37d24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d233851f-c1a3-4a35-8e44-03c1373ac3ff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff647326-5b7a-40e0-95a0-ea29eec98737",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6243c57a-733a-41c9-9add-f91ffda92cdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0309d094-8e28-44eb-ba80-ec5ab4d11530"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "808b7563-0f3c-4e83-8168-952bcdf84ed9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e898ba19-d599-48eb-b55d-e7da72ada049"
                    }
                  }
                ]
              },
              {
                "id": "82b629c2-d9db-4903-bf2c-2ab6f61d0133",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9aa1a667-67b1-4b22-ad4d-c2737b345979",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "04f0ff7d-31e3-41a5-a543-6fdf70f3eb7a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "228bf73e-ec00-4a6d-a42b-ecdf5c605ed3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d6d80f4-fefe-4aaa-a9d1-96bdb5936f9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bec0c34c-fd64-45e0-93c9-164e87670668",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d665d17c-c7bd-4263-9998-41154cf6a167"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3e93036-4bd2-45d1-a537-2dd4b1e3ba70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0335ba4-8d53-4ae1-9988-9c026d390357"
            }
          }
        ]
      },
      {
        "id": "8be6e91f-de2d-4cf4-823b-3d97b999dfa4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5fcd0613-abd2-4127-8028-5f13d4de9254",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6d13109-17e6-4fc1-beb5-f00938a023ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2827a3c0-f868-48ff-b0aa-82366bb8a764",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d675fe-d6ca-4fe7-a8a4-82e15b4415cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5818cfa2-ad87-4a0a-bf59-17cccbfce64e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a37e82-7490-4641-a7ac-a2cd0388bc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2e6b5d3-f1cc-4f9e-a67a-4c70aa183e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0f5c8d-5116-4e0d-b23a-ecb860eba366",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f0383d-52af-43c3-b7eb-c5465d5af39e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f261246a-acdf-47ec-842f-d9b293ce642d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d70d08-80a5-4c88-aea4-e8074c8547a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff36f475-52f1-43de-a7b0-b61fb3437d88"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfc35845-7804-4da4-9590-9b5e4d79344b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d581f00-a70a-477e-8053-af25edb9dd0e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b33cf2bc-87de-48fe-8032-9df742dcabcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0113b51-7032-4a9b-9c2f-71ef6a43de9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "773bd1d6-7477-4b08-9c7e-21d0779c21ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a511f4fd-c212-4a72-9eae-2bc1d45745c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "881848f1-e74b-4479-b896-368f6396c8f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f8fc417-74c9-4d5e-b837-1db1cff2bd25"
            }
          }
        ]
      },
      {
        "id": "c93f19fc-f689-4aca-8769-2cb4c9e23127",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d7857079-1b83-40db-86c4-49a2505e530a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7703b178-d93c-43ec-a4fe-513910c25e9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbfb3f24-ca37-4f71-9020-fe7aa0d34656",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e4c322-71ec-4a41-9502-5e8e2a7db65a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2aed7181-5123-40f4-8d74-b23ade5a61de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0782a0ce-5380-44ca-a3ed-651d1da22928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e253f0b-946e-47d9-b7d2-f6827c669fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21445301-d33c-4999-afc1-4b1e7787cfcb",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d397a86f-9f4a-448c-b35d-6044cc322e01",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cde24d7a-9183-46c8-b9ee-e276b70c8c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c970b74-5356-4048-a368-c978b744fb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f755af01-3dec-4dbe-a0a5-505cfda77c01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5668171e-0b22-447e-be29-64615270efad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7339410d-54fa-4ec0-87de-430123a67d63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54a2cd63-3b1f-4a04-b3dd-417303072605",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db33bdd3-87c6-4b60-8db4-63694b094d90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "488a9058-2701-4dff-82cb-5e968afa09f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6e357d48-6257-410c-91b4-6a6f1000c67e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8593c9ba-2525-4956-b572-25a620d9be37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5e7e876-4a0e-4394-a571-5dbc646a21cb"
            }
          }
        ]
      },
      {
        "id": "0382de6d-d6e2-49be-bab1-7df4df48fa8c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9181d97e-cf02-482c-9bab-eeaf7243e0ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a947134-a94c-4c74-b9bf-0587fc193239",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d37e9469-14bb-45c6-9064-f4ff8214b9ac",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac93a90e-eb29-46c5-981b-845809023115",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cbca3914-6cf2-4b3d-843a-9d02bf96083d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4d8158-e423-4036-90ea-c171e0ede36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bfe9c36-bcbc-4043-8832-fa60efd18917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e948c5-a74b-4cb0-9533-30c42d823251",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5a8748-fa2e-4eae-8136-b61df2ab7101",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8060227b-b9de-4a6b-9730-f42df4c9b499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99582bb-7a5f-42d9-856a-d79b03a0cd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cdc02b9-98b1-44e8-8cb4-f788e9eddbc0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d55bad1b-cd87-472c-9cc2-e55e7add830b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ab669ab-ff57-44cb-aba9-4acb2876f98b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26e7ef92-134f-48de-b4f6-29f62d3fd0b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fafbece-0810-479f-8461-e10ca78d4441"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77fd4afe-a8d3-473a-9101-4ebbd5696290",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fa8a5cf6-d265-4fdc-a9d1-66c40b7792ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "441b49c0-3188-4bfc-9f24-26bda4244579",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b27d1f8-9459-4bae-8e63-f05a874567ef"
            }
          }
        ]
      },
      {
        "id": "57cf725d-0d6d-4fa7-ab3d-08b752e185f6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf2c8809-68df-4542-83b5-0c073a35bb90",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63fecb78-d6b2-4b49-a32a-020a1b269717",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "26294087-3e18-406f-8256-e72294ac3311",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dee718c7-07de-4cbc-a557-07edac64514e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b575dd8-12e0-4b08-bfc7-0c6694dc5c32",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 89.87022900763361,
      "responseMin": 4,
      "responseMax": 1094,
      "responseSd": 181.39400399739526,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672360690753,
      "completed": 1672360725306
    },
    "executions": [
      {
        "id": "017760ea-4612-485e-94fc-d22c02d93bf1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2c4f739d-3943-4b39-9a30-0a2b419f02e9",
          "httpRequestId": "5f93cf4f-2b36-47c8-8770-e1dfee97c2d2"
        },
        "item": {
          "id": "017760ea-4612-485e-94fc-d22c02d93bf1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d9413ce9-54a7-4633-8968-93b3e117091f",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "6dbd1338-4a9f-4149-aeab-76795e7b8467",
        "cursor": {
          "ref": "29c6b27d-6c8a-4701-8e4c-ad3fd9afb657",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "af9adcab-2a70-4b23-aa6e-582d5b55d96b"
        },
        "item": {
          "id": "6dbd1338-4a9f-4149-aeab-76795e7b8467",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0822eead-a264-4464-8241-100cc0cd92a2",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "1f5d9eeb-128a-4a3c-9f35-d6f1fd4e81c8",
        "cursor": {
          "ref": "3c85e010-7b52-4315-8987-b4ebc7284bef",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "27f406bb-aa49-4d26-9796-5994e532ce32"
        },
        "item": {
          "id": "1f5d9eeb-128a-4a3c-9f35-d6f1fd4e81c8",
          "name": "did_json"
        },
        "response": {
          "id": "11589de5-d16e-45c0-88c8-532577386d68",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7f98b0-c683-45a5-88cb-e1eec117bfe1",
        "cursor": {
          "ref": "301dc459-4de8-46ed-b544-6193a5a960f3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "06c847fe-95a7-4d8c-867c-952288eebd77"
        },
        "item": {
          "id": "ad7f98b0-c683-45a5-88cb-e1eec117bfe1",
          "name": "did:invalid"
        },
        "response": {
          "id": "8636365c-4a7b-4527-8a6d-133116994869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7f98b0-c683-45a5-88cb-e1eec117bfe1",
        "cursor": {
          "ref": "301dc459-4de8-46ed-b544-6193a5a960f3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "06c847fe-95a7-4d8c-867c-952288eebd77"
        },
        "item": {
          "id": "ad7f98b0-c683-45a5-88cb-e1eec117bfe1",
          "name": "did:invalid"
        },
        "response": {
          "id": "8636365c-4a7b-4527-8a6d-133116994869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f909f34-265f-4245-b8f2-90b349b3a4a3",
        "cursor": {
          "ref": "24af93b3-e61c-411d-b01f-a97b4be376d4",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "93d19fc2-e6de-4ae3-8ff0-b5309ae5483a"
        },
        "item": {
          "id": "1f909f34-265f-4245-b8f2-90b349b3a4a3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ac559fa2-1c25-41f3-846f-0f8cfd14f22c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 110,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25564294-c233-4514-b2dd-27d66739bda0",
        "cursor": {
          "ref": "05badeb3-7b48-4658-99ea-322726526efb",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5c23a410-482d-43e0-8b3a-9fe7f09fb6db"
        },
        "item": {
          "id": "25564294-c233-4514-b2dd-27d66739bda0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7c43bfad-4069-4944-b871-5fc96ce90d6f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037d8833-349c-4dc3-a1bd-876c23db2286",
        "cursor": {
          "ref": "aec869ea-e0f9-4526-af7a-3980b9db1d01",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a3542341-f9ab-4fcc-b17b-e596f5bb9899"
        },
        "item": {
          "id": "037d8833-349c-4dc3-a1bd-876c23db2286",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d32a5329-e921-4727-8c07-bf00a179c673",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4bfd6b-cefd-4906-99ab-00d1faef7e9b",
        "cursor": {
          "ref": "4772cb1a-8b27-44b0-acd9-ed1e9f6582a1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3812cf59-a880-4149-b535-922584ca6e49"
        },
        "item": {
          "id": "bf4bfd6b-cefd-4906-99ab-00d1faef7e9b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9b39dc42-799c-4bc2-9955-4b52652bc526",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4bfd6b-cefd-4906-99ab-00d1faef7e9b",
        "cursor": {
          "ref": "4772cb1a-8b27-44b0-acd9-ed1e9f6582a1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3812cf59-a880-4149-b535-922584ca6e49"
        },
        "item": {
          "id": "bf4bfd6b-cefd-4906-99ab-00d1faef7e9b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9b39dc42-799c-4bc2-9955-4b52652bc526",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcfcfd5-3da3-4199-ac78-cea80bdb7a76",
        "cursor": {
          "ref": "f1d728f3-a6ae-4162-940e-17fd22140cef",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "950722cf-93e3-47f0-a6ee-376ef326700b"
        },
        "item": {
          "id": "9dcfcfd5-3da3-4199-ac78-cea80bdb7a76",
          "name": "identifiers"
        },
        "response": {
          "id": "89f7be5c-3ef2-483e-a9a5-963bcb5a8368",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9147bc06-6be9-43bb-8c4e-075978805826",
        "cursor": {
          "ref": "83e8970a-a642-4726-a0a4-aaca0002edd5",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8572108b-70c0-472b-8587-35caac35f4f2"
        },
        "item": {
          "id": "9147bc06-6be9-43bb-8c4e-075978805826",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85188926-2747-4389-99f9-cb696d916c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9147bc06-6be9-43bb-8c4e-075978805826",
        "cursor": {
          "ref": "83e8970a-a642-4726-a0a4-aaca0002edd5",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8572108b-70c0-472b-8587-35caac35f4f2"
        },
        "item": {
          "id": "9147bc06-6be9-43bb-8c4e-075978805826",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85188926-2747-4389-99f9-cb696d916c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49e08e1-393a-4d69-b71a-a4c9b8d0b5be",
        "cursor": {
          "ref": "395da52d-1d87-48ff-ab1d-04f57cf90816",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4b44b6a7-abf3-480a-a97f-603168f8dd2c"
        },
        "item": {
          "id": "b49e08e1-393a-4d69-b71a-a4c9b8d0b5be",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "be85b26e-da5b-4dcc-abf0-90f1d4bac3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cd957b-57c1-4b24-87a3-4f8e2c2c4adc",
        "cursor": {
          "ref": "fd28076f-6cad-4089-b84b-ded423f77cc7",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "84c9bc19-d64f-4c11-929b-d05d7aa6fdcd"
        },
        "item": {
          "id": "a3cd957b-57c1-4b24-87a3-4f8e2c2c4adc",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "f9d650fb-8ea9-455a-9fc4-81e2e25378fd",
          "status": "Created",
          "code": 201,
          "responseTime": 751,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "3cb3c626-c33a-4c92-93a9-4af4ca1cdb62",
        "cursor": {
          "ref": "f1edd5c1-c48f-48d1-b7fa-fc2bb9a66d34",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3d418139-0524-47aa-a938-939e0fba1ff0"
        },
        "item": {
          "id": "3cb3c626-c33a-4c92-93a9-4af4ca1cdb62",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9af279bc-c5a2-4424-800d-5d411d7158dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7172068b-f1c9-4164-adfd-210b6e45e6aa",
        "cursor": {
          "ref": "3d72631b-31b8-46cc-a481-e8cb14751c7b",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "25a7389f-e1c3-44dc-b24a-65e4517ac1f2"
        },
        "item": {
          "id": "7172068b-f1c9-4164-adfd-210b6e45e6aa",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "097b9524-8562-4c4a-b552-05c0be353e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9bab7f-63e7-4e2c-b783-00b8ff439cb7",
        "cursor": {
          "ref": "9d47eb30-3db1-494b-983c-c789f760e6e3",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c77cdc25-cb4f-41e6-92bc-b726e80f3ece"
        },
        "item": {
          "id": "3d9bab7f-63e7-4e2c-b783-00b8ff439cb7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ed613f93-330a-49d0-9af0-725e1b0ccb13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d6a43d-12dc-453f-91e8-1e230e91463a",
        "cursor": {
          "ref": "1393ce03-ec68-4f8a-8d6f-567dc67fc4bd",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9a32cd4a-9ef5-41f9-a4bd-ded62d874021"
        },
        "item": {
          "id": "16d6a43d-12dc-453f-91e8-1e230e91463a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c5192da0-a429-483b-bdcd-cf64f2df22c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe19f666-e21f-4aa7-9745-db1f258c367c",
        "cursor": {
          "ref": "4cbee3f0-6821-455b-bb60-db63fa820455",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f0c338cd-3392-44b5-8f03-6763a466c265"
        },
        "item": {
          "id": "fe19f666-e21f-4aa7-9745-db1f258c367c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4eb1300c-5a3b-4ad7-815c-7315800b3f20",
          "status": "Created",
          "code": 201,
          "responseTime": 497,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "23e84350-3505-4ce9-926c-ef2b122b354a",
        "cursor": {
          "ref": "4901c203-ee73-4ea8-82c9-07c24ed3f0ae",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "07c018f0-9b4d-4535-9ea4-30eee6acb368"
        },
        "item": {
          "id": "23e84350-3505-4ce9-926c-ef2b122b354a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "20645986-1115-415a-b0a3-af1de2d24785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6821ce9-0878-4ac0-9386-120e2ed036e1",
        "cursor": {
          "ref": "93270253-202f-4b87-9f9a-738e117bb81f",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b789c70b-261f-4a38-babb-a7f34f80fbd4"
        },
        "item": {
          "id": "b6821ce9-0878-4ac0-9386-120e2ed036e1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "96f3696e-1a2e-4084-9523-f90a22ed8a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce7bd2b-cfc6-4831-a269-44deaee25755",
        "cursor": {
          "ref": "aa3eb6e5-bbc1-42b1-b63a-6529725d9a56",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b6aad94b-ee54-499f-b3f0-d4fbef41f6cc"
        },
        "item": {
          "id": "bce7bd2b-cfc6-4831-a269-44deaee25755",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "965fc983-e7b5-489f-a18e-51a794616925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15558796-ab83-4179-b9bc-09a87c593e75",
        "cursor": {
          "ref": "a6eaf909-7778-4d43-ac14-12af354ae024",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6867ec01-91da-43db-93fe-793fd1a5fccd"
        },
        "item": {
          "id": "15558796-ab83-4179-b9bc-09a87c593e75",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "00fe94aa-6a89-4224-9166-146b55f65e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6178b0ef-1f55-431d-bc40-9b1b1942f917",
        "cursor": {
          "ref": "29f91d53-1ec6-44ff-8003-1e82598f92cb",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "982df992-7dfd-4732-96a2-56048c149d2d"
        },
        "item": {
          "id": "6178b0ef-1f55-431d-bc40-9b1b1942f917",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3405c064-22fd-43c4-9602-5d08be27078b",
          "status": "Created",
          "code": 201,
          "responseTime": 496,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "c08d8946-1859-4892-924d-b2cd93b2d27a",
        "cursor": {
          "ref": "62c91858-7f47-4068-8d47-280e7da86640",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3f7ff75d-137b-44b1-b723-4f51754eae41"
        },
        "item": {
          "id": "c08d8946-1859-4892-924d-b2cd93b2d27a",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "9eae38c5-570a-4756-9d7e-30ad22da9280",
          "status": "Created",
          "code": 201,
          "responseTime": 1094,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3ed1d007-86b3-4bd8-9c6c-61644265165c",
        "cursor": {
          "ref": "f7906830-bd31-44bf-8ab9-1ee7a4ce0f9b",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d2522071-9329-430d-a6a4-af7ffe7d59a2"
        },
        "item": {
          "id": "3ed1d007-86b3-4bd8-9c6c-61644265165c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b97c79cc-b280-479b-a1ef-8ae5cab19e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b08873b-d403-4e52-9504-f306160c205d",
        "cursor": {
          "ref": "e774b5bc-d097-4586-907d-bb0d5a79c28f",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8b8bb650-30a3-42c6-a8a9-27f9f047b452"
        },
        "item": {
          "id": "5b08873b-d403-4e52-9504-f306160c205d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7f431d98-16c5-45b2-b250-6d58b9b63070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0fd249a-70b3-4799-8f0a-cab304129057",
        "cursor": {
          "ref": "0bf4d189-28ac-4db0-940c-c98cd437d642",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c48b8ebe-a5e8-493d-9de7-0442286a1cac"
        },
        "item": {
          "id": "f0fd249a-70b3-4799-8f0a-cab304129057",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "23b902ae-7499-4120-8d17-2196e1476594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1818f8b3-10b3-4825-b315-cbd11ebc2902",
        "cursor": {
          "ref": "4d1e21ef-4a44-4cc9-a390-ac3209fc47a3",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e181e644-667d-43b0-9508-a8f2b9ed94ec"
        },
        "item": {
          "id": "1818f8b3-10b3-4825-b315-cbd11ebc2902",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c95a5dce-a0d5-4a8b-a57c-eaa05aaf0b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceaeceb8-f475-43db-bbf8-875b04ff14ef",
        "cursor": {
          "ref": "181c6799-2b65-4488-ae82-512b1261e8bd",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4dd23102-a269-466f-9128-50bd81a4ea66"
        },
        "item": {
          "id": "ceaeceb8-f475-43db-bbf8-875b04ff14ef",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d185bbb3-0bbf-4d2e-bbd0-c66b55b9d85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68385d1-1982-43d0-9afd-4ab5d876e50f",
        "cursor": {
          "ref": "e5850f49-38ea-4de4-9f48-af68f0c93d52",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8a5058f4-c9f0-4360-b61c-c1eaf2f4a262"
        },
        "item": {
          "id": "a68385d1-1982-43d0-9afd-4ab5d876e50f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8fbd4da3-23ab-40e8-97dd-0c0a9723accc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f976ce12-7145-4ed6-b319-95da0d05632c",
        "cursor": {
          "ref": "ad59b20c-ae75-426b-b9a7-0d8730a68a6b",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "81f9b616-283d-466b-a262-723fc8af7945"
        },
        "item": {
          "id": "f976ce12-7145-4ed6-b319-95da0d05632c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2a006c70-942c-4845-8add-73319abee5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fb0866-6057-4f50-a440-b19aa3181a5d",
        "cursor": {
          "ref": "c080f113-7275-4a76-b123-8b0487601842",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9d311220-7450-4708-b837-81ec8858e20f"
        },
        "item": {
          "id": "74fb0866-6057-4f50-a440-b19aa3181a5d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "adfacb04-ce80-4550-b72a-3c21606e3bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7f7bb6-889b-4619-87d3-5db2f72f3bc0",
        "cursor": {
          "ref": "11fd464f-093f-4946-b550-40477b345700",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "03be844c-80bf-4d1a-9a5b-f20e1a60a63a"
        },
        "item": {
          "id": "bd7f7bb6-889b-4619-87d3-5db2f72f3bc0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "23b54e17-b2f9-42d7-ac40-9c1fd405b727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9033df-5da9-4cde-bf9e-8dcbed3ec4db",
        "cursor": {
          "ref": "cf0e4d99-d184-477f-96f7-c7342df89de6",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5111dbd1-3fb4-4d09-8c36-c3efc5461f64"
        },
        "item": {
          "id": "8e9033df-5da9-4cde-bf9e-8dcbed3ec4db",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d412bc6e-14f3-4579-b161-da1e17b8f437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61181db-7e8d-45dd-a569-74e047045d66",
        "cursor": {
          "ref": "b2161557-13ef-4c0a-a538-19ea9c23d2a4",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "492b1b21-3dc3-415f-828d-a526a58ae69f"
        },
        "item": {
          "id": "f61181db-7e8d-45dd-a569-74e047045d66",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ff1c01ff-41e4-4f33-95bf-e63c28fd81ba",
          "status": "Created",
          "code": 201,
          "responseTime": 669,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "f0b6048f-e492-4c9a-955a-4c7cae38bdef",
        "cursor": {
          "ref": "6ad98b56-9135-4e95-a141-b8d07c4a1cdf",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f7b673ee-f630-42bf-b836-845f5ec05038"
        },
        "item": {
          "id": "f0b6048f-e492-4c9a-955a-4c7cae38bdef",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6e392518-0830-47d6-8bd8-93766a482fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefbc6fc-94bb-4369-b650-68207b7ed773",
        "cursor": {
          "ref": "d20dbfc4-364b-49ad-924b-2dd6c015c95b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f3dbb659-35d9-46ad-b487-ff02e20cddc6"
        },
        "item": {
          "id": "fefbc6fc-94bb-4369-b650-68207b7ed773",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "44cfa596-9b8a-4306-89a8-ac7182d1ae6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6d95d7-8381-4906-af63-dc486b858a47",
        "cursor": {
          "ref": "6f7cb1c9-12c1-479e-b6d8-08dc66949dda",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "50d13be4-a0fe-467f-93fc-3805338a246d"
        },
        "item": {
          "id": "4d6d95d7-8381-4906-af63-dc486b858a47",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "71bfef98-117a-403c-bf67-4c84ff242791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799ca617-0ff8-434d-bd98-a66a66894038",
        "cursor": {
          "ref": "97d52b13-7e90-4059-9b3c-a1b016478bd5",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "08c40a2c-b943-476a-94ef-bd8d1ee781ef"
        },
        "item": {
          "id": "799ca617-0ff8-434d-bd98-a66a66894038",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5801a199-d295-46e4-8376-0054b2a8fa32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5047275-e68e-4d47-82ca-ffd45e7c031a",
        "cursor": {
          "ref": "3d4582fc-e177-4f51-9224-a2e00e273c61",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0b49637c-3780-434c-83b3-f622c144bb3c"
        },
        "item": {
          "id": "e5047275-e68e-4d47-82ca-ffd45e7c031a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4a1ffa00-aeff-487b-8696-656b6add9a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f321c238-f276-424e-a857-0928ee8dff9b",
        "cursor": {
          "ref": "4ed6269d-740c-4a69-a367-288023cfa36e",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b00db681-d7a9-42ef-817b-22de799d90ec"
        },
        "item": {
          "id": "f321c238-f276-424e-a857-0928ee8dff9b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "776f3bab-7e37-4286-a01a-b05c5bab2758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a519de-7263-4828-8cca-70fa6ca92547",
        "cursor": {
          "ref": "bf7fcbd8-cb76-4538-8d97-02dba451f9b4",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1459c7f2-44d3-45e7-8fac-40184a97aed1"
        },
        "item": {
          "id": "88a519de-7263-4828-8cca-70fa6ca92547",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bfd1774c-9f8f-4b63-80dc-5a25acc101a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5916cd4-5d48-4840-b2c1-b6be48d8c6c1",
        "cursor": {
          "ref": "a1f7666c-8d0b-4061-b774-5eff29322a34",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1b4fd08f-7196-4a4c-864e-d2e3ee228f21"
        },
        "item": {
          "id": "f5916cd4-5d48-4840-b2c1-b6be48d8c6c1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "384bb27c-30ef-4cc8-87a1-015e8587a520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7c8595-9591-4b80-9772-cbafde277607",
        "cursor": {
          "ref": "76e877a0-b1bb-414e-a148-8b8e9560554b",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dcf87df2-6378-4c1c-964c-07ce57dc43eb"
        },
        "item": {
          "id": "ee7c8595-9591-4b80-9772-cbafde277607",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "98843e06-8553-4a1f-b402-99a6f6df9b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83b29bf-cc1f-499c-b7d8-484765844c72",
        "cursor": {
          "ref": "7b64bf50-c20d-49ff-aa66-998652d9aaee",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2a62808c-3d4e-480a-adda-6c3598fae1f8"
        },
        "item": {
          "id": "a83b29bf-cc1f-499c-b7d8-484765844c72",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2fffd576-5503-4ee1-acee-5f491b70f788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ee08b3-d274-4c9e-96e4-203c0018c599",
        "cursor": {
          "ref": "d2c4ce5e-6fa5-428f-b575-06f6b81b1920",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "09277824-fe7c-42f9-8879-7a0ba576a0ae"
        },
        "item": {
          "id": "88ee08b3-d274-4c9e-96e4-203c0018c599",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9b6f5552-c481-458e-b93c-025172aa06ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dce497-455b-4d44-aede-b2b7fc479d2a",
        "cursor": {
          "ref": "b2ebc99d-da43-454e-aeec-09cf1d7d26e5",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "be252273-5a30-4fbc-90f5-1397808468a7"
        },
        "item": {
          "id": "71dce497-455b-4d44-aede-b2b7fc479d2a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2ef2c93c-1f5a-4c6e-86ee-53064ad48b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f9b69f-be62-48a9-a961-f8d6e4885ce6",
        "cursor": {
          "ref": "6b0d3683-5009-453a-8e19-534cb9569a77",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8f1f406f-8a04-497c-84ad-1a7387358357"
        },
        "item": {
          "id": "d4f9b69f-be62-48a9-a961-f8d6e4885ce6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4669530c-19ce-4d12-b1fd-f4d1fbe7167c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "768a89b7-15f6-486b-ac75-bc8e7c311b0d",
        "cursor": {
          "ref": "a6dcda2b-7c85-4b87-b6c5-3f9adcae7726",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "dfc22b93-19a9-4692-9add-38927449a8e5"
        },
        "item": {
          "id": "768a89b7-15f6-486b-ac75-bc8e7c311b0d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "dec99cbd-d96b-4208-a03e-d7d548741e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7343a1d0-5c2a-46f9-84e6-61b3920bdd64",
        "cursor": {
          "ref": "38631693-9b4f-4627-a9e4-66bf1e1ed775",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "63de8abc-2ec6-412c-9290-43455610bc31"
        },
        "item": {
          "id": "7343a1d0-5c2a-46f9-84e6-61b3920bdd64",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c6fde137-d794-46ac-9fee-5d9554041070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14a3234-5327-49c0-baae-ed4d64aa8cc7",
        "cursor": {
          "ref": "add5ad10-3d76-4d96-a409-f49b91396296",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ad5cbbc9-8f78-4186-b41b-ae252a6fc6ec"
        },
        "item": {
          "id": "d14a3234-5327-49c0-baae-ed4d64aa8cc7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b1db2843-a223-481a-8bec-c935172a3558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0282365-e005-48a0-bd97-93cdb3e2692a",
        "cursor": {
          "ref": "d47d9955-a168-4666-9120-d1b08d5f2030",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "747f4d65-9a12-42f0-9819-131073e6043a"
        },
        "item": {
          "id": "f0282365-e005-48a0-bd97-93cdb3e2692a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "87f43c44-f800-4ef4-8f13-242f2eac52e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7036638-4d35-448c-b707-e580043ace30",
        "cursor": {
          "ref": "15754fd0-2cba-4977-8c55-604dfb1805a7",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "54d88eae-2358-490b-934b-e5586e791f41"
        },
        "item": {
          "id": "e7036638-4d35-448c-b707-e580043ace30",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8b4f252f-0807-4e4f-bdd9-c2699a46dacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cb944c-19c9-433a-9aad-7af0ac6c28f4",
        "cursor": {
          "ref": "d668f1fb-6dfb-447e-9de7-c8214b68f371",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b108e835-cf5c-4f87-8407-42cd556becc7"
        },
        "item": {
          "id": "05cb944c-19c9-433a-9aad-7af0ac6c28f4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b18f2c14-17e7-4617-ab2e-bebdb4b30b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61a2678-cc0a-4328-a29d-269234906336",
        "cursor": {
          "ref": "2f198496-1759-45f9-a4f7-9c505ab24fa4",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5845449f-ed9a-4aed-b6bc-d1083090951b"
        },
        "item": {
          "id": "c61a2678-cc0a-4328-a29d-269234906336",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4f6771ea-80d4-447f-b21a-97a6c1f9f383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "65f7ce26-ad3c-420f-ab0f-07c7d7ee9cb7",
        "cursor": {
          "ref": "4deb6c74-cbfd-4b40-8e5e-4d985d9a02d2",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d0eafe39-df51-4589-a470-e96815329d60"
        },
        "item": {
          "id": "65f7ce26-ad3c-420f-ab0f-07c7d7ee9cb7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5c85c774-7e50-4a03-a025-c1b68f6d3d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9eb3c8-6110-4c2c-a5ed-d7e8ec1a42fe",
        "cursor": {
          "ref": "ef85ca7f-4ae7-43b8-86c0-2bb5b4a7e5fc",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8a37700d-1380-42ec-9787-35c7a912025e"
        },
        "item": {
          "id": "3f9eb3c8-6110-4c2c-a5ed-d7e8ec1a42fe",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3a0e5e6e-cc44-479e-af9a-398bb0a33afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794e4ea3-5b2e-43e1-b68c-8bd03a98adad",
        "cursor": {
          "ref": "da4dc828-de36-493c-88ab-21195087f7ad",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2a841884-c801-48bc-8059-718062a183c1"
        },
        "item": {
          "id": "794e4ea3-5b2e-43e1-b68c-8bd03a98adad",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "58644623-dadc-40e7-a0e1-854dcc0b0cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee01eb97-7774-4e41-85bc-33cdde8a0855",
        "cursor": {
          "ref": "961400ab-44f2-469e-b65e-0c3cc9e861c1",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e86bd0d7-fe39-4b13-a83e-950eb0e7670f"
        },
        "item": {
          "id": "ee01eb97-7774-4e41-85bc-33cdde8a0855",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f4779b05-0b25-40f9-ae6b-839d8d256b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f684ded-d057-4f58-b5a3-3530d71bc29c",
        "cursor": {
          "ref": "9221711a-1d76-4aea-9649-c722d50390ca",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d6786794-9570-4b4b-8773-91b8b3ba1f5f"
        },
        "item": {
          "id": "2f684ded-d057-4f58-b5a3-3530d71bc29c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c8ee7fdf-c48e-481c-b2ce-68a0aa5e93c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04c050b-a144-4b62-8273-eb726f192b79",
        "cursor": {
          "ref": "7e5f3787-8a42-4236-9442-2d8acb644ece",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c984b1f4-c48f-4194-b004-efd97e756f03"
        },
        "item": {
          "id": "c04c050b-a144-4b62-8273-eb726f192b79",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dfc71ff4-188a-41c9-b1f3-cf0067e2fbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8620e8b-9cc7-41a7-a519-8c058368dbf1",
        "cursor": {
          "ref": "6d41f695-65e3-48a0-a522-242aee0b1eee",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ffb5193c-e64c-477b-af4b-5b6eda1229f0"
        },
        "item": {
          "id": "d8620e8b-9cc7-41a7-a519-8c058368dbf1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0efade06-a2fe-4938-ad66-86005f16161b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb559dc-47b1-4066-836c-c28feb06dc44",
        "cursor": {
          "ref": "c64e2ed2-68b0-4120-9da7-11f47d317d4a",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c0fa5c5a-b90e-4210-ae59-6f8a68f1ead2"
        },
        "item": {
          "id": "3cb559dc-47b1-4066-836c-c28feb06dc44",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "eb9e3583-9f28-4cba-89cd-edda6b3570a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ed709c-80f0-4be9-a608-b41b66152a2f",
        "cursor": {
          "ref": "f397423d-0bb8-4df1-bf2f-896edf664414",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fefa7853-1851-4e46-8078-15ef2638cad7"
        },
        "item": {
          "id": "15ed709c-80f0-4be9-a608-b41b66152a2f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d95b9ef1-eb2f-4761-8c01-24a3a6a1c01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3fdec2-755a-495c-bda2-1345a7f40bf6",
        "cursor": {
          "ref": "710c555f-b54f-40c5-ae6a-859efe8be8ea",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0330f788-4005-4e13-8e46-8c8cb2627550"
        },
        "item": {
          "id": "ad3fdec2-755a-495c-bda2-1345a7f40bf6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d7299c23-1324-4388-93a9-d2fc2f4bb192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8b7de8-7736-4e5c-accf-4d7e1e6a6cd9",
        "cursor": {
          "ref": "1a03bdf1-d79f-446c-9fa7-c2a60748ee80",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8a3bc578-82f1-4c49-a7e7-93faa59f6e90"
        },
        "item": {
          "id": "af8b7de8-7736-4e5c-accf-4d7e1e6a6cd9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9ddf5a78-ebd3-4088-af9e-a3c3c97026ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "533940d2-4210-4d8b-9e01-dec93415478a",
        "cursor": {
          "ref": "ce06fa8d-2e58-42db-88db-f8a7c562adbb",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4b0df78c-b97a-4aaa-a325-64954b5efa2e"
        },
        "item": {
          "id": "533940d2-4210-4d8b-9e01-dec93415478a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "19092151-8d9a-4ba2-8f45-599882a7981e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5859aae2-d48d-46d0-91e7-c9b2944db225",
        "cursor": {
          "ref": "048d1a16-0191-4b75-89ac-d47be8a99b18",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ebc9f5ce-65da-4f9a-bd8f-34fcfd7de3e9"
        },
        "item": {
          "id": "5859aae2-d48d-46d0-91e7-c9b2944db225",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f4eeb0fb-b24c-4917-9ffe-000c39540d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5aa49d-ef4f-4b62-a9d3-72771ca9866b",
        "cursor": {
          "ref": "085d4998-8b5e-4769-a85a-e30739c553a8",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5678c8a2-de13-427b-8dc9-e94183f793e6"
        },
        "item": {
          "id": "7d5aa49d-ef4f-4b62-a9d3-72771ca9866b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f674b23e-2c92-4fc6-af90-34360b446727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8576a6f7-688f-4163-9536-425f8ed0d16d",
        "cursor": {
          "ref": "17038919-d129-4764-ac82-6a8f1fbfd042",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b65f9af1-5655-4705-8512-ea6f598bf038"
        },
        "item": {
          "id": "8576a6f7-688f-4163-9536-425f8ed0d16d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f69b113b-fb8f-4c78-be9a-766cbcc7b779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19384608-fc81-4f00-96dd-5474dab95417",
        "cursor": {
          "ref": "8518c3da-8542-4a33-b776-2a997221a6cb",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1f700a53-6f58-4f6f-87ff-42241b04c480"
        },
        "item": {
          "id": "19384608-fc81-4f00-96dd-5474dab95417",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "26d489d7-bbde-4389-8523-b530a4537a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d795ec4d-ddf1-48dd-b615-64db184b4f1d",
        "cursor": {
          "ref": "a5f253b4-b6e7-4691-a732-de539e83702d",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1baf6ca9-49f9-4e66-875f-e85a50b8144e"
        },
        "item": {
          "id": "d795ec4d-ddf1-48dd-b615-64db184b4f1d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "73e7000f-e6da-438b-beab-bc4e3c96b9b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7015a0b0-4e34-46f1-a68c-5c7cafced930",
        "cursor": {
          "ref": "6d107f53-1dcc-48ad-a603-177b7e061298",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a276a549-c904-43dc-bcd3-a4c3943a7234"
        },
        "item": {
          "id": "7015a0b0-4e34-46f1-a68c-5c7cafced930",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "eac2ac38-8925-4cb5-9d14-6005ac37e534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1525e75b-899b-4227-b7d6-1a714c3045c4",
        "cursor": {
          "ref": "7e912e3f-c8cc-476e-af74-25404aa0acac",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "49e157e1-cf5c-4643-a832-8c6111455d50"
        },
        "item": {
          "id": "1525e75b-899b-4227-b7d6-1a714c3045c4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "53c76bd8-f9ff-4765-a672-c2e27d300f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63c1a4f-b7fc-4dc0-ab45-47aefb182cad",
        "cursor": {
          "ref": "9bdc1592-5dba-4539-a3c3-21e5009255d2",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e3d5640a-f4ec-4d17-b7af-468733331f98"
        },
        "item": {
          "id": "b63c1a4f-b7fc-4dc0-ab45-47aefb182cad",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "15fb6e59-e192-4370-8c71-bd0222f0a148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec495476-3340-4686-8318-ec0cb34c41b0",
        "cursor": {
          "ref": "bfdb5156-975a-47c0-9b8f-a6a6b1bb2c14",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "291e88ea-631e-4964-84d1-c8c56cf75208"
        },
        "item": {
          "id": "ec495476-3340-4686-8318-ec0cb34c41b0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a4611971-274e-4dcf-9625-c339facbcf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca59a59d-6b89-40bf-a5d0-8c1f6eafc2fc",
        "cursor": {
          "ref": "ccc5ff49-40b7-4ef8-865a-6c3420943529",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4cab063e-e301-4f8c-a889-a4b41d48f0e9"
        },
        "item": {
          "id": "ca59a59d-6b89-40bf-a5d0-8c1f6eafc2fc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2c84b33d-8406-4a72-94e6-0f2dfdf8b692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b106df-456a-4151-b0df-9825b58843b3",
        "cursor": {
          "ref": "d45a51d1-39a7-4820-970d-d5ba05bd3298",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c582f5d2-ef17-45ab-b812-fce6cbcdf6b3"
        },
        "item": {
          "id": "71b106df-456a-4151-b0df-9825b58843b3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7f75b7f1-14dc-44e8-9aee-1498e19b0b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc8df60-dfac-4f21-8d6e-fa97c6cd4fb5",
        "cursor": {
          "ref": "81d051be-9092-4b01-9dfd-ee03f37e7478",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cce9a4aa-9aa9-4d98-975e-bae8a7ee0dbc"
        },
        "item": {
          "id": "8bc8df60-dfac-4f21-8d6e-fa97c6cd4fb5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "50ede0e9-f25e-4a55-8d06-0da98db3d0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20380cf5-47cb-4d71-87f0-04673078bc1d",
        "cursor": {
          "ref": "0813d623-8e9c-43a7-824b-cfbc04b3c44e",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "27be670a-7cde-4525-b196-f2e699f03110"
        },
        "item": {
          "id": "20380cf5-47cb-4d71-87f0-04673078bc1d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "78ac90e3-74ee-4343-9459-abad3faf4699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c916bdb-ccfb-4d4b-8a44-69eab9200eb4",
        "cursor": {
          "ref": "2457519c-6efe-4ffd-a5ba-f3c1faab98f1",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7ef29cf4-ecc5-48a8-87f9-1c07aed96fe0"
        },
        "item": {
          "id": "0c916bdb-ccfb-4d4b-8a44-69eab9200eb4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a027f2ec-567a-441e-9a57-e0b1298188e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830f0cbc-5f3f-4ac7-8407-af478a3428ab",
        "cursor": {
          "ref": "6786d4a2-7c68-4ddf-ac65-ac537e0a178a",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3c29e6b4-7372-42b9-9e79-eb848fe7e4de"
        },
        "item": {
          "id": "830f0cbc-5f3f-4ac7-8407-af478a3428ab",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c4955a98-2eec-43c0-aed0-1ad4b53a5b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42467b88-de8e-43fe-8cfa-4c1d1779472b",
        "cursor": {
          "ref": "1b3848e2-b2c4-4ca5-8731-6d148a85d1dc",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "78797d24-0ab9-4b04-8d43-fe981ee0f1bf"
        },
        "item": {
          "id": "42467b88-de8e-43fe-8cfa-4c1d1779472b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ba31759c-6102-4628-80ac-be42ae52e38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999afe03-8d9f-40b0-8a33-47523ee95cbb",
        "cursor": {
          "ref": "03f35b97-4b57-4ef2-be35-c3a6f0b39809",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "287ec3df-95c2-4b89-ae71-684dedfd824b"
        },
        "item": {
          "id": "999afe03-8d9f-40b0-8a33-47523ee95cbb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0f1ae83e-7772-4a3f-9a9c-ea8f3d7aeb6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f37652d-532d-400f-aaa9-d300acdf2cab",
        "cursor": {
          "ref": "e8e79bdd-7d7c-45cc-bc58-03a44ff04e76",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "43553b0c-2d63-49c6-b4a0-91d238c92268"
        },
        "item": {
          "id": "6f37652d-532d-400f-aaa9-d300acdf2cab",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8ec5c5c6-fc41-4d22-9f7d-74a17c2c7c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ec5874-09db-41d5-bcf0-6ee2b1e8add3",
        "cursor": {
          "ref": "af4f85e7-0dec-4683-ae95-8e4d10dcd159",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "aa22e02b-7306-40d0-9728-2a3e5fbe19d9"
        },
        "item": {
          "id": "52ec5874-09db-41d5-bcf0-6ee2b1e8add3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "970e3a7c-b6b8-418b-a151-8ac826710aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 366,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a2f8ca-e5fb-4119-bc69-c78cb1830bed",
        "cursor": {
          "ref": "aafd8c38-ca97-4e85-936f-d7a07f205176",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "275b822a-6aee-4489-bf15-87305abb5a26"
        },
        "item": {
          "id": "e6a2f8ca-e5fb-4119-bc69-c78cb1830bed",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "756854f6-6467-430c-bec3-da43de3d00cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa22bad-13a6-45d6-b029-e960a8006f3b",
        "cursor": {
          "ref": "74d850d9-810f-4f4d-a99e-e774e5e96a96",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e9aeeae9-b22c-407e-a06e-a06f1ffafbbd"
        },
        "item": {
          "id": "cfa22bad-13a6-45d6-b029-e960a8006f3b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b8c867fa-10a5-487b-b769-5003c81fb799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4059f5ec-8e23-4b4f-9739-9e2a829fab50",
        "cursor": {
          "ref": "cf4d84a4-9f82-4bf2-a133-9e06513dcedc",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f3ab24c8-d97d-4269-9d5a-d6a0af7b07be"
        },
        "item": {
          "id": "4059f5ec-8e23-4b4f-9739-9e2a829fab50",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1aaf596b-dba9-44e6-bede-acb4b43eecb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455f0a48-dc4f-4e18-b65e-c9f564a9f0ce",
        "cursor": {
          "ref": "48f183ba-d7b8-46c1-a9be-6b3fb9b7e53c",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9e9f4946-7cfd-4ab7-b832-d1d342348e0f"
        },
        "item": {
          "id": "455f0a48-dc4f-4e18-b65e-c9f564a9f0ce",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c801e46e-d2a0-4a7c-b223-7e8d1654cb76",
          "status": "Created",
          "code": 201,
          "responseTime": 737,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "94a1cb85-f5c0-4946-9b56-98cf7c91be81",
        "cursor": {
          "ref": "03142765-8f31-4735-898f-25361ece8a48",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2b1ae7f0-cad7-4930-803d-52057bb6eaad"
        },
        "item": {
          "id": "94a1cb85-f5c0-4946-9b56-98cf7c91be81",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "dc32a833-46d2-4222-aec4-5caaa6f92126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b663fb9-08dd-47e7-9614-a7ed64dec5b9",
        "cursor": {
          "ref": "4a39856e-830b-4e62-9304-85ad1a0eb6bb",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "14ca7e08-0725-480e-a54d-16e280a7637d"
        },
        "item": {
          "id": "2b663fb9-08dd-47e7-9614-a7ed64dec5b9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7aefd476-f805-4fed-a37b-7f4fa7830d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10185f92-6c2a-45d2-9f02-e99f42c80db5",
        "cursor": {
          "ref": "ca920c76-d492-4221-a5a8-906aea561879",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "72edf1e0-713a-4540-88e0-8d2e48181a0f"
        },
        "item": {
          "id": "10185f92-6c2a-45d2-9f02-e99f42c80db5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8e319d08-00a4-40ac-9b61-47ddb43cae20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11b41c2-ab7b-4405-a720-ed93fd4051bf",
        "cursor": {
          "ref": "5d67d0f7-fe43-4efc-a77c-1de06f91bc58",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "78d50bf4-b2d0-4046-91d2-e4e6104ce7bf"
        },
        "item": {
          "id": "b11b41c2-ab7b-4405-a720-ed93fd4051bf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7b6c7ffd-32fa-4116-aeac-a0b2aaf92baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e73345-92fb-41fa-a5fb-e73d857e3974",
        "cursor": {
          "ref": "fcb5acf7-c40b-4ec6-8a1f-8d8615449737",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9bdfd58e-a217-4c76-9898-c61f39e3815e"
        },
        "item": {
          "id": "a8e73345-92fb-41fa-a5fb-e73d857e3974",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3f67204a-cf7d-453a-8eef-08307be463ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4165f7ae-5920-4165-a1e8-71f2913f909e",
        "cursor": {
          "ref": "75a62db2-a3e1-4318-b8b5-fcb2989ba3ce",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8e071b82-82e8-47df-8b06-4164cd272bce"
        },
        "item": {
          "id": "4165f7ae-5920-4165-a1e8-71f2913f909e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b2d8b4c3-2ded-4130-a82b-f89b67e1a255",
          "status": "Created",
          "code": 201,
          "responseTime": 746,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "eba0d0a0-4094-471d-9682-fde7b826fd03",
        "cursor": {
          "ref": "65085a0a-84a8-4a73-9883-f7218b7ecbe2",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b4a31668-5667-42f2-9c51-0c75af80d7c8"
        },
        "item": {
          "id": "eba0d0a0-4094-471d-9682-fde7b826fd03",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "83d03576-7a5d-4f2b-8384-384e666ee163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764d3791-3123-4fb0-997d-cbcae78ad66d",
        "cursor": {
          "ref": "a11351e5-96b2-4c79-a2e0-1d309a71a85d",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2908f9fb-1cc8-48b1-abe6-18076265aed5"
        },
        "item": {
          "id": "764d3791-3123-4fb0-997d-cbcae78ad66d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "93154cd7-393d-44ee-ab61-361b21d9af9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3274f36-1bce-48ea-8a7a-acf93c319fe3",
        "cursor": {
          "ref": "f60678d3-3c62-4233-94b5-c4e2984db910",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8bf6d98a-29d1-43f3-9744-8a1241499e83"
        },
        "item": {
          "id": "e3274f36-1bce-48ea-8a7a-acf93c319fe3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cc1ff87b-6c4e-4913-adc2-4507e9d2efd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a71b2d-0ab6-4f4e-a49b-eeaea9e08de8",
        "cursor": {
          "ref": "95014653-577a-4501-9606-03ae2fce654b",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e627be10-e7e6-4239-9aee-35812f192738"
        },
        "item": {
          "id": "a4a71b2d-0ab6-4f4e-a49b-eeaea9e08de8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9892bf12-0587-4270-b90c-27dbd715683c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8dcfe3-ee67-4a52-9994-ace7076161f7",
        "cursor": {
          "ref": "4b32d5ed-86bd-4e82-bc0f-aa81a0efda56",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "92954fdb-546b-4806-8345-47d7dce8107e"
        },
        "item": {
          "id": "8f8dcfe3-ee67-4a52-9994-ace7076161f7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "23381db8-cf37-42bd-88bd-8709a0b05802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90aa908a-6135-4fa4-9fd7-7ca3844abdf6",
        "cursor": {
          "ref": "981fc1ca-4394-4b2a-8dc4-932c5234e3c3",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7c41109f-d3a5-4799-83a1-fc898e93ad82"
        },
        "item": {
          "id": "90aa908a-6135-4fa4-9fd7-7ca3844abdf6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4213f7ef-6e9c-47e8-be0a-ca0d7f390603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f36f53-703e-426f-9ed8-5fa249ddb93f",
        "cursor": {
          "ref": "f02e7a08-fd7c-4591-aa88-0a22f8148113",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b88e062f-db06-4773-a43f-4f3fb7bf251a"
        },
        "item": {
          "id": "d6f36f53-703e-426f-9ed8-5fa249ddb93f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "782e2c9f-c0da-4e81-b205-b01e93201862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab231cd-2d23-4901-9ac2-03cdc428f378",
        "cursor": {
          "ref": "4ebb4229-97d9-4400-a242-940c290713f6",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "85f3ae6e-cfbc-4bd7-a717-79530886cd4a"
        },
        "item": {
          "id": "aab231cd-2d23-4901-9ac2-03cdc428f378",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3218491e-7668-4571-8b15-94006478756a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c86e87f-aa4b-4929-bb5c-ab66624a80a0",
        "cursor": {
          "ref": "48b89a5a-6374-4c1f-90a3-3df6fe6f01bc",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "112300d2-8404-4fd0-935c-47c98fc05693"
        },
        "item": {
          "id": "4c86e87f-aa4b-4929-bb5c-ab66624a80a0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2078a2a3-1ca7-4148-912a-21fc95676f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "756a1373-9b0c-406d-b98a-d0a78df06c3c",
        "cursor": {
          "ref": "657f5421-74ab-4578-b9a1-443cd67f332a",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "919fa4a5-d23a-4682-8c20-9a67522bff2f"
        },
        "item": {
          "id": "756a1373-9b0c-406d-b98a-d0a78df06c3c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "112b70ec-ff57-430d-bde8-1858f3b22c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "adaf4830-c71f-4078-a4e6-9e0ce5df8c9d",
        "cursor": {
          "ref": "784b59da-55fa-4fe6-b3dc-bac0112435c4",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fe25a280-1227-47b5-9b70-900c273aca45"
        },
        "item": {
          "id": "adaf4830-c71f-4078-a4e6-9e0ce5df8c9d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "232d2ca0-27cf-4cba-8685-b7ec87eb9498",
          "status": "Created",
          "code": 201,
          "responseTime": 643,
          "responseSize": 723
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "af455971-c4bb-4a3c-ab81-fc3b89c1a29a",
        "cursor": {
          "ref": "88028595-93e2-4e13-b145-e8efe01e77d0",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "261b25b8-e018-4fc8-81ab-c6fba1f1ba7e"
        },
        "item": {
          "id": "af455971-c4bb-4a3c-ab81-fc3b89c1a29a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "069c49b8-2db5-491d-85ea-566028be5e2b",
          "status": "Created",
          "code": 201,
          "responseTime": 673,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "751c2608-377b-47ed-bb85-09de197f0258",
        "cursor": {
          "ref": "0244f622-61e2-46f9-bb13-d3db32d9c04f",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a42866c8-e079-4573-ae41-464254d99413"
        },
        "item": {
          "id": "751c2608-377b-47ed-bb85-09de197f0258",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3208d201-d626-4443-b6cd-c8ec5fe74089",
          "status": "Created",
          "code": 201,
          "responseTime": 704,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3d00a2-7f1f-487c-bc6e-8dda05afff96",
        "cursor": {
          "ref": "de18dffa-6719-4a4d-909e-f20e7ffeaaad",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e07295ea-4f20-4286-a4a0-2c3993b6edeb"
        },
        "item": {
          "id": "dc3d00a2-7f1f-487c-bc6e-8dda05afff96",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "db8a53f0-4a36-4676-8820-86e03a3ccbb7",
          "status": "Created",
          "code": 201,
          "responseTime": 644,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddf7729-9b24-4495-af30-3f2de4dfb26e",
        "cursor": {
          "ref": "86eb5fa1-fe2b-4b37-912b-a7a5e58b3659",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "10896062-4a53-4345-90be-76b795898848"
        },
        "item": {
          "id": "9ddf7729-9b24-4495-af30-3f2de4dfb26e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "11f45e6d-c0cd-45ef-ba4b-28be1fc2f807",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25afb6f-7362-4618-86d2-364dddc75a3f",
        "cursor": {
          "ref": "feee60f9-eed0-4807-97f9-a1333b4cae1a",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3dbdc4e8-a1f4-4fcb-a522-ce30431c2054"
        },
        "item": {
          "id": "d25afb6f-7362-4618-86d2-364dddc75a3f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "92805ce8-b4d7-4de3-a5c9-b978ac81aed5",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "d25afb6f-7362-4618-86d2-364dddc75a3f",
        "cursor": {
          "ref": "feee60f9-eed0-4807-97f9-a1333b4cae1a",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3dbdc4e8-a1f4-4fcb-a522-ce30431c2054"
        },
        "item": {
          "id": "d25afb6f-7362-4618-86d2-364dddc75a3f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "92805ce8-b4d7-4de3-a5c9-b978ac81aed5",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "a00085b7-2a87-47ee-877f-a0ad69f70ad4",
        "cursor": {
          "ref": "b50b55e1-03bd-4caf-bb8b-029e23ab89d4",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "03067dd5-0ef6-46e1-9c74-88509761aa68"
        },
        "item": {
          "id": "a00085b7-2a87-47ee-877f-a0ad69f70ad4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3173db34-62d7-44bb-8c66-c799547a7a06",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "55409c89-1a37-48fd-83e0-bdeb75d9993e",
        "cursor": {
          "ref": "57d15ff4-c2ce-4fad-937d-1f2a1e5979f6",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "060baaa5-c208-4b80-9055-2077f64d556e"
        },
        "item": {
          "id": "55409c89-1a37-48fd-83e0-bdeb75d9993e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "36c43a4d-bcc5-4741-92f3-017a76e9b24e",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4aeefc4e-13da-4ea2-b91d-a733dca4256d",
        "cursor": {
          "ref": "d568a0b1-974f-40fb-b18d-bfc2450e5c87",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a269e64f-d6c6-4fc6-b6bf-a98c991015fa"
        },
        "item": {
          "id": "4aeefc4e-13da-4ea2-b91d-a733dca4256d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ffddac2c-548f-4809-b35a-c676e73c138b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "712d46ba-5aa2-4ce0-a1d1-a182c7f15a4b",
        "cursor": {
          "ref": "1853b5bb-6b66-43d1-8eeb-26ea8a2da048",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "47a9258f-89e8-4c4a-a581-cb528fb8c6a4"
        },
        "item": {
          "id": "712d46ba-5aa2-4ce0-a1d1-a182c7f15a4b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0d8ab757-e2e0-4c8f-94b4-992e2bfe7710",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0e3f35fc-4ba5-4851-9011-994994fa57f3",
        "cursor": {
          "ref": "f375ef87-24d9-432c-b8ec-08b77594f5c1",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "37903ad2-c955-42c1-9c0e-d003e3bdac5d"
        },
        "item": {
          "id": "0e3f35fc-4ba5-4851-9011-994994fa57f3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1b604eb9-6a66-4a48-9634-ef398df00002",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "3ba35ab1-8a51-4c7f-82d5-60021f34befd",
        "cursor": {
          "ref": "a92a54be-4d86-4821-bce7-3f19c85ef2ca",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "62e991e2-548d-4040-bc3a-627b249b8307"
        },
        "item": {
          "id": "3ba35ab1-8a51-4c7f-82d5-60021f34befd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3c37e8c2-b3e6-4684-8090-e3aa9d5c9274",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "863cb5b6-1860-475a-a143-b84e7618eb6a",
        "cursor": {
          "ref": "155bffbb-f8e7-48a6-9e4b-748042eefaf1",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2300bd25-7a67-4180-b87b-73919ecd40bc"
        },
        "item": {
          "id": "863cb5b6-1860-475a-a143-b84e7618eb6a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1c6b31b3-e6f3-4f33-a79b-cb084d797e42",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9f2dd355-ea90-4a5b-b808-0bae956f4605",
        "cursor": {
          "ref": "765a2cea-8f51-4f2f-8d45-6aa467e7900c",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "10761626-3894-4206-98b8-b9137d848b62"
        },
        "item": {
          "id": "9f2dd355-ea90-4a5b-b808-0bae956f4605",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b9c00b2b-dc2c-4bac-a20c-5fb417f64ddd",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "482f5734-292c-419f-bcd3-e38468761a15",
        "cursor": {
          "ref": "275b761d-e5b2-4061-a1de-2b71307aca32",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "30773a29-74de-4940-9a1b-0e6fa98c04aa"
        },
        "item": {
          "id": "482f5734-292c-419f-bcd3-e38468761a15",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "89885c1e-0be4-46c1-abe9-a3d92064023a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "74baf977-23dd-4d4a-868d-9ed824935ed5",
        "cursor": {
          "ref": "59f1999f-9efb-4c40-9b0b-4674d2f290f1",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "74638b19-b7a6-430d-be87-a0657bbe5cd3"
        },
        "item": {
          "id": "74baf977-23dd-4d4a-868d-9ed824935ed5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "056ac189-87d8-41c7-acf2-22693bedf7e6",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "8633c2e1-636d-46f5-9d31-157cbb33f3ad",
        "cursor": {
          "ref": "f1f45be6-3273-4ecc-8bf2-47fb653dbbd0",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5f383a5b-2fc1-42ff-ad94-d47246d68767"
        },
        "item": {
          "id": "8633c2e1-636d-46f5-9d31-157cbb33f3ad",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2db0854f-8a34-4874-9846-dfdd95daaa02",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ae94d14e-257b-46d3-9bb5-a56be833d988",
        "cursor": {
          "ref": "7948a284-03ea-4502-96d8-c5ecdf646838",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e2a502fe-99d8-4cdc-94f9-8d553ab359b6"
        },
        "item": {
          "id": "ae94d14e-257b-46d3-9bb5-a56be833d988",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4e7489e4-3917-4044-a7ab-623681f0cb6e",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "84bca18d-545d-49ca-91e5-91cfadc12347",
        "cursor": {
          "ref": "da7704f5-d474-40ff-ab68-e07e1d744d6f",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5ab7e3b5-37f9-48a6-a2e6-c53102dfb966"
        },
        "item": {
          "id": "84bca18d-545d-49ca-91e5-91cfadc12347",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "09a2add3-15a6-4088-8a82-ee456da91848",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "004ac4df-faf5-497c-9c07-558bfeef0725",
        "cursor": {
          "ref": "4fea121d-c26b-42cc-b379-3b04efd45b25",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fc65bb1d-4280-4db4-b518-21805f5bf5ab"
        },
        "item": {
          "id": "004ac4df-faf5-497c-9c07-558bfeef0725",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ef91d569-1473-4d9b-b7be-034bfbe1ceba",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "4269dbc8-2c63-4d20-9e2b-b0670e61322b",
        "cursor": {
          "ref": "ff571e99-d419-439e-9f3e-e5973e59144e",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a4e0c4de-0f9f-40ed-a3f6-c6fd1eae83a1"
        },
        "item": {
          "id": "4269dbc8-2c63-4d20-9e2b-b0670e61322b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0bcf774c-6916-4a5b-9690-ca7b37d9d353",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "bb449854-5dd6-4fd6-be7e-9276aef5581b",
        "cursor": {
          "ref": "35886aa9-88d2-4130-90bc-59a107220856",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "da573cd7-9ecb-4530-92b9-8921d12b8ff5"
        },
        "item": {
          "id": "bb449854-5dd6-4fd6-be7e-9276aef5581b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "25ea30f3-c662-412b-831e-a61945b36305",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "02982122-7d28-4d35-b411-0cee393dcd78",
        "cursor": {
          "ref": "bd854243-68f5-4162-a9d1-0731bced12ff",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a97862dd-946c-47bb-8066-b5955d199a0f"
        },
        "item": {
          "id": "02982122-7d28-4d35-b411-0cee393dcd78",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "70c174c8-59da-43e4-89cb-8e7c2fa1be78",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "adb1d2dd-09ac-465e-b04e-807d4e6dc449",
        "cursor": {
          "ref": "3714a5a3-e3f5-410a-bdf0-06b90dc72030",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0883679f-7052-4795-ba3b-a48642923d89"
        },
        "item": {
          "id": "adb1d2dd-09ac-465e-b04e-807d4e6dc449",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5e048448-1197-4bf1-9e47-e18b0cc5a77f",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9f669442-79c2-4a30-b8ff-e8b6509586ad",
        "cursor": {
          "ref": "0d2fef8c-ecc7-4d88-8e33-5f1d684db176",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "45938b96-bcc8-4000-9c63-af60c18f10ba"
        },
        "item": {
          "id": "9f669442-79c2-4a30-b8ff-e8b6509586ad",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8663e419-6ba5-43a4-9e7f-edfb79d8e963",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "46e1502e-d3e8-496d-b600-6fc4647355e5",
        "cursor": {
          "ref": "30b2ac1f-5938-41c1-8a85-5f045bdadc9a",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "df107b7e-7b55-4106-b5b5-5f7392e0641b"
        },
        "item": {
          "id": "46e1502e-d3e8-496d-b600-6fc4647355e5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "714c38e1-ea5a-476e-886a-ca34d7dd8efd",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "812bb02d-77ba-4f2e-8872-3e14ebe159dd",
        "cursor": {
          "ref": "908089b7-73ef-4b77-a114-d0946b66c3ce",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0f8ba3cc-43ae-481f-bf9c-802b614e7271"
        },
        "item": {
          "id": "812bb02d-77ba-4f2e-8872-3e14ebe159dd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7a1e4ce1-4ea9-4236-94a5-f13164d667f1",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "0cba2f98-ae4e-42fb-b9d0-a29fa984f8ba",
        "cursor": {
          "ref": "e77c43e4-38bf-44e7-88c8-ad58d5803448",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cfd101a3-a6b2-46c8-88bd-2260981419d0"
        },
        "item": {
          "id": "0cba2f98-ae4e-42fb-b9d0-a29fa984f8ba",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "64471d4b-740d-4d02-9c7a-789e69fbef01",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "436c91eb-2d8f-4cb3-8c3b-34d4cdb2a222",
        "cursor": {
          "ref": "2387a077-8844-40ee-b404-23603bade6c8",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "178d168e-00a8-4eee-93a7-c16d6280b097"
        },
        "item": {
          "id": "436c91eb-2d8f-4cb3-8c3b-34d4cdb2a222",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d54dc442-53e9-49a5-9bd1-17a70079ea6f",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "6a896f38-3d18-4760-84a0-81ebc549bcdd",
        "cursor": {
          "ref": "5b0f54a2-56b2-48e3-b1d2-c8dcaa6b8f63",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "65f238ef-f659-4dcd-bc43-fc7c3c39de7c"
        },
        "item": {
          "id": "6a896f38-3d18-4760-84a0-81ebc549bcdd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6af2a6fd-f7d1-43b3-8820-97824a9fb2bb",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "3d3062ef-bfed-46a0-bce1-43de5d14cb0e",
        "cursor": {
          "ref": "dd57400f-bdd2-43b8-b6c3-c0b9cd47127e",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4c0dd185-85b8-4cc4-99ed-9e4c4c3df0c1"
        },
        "item": {
          "id": "3d3062ef-bfed-46a0-bce1-43de5d14cb0e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "90b0b2ac-4678-4036-a3c9-c3de00697e18",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "314e3c46-699a-4241-a7e1-ebd166d76769",
        "cursor": {
          "ref": "32cb5e70-8923-4345-981d-19d79bcd0ad6",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6dd0c310-10d6-4aa4-93a9-e9e617156068"
        },
        "item": {
          "id": "314e3c46-699a-4241-a7e1-ebd166d76769",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e031d0bf-00af-40a7-8338-4e8b9591e437",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "4a4a2413-691d-40d7-b69f-0199793f4626",
        "cursor": {
          "ref": "8d9a9039-6b04-4203-88c1-f6517c39b1af",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4eed982e-6c4b-4789-9306-5d35f8140fc0"
        },
        "item": {
          "id": "4a4a2413-691d-40d7-b69f-0199793f4626",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ed4abfdf-812a-4aaa-991f-80210e513451",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "0cd2c0c9-f601-4f46-9706-bfe4e7e24831",
        "cursor": {
          "ref": "9eae348e-51af-44dc-8008-80565c355d1e",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "29ed1547-d136-4fe6-af46-df1a8f0c7fd1"
        },
        "item": {
          "id": "0cd2c0c9-f601-4f46-9706-bfe4e7e24831",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "14ee1717-dff4-41a6-ac3f-89905886d109",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "2c009a38-3712-43af-9ea0-a66d247526ae",
        "cursor": {
          "ref": "6205c2d9-749d-4dba-a333-ce9e39e25b79",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5e2c1ae1-22cc-4298-bbc8-d54de1a8ab74"
        },
        "item": {
          "id": "2c009a38-3712-43af-9ea0-a66d247526ae",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4ee23418-d27e-4539-a35e-45c341dfae51",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "743148fe-1173-4698-86ca-32ecdf22c47f",
        "cursor": {
          "ref": "de486d3d-8195-4650-b07c-96d789eb0118",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7648122d-7cae-4f32-975e-b80341262c19"
        },
        "item": {
          "id": "743148fe-1173-4698-86ca-32ecdf22c47f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "500224f8-ec4f-426b-8da5-58aa271f52ad",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5aa8cc85-9bbf-40a8-a4ca-6a0b2e73123a",
        "cursor": {
          "ref": "d488ab81-4e2d-4896-b05b-399ee5b05fa5",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8d93b55b-b0d4-4c84-9e4a-7883951042dc"
        },
        "item": {
          "id": "5aa8cc85-9bbf-40a8-a4ca-6a0b2e73123a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "47c542bc-bb3e-49eb-8c59-7da806609b2c",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "02466873-fbcb-45a7-9eb3-61052eddba92",
        "cursor": {
          "ref": "d77d5209-57a8-475d-9047-f32e9e5ff4fd",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1c6ccb8d-305b-49c0-a416-ee25913f03a8"
        },
        "item": {
          "id": "02466873-fbcb-45a7-9eb3-61052eddba92",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "15dee608-614f-491c-bc28-1f2b44d6331c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e185c22-208d-42d4-8745-14d707f334e0",
        "cursor": {
          "ref": "4d279a4a-53f9-484d-ba00-b419d8e12e39",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fc4ed118-5cb6-4ccf-9ac5-7752a378a882"
        },
        "item": {
          "id": "4e185c22-208d-42d4-8745-14d707f334e0",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6bb42d9a-5363-42c2-a6be-39dc5a46ee70",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcbfda0c-0829-42dd-a0e9-78d5600c992a",
        "cursor": {
          "ref": "b0ca0e30-2a67-4336-88d9-28b0fda1e971",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7bfb49e4-0104-402d-bb83-ef37bb063055"
        },
        "item": {
          "id": "bcbfda0c-0829-42dd-a0e9-78d5600c992a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c6ca038b-e634-4cb2-903c-22a743305cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcbfda0c-0829-42dd-a0e9-78d5600c992a",
        "cursor": {
          "ref": "b0ca0e30-2a67-4336-88d9-28b0fda1e971",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7bfb49e4-0104-402d-bb83-ef37bb063055"
        },
        "item": {
          "id": "bcbfda0c-0829-42dd-a0e9-78d5600c992a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c6ca038b-e634-4cb2-903c-22a743305cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e3de79-1221-4e90-baa0-7198b61786af",
        "cursor": {
          "ref": "77897cc7-a5e1-4aee-bce8-c6a4f38b0860",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "26f3dd88-c54e-4f74-b1b3-a77e740e18ca"
        },
        "item": {
          "id": "05e3de79-1221-4e90-baa0-7198b61786af",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ca6c4fb7-4ac3-4820-9fef-1464c3b7b356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d7dbce-fe28-4fc8-9a31-301441542a1f",
        "cursor": {
          "ref": "fcf87a82-df89-4276-8073-0f614378618e",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "65fa2aaa-341b-4c53-9f06-28b91fb0107a"
        },
        "item": {
          "id": "95d7dbce-fe28-4fc8-9a31-301441542a1f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a9023c80-16a9-4901-ac1c-44ae30d5d0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72126f71-1bcd-4d05-b1aa-1df615554ba9",
        "cursor": {
          "ref": "ca5358eb-0f31-428f-b163-c9b083a55903",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "dcb8a80f-60aa-4952-bf40-eee43670ac87"
        },
        "item": {
          "id": "72126f71-1bcd-4d05-b1aa-1df615554ba9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7de2d740-11f2-4e3a-be5f-9cacc78145c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a803ceb-4681-402e-a1d0-cba08871fa0c",
        "cursor": {
          "ref": "5b898f6b-9aa5-43a0-9634-dc7385e6f9c1",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "68ca88d9-c432-462e-9bcd-63941106a83d"
        },
        "item": {
          "id": "6a803ceb-4681-402e-a1d0-cba08871fa0c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "97cb5635-9896-42bc-abbe-9324d4a77cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba93d730-9aa8-4992-a0cf-4185b6e62370",
        "cursor": {
          "ref": "d84b539b-f0c8-4150-baa9-60fe7a88fbd8",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b01e9999-d9b7-4455-8700-d6e49754c8d5"
        },
        "item": {
          "id": "ba93d730-9aa8-4992-a0cf-4185b6e62370",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "af90eb70-930a-4b9d-b282-dd162eb7c0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5b1ec4-a335-4d98-99ed-b668382c0047",
        "cursor": {
          "ref": "68ea766a-5a41-4e19-a4c5-d8f238616482",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "89cb1568-260d-416d-ab02-d030f89f9d91"
        },
        "item": {
          "id": "4c5b1ec4-a335-4d98-99ed-b668382c0047",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "124b02b4-721c-41a0-a867-70b8fee360e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891cf65f-de05-4564-a334-c40261c2daf0",
        "cursor": {
          "ref": "1e544542-38d5-448d-b3dc-0e687288443c",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ae6cb434-e9be-45b4-b769-79d6214e9d4c"
        },
        "item": {
          "id": "891cf65f-de05-4564-a334-c40261c2daf0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "16a1e030-1bac-4ab8-ba77-c1c9638d2e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cc5bbf-ea28-45a0-a239-bbb69f769a08",
        "cursor": {
          "ref": "a1a220ac-2f7a-472c-a9e1-47f75e7ad7ff",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "60bf008a-89d3-4f03-83ce-42b166bfd744"
        },
        "item": {
          "id": "d1cc5bbf-ea28-45a0-a239-bbb69f769a08",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bc8e7aab-3001-462e-83fa-2131d85586ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cffefc9-645b-4d2f-830f-a86dbb2c2f99",
        "cursor": {
          "ref": "e3392c26-503d-4d3b-8e27-0f679a50d9d5",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a9537b14-8881-48df-85d3-bbd397005248"
        },
        "item": {
          "id": "1cffefc9-645b-4d2f-830f-a86dbb2c2f99",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8fe85d3a-d3ae-428a-b983-bcfaf4ca2dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784321e6-976c-48a7-bd1a-2af0cf753d9b",
        "cursor": {
          "ref": "8f23f67c-1c79-46ac-a348-c90563ed8f2b",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "79fee043-c467-4343-ba9f-71bf1dfb5a0b"
        },
        "item": {
          "id": "784321e6-976c-48a7-bd1a-2af0cf753d9b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "25697786-ec9a-4abc-805f-2c11510f7b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c0f00d-447d-46c3-ba35-9b1160ca62c0",
        "cursor": {
          "ref": "babcf5b2-324f-43f5-b2cd-92d6fd568144",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fbc2c803-6513-49dc-a9a2-7cdb6079fbce"
        },
        "item": {
          "id": "48c0f00d-447d-46c3-ba35-9b1160ca62c0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4b992266-b63d-4e57-bb7e-3a70c6c2c54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859fef4a-bb01-4b3b-b85f-cab94e2ffe61",
        "cursor": {
          "ref": "dfeceb28-f167-48eb-bfc3-2ada0bbf3d23",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "07fa1b18-c433-4092-b878-bed61209e424"
        },
        "item": {
          "id": "859fef4a-bb01-4b3b-b85f-cab94e2ffe61",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b5d9b08b-be66-4051-ba6c-51cb611229bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd40de2-5a98-49fc-b75f-a1ff46d4605a",
        "cursor": {
          "ref": "37d6e480-bdff-4cca-862a-26a87a1f8018",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4d5fb640-2a37-4e08-9a7c-540c6eb12e42"
        },
        "item": {
          "id": "ccd40de2-5a98-49fc-b75f-a1ff46d4605a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1889c542-e77d-427e-ae5f-4764750be507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5666fcf7-fb70-4f1d-94fa-4924de78adea",
        "cursor": {
          "ref": "60baeef0-9aae-4cc5-a1f3-eb89f9994962",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bd5570e1-8fff-488d-81da-46276ca80895"
        },
        "item": {
          "id": "5666fcf7-fb70-4f1d-94fa-4924de78adea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3e0b6049-d9a9-4f71-8c20-e086281d150e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48f5595-cbb2-4824-a9b8-497b1ee51824",
        "cursor": {
          "ref": "1643cc25-14c1-4b62-a624-08df35c9a91e",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8eb1abd9-2495-49a7-a405-e0bc5bedc166"
        },
        "item": {
          "id": "f48f5595-cbb2-4824-a9b8-497b1ee51824",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e77f9554-9592-402a-9bab-cf7e7dba83d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88bbb87-2704-469f-ba40-f374b04aab23",
        "cursor": {
          "ref": "7d14f41e-f4ad-4df9-a972-bd61de89b6a9",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ea93ed7f-c7e6-466b-ba26-5206d7b2d7ac"
        },
        "item": {
          "id": "e88bbb87-2704-469f-ba40-f374b04aab23",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d44e1d90-42bc-4bb0-b430-12ff43a65cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708dc610-ade1-41d6-8ec5-cb4e1c313f16",
        "cursor": {
          "ref": "105f6c51-fe4e-42c7-bfd4-75bdf83ba0e8",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "39e1eda7-042d-47f8-83b2-c813bffe0a2d"
        },
        "item": {
          "id": "708dc610-ade1-41d6-8ec5-cb4e1c313f16",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "0adae711-2030-4a60-8286-e91aa50e9a47",
          "status": "OK",
          "code": 200,
          "responseTime": 588,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3b93c66a-0784-44cf-99c8-c82cf5cf49bf",
        "cursor": {
          "ref": "e4f65950-1357-4287-a7ad-5f51423b9ddf",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "32abd2c5-d4f9-417c-9cbd-d9f36ec07f3f"
        },
        "item": {
          "id": "3b93c66a-0784-44cf-99c8-c82cf5cf49bf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "687b06e8-5c02-4fd5-a284-2e4205eca40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffca6af-e9f0-49c5-b53c-a9badc5b0f67",
        "cursor": {
          "ref": "17593489-2baa-4fcf-8ea6-4a86a82fdf6d",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "760b902d-8dde-4bd6-87f6-6ced34896fab"
        },
        "item": {
          "id": "9ffca6af-e9f0-49c5-b53c-a9badc5b0f67",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bdd9eab4-978f-4e29-b1f5-96d3a2cd8ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d64ece-2c88-4b02-9a9f-7cc22719a108",
        "cursor": {
          "ref": "04240373-ffff-47c4-9ec4-7613ea0b0cc4",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1e91100d-68c3-4d1a-bf3a-2d0410b5fc3a"
        },
        "item": {
          "id": "e9d64ece-2c88-4b02-9a9f-7cc22719a108",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "56308d86-ca20-4ee0-9098-a1799ff761f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05668e4b-10ba-4d40-b826-32eb30bb2e5d",
        "cursor": {
          "ref": "950df50b-eacf-42a8-96b9-bfae1204e5b2",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "67c05530-9f8e-48fe-ab46-970027bf4c50"
        },
        "item": {
          "id": "05668e4b-10ba-4d40-b826-32eb30bb2e5d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "52612207-8052-470b-afdd-e804f83a5963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc70760a-8103-4ed3-9f5a-fcec794871fd",
        "cursor": {
          "ref": "8bf47810-f408-4edf-9cca-7e8ef36d2fc5",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "42111c6a-2e66-4084-aaaf-dbc5e4fc17b6"
        },
        "item": {
          "id": "bc70760a-8103-4ed3-9f5a-fcec794871fd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "84e797f2-bcfb-421f-a6f0-eec81e49e78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c2ceb0-c8da-4082-9fae-1b9f55c5ed06",
        "cursor": {
          "ref": "102296e6-ecb4-4d90-bbb0-4cec79b25a47",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4e8d4cb6-4324-41fc-9c02-f61449126ba0"
        },
        "item": {
          "id": "73c2ceb0-c8da-4082-9fae-1b9f55c5ed06",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "da8b56e5-1ec9-4adf-a6ac-a2a0878427f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1541ba00-16ab-4c7d-9aa4-2f7fad62a188",
        "cursor": {
          "ref": "44b8bc84-32e9-4380-9369-d475c297a1de",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "66d96a90-f64f-401d-a3ed-b2cd531bf8d4"
        },
        "item": {
          "id": "1541ba00-16ab-4c7d-9aa4-2f7fad62a188",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4ee26e76-d355-4d09-949f-ae665c86a76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800094ce-e26f-40b7-8823-abe5a49d66e4",
        "cursor": {
          "ref": "c85418d0-7dbe-40a1-a419-43bcbeaa936e",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "11436107-7db3-469f-9f5b-638b6066e694"
        },
        "item": {
          "id": "800094ce-e26f-40b7-8823-abe5a49d66e4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d80b233d-733f-4fed-ad36-e7d047c8201c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a4ddc1-e7ed-4626-9762-7fdf0e0825e2",
        "cursor": {
          "ref": "e8e80e72-3f8f-49bf-bce3-e2fea3ae95d4",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "db88c1bf-bf7d-4d9f-9dbc-dfa57f089b47"
        },
        "item": {
          "id": "71a4ddc1-e7ed-4626-9762-7fdf0e0825e2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7972f37b-d24c-47fd-b125-2cd6547b10f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ebc770-2825-4e67-a58a-9c5b456a2bfd",
        "cursor": {
          "ref": "83c1958c-e335-43fe-abe8-e7bcce7493ca",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "478a2608-f751-4096-a626-0cec6fc06c4d"
        },
        "item": {
          "id": "18ebc770-2825-4e67-a58a-9c5b456a2bfd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2fef8f27-bbd9-4f26-8eed-5ba370f7a10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fcc631-f25d-4e49-a4bf-0a89f2e2b0c0",
        "cursor": {
          "ref": "9f1f9731-bb27-44f9-b5f7-486824691ff6",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "805f6003-207c-4127-9100-ed2c29041333"
        },
        "item": {
          "id": "03fcc631-f25d-4e49-a4bf-0a89f2e2b0c0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8524f7df-9755-4f05-80bb-646bb53966c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2feccd70-1ad7-40a2-995c-432a5d50533a",
        "cursor": {
          "ref": "6c2dd123-ae59-4d9b-9898-292860aaf61b",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1e13a4a5-fdaf-4772-b91e-1e8c6ca1d9ac"
        },
        "item": {
          "id": "2feccd70-1ad7-40a2-995c-432a5d50533a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "edc3a70f-2e25-4c0b-a70c-9a8c00463f17",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "61de81e9-1d83-460b-a78f-1d0b3b2a7d6f",
        "cursor": {
          "ref": "6bf5d667-5c4f-428b-8b18-03a0e7f9d91c",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "84fb3aee-0e85-4e15-9498-a26c25b3b44a"
        },
        "item": {
          "id": "61de81e9-1d83-460b-a78f-1d0b3b2a7d6f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "dafb4187-0521-4d48-8eb4-81c2b0a1f839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58380c9-1fcb-4b26-a0c3-c158de42781c",
        "cursor": {
          "ref": "2a520cb0-f88a-4cac-b915-c1e6188a9661",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "df690f41-fccc-467f-a340-95cd615a4f4e"
        },
        "item": {
          "id": "b58380c9-1fcb-4b26-a0c3-c158de42781c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "aeedbafa-348b-49a9-a9e7-375f083b2894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632e3dea-53ac-414d-b127-cacffc777e0d",
        "cursor": {
          "ref": "810e320b-1b1b-46a4-afdb-61f02b13025f",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "30165c78-54fc-4894-9e35-40c9cc17c989"
        },
        "item": {
          "id": "632e3dea-53ac-414d-b127-cacffc777e0d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9a5fa291-8b70-45f2-898a-0b06e0d867d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81b2ebf-8d61-4c99-942c-15a27064c14c",
        "cursor": {
          "ref": "8e2b35cc-85c5-4cdb-90e7-174eba7f6884",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4c420dfd-0ba9-4552-bdeb-0b696a052783"
        },
        "item": {
          "id": "b81b2ebf-8d61-4c99-942c-15a27064c14c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f6e8f361-a78b-4bac-a340-fd9dc7b4e214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfcfdbf-e862-4e6e-a73b-77f494280c8f",
        "cursor": {
          "ref": "13804aee-6882-4e4f-9897-2828ee79db6e",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0c8c8fbf-3adb-47cf-a8d1-7e3416711315"
        },
        "item": {
          "id": "8cfcfdbf-e862-4e6e-a73b-77f494280c8f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6387a4d7-22de-4091-8c99-ecc772cfabcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817d67d7-930c-434d-869c-b4fb851212a3",
        "cursor": {
          "ref": "e9bdef35-4f58-4165-8e58-85b15250ef69",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ed96ae36-4946-4d6b-bcc3-f83809020d1c"
        },
        "item": {
          "id": "817d67d7-930c-434d-869c-b4fb851212a3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2e3dd7bb-ca17-4373-a0e1-14aa35d66939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9238cc8-1302-427c-af24-286261998e7b",
        "cursor": {
          "ref": "bae98079-ad96-4815-b23a-93803d91e6e2",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9313f44b-ff3c-43b3-984b-50796f921c93"
        },
        "item": {
          "id": "a9238cc8-1302-427c-af24-286261998e7b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "bafea633-4835-4618-9d3b-5c4d3a5c752a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93dd6ec6-ae5f-4e7b-836f-56b1eacecf5a",
        "cursor": {
          "ref": "60262526-5790-4ab4-98bd-055b95489180",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e43ac7f6-e64b-4250-a741-aaaec34110a1"
        },
        "item": {
          "id": "93dd6ec6-ae5f-4e7b-836f-56b1eacecf5a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "65e4b44b-8a56-4f5f-b183-9c51d046e1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251631ff-a63c-48fc-bf4f-95ee16e3c534",
        "cursor": {
          "ref": "9073cd82-5ab5-41a2-9983-3bd4576b1ded",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "81e65ad4-aee0-4037-8de1-e5138f37c18e"
        },
        "item": {
          "id": "251631ff-a63c-48fc-bf4f-95ee16e3c534",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5edad358-8d12-4236-9390-c88fbab76952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2ab2ab-72a4-46c2-bce9-fb32cab1f692",
        "cursor": {
          "ref": "6b179897-e3f2-4871-8caa-756f4ba00522",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "36c463da-86d2-4402-a8dd-9da4b636677b"
        },
        "item": {
          "id": "ab2ab2ab-72a4-46c2-bce9-fb32cab1f692",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7741db51-946a-4e60-ab96-21210f048d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 612,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34b3d3ee-be90-411c-a640-4ee68b8cc320",
        "cursor": {
          "ref": "3a9a8e95-1d69-4190-b44d-8706553e7d86",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "adcdba12-b66e-47b4-822a-36767316b44d"
        },
        "item": {
          "id": "34b3d3ee-be90-411c-a640-4ee68b8cc320",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "148872ef-14b1-43db-b1a2-d3af331a8e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa90001-7e68-4352-8bad-d45674c1d732",
        "cursor": {
          "ref": "278da2a6-5b4a-470c-82c8-6c9b5249374b",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4d6463fc-07f6-41b7-a0e7-20f5e138ac9e"
        },
        "item": {
          "id": "dfa90001-7e68-4352-8bad-d45674c1d732",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "97b4d5a8-da2a-49a3-ac32-06122218de5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0b8043-ee4c-48a9-b8e3-7c49ac764f97",
        "cursor": {
          "ref": "650cb7e8-fd0d-49ee-b1e8-a67461237696",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a9fe8f16-1977-42a5-a6b1-5465c4eefef1"
        },
        "item": {
          "id": "3b0b8043-ee4c-48a9-b8e3-7c49ac764f97",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "31da66e5-52f4-43fa-91da-bac56fba306f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d03311-7ebf-443e-8db1-8c3249f7f826",
        "cursor": {
          "ref": "1687f429-a1f7-49b7-b9a3-38ef280ca7d8",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e955b8a4-575e-4044-beee-750f734f8c30"
        },
        "item": {
          "id": "80d03311-7ebf-443e-8db1-8c3249f7f826",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f8d87df7-465b-4b61-9800-63c130648176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483a1feb-e0e2-4375-ab06-e74f51f49522",
        "cursor": {
          "ref": "16757dd4-bac3-4467-8d75-919fe84362cc",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "774fecda-87f2-49a2-a148-ca615175b50e"
        },
        "item": {
          "id": "483a1feb-e0e2-4375-ab06-e74f51f49522",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa4c5858-91d6-4308-9436-0e3675ee5770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3ff0d8-6aeb-450b-8250-56cf7eefefe9",
        "cursor": {
          "ref": "4a4c4f06-4973-47c3-9306-2621f6456426",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "36b847b2-eee7-4f7e-a0b6-997ad9344ac8"
        },
        "item": {
          "id": "1a3ff0d8-6aeb-450b-8250-56cf7eefefe9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fabb0d1d-5b20-4d7d-b3a8-0550f1e8d6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50bf2578-00d8-4851-87e9-c9711ca7ee5d",
        "cursor": {
          "ref": "ef381a4c-ff86-4977-b9a6-cc81184ef24e",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7cff52f0-384b-40ad-a2c6-c53d0359d3b4"
        },
        "item": {
          "id": "50bf2578-00d8-4851-87e9-c9711ca7ee5d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8d25d8a1-195c-4f74-842e-1d82a0082bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93434199-8b3b-4b0f-8f2f-e435f77b3927",
        "cursor": {
          "ref": "b3c0a0fc-5de7-42dc-81f5-4bc14ba0516f",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a360b97c-df0e-4e2a-98c4-cc80f059c21d"
        },
        "item": {
          "id": "93434199-8b3b-4b0f-8f2f-e435f77b3927",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a8bb8af1-df3f-424d-aa97-84a8865395c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d104a9a3-880b-423f-8574-c672d176ef32",
        "cursor": {
          "ref": "d3f6ff76-ba3b-4c8d-b9c1-c8dcbf102945",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1a3ea6a8-4d23-4232-946a-92bf9ec96c86"
        },
        "item": {
          "id": "d104a9a3-880b-423f-8574-c672d176ef32",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "16701dad-ebd8-4563-9ba5-59d4a5cad90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b562cf6d-9f41-43d8-9ab4-4ae2a57172a2",
        "cursor": {
          "ref": "87d5a04b-ad94-45d4-861f-41a7a6145018",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "545643c0-18ac-441b-809b-a37c36d8de65"
        },
        "item": {
          "id": "b562cf6d-9f41-43d8-9ab4-4ae2a57172a2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "de40ff2d-5b34-4503-9a21-3205f027094a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148733ad-9aca-4893-afe2-ccdb6394fde6",
        "cursor": {
          "ref": "faee03d0-9dcb-42fd-a0ae-a7d0e3f19799",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0ea624a3-aebe-4436-a87c-0efac52492a5"
        },
        "item": {
          "id": "148733ad-9aca-4893-afe2-ccdb6394fde6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "60b3ccb1-433b-4168-8766-3a22d5fa19d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e981123b-5f2e-4b76-8ec4-158cd50a5ec3",
        "cursor": {
          "ref": "19b2f7e5-6197-4baf-9efc-e2ee7e8f6a13",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "cf5d1ce7-4f73-4b3f-8097-7a2e00683404"
        },
        "item": {
          "id": "e981123b-5f2e-4b76-8ec4-158cd50a5ec3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8af499fe-b3a9-4b61-8353-be34a68738e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4872fc97-0b62-4a7b-8931-af9627e975f1",
        "cursor": {
          "ref": "051c2b00-7c78-4dd5-bbf4-7a8a4a146010",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "491f0bfd-50a7-4c18-b529-2c5339707d99"
        },
        "item": {
          "id": "4872fc97-0b62-4a7b-8931-af9627e975f1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d26df902-4328-4035-aab2-326d92946a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3827469e-dd37-4b15-bc10-07b366bccb66",
        "cursor": {
          "ref": "d821baa2-fced-404c-8bbc-94ddbe676a54",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0c5abb60-445a-421d-870b-c72ad63cc9be"
        },
        "item": {
          "id": "3827469e-dd37-4b15-bc10-07b366bccb66",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cf7eaf5c-8be7-4de7-a785-b658996d9474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d305859-8573-4d5b-a98f-7d15e8c1da6e",
        "cursor": {
          "ref": "018fdadd-4720-44d1-9336-95718333e66f",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ac967a7e-8a98-4d01-be48-87bb6cd314f2"
        },
        "item": {
          "id": "6d305859-8573-4d5b-a98f-7d15e8c1da6e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9a5d3bf1-7be2-4eb3-a7bb-b4a096655941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74787c26-194b-40c9-8c3b-7e420f140f51",
        "cursor": {
          "ref": "78c5842d-49ef-4caa-82ab-7c39d6946c22",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "00ebcf66-30c8-40b5-b52a-c999860a185d"
        },
        "item": {
          "id": "74787c26-194b-40c9-8c3b-7e420f140f51",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "38d2f042-8bf2-4128-88e5-019ebe9a7aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b1f7f7-8a65-4207-8c83-624017a41228",
        "cursor": {
          "ref": "cddd3645-a5e7-44cd-a5d1-1afac39f6c04",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "06d0bf0d-cacf-4790-8785-a99504e08e3c"
        },
        "item": {
          "id": "b4b1f7f7-8a65-4207-8c83-624017a41228",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f09fbc6c-2b51-49d6-a2ce-dc6c26ed1d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60260aa4-f467-42e7-a1f3-4feb8fcdf9fd",
        "cursor": {
          "ref": "3d73e605-c882-4a30-9268-19c2c06a95fd",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "44e29a45-0943-4d09-8741-3bb41602dda7"
        },
        "item": {
          "id": "60260aa4-f467-42e7-a1f3-4feb8fcdf9fd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "75916ce0-18fd-450d-bea5-f4d9ad369cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e29fd2-dc0e-4175-bbac-e0429ac76824",
        "cursor": {
          "ref": "2e90c7b6-17d9-4957-81de-719616175bdf",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a71713cc-02d8-4b05-b68b-9baf6885155f"
        },
        "item": {
          "id": "f0e29fd2-dc0e-4175-bbac-e0429ac76824",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9178a6ab-2468-4480-bbaa-cda77261df84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595d4fe9-bc9b-4592-bb67-f4ad4c673f3e",
        "cursor": {
          "ref": "a00ae575-f444-4c28-8093-7d577b1610e3",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c35f1593-30dd-4867-b720-fea0c783a220"
        },
        "item": {
          "id": "595d4fe9-bc9b-4592-bb67-f4ad4c673f3e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "289d3a76-4fad-4e51-a422-37d3d9c28bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1624ac-4b5b-4f29-8539-2de2f6003a94",
        "cursor": {
          "ref": "72f8283e-f53a-47f9-929b-85187a4d6872",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c614aa19-6bf9-43bf-89a0-60667b754159"
        },
        "item": {
          "id": "7d1624ac-4b5b-4f29-8539-2de2f6003a94",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3e0d4d40-f2f7-434d-9058-a698d526214a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcb9b47-1ba2-4311-8b34-e2cb36fbfd93",
        "cursor": {
          "ref": "cc778e39-aa97-42bf-84c1-a4a18cc0bc63",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "06968901-305a-4955-9e2a-f756918e338d"
        },
        "item": {
          "id": "7dcb9b47-1ba2-4311-8b34-e2cb36fbfd93",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "13150ead-f970-437a-b529-2493bf456aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02fff3c-aa18-43e2-82b2-0919b0733371",
        "cursor": {
          "ref": "73073d22-7ea0-4ee2-8cd8-a99182141a62",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c3ed4a34-944c-45ab-84b3-372433343021"
        },
        "item": {
          "id": "b02fff3c-aa18-43e2-82b2-0919b0733371",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "da595caf-915b-4528-a3c1-1d49e3de5b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a66e00-ce50-4d01-b9f0-73bcce7ad8b0",
        "cursor": {
          "ref": "e5fd9239-17d7-40fc-9ac5-b3bdd4dc2975",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2e0df28f-dbcf-4223-b488-5ff20180e606"
        },
        "item": {
          "id": "63a66e00-ce50-4d01-b9f0-73bcce7ad8b0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1daf50c6-ee96-4468-8a7a-7d99bf98950b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f3a1fa-7ca0-4d4b-98f4-136706ae3fa2",
        "cursor": {
          "ref": "4d8e2bbc-3c94-44cc-bc33-125ab078b7f4",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "35e18ee1-5413-416d-aebd-dcca0e6b7437"
        },
        "item": {
          "id": "42f3a1fa-7ca0-4d4b-98f4-136706ae3fa2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "eb64fb47-7fcb-430f-8b75-2065cd0bb2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f28c4f-da21-4985-83e2-3da3e76ead2e",
        "cursor": {
          "ref": "c9b641ba-5617-42e9-a3a9-870b2ea9b9de",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7b524e25-8f4b-4dde-929f-0d970ba913de"
        },
        "item": {
          "id": "04f28c4f-da21-4985-83e2-3da3e76ead2e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2b32e724-b680-4895-a99d-0ea2a1c10fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d592d04-5445-4532-89bf-a8c1e4033b39",
        "cursor": {
          "ref": "d4a15e10-b77e-4d37-b007-e4d0d619e460",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "600096fe-168e-428c-9864-15f2164d5f4c"
        },
        "item": {
          "id": "0d592d04-5445-4532-89bf-a8c1e4033b39",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ae555da3-a947-46e6-a8f6-f669668ed0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87a8df4-0494-4747-ba12-1638026b069c",
        "cursor": {
          "ref": "91ee14de-9260-44c1-a488-c9bb73dcf3c1",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "27233e8e-6abc-4ea9-ac85-77fe6693395f"
        },
        "item": {
          "id": "d87a8df4-0494-4747-ba12-1638026b069c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8b3a2096-27c0-403d-9003-85166ce3ab0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b884b69-9c40-44ba-aef6-0ef5ee94562a",
        "cursor": {
          "ref": "a43561b0-1341-4f7c-adde-c9cda7602b77",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1a46b434-a224-4eda-a987-0925c9483309"
        },
        "item": {
          "id": "2b884b69-9c40-44ba-aef6-0ef5ee94562a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "05a82199-bd62-42c9-87d5-4344cda9ac6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dabb1c3-b3c9-409c-8a09-3c788219e093",
        "cursor": {
          "ref": "00b7cce4-a66d-428d-8471-b7a4b018debb",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "41f961bc-4b74-48c9-b23e-2a3ad5002a18"
        },
        "item": {
          "id": "9dabb1c3-b3c9-409c-8a09-3c788219e093",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "733af6cb-94e2-42bf-9ab2-335fe2cc06c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd746650-2137-40cb-9fc0-d3084f949586",
        "cursor": {
          "ref": "2a16e219-1de7-4d06-b421-3a06e8752ce8",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6273c05d-1819-4013-8f37-076ea67d55ce"
        },
        "item": {
          "id": "bd746650-2137-40cb-9fc0-d3084f949586",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "40a9dfd5-2a38-438d-b6dd-d8f9446a0989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd69525-6beb-410d-8861-8f475e554cdf",
        "cursor": {
          "ref": "ef45d648-50cb-461e-abaa-ff3827608656",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bd323da3-d27b-4ca5-b8b3-9a4db1838760"
        },
        "item": {
          "id": "acd69525-6beb-410d-8861-8f475e554cdf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3c751f66-a482-4853-8189-9623caa98fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459e80e0-80f2-48cf-b588-a9b82a075772",
        "cursor": {
          "ref": "365d14ec-1057-4855-8fe2-430d8abe4ed7",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "575df6f6-ca24-4ecb-801e-5009bfc79466"
        },
        "item": {
          "id": "459e80e0-80f2-48cf-b588-a9b82a075772",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c3e73b27-32ca-460a-8142-229dc2f56220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899cd158-637b-4441-bc95-cb188a9b6f2c",
        "cursor": {
          "ref": "706b9ee8-74ea-4483-b791-50d26b945762",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0171c991-1ff1-4432-992d-1b47d928ad9e"
        },
        "item": {
          "id": "899cd158-637b-4441-bc95-cb188a9b6f2c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c6252fbe-5926-4207-a0ae-1024255f7c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb2aad1-dfa6-4837-9311-8b801ef916cc",
        "cursor": {
          "ref": "bd6af0f5-580b-48f4-b72a-20fda03aa6b6",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e5f74865-c75d-4803-9073-235acb652eab"
        },
        "item": {
          "id": "bcb2aad1-dfa6-4837-9311-8b801ef916cc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "33e2f857-a9be-4aed-8323-618768fb69f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8af260-509e-44af-93b9-ea051246ecdf",
        "cursor": {
          "ref": "d8a70de1-aa2a-41fd-8be5-ae537b477e9a",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e637dd71-1bde-49cc-91bf-59d3a0a65396"
        },
        "item": {
          "id": "fd8af260-509e-44af-93b9-ea051246ecdf",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "71d4a7ed-e2cf-4c27-8401-b59fc73ea37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d802c1-97ef-4d6c-9734-461e5e8526d4",
        "cursor": {
          "ref": "ff490b6a-4056-4ed2-a545-22cddef985aa",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cdb6f3a0-5b59-4b92-9e8d-ea167db039c2"
        },
        "item": {
          "id": "02d802c1-97ef-4d6c-9734-461e5e8526d4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b311f5ee-4a39-470f-a4ea-cf2fe5ca28a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911c3cbd-443b-4ef9-b331-5b0c2406ff91",
        "cursor": {
          "ref": "9a76eea9-c008-47b0-b924-68015ae20076",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7d6e90e2-9f7d-4200-87b5-578b3964f70f"
        },
        "item": {
          "id": "911c3cbd-443b-4ef9-b331-5b0c2406ff91",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "182fe6ef-9a47-42b5-a2af-b58ff0627da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054f816a-1d44-4732-8a1a-dbfba329471b",
        "cursor": {
          "ref": "6bfa58a4-0945-4ad8-bfbd-31d6c78ad163",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "120c05c7-ef4e-4374-a15a-8b484cf3d1b6"
        },
        "item": {
          "id": "054f816a-1d44-4732-8a1a-dbfba329471b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b349e18a-bd41-4ffb-98fe-406bec6217f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d57ee56-8156-4337-b275-fe8eb4bd6c10",
        "cursor": {
          "ref": "78d75bcb-0076-48f2-9c90-6a3ba0fba633",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b8b8b39a-b8af-40be-b9a3-4a2fb271ee77"
        },
        "item": {
          "id": "8d57ee56-8156-4337-b275-fe8eb4bd6c10",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2f168bf5-c5a1-45f8-ab99-92a0cfadc7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce81a02-9531-407f-bd8f-17ffac87969b",
        "cursor": {
          "ref": "37c3c0b2-85e1-4383-93b2-55f9037c3618",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ffce2a45-9d6b-4639-964b-1bf397aa5b9f"
        },
        "item": {
          "id": "2ce81a02-9531-407f-bd8f-17ffac87969b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d8f32e9f-26c4-4454-b3f7-9bd639ae2d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2a5c36-e49d-4b30-9b59-f54af2a18149",
        "cursor": {
          "ref": "5ee751e5-5bec-446e-b027-6b74360850e5",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ba996509-8c71-454e-b247-2d66de9ec039"
        },
        "item": {
          "id": "ca2a5c36-e49d-4b30-9b59-f54af2a18149",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "004af150-eb1e-4f58-bfa2-ca960ee686af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092db8a4-1b55-490b-8b7e-f83001fed472",
        "cursor": {
          "ref": "96e13d5c-0667-413d-a5f3-ba2ee5145bd7",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "90f05e94-0258-4c91-b73b-5962b7b24282"
        },
        "item": {
          "id": "092db8a4-1b55-490b-8b7e-f83001fed472",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "221b0429-dafd-4050-a410-5b4daffd04f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03781cc7-4b37-470e-bcdc-3b898e088b1b",
        "cursor": {
          "ref": "bd761d38-0537-4335-b33d-9f202f83e12d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "32c1d964-cf57-4663-a7b8-dc3800b1b019"
        },
        "item": {
          "id": "03781cc7-4b37-470e-bcdc-3b898e088b1b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f859ddc7-71c9-433e-9af9-2749c2b98e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57b3760-b5ba-4ac0-a514-014b2a69918a",
        "cursor": {
          "ref": "588a1962-fbcb-42b7-8543-194090a92c36",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1bf4c339-698f-4c9d-b97a-1ea4abc6749e"
        },
        "item": {
          "id": "b57b3760-b5ba-4ac0-a514-014b2a69918a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "175f728b-64ba-41a6-a203-599524bd7556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fcbe8e-73c8-4282-95dc-2528ea2405a5",
        "cursor": {
          "ref": "c4b0546a-5897-4828-b279-5a8756068eec",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "915122fa-1d5e-4285-92c9-178ddf3a3ff2"
        },
        "item": {
          "id": "50fcbe8e-73c8-4282-95dc-2528ea2405a5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c39b2a87-de6c-4677-a0e5-ca50a994b226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9079aecb-42c0-49be-b159-b23b9f99f190",
        "cursor": {
          "ref": "aa02e017-c0d8-4051-a130-92355cb13ae8",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4b7168a1-90c6-4ad1-bd3a-6cc5f9fc4620"
        },
        "item": {
          "id": "9079aecb-42c0-49be-b159-b23b9f99f190",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e4f9cf06-dc59-4532-8e12-a3bd5abb178f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85854bf4-a9f8-4788-aa8b-b77e88e5cdda",
        "cursor": {
          "ref": "68a8394c-63ed-4395-8dfa-56e07f42e359",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e952c54f-83f3-4831-8772-c1d4d6eb4050"
        },
        "item": {
          "id": "85854bf4-a9f8-4788-aa8b-b77e88e5cdda",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6254d5fa-985d-4a6a-a579-ffc712725855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db62a55-60ab-460f-8faa-b431d16dae11",
        "cursor": {
          "ref": "97ad0577-b873-4a53-aef7-a5dae948d405",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "20a13945-1508-4b50-82fb-7062652ac84e"
        },
        "item": {
          "id": "4db62a55-60ab-460f-8faa-b431d16dae11",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "213ffb47-6130-4458-a9f7-d096adc662e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e73d880-c32f-4fdc-80d5-ff534a08d5bd",
        "cursor": {
          "ref": "17ad0064-bf4d-4000-a43e-40f53a5b61dd",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f287578b-cd28-43a1-a065-103df8ddc897"
        },
        "item": {
          "id": "6e73d880-c32f-4fdc-80d5-ff534a08d5bd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b82e9709-f596-4954-a002-58ab51c62352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b056c8f6-2d2b-4463-aada-e1fe1f2fdffa",
        "cursor": {
          "ref": "11e84d72-ff93-4ce1-a603-fbb3d9090074",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8b66aab4-09b9-4fb3-9715-fabe890ef02a"
        },
        "item": {
          "id": "b056c8f6-2d2b-4463-aada-e1fe1f2fdffa",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "49e43d1e-3ea7-4683-9371-7d7553f4fcb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0760511-cda9-4416-ad60-3d9f98fc595e",
        "cursor": {
          "ref": "8f0ea362-6d68-48d5-9f07-b9381416c47b",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a87154d2-e001-484b-85b5-6a487a357c5c"
        },
        "item": {
          "id": "c0760511-cda9-4416-ad60-3d9f98fc595e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "927d81c9-14e0-4ef8-a5c1-31b2401f526c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78238ac7-4258-498e-8cd7-c56330fc00b1",
        "cursor": {
          "ref": "a48f5695-c1b8-4f1d-b485-f10f2ee079f2",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "da8c14aa-a670-4d2a-9c11-30eca8b2957d"
        },
        "item": {
          "id": "78238ac7-4258-498e-8cd7-c56330fc00b1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d5e3820b-4cb9-44af-9f5e-d5f9045ccfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197a17a0-9334-454b-9346-172dc093d22a",
        "cursor": {
          "ref": "75b8d18f-39b0-4572-bc9c-ef1127f069d5",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "80a8eefc-6bc0-4141-86f5-9e06ce7195d0"
        },
        "item": {
          "id": "197a17a0-9334-454b-9346-172dc093d22a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f8bd0c94-df37-4b97-b095-65d34460c5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b74991f-adc4-470f-b2d4-48c345f31878",
        "cursor": {
          "ref": "e4c0a1af-523e-4714-bce3-8f4c729d9478",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5e8fe241-9cc7-4061-8ff2-bfb6d7ae5907"
        },
        "item": {
          "id": "4b74991f-adc4-470f-b2d4-48c345f31878",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9b64be14-3ef6-4c44-908d-9ed4f1416aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddce6c4-7839-4007-b856-d10fa650a172",
        "cursor": {
          "ref": "ebed206d-98b8-4018-b44b-07152fa6d543",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9c2a2f5b-ecd4-429a-83a4-fa5a9cd859a6"
        },
        "item": {
          "id": "fddce6c4-7839-4007-b856-d10fa650a172",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ead12d7d-805a-4dae-a430-218f72505525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe8ef56-3432-45e7-b184-b765c2ea4276",
        "cursor": {
          "ref": "76439e0e-ab34-4274-91d7-2e07b25a3340",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b0f4707b-d2f6-4573-970d-67e91f38fc71"
        },
        "item": {
          "id": "dfe8ef56-3432-45e7-b184-b765c2ea4276",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "27ecbc72-f20e-497c-9376-531bc706ef7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eaf63bc-40a3-4e37-8c46-6556f35c3bd4",
        "cursor": {
          "ref": "650f15b0-64c9-4755-9a60-906723642dd3",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "969b64c1-bd4f-4e3a-8504-a131df533a55"
        },
        "item": {
          "id": "8eaf63bc-40a3-4e37-8c46-6556f35c3bd4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "da6e42a3-9d7b-418e-ba94-a3eca6dc92c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681fa739-c5d8-4453-acb6-1af57ffc98ba",
        "cursor": {
          "ref": "3909977c-7113-496c-a0a2-11fe4ab456fa",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "201b47e8-66c4-456a-a69a-a0c5090c8cc9"
        },
        "item": {
          "id": "681fa739-c5d8-4453-acb6-1af57ffc98ba",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "26e9ca08-83b8-478e-bda0-2946ea782aa4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4911560-ea0c-497b-bfc9-bcb16c79f678",
        "cursor": {
          "ref": "c2b9928e-e4c6-4c93-9f0b-c9f914a3e13f",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "abd1c388-bb2f-4501-b514-3b4ff28326c5"
        },
        "item": {
          "id": "c4911560-ea0c-497b-bfc9-bcb16c79f678",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "59b6f619-83e3-4dc9-a7c9-7ffd95bb8185",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faaf2f9c-c67e-48a1-b6a5-5134bdd76432",
        "cursor": {
          "ref": "ce0d46f7-0fff-498d-a874-ee3d2007d310",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "44569a1d-4d6e-4559-9aff-06d2347d6c11"
        },
        "item": {
          "id": "faaf2f9c-c67e-48a1-b6a5-5134bdd76432",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1d481153-8795-46d4-bafc-82ee9dc62fa5",
          "status": "OK",
          "code": 200,
          "responseTime": 231,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff647326-5b7a-40e0-95a0-ea29eec98737",
        "cursor": {
          "ref": "67cc7faf-6c64-49cc-8f5b-8541951519ee",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "98ae0b4b-7317-4448-89d0-4a4e0a1e6314"
        },
        "item": {
          "id": "ff647326-5b7a-40e0-95a0-ea29eec98737",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e13d9ace-41a7-481b-8d9e-7bcf739ce473",
          "status": "OK",
          "code": 200,
          "responseTime": 610,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b629c2-d9db-4903-bf2c-2ab6f61d0133",
        "cursor": {
          "ref": "b02626b3-a848-4ded-8cfd-827a5320fb04",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "76765064-e7ff-46bb-9189-ebcb60cbe838"
        },
        "item": {
          "id": "82b629c2-d9db-4903-bf2c-2ab6f61d0133",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "75eeda1a-8fe7-4d53-bdcd-97c40b2d185c",
          "status": "OK",
          "code": 200,
          "responseTime": 622,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2827a3c0-f868-48ff-b0aa-82366bb8a764",
        "cursor": {
          "ref": "1b93c5fb-58a0-4eda-b127-a16bc7faceeb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e55c3b12-322d-48be-8e6a-16b3ef35b554"
        },
        "item": {
          "id": "2827a3c0-f868-48ff-b0aa-82366bb8a764",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d53eac34-9e84-4ea6-add5-6c651d684ca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2827a3c0-f868-48ff-b0aa-82366bb8a764",
        "cursor": {
          "ref": "1b93c5fb-58a0-4eda-b127-a16bc7faceeb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e55c3b12-322d-48be-8e6a-16b3ef35b554"
        },
        "item": {
          "id": "2827a3c0-f868-48ff-b0aa-82366bb8a764",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d53eac34-9e84-4ea6-add5-6c651d684ca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2827a3c0-f868-48ff-b0aa-82366bb8a764",
        "cursor": {
          "ref": "1b93c5fb-58a0-4eda-b127-a16bc7faceeb",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e55c3b12-322d-48be-8e6a-16b3ef35b554"
        },
        "item": {
          "id": "2827a3c0-f868-48ff-b0aa-82366bb8a764",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d53eac34-9e84-4ea6-add5-6c651d684ca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0f5c8d-5116-4e0d-b23a-ecb860eba366",
        "cursor": {
          "ref": "d9562c4d-bae8-4e18-955f-b3b7d727c339",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d6a9aaf1-a098-435d-9ae8-4a8914d9c389"
        },
        "item": {
          "id": "bc0f5c8d-5116-4e0d-b23a-ecb860eba366",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "65a974c6-6c14-4395-8542-8a156b389329",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfb3f24-ca37-4f71-9020-fe7aa0d34656",
        "cursor": {
          "ref": "373336cf-46c0-4047-bf4d-0143730f1a8c",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "46c4e636-5aff-473f-826a-0cb24a9b9f96"
        },
        "item": {
          "id": "cbfb3f24-ca37-4f71-9020-fe7aa0d34656",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "54fd7326-48f2-4312-99b0-595a915056d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "cbfb3f24-ca37-4f71-9020-fe7aa0d34656",
        "cursor": {
          "ref": "373336cf-46c0-4047-bf4d-0143730f1a8c",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "46c4e636-5aff-473f-826a-0cb24a9b9f96"
        },
        "item": {
          "id": "cbfb3f24-ca37-4f71-9020-fe7aa0d34656",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "54fd7326-48f2-4312-99b0-595a915056d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "21445301-d33c-4999-afc1-4b1e7787cfcb",
        "cursor": {
          "ref": "232ee31c-120f-4366-9df5-81914aa89080",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c33fc866-abf3-4082-b7fd-07d9a6f764a9"
        },
        "item": {
          "id": "21445301-d33c-4999-afc1-4b1e7787cfcb",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "18c74617-4a23-4951-b67c-7b6535e42208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d37e9469-14bb-45c6-9064-f4ff8214b9ac",
        "cursor": {
          "ref": "d5dd8856-7f64-4297-b911-4fb079ff3cff",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "aa4af806-df79-4702-b5b6-858a44a396a8"
        },
        "item": {
          "id": "d37e9469-14bb-45c6-9064-f4ff8214b9ac",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "46112011-e228-4190-ae9e-5004025398f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d37e9469-14bb-45c6-9064-f4ff8214b9ac",
        "cursor": {
          "ref": "d5dd8856-7f64-4297-b911-4fb079ff3cff",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "aa4af806-df79-4702-b5b6-858a44a396a8"
        },
        "item": {
          "id": "d37e9469-14bb-45c6-9064-f4ff8214b9ac",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "46112011-e228-4190-ae9e-5004025398f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d3e948c5-a74b-4cb0-9533-30c42d823251",
        "cursor": {
          "ref": "f77b3c72-54a3-4635-99ef-8a5db9ae5f13",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2da19879-3793-44bd-8cc6-6aa146818065"
        },
        "item": {
          "id": "d3e948c5-a74b-4cb0-9533-30c42d823251",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "684bfc95-2a1d-4f87-819a-a15a3d8ed4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}