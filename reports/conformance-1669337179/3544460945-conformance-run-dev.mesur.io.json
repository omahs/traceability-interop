{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a50dbe75-7a79-46f6-9869-5da99af97839",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8b1464f5-10b9-4403-897a-915737c21b24",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "015dff44-f28d-4c11-88b7-3d940eba1f70",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9fc0e608-6bba-46e9-960e-392de9f1b427"
                }
              }
            ]
          },
          {
            "id": "e63b50a7-b8ee-4ef3-a148-211e7578061e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e63fbb6e-3191-4493-bbbf-9947baf38e8d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "35f3b666-383b-4147-97b5-7d3221c3a482"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6a902acc-06d2-440d-ab26-46117f67b298",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "20699c67-a40f-4418-9bed-60c9f8baed92",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a3db8683-fa1b-4d0d-bf5e-1ff223cb9c3b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65e60030-8552-47a5-bf7c-ab75e5cb2228",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47c12396-dca5-4104-990c-5b54b28de11d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "626b9a28-868e-475e-a127-584c9e913d41",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3b365af8-ff21-496b-8b34-851d9ea9ab93"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a5fe7fb9-c44d-4b57-9b14-86034c8e90fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c77d5a49-3e8a-4662-a7be-a3477d1595a6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68347073-cce2-44e3-a0c8-89969e7b5810",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5a9d64e4-fa00-40b3-9b90-7e58bcd2bd1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48daf91a-bd5c-4566-922f-f3c396f71fd7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9601e6d9-51ec-4fd3-8b41-acdf9f5e1e8f"
            }
          }
        ]
      },
      {
        "id": "423937fe-49d4-4fff-bbb1-048f2c55b901",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6cb395ed-257f-45d5-846c-2a7059f9f30d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "639e288f-9042-4fd6-90e0-ee294d9cc55b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9262e34a-3af2-41c8-acdd-83193791b1db",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed247ff6-53bf-4b42-81b5-ecda71e0a276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f1b091e-2f09-4d1f-83d7-310d8cf2bf3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003168f9-29ee-4706-be84-c54b148e6de5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f14954e-b92a-4a6c-bad2-cff6af556f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfce0ed2-2574-4c98-8116-a81b34e93505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b392e225-c6f9-4704-b4a2-fbf7695ce1ac",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404b8a37-18a0-4e32-8115-679f77ce9dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3c48b9c-501a-422e-960c-6de69ab51a2e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c728900d-10c5-4972-abb7-cd6a653681f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "017b39c1-c8a0-4543-9260-1e35ae8f7318",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19379ba0-f0bf-4097-bbf0-e4b3e2dceb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d54d6789-63df-4229-afe4-d313dd8b3528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3558a933-2153-492f-80f0-697ab317d83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fc6f26-5b2a-4085-9042-3fb7b35fc46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3d1ed0-1291-4921-b131-f476533b86ea",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732660a6-284b-47f3-8177-10d556e9b0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff6fa036-91b0-4476-8d4b-dd52536f8ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62d1e3f-9b29-4da1-836b-3db92ae42e0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "6a469b6f-a9d4-4237-96db-9ace49bdb089"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ba6b7e11-cb16-42ad-8d39-7799028c5745",
            "name": "Positive Testing",
            "item": [
              {
                "id": "620558d7-349c-479f-aa30-0ba2e45320a6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "682b9d51-90de-4ff9-a201-cf29b733b747",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0541d48a-6f61-4606-80ce-09e603dd9957"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "def3f6fb-1e3c-4b3a-9f32-3d4cf820a689",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c9d8da8b-5995-4ac1-b885-8cccc8919b7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03541b1f-5259-44d7-bc29-2769253b2cf9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "939643d9-00a7-4249-8602-735cf2572cc3"
            }
          }
        ]
      },
      {
        "id": "353e12fb-6a5b-4e75-9765-a05c9726d766",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0ce5c0fb-52c1-4354-a2e1-e4fc7f9ac3ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a841daec-0a58-414e-9127-1eeeec08b45e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1ae318f8-c3f5-4c7a-8a7f-74deb9125042",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90dece7-7259-4fab-b936-6302639665eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8641c74-a95f-4baa-a952-5b0ac66667fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6287484d-c4bc-4b8f-9741-45ed947c8fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e5f8a47-595f-42eb-b1f7-6e939df69234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b663d92e-99ad-4df1-adf6-4d0235191e0a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d81026-979c-40d6-a635-299929ea3e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe99707d-6565-4f2a-b92b-ed25e06bb164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51217ad-80a6-46ce-8887-75ad70c2c37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80c04ee9-3080-4d8d-8a7f-3318381bfdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826e59c7-257c-4623-9414-3488adbea776",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ebc8ee-8307-427f-a5a8-967a3933a475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6204015f-cb9f-4c79-9e47-0ff5f52af715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fe4002-155c-4483-b242-c71ab15272cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "deebd82d-c440-4a0e-bd5e-3825856633a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26715542-dafd-4a87-88c6-f4ee561451f5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a5aa6b-db05-463a-8265-d3502fde6960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370e43ba-116d-4642-a778-8a172d7395ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fe7f6e-e0ce-427f-8a78-99243a59ca8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6359faa6-19dc-49c1-a14a-5611bc9e9350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5a4541-5803-425b-ad1b-83db80a2abdb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a07d35c-c574-48c9-b6e6-54cbb5c1760a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711974a4-93d5-4bf1-b334-7b61da602c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36037a4b-2a6a-42dd-877d-4e447d3e0fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffd8f668-0743-4b6a-b04d-6575f6f85e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ee7560-94ef-4661-9bfc-21a177e52931",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3502e7-5b55-4a5c-91fc-b2075cbc3a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd4aa01-6b35-4f6a-b2e5-9e40f6391ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548dfaa3-339a-48d7-8257-de20b555d34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da914ec5-ab34-47b0-b8d5-eb46b9a5eeeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffa155d-aa53-422c-b332-edc818fde973",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde35869-6024-4c68-8ffb-79225289a032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d2dc556-bdf2-40b8-9455-e23511b668b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1367542c-403d-4cec-b5c1-ce189458ec15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e30a0f85-cecf-4d87-9eea-601a21c2cfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0d3918-404a-4c66-8b26-df0da75195d7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1e08dc-227d-47ac-b7bb-1b1bb463737c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41eabd9-7039-45a1-bbe7-5574a6955720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2370d5ad-eab0-4564-a34d-796c05f36b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba04b20d-6816-4bab-b2da-f9055282a84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2e10b9-b189-4476-a043-3de3fabc3090",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ffa532-f550-4474-b444-95122aaecdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e051ae9a-3626-475b-9575-e0e6a2293933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec36174-6a5f-49cc-91b4-12fd27bb7c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b2e0eda-90b6-4f67-83ba-76ada09225f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ef1f16-f60a-48a7-be96-48f9d0e0fa9d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e21412-d5bb-42d9-8612-dd306945f22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccaa8df7-6e9a-480c-9052-8ef31a264bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c48669-b77d-4b15-9b69-4f239e6049ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a63b3215-6b9c-4860-acab-1687af91b872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849eb7cb-4030-46dd-aa7b-2456f588a8b7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778c717c-40b9-48a9-80fb-82427f904256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d74ee53-ad79-4009-8668-2d563368cedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee659c25-6cbe-4e4f-977f-18dc04a05945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d445527-38bc-44b4-9755-0c3f389155fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214220fe-3b2f-461b-86c2-0a04a9d9258e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef29388-3416-408c-8be5-e22bdb3357bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2aa424d-a761-472a-83b0-874e915e3ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8d3ecb-e1ac-4275-9fe2-03cddf3ef927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1e5c5df-0a79-4baf-8ea0-55e2c6b04367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050631fc-0ade-430b-985a-0ee7d4f7aca0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae16c0e-72b1-4d47-bd71-609cdb0ccfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36713be7-45e8-49f4-a343-560f8295d35d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cc97ef-fc42-4cae-94fb-21490b72460b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e92d0df0-be0f-4d97-a5b4-9de179c91780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951eaef7-69a4-4b3b-a0ec-81778774835b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4b72ec-5475-4f82-85f8-d9e5eb0603c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132061c7-5611-45e7-8f0c-a8df9de53bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcfe078d-9c78-4943-9fb1-585142944180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abc2ed70-cc1d-4fc4-b9cb-6320ba0b2278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730400e0-683f-4595-b603-52972dd4ebf3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ee7cdb-25bb-42eb-ae45-c5ddeeb5f03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c4b4ea-9ce3-4002-bd2e-5e4f45fc5a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9865472-0ab4-4920-8894-ea84dbc76e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e66cde08-ded8-4627-9c63-9cd01e9b3ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29aaa99f-8bd0-40ec-aa46-41d7f989c194",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e699335b-89b3-4f0f-93d7-ad660ed93f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22e7755-1320-4df5-afc5-9c437c50cd49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1c0709-96d7-4b24-9375-ce06e61d5102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1261468c-3e44-4aeb-bb9e-ee423103c45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b75653-9da8-4a37-9374-6f732f8c691d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bb1484-e1a3-4213-9230-4a0bfeb6a61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b9e770-6a78-4b99-afaa-01340c9f74f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baccdd4d-433b-4a9b-b99c-f4ce25ade1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79a1577a-a877-47fc-a6b1-ef6d5c69b077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfadc3f8-3066-4e7f-808f-e9917e66e723",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738d3f0e-c0d1-45e5-9b03-c64d92eeea81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a341f0-9c34-4eda-b51b-5886080d5b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8bc7ce7-4ede-442e-a7c9-785ce9e629e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4629e181-4c9c-4869-b7ae-cd2a84dbabd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd1a045-0989-403f-b8fe-7744542f44b0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99ca077-0615-42bb-904c-754c3cf4c74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a06b56-884c-49d0-b5c9-7d5b6e4a7bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ffadbd-df64-4603-b219-cb2eadb7fe1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0adda9a0-fa5f-481c-916f-9c4e6f716133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb17a947-de97-4413-95cf-c376125f9b21",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226b736a-2d77-4184-b327-69b431446428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101807fc-389b-4fa3-998c-281040fad5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2233ad24-411e-4761-bab0-c9be26586ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9671de44-6469-4ebf-adb0-0c57a2611ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fc2428-7b69-4a34-b45e-668b6e84cba1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7636faf-7d01-4d7b-bbd2-5a84d583b746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560ade42-70f3-495f-a557-f05aa1fc0d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7dbf4d-4749-4607-a82c-4cd5ce280fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3bace0-0b9e-4320-b038-a93165b53304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e09e14-74ae-4f85-919b-0d06ad0454ba",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32aa205f-6ace-40f0-8674-8815a22c90f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c6ae05-7f3b-488b-88ac-f9aae4589f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2d4def-d879-4781-afd2-a924e65b3f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9ec25c-fac3-4d9e-b01e-552675f74920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44051999-05f7-49dc-af9c-2555f4becf0f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c6e12d-cbc5-49cf-bee1-bedbff6a6ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c758d691-9bae-421b-bc7b-4d47eeacf8bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a22f51-b660-4462-963c-6dd5e5282ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61afd2f8-3886-4471-80ca-425f59db0d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cd5121-02cf-40a4-94d4-4c1e84e6f676",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91028f8-d8c7-46a2-87de-3b74131bec1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9765b1-be67-4dc2-9ba9-5d368d7c8680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844f80fb-5bba-4910-8852-3e983365aa4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "369d7494-cc1e-4458-b78c-c216f0d0b8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e451ad3f-71af-4132-bf2b-599d6a2efa32",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc7a066-7e67-4992-a6e3-58be115a6e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b79b7c-55dd-4d0f-af08-d05b51469e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfad0b5-d4f7-4f4b-9755-24804a9f1f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8694061-3811-4450-8d53-3bdae4ff163e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5271b0fb-db15-4f1a-a056-388e071e8172",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f56da7-a7a4-4273-96ca-c8f23a02e3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aceee7cb-02f2-4285-9328-6aa188fd7a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012beb6d-0ec3-45f6-9f85-e6a628641f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf2e3db-f971-4ae8-a649-2c7f9d3fb03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2d5505-461e-4474-8a4f-3924a8f501aa",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a24794-0573-4e32-906d-f2e7fa71cd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc3f0b7-63da-4990-9972-f56a9ccd2704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c483d433-fe2a-4589-97f0-891c200a29dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16c4f7e7-8568-4b12-a728-a9ac2c7636fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f41fa00-8d20-4a14-a832-f524cfbfe28f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba7c5e8-4097-4709-be1f-d00043a6828a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8447dd0b-3222-498f-83c2-16e0fa97d7a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58277b35-d223-44fa-9fee-8e583f6989e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7bf72d-277a-4243-9b00-ce8700eaef91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cbd48c-f52f-47ec-b9b6-90ef24f61b8e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64c9ddd-4bb9-4117-844a-e96f0817899e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419c3e6c-7051-4eb2-8314-06ae16afa6e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75279194-eb8e-4846-a3fb-48bb0f319da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1679d843-268f-4821-8b8c-0c6ce89c2db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fddeb7-73a0-482a-ba3e-95d260338615",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803a3a59-4342-4488-a679-f54a145e75a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bd3482-5d4a-45bb-b2be-8ae7693e27bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf9ef6c-e6fc-41e9-aa1e-0cebca6be73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3941e0e9-acfc-4593-924b-26ed9a8bdcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8963bff7-ef4f-4803-a0c2-925234657200",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b85bf4d-99cc-4513-a50c-032e76ee19fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb2529ef-60a2-4381-be8d-670dd7a4a34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96736f5c-9621-4148-a566-be84a05863b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "499c432b-42bd-4094-8fef-1a715fe42d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1013996d-d441-4828-97c1-5ee1ff57c1fe",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04c66a7-66c0-49b6-b8ec-0daf4059ae56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723d326a-a596-49bc-858d-29232d267d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a118f25-4f6c-4893-b846-1a659fcc7502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "880c8ecc-1ce9-46ae-8755-2e4ebdb113d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a98b83b-fb20-4248-b0e4-50e8986f1346",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c695c62-4370-46b9-80a9-002b8a4428ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c41a1b-5be1-45e0-8fd5-c29406c72768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267c6cc7-8817-44d5-be4c-6e8b1609a191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32ba42ec-aefe-4d40-b440-e6ff27c10bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80881e80-c69b-4267-a403-63b94264b74d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae663e03-e554-453e-9187-af66218d2e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51809103-9004-4c59-8253-0bf50609473c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47af205-832c-44d6-8605-1dc8297039e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "456401f0-3df8-4a0f-af4a-5a69689c662d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc089cd-459a-4610-9de9-fa435a41f53f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17bb844-c983-4083-9bfc-3a77f82c694d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a43a258-db97-4518-97e7-30e8b9515208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195a8250-712b-4a2e-8b66-2a46894fff46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5cccef-aaf2-47db-8f94-f477c4f9bb92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0894a671-40b2-487d-85d4-106fc706c768",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e55a15-8026-4d89-b547-feaa8683d50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbdc3215-244c-43bd-8eb6-078bde33e65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6cf796-4872-4feb-8fe5-04e29ff4827e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41577f81-adf3-4ca3-87d7-22ee1c543d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba52c7cd-954f-4f14-8403-71dfdbf2d76c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc93757-2303-478f-99b3-e54bd8e9b3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1c615b-9eff-46c5-b46d-bc47c803f695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528c31f2-eab9-40ea-82ee-2c79ae41b649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2770d4-3980-4f43-a5a8-cea8eada4776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8991df6e-1752-4138-be5e-c416514d7583",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b41552c-7151-4e72-be3c-470dec61f646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259cf43a-15b8-4e53-8058-ddb9368a605c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dde880f-3144-466d-b56b-44fc614e37fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa75a52e-1ef3-47a7-b4a0-9f860684ea05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3622ce5f-e341-4daa-ab6f-afa64100fbdc",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99eb58eb-9df1-40c6-9893-17ce45783d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076e1014-4d91-40bb-bb8b-2afa023e9464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9c07f2-1d70-496b-bafa-e1d8a09b1db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "39b4e8df-5507-4fb0-9694-2781391c4ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7beec13-5ba9-4c41-8661-af9f999f7181",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08938aad-41a7-43d0-8eda-c5b98dac6cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6755e93d-5dc4-4add-be9a-bbb1f40db27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e8f998-e213-4cdf-ab7c-823217dd2221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "188dfa32-e540-454f-95f6-362dc011cdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea9b5db-8652-497c-8cc0-262067cdcc15",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a56602f-0f03-4663-a52c-d7f8f4f2d609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee562e3d-9ea6-4ad1-a531-2773b389816a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4b06c5-3989-4f10-b01b-2d9e5f272aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "90a1a8de-baa0-44a4-8b74-2821e69879b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e7e320-2a5f-46a9-96dd-a6fef22be2bd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d349f8-8cec-4b86-a64f-399ca27c1777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c4eb2b-1480-4168-9c75-8839b7293f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8e322d-53f3-4ddd-b59b-b931fa540353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7929f3-e0a7-4988-9a21-50c2e718691f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750e3090-eec7-4293-b9a5-02c1fa6fe992",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e4843a-c1cd-4dc9-bc2b-58a30165b92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb51daa-acdd-4510-9da9-eea561719be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43162aa2-7e8f-4b6b-b95a-f6f70751be47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "449e74a4-4c44-4d96-81cb-dfeae50aa24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7fecba-22e3-424e-886b-d80319d4011f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e914cbbe-d989-44d8-8216-622dc361b146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ecf006a-d059-454d-a40d-9c72166d44eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bf4605-9b77-483b-ab97-aba1f50163bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7047cbfe-a52d-40fd-9b3d-f368833d6933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedcbdfd-83ff-4a84-b61f-fdad7123f760",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b926fc7-f9f9-4d8f-bd48-694bb3fb5b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67caf302-684a-4ec8-bb40-da2bb0b0b330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4014621-b840-4470-9c68-a92923035506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10856e34-d749-4bfe-bb5d-c745194110ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d1a434-456d-46b7-bbf2-054f5ffaab8a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51207ad-d59e-4b55-bb17-512d2fb93f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de696fb6-57c4-44c8-999a-69d77d31679a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2daa4cf9-c4d6-4b91-8877-53cffda0f266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa5fda2-4dd8-4594-85d7-244a83f939fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a9d089-15f5-46f9-a2d5-d1c957b332cc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1d50a4-ca00-4f18-b3d5-5782f1e684f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "531867b5-865a-42b7-85d1-5b4a801dd851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d3bf4e-a61f-47f4-9158-312ca5a6ee30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13331abd-0265-4137-ad43-560d40ca7746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4622677-aee3-4349-b3ad-bf0730286122",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcf0d7a-c33d-425c-adc1-b95f298a6ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a1cf72-7606-40c5-b744-d0236146f86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474c0c2d-3e4c-4497-9289-7bafa0314900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e579801-16eb-45fa-a36b-0c65c4b6de88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7fed3f2-1c74-4140-82dd-8737ea30b1bd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26b5148-196b-4cc1-8aec-d410415f65f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c580d35a-9d6f-428d-878f-70ae00e6fc00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ade7cf-46ec-4ecf-82c6-f41dbbe2bfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac06df39-36b6-4bea-a1bd-014b1bb9bc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad24ee09-0c25-48a4-bd19-3fecc9c5e982",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c97c8f9-727c-4542-b0fa-d2839b14d255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad658ea-5a89-46d2-9bfb-a2ff202566aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5f22ac-fb86-4b0a-863e-64c0b422aab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "495ebf83-3c59-4ced-abb7-93c0f9a96fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c93e17-113f-46b5-8735-bed59047212c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f2760b-b181-4acc-92b7-e37470a4fe12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114e3cf5-40e9-4716-b48d-9cdad50f3a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7864bea4-ad7b-4a4d-929e-750a680cbebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb15cc2-54e8-428f-8158-4043e567a70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2f5e70-29b6-4d70-ac13-e46bf1b683de",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf7caff-80e2-4872-9040-3095d1a9fc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35039d9-6ae6-42df-8e78-3ebfc693186a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24770469-fc72-4fa6-b461-67ecc6369942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5c1253-8361-4147-a3ea-8051ace81477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c6e2b3-0b21-42cd-9446-e5bc716c7a91",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892b9d9c-7fef-4e4d-8a2f-c51dc61db753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1682af1c-7598-4299-b28a-f41d250c8492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894bd839-73e0-4c55-b6b4-2e0ebaea94b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "feb2dbf5-8e78-4098-8d25-674e196aa5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6714dc5b-b1d0-436e-a1d3-30164a394440",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e096c79f-d49d-466d-a62b-92d674e36285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d170f4c9-6750-4ce9-aad5-2de170460fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7471cfb3-796b-4c30-8ceb-c823d93ae0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de15a504-a003-48e2-8c9b-6866fb54e966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2bf88f-f3a4-4c6a-bd24-7b1ce60f499c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c82e51-fcb7-4bbb-9901-799d3efd6df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2263290-6609-4b3a-8f6f-835ac82495eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec39298-b590-4768-b8d1-faa1532c21d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b24b9df-c50d-4609-9d7f-dc6a4b05aa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a676b43-5093-4f27-81a3-7bf2ea613d56",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7de13d-198d-462d-871b-7206eda220a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008ad00e-fc8d-4af1-b6e2-3acf0db2578e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74f4004-1e8b-4b8f-a1d5-eafabb6f6856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3a174f0c-948e-499e-a9eb-ae0deb431262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545b01d9-461e-428c-b800-5df7e9200831",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ebab9b-fa13-4aea-8d5f-d01aa501500c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbdb8897-e98d-4101-8903-f9d18a6764cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033c0adc-abca-4d94-a130-9ae372a50221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc8d5a1-4838-45c1-b6ac-05de40d7ee4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c540aa1-d82c-4fbc-ad65-6185fafe6d89",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760eb928-ac0e-42e3-b3a8-e12d88adfeea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdbdd3be-993b-4dc8-b887-0223cf9701b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44274b4b-fc4f-4a00-81dc-ec6da8b7b152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3815988f-5f4b-4d81-af04-c8488a90448c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e735a51-cff3-41e3-aaa3-9b18881d83e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a4d491-a254-4f9b-afb9-e68ba0dfcd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25989b7d-a8e6-4f99-bb9a-0495527b5662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d32e932-c82c-42f3-ae7c-eeec668dfcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "97f755ec-143b-4ffc-b4a2-3cb6d6fab4be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed80f253-aef9-4dfd-91c2-350281c2184f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e0fc94-0b20-4ed0-9436-da6aeee33654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f17bec7-1ce3-4497-af60-a02743a0f270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac593e9-b1fc-470c-8ea6-8f37ccc05ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1470e7a5-802a-4708-8fb0-2c1dbf465278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ac9662-b90c-4130-b64d-323c36e82c1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b18803-67a8-47ff-946e-02549dad53a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c63bf1d-eaa6-4b4b-b2e4-b360f5cc0be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f557f9f-60bb-4727-a387-5b4c47a52500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4fdc85-04bc-45c3-bd47-17846bcfed6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0288be87-64d2-4e62-8055-6184961a0ec8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e3848e-a36a-436c-9c99-28828acaeef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d32cf20-62c7-493b-b64f-20f0612e0faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5351eab7-be9f-4bf1-a5a4-0a68628be9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f8d2135-5a3c-4cc2-ab39-74e57967df13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77001316-1b2e-443a-814a-70f222c3b7d1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29531124-f139-4291-8e89-0da2be390456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79692288-d659-491b-aa04-02a9eacd4fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d77f7d-f0ae-4355-bc09-1d8d40731d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd01f136-d317-40ed-9f3e-f3edbd45cbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679fc552-d109-499d-ac76-3eee384a23a1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5e854e-b539-4ee8-a822-3e45a83aaa8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6cf88c2-eb55-44f5-84b6-edb284e3892d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2ea2a1-2eea-4a61-b773-fd2036dc7eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a387308a-57d1-4494-b7ed-d9982628ea38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99592736-8354-4aa0-989c-1895d4d05688",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8468250-179f-4de3-9d87-6dc785ee8c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f989869a-1d36-46fe-8f07-7af2512bb012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed2d338-353c-4c1f-ba39-4aa72a6c72ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4b3495-ce70-4250-9cc1-00d43125d139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0556ebc8-0957-4c14-9ef9-654cbdab5630",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafa095b-bbd4-48ac-996b-7d257703e5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d26f6c1-f9ed-4790-a525-938e59eb2f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be25ce7-bd62-4843-9864-6af6a374da0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b91026e-246a-4b0f-bf84-f80063cc60a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203ddab2-8df9-40f8-81c2-cf505d52d8f7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef6562f-d67f-441a-8865-264afd6718ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5fc89a-aaa1-47d6-b391-4b82d939214e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40dd6b1-981d-436c-9500-66655f62a7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af584343-5877-49bf-aded-04d455eed1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78217eb-8642-4478-8b5b-2f5960513115",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871b85fd-8057-4f57-b0f6-9f8559bea2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7440ba0-a863-4c67-ba8c-4ca415d5dc90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eabbcdd-1991-4948-a6c4-eacb77dc7c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8443c168-7d88-4b63-b838-4560633df35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c9fd29-7598-4fd0-bcfa-fd17b137b3ec",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bbc050-f113-4f06-9abb-5b27d4bbdb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53cad89c-78cc-4c20-ae1a-fa2bc3b7543f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794233b5-6c81-4cf4-ac21-7119fdb574dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e350f7d-35a5-4980-b4eb-9388215ae962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85693354-59e7-4eba-b5f6-cbbbfefe438e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ae2b9d-1c4e-405d-8f8a-bae75984515d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f55b41-bf47-46c6-ad36-0bccf2537359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16f7329-5df9-490c-990b-802ae8429532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0266b302-4e97-4b00-9bf4-d08fe409479f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49a42ac-91c6-446f-a973-7ce7cc997cd0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d14a31-54fe-4696-9269-3553e0617307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e1085a-b3e6-4706-bc00-7acc37d5d1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa099ae-3127-4616-abfa-3abed2bf7f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a832a6-7a73-497e-97df-2f13302b52fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5c68fc-2c51-4ab0-820d-c0e810fee7e2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db47e08a-0747-45e8-8843-453be1fc107a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f608365-8f10-4e7b-bd5f-a0237161ef09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78469b6f-169e-47cd-ad03-ff9c2c01050d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb46ce5-cc2d-4984-a248-74d0e1e20295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7b3340-655c-46f6-b8ca-4d821bfd26d6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7c215d-34e3-4fdf-9d56-0259305bcf92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a84908-4038-4e04-81b2-d0634a771fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8381fe9d-cf45-4da4-91ba-fe9ac53b1727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87088b2b-b927-4773-b0a7-5d5b41636d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbee0180-57d6-4346-81df-a78cf980bfbb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9a10aa-c9a3-4ffc-91d6-c754f9d1b468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26050511-7907-46d7-8965-ddfee942cfd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8191ee-7e6c-4966-afb9-358775f93fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3caeff2-096d-4df7-817e-40db04ac0ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3da0674-9129-4a93-a994-72ef50db72cc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37925d61-56f2-44f3-9ade-94a9a2c648a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93acd0c1-4e1c-4014-be56-71568ac70a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b10ab4-8ae7-42cb-9402-854bfd9e77a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c9af60-78a7-4444-9d15-b713394e2a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93229853-6627-4085-b310-494ff2e08013",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a308fb-edf0-4d72-9b95-a4df54416017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9bdaa8-7f1e-4e9b-a55a-ee29806b64e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c65c0b-a86b-46af-a003-b39671ca5559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b724a06-540f-4d6f-b492-beae7aac357f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55de1dc-f87c-4b4c-b59e-95ec4127605a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6ce7ee-e2b8-4c2e-8087-b92d1eccfa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a6bcd0-bfff-4883-9541-593a5186726d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b643e6-5ae7-4570-8f99-226f51c07e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "902b435d-53c7-4ff0-9f6d-eff37f07a342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daee22cb-2043-405c-86d6-4e7751dc6656",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010191a0-2070-41dc-8f6a-f0f7377a12ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad83c41b-1406-4024-8d4b-665acaabc528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2de11b-a18f-4840-b6ef-fe1f4e6cf3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92c4a688-e8bf-4f46-a6db-00620beecd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f70993-4759-4653-81e2-fad97efec7c8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aeb6ad9-3945-456b-b34f-aef053a84029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406329dd-5a58-4ca3-bf0e-0fdb78f44664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a37df5c-e873-4e89-b12c-47cfff1b15fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8040337a-f6c0-4905-8d18-ac36c835b59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4cfaf59-8f1c-4fe6-a4a0-6d4b460c1840",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b729de-c05d-4fac-89a8-3669de27439f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ca713a-c19e-4743-9ae5-471fc876f4b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bd5b06-3f16-4997-bed0-ea6a44dc5bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e011678c-221c-4721-8c7a-5e172de18fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffebad2-f8c0-49c5-bc10-ae4a83d5c09b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce81dc4-544b-4d41-a816-1776b0e70139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558086f6-d4df-4e99-99e4-286bd19926e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca5bb06-3333-4cb8-82c9-23e9411da606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "094ada56-60d4-4b42-a737-9655e9df4286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755e8c15-9fd1-46d2-8f30-cc5cf41539a6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c599ee45-c89d-45cf-8986-e5b1f7a0ef44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45bd7896-90f3-4805-8fec-63fefa5dcacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629cd38e-13a7-4314-a290-ea0da7e166cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cfcba51-c454-4e2b-a78c-da735bb8b8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842fdc6f-e59e-4ef9-9a2e-86b1d513b988",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404a3f84-2616-4de6-b6db-375a71e4453c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7cae9a5-5f86-41c6-a6eb-b87d8a8a1d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed2f880-c341-49d7-a73b-9f8d26dd10ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "75db0cd9-4f0e-4b5f-a778-459b65447ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0ac61f-e6ba-4aa8-ab4f-3df32c65208f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5782bf75-16dc-4b7f-ada4-96d6ccfc7748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f16bde0-8864-492d-9b31-d78c96edbd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3139738f-4db2-4b15-8f77-519e99f2d2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c50ba8-3606-49d9-b27d-e89cae90c951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e027add0-1ab2-451d-b214-6bba4834ff69",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c37e913-aea8-4df3-898b-bdcc40ef0bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e27b7b7-9dc1-4b70-8bf9-142502302a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5baff4-483c-4560-8379-07316a31b0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06e96424-f0ce-4cea-8cb9-db138c6f13eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea215b0b-3072-49eb-85ac-ed1a0134a99d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4e435b-65f0-48f3-934a-f98455656bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55a5dd0-0fb2-45a3-bdcc-4cb78a3e351f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927d3c23-cdf4-46cd-9d48-763a2c85facf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59f4e10c-7799-473b-87a8-744fea835c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb06b2d-731c-4466-abf8-d1a74d1dfa31",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e750ad1-38f6-432f-98e7-3648ee2286b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b3899a9-9227-45de-b18a-284559318b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8e96a3-c8b0-43d2-aaf2-0b70fde31cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a155adf6-3513-47a1-938d-4c5343a1d002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c806cac1-623c-4043-9ed6-0b3b0290e265",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd53a23-f515-4707-a8d2-1766ce79d89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd93a6ee-5e97-4df0-9466-c46e44339cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc5328c-370a-4068-800d-05a856a2d8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4df1fb98-e990-4a8b-8bb0-06cf4c49f7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7246e4f1-2196-4b12-b545-614a47a77d3f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36b1768-5bfb-46ee-98ab-c29e53b4ec26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400ae369-a983-47e0-8a35-4881e4a03542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb574e5-3ab4-47f5-a10a-528f174d5782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d550f30-3426-4159-a9d3-2555da14d516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048e4b98-64aa-45a8-8d63-b25811426f92",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adc9e27-e7c0-4b93-893b-6d16013a62e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1005d8-3456-437f-9682-78503ee4d48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a56022-82ab-46ca-b25f-09590ca1abc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "21880ae2-a69a-43a2-9bc5-2988ba705cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10535b5-d9d2-49d1-a613-1ee33561fe6f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39ca9e4-38a9-4bf7-9890-cae51393f07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45adcb9-3bf0-4bad-a46a-6646f8ce5a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587f5a1c-f1bd-4f85-97e9-5f21f8b87e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6413a5-a21b-45e9-8c1f-ca1b5706b05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fc5bd8-1460-4b26-b47d-3b94ebe2a3e0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e72a192-7789-4aee-a460-d2ada3136e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4773b02c-d30b-4212-914f-8f171ba2db94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8742686c-f488-4f7a-a284-8fdf596bbb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c1da22-3799-49f9-b89a-cb4a5b8a026c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46f75e4a-2580-4e83-87ed-18e4836ed9eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83039363-bdbf-42c5-9dac-51509d76ad9c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aba04e8-567b-4002-982a-10a8d028327a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4421c83e-516c-49be-9aa9-9cb4e7417618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7138598-5272-468f-b0a4-e0eed6262cbe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "da1f20a0-3560-44a7-94c8-ace3c47c8082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1444cf5-6e8b-4c4a-887b-5d193734f5c5",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b0ed6a-1603-44ef-84ec-25c0963fddaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e94a50b7-03ed-4227-9ed4-499bf7192cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111b3800-b1ac-4de8-9553-0ddcac448c39",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "20f55bd7-ebbb-4c98-b8b9-19fb2bbd1209"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e0bf2d6-c662-42a6-a8ca-a130873fb26d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a241cbbc-2831-49e6-831e-a9a3865c5780"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dda2985-06e9-4eea-a1a6-9bdc515744f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e5e389d-2f95-46c1-8c1c-584a094cad95"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e53bc67d-ca32-4c09-b94d-2c38927029ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a3ab71c7-6154-4292-931c-80a168190874"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b194341f-7697-450d-9375-43ee0fdf0357",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "170fdc08-2c00-4063-b663-ea87e254eaa4"
                }
              }
            ]
          },
          {
            "id": "acd700ce-3969-498b-afa9-ecd5c0556bd0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23ccb26a-13b2-4daa-8a8b-e1ad484ac5f1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "72274753-0ee5-4983-a251-2c06a3a2fc13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c498678-b29a-4503-9d93-7717b2f2e775"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bc88d26-8632-47ec-8fc8-0210e60b96ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a3128b91-d727-4833-be5d-b2710f44dfaf"
                    }
                  }
                ]
              },
              {
                "id": "5301d307-847f-45d9-80c8-4b8712527e0b",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2ec91c6-fa5b-4507-910b-e7caa8d2dcc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f36fee17-839a-4ce5-a8f8-6830cc2008c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c3e3615-167d-45da-baa0-b88c09bb8887",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0f6ddc26-84dd-4d99-89c3-6da35d8d96c7"
                    }
                  }
                ]
              },
              {
                "id": "0e39cf50-b3e4-4d0e-86e3-2b713e7358f0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e7c3474-f61f-4dd2-b28d-b780a7450e25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6dcd8695-d01a-4332-bf30-4266f5a54dc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53840265-df18-4388-8c7c-728d7f251d25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3633b6d7-a65b-4835-9791-4514942973c9"
                    }
                  }
                ]
              },
              {
                "id": "40c12001-309f-4af4-986c-7f93141dd977",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28117e62-4b52-466b-a8b1-856aaab1de79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "85862570-5bf0-4d54-b384-8b56e0b28350"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "944a555a-4425-4e5f-8771-892ab9230f68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1bdfe6fd-91b1-482b-9058-9562f12be155"
                    }
                  }
                ]
              },
              {
                "id": "97af8fd9-63c2-4b77-9bf3-4e0a3c950e46",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1af4b3c8-84d6-42c1-b3c9-39e000901c25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c1b94eb-31eb-46ea-b657-ef76d2b90c9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da8b7c8f-2a75-4901-89b4-d1ea66be7ebd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6820e128-2490-48c2-858c-3cbbb5ca785e"
                    }
                  }
                ]
              },
              {
                "id": "97117796-9c44-44b3-8389-716c71df61b4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "344552fc-4b92-4fa9-8d85-472972d891f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c55767f2-16cb-4ef7-b221-4249ae92977e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9534561-20f9-4697-adf8-76a46d0e2144",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35ee3e27-f0ca-469c-834c-62ce2f8d978c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29d6bbea-72fd-4e55-b8bc-513106072d50",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea62227d-5a09-43c9-977f-ea0a43d82959"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8fbd9492-0f38-49bd-b9c6-fbef6e650293",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af2edbad-d72c-4653-80aa-bec69491d414"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62c62a48-50ab-45d4-9257-cc3fb599faf3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "785a9a76-8118-4533-8fac-2ed8dd7fcea9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8945e4f6-9495-4cb2-b5f6-462366bc2d04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d135b9a-5ad6-4222-ad65-00a7e8b8a854"
            }
          }
        ]
      },
      {
        "id": "513b100c-4228-4960-9e86-98da59766ac1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bd832da0-81bb-4184-bdfb-1ade6f1642b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48005677-50ab-4367-86a0-51147d8f61dc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ecd462a1-4718-4a3e-b900-1104613e9342",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd87abc-2509-4e33-8ed5-d00b93a818f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e224d6c-9baf-4f64-a3c4-1ed4174acea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e75fd5b-d466-4dc9-aa4e-dbe4e0f385e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2907c6-d7c5-4b81-b7b4-ba5b534771e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37c3f57-e46a-488d-8d07-54142c3f6586",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2f42a7-47e7-40e4-af53-939bf19cbed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49152661-de28-4f03-87ea-8ae67f52e74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf474a5f-31ae-4aa6-8382-07aaa9276510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c924068e-be3a-41b8-ae4c-e5e5ae7457ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9617a98d-d1e4-411f-bfec-31a8f0651c6f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65279493-1f02-43e8-b9e1-c67fa9951a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3485a6d0-296d-41dc-b9a8-3a26d3d13003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0e76b3-9649-4537-8868-f265f24f6072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eec290a6-7681-4c45-a15f-f19b179e0767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bd834a-06ed-4950-8778-f62793a1b368",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aad76c3-2b4a-4b87-bf27-15465e4b0afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3b01de-fbdd-48e9-8085-27106ba37eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5849e72f-f92e-4943-8c0e-4db1e9ee7551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "043a6f26-16c5-4455-abfa-605acabf864d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a1e72e-a201-457e-b9ec-65a250d10e5a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4444e7b-1b71-488f-bcfc-2b1f12fecf58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae2b7866-3df5-40df-b9ef-3d24b7ea03b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c37fc0-f53f-4675-ba41-fbf59a71831b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bfc3a82-d503-4c9d-807f-a7c7f6593a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fed428-400d-4ee1-9a85-0c37ce4f532b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe248393-c9bf-49ce-a67d-11071dfa9603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f729a3-5c84-4d23-b798-cdb9a1bbe123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5efa96-dd95-44f7-931d-808158a15408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd905ee9-99c6-4d66-90e4-2622ba8a2633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5deaa6-3a03-476a-9345-f3ca24522e36",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6683b07f-c348-4e88-a398-40ad0ec6593f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60ee51b-f7ba-4b6c-a6c6-58e8834081ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e4a79b-7a2a-4fcd-8a5b-424584ec3cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "96fd7b53-0303-47f4-b965-294f149f63c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd869c1-89f7-4775-bd68-e2897d4faea0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150f881e-9c93-452a-9492-1d81ff29943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05caade4-d2ba-422b-a0e9-6bfb9e1cab99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69e0efc-5a6c-4840-bbd3-1d9a5e1a788a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e24812b5-5c54-4b39-ba91-2a3a7ef7b0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f353b030-735b-44f5-9f33-a0d72aebded2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794a0243-177a-431b-bd03-26c04c78d84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16871c2e-5f0d-45be-9d43-e9a82c0102d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2a4667-e073-4ce1-be80-98c2ea6b7a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "371ea4c6-9623-434d-9382-8ed331f563b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d5922c-cd5d-4fcf-a4c9-4f86c9db9725",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0eb0e9-50dd-420e-81e8-262f7f0220eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b763eb-5f1f-4ec2-ae03-4fd1cd60e6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27da64b6-a6b0-43d9-b2bc-d35bb4a74f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32f02c27-d59a-4ec6-8042-fd9a99c2a2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77012c5e-4262-447f-9484-066c1f13354a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a3db67-bac7-4a6e-a8d4-44ed47159f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee93508e-dcdb-4481-b7da-d9db32395564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c9a1e2-d66c-4d84-8b8a-fde79fe67ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "36f51205-e22e-4aa6-a7f5-94c710e5b504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea102402-c5a8-425f-8b94-4a254ed5e489",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe0ca2c-f8e7-4b8c-a581-b0ec37e04422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6060f7c2-0b97-480d-9666-423bfe15703e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56922e08-47fb-409c-835f-cacf6112b55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f0c3f6-9dfd-4ed1-a29e-1535ca86d55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a15fbf-6fa3-49b0-81ef-4c8fb71a6453",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c835aa-bc8e-4def-aeda-2e5be8f3c0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddff8107-e41b-46f7-8b6e-3bef6163f89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e621df9-3ef0-4548-955f-3cab5390d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23127ebf-be3e-4aad-88ec-76734cc5570a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4330fbff-b298-483e-9459-d46c2c984155",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ac1369-e896-4932-8aba-c0b426d77010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065634eb-2681-4779-8859-27962f7175ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c267c55-5dc3-4c9d-9a74-866efc3355c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "656ce827-8a20-4227-8be3-aff0bbf84eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8290e0-9ec5-4578-bd7d-71218521c514",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4b5fe4-9a32-4486-9fa6-0246011b54c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9337e8a4-48ba-45b0-a626-28114b2be22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30857b9-b751-4fbf-a20b-76fc6ddecbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd5eec8-92af-4295-bcc9-edc0ef91f2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0170ec9-f343-444f-97b6-ba423307b7ee",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fc52e9-39b3-451e-b398-79233fcf2da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d626c4c0-6b81-417c-a118-880a1d67a448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132529a3-e7c5-4419-9f89-6e5757e908c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5f8bd6-ad13-4536-91f5-554c90a9cdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3512de-3b08-4922-8093-8f1abc61db37",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4665b9-7833-463f-a41b-87c696741144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f0deb6-6705-4a70-bed0-b3a06ee67413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044ce09b-7e48-4fd9-9eb4-41a703a50b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3635135-4aee-4efb-a163-a29939ddc67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167c89f9-aac2-4345-a7e4-1b74d072f116",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9125007-b47e-4eab-8c70-9b235ea8a1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a747a0-acac-42e9-ac1f-ec8fa25e0fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9931d10-0fe1-486b-96ac-1974676aef25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e66e2d-4413-4a8d-a456-ba46994608ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7204832e-819c-4835-bcdc-abf62e9da26a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9fd2ec-91ac-4e30-8bf8-2c8d03259344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7455da59-f325-4ccf-9439-f53858af6816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e80a3c-7cdf-47c7-8ef1-02f641e8986c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50e2352b-d092-47dd-b869-f8e2442847ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3643020f-a76e-4cf0-8917-108d3e5bf0d5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6af09e4-6c5f-4dce-a974-17295dd8bcc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04398735-9737-46e3-a0db-a0c1b7501044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5f9811-24e1-4832-aa14-626f300ce450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c920753a-04a3-4487-8bce-afa3df1e4c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831f3684-a4fa-4f49-b6c0-a77d900a466f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d3780a-a590-4d1e-bfde-75b711030227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512e9c53-69d4-4ea1-b0dd-09495668b1d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d410bf9f-6734-455e-8c2d-9f2253492965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3213dcd2-bd53-45ad-bb01-91445fe1f75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc6ae07-d39d-4aec-8504-0b389cdfac74",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2346dc-819d-4d0a-b8fa-369e00414c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc8819e-636d-4858-b16b-7e8837ab9351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f463d6ed-85a1-4083-aba0-3e1db19fa39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9913c7-d856-457d-adf4-68cf44888fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13f07b2-4120-460e-8747-016fdeccfd5a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3425345d-de86-41b9-ba97-45208e18045a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86695cd2-cb95-4df8-b77c-571a5aa99a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18dc6dbb-6d5f-4b53-9d68-a66b7b960369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c251cfc-fd95-49b9-83c2-e57e8cfe5370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656be14c-74c6-4a27-baa6-ecdceb8b5f65",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a644746-7264-411a-b912-34b72c745187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf0c8ee-8ee8-47f2-a655-b6f74f10bf67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fae606-d082-4aca-b5ad-449aa0e19396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4020870c-3cc8-4d05-9d47-17a5e0873eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b0fc65-6f9c-483a-8cf4-1c3e9bf3212d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e72519-497a-44ca-81a3-6950a83c91c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b06695d-ee6b-47b9-ad4e-b048e6b1e06c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82adb1ad-6ee8-4d78-b65b-6b050dea9ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2f72db-fa6c-43a8-84b5-8debbc290122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5411e0-2ba7-4c4c-941f-5fb30b244126",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259c61e6-ecc8-494b-bfed-9acab1eaa58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595636b6-fa05-4287-b7a0-aab94d1ffac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be7d1c0-c6ee-4503-89d5-085d52a8d9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf446020-ce74-4593-bf55-bb344aadd3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdcd6f8-2a45-4118-8739-eb08e0ec4de4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23e35d2-5824-4127-ad8e-3638188a6748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d08e795-a0ea-4fcf-b8a8-54a844e59f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08644338-8286-45a7-96ca-85c3c759dc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71ce7283-4556-4a8f-8e0a-66d7998650d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcabee44-1de6-4d3f-9e71-bd8c178874e1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b776ecf0-cc70-4bba-8fa2-30782a2d8633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5451b91b-b69d-41cd-9740-64b1c64b2546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cac4d72-8a86-44ef-9c92-06a960416200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4efb16d-766c-4d2c-956d-c4eb980fa54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873975ed-9b4e-4f4d-9bbd-89a53b0de5eb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7b74cf-a30b-456f-8184-f7e8ea8740c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b301bd4f-5067-4435-b379-4acbd0dc0636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53534e2-8cc5-45ee-b870-c5d1ddd16e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14137138-6708-467e-aaee-11935735f181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03984014-0599-4e70-b22d-f2cdf51209b5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28bc1bf-f4af-45fd-912d-fc77bd74da62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008dfc42-946e-4c19-99e5-22e7924087b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219e0ee7-fcee-4386-ae06-9e7eb5711ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8443d64-1a15-4861-82a4-ae506614315f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50fed8f-7ac0-48be-8fb5-d6a2d207e99f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "175d9ca2-b770-4284-b4c2-5fd6ad2b7eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f34a03-1c7f-48da-b7b9-ee140b96a7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55b45a4-7a22-4884-8643-b862284f7d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "517f7dd4-52e7-4b78-b4a3-7d8ad7aea38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49ab750-4d76-4a4e-a2eb-9680a6f115f3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9afc45-76c9-4d16-ba61-e310f4e639d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b63cd69a-e621-447a-ae5d-8a6e8536b5ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dffa59e-6be2-44d7-9b08-e2eef67b3c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1299d471-f424-4745-b662-4f4de9ffa06c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "55ab868b-4faf-45d5-87e4-9758a7f1e5c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c680e75-adb5-432a-ab44-d5256cadd150",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee999b08-a4c0-4b47-98d7-5a210384c20c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06567c5f-f8c3-4d56-851a-945b8ded379a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d76af4-b4b3-416c-b5ae-7a068045f322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75fad1b2-6f8e-4902-a0d9-4fa21cbaf96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9bc730-873c-4cfe-a46e-c06535ee7ee5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30d45ae-08fd-4adc-85ca-b7e8b889d425",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "106bcf9d-9d7e-469a-af35-bb0d388a2331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eba5d10-639d-4c6e-b396-e5258d5bb343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77b1a7e9-b777-4c2e-bdfb-6a332a805106"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4da610b1-b158-4e46-8d12-ce9e7023045b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0bc64ba-0236-4435-b586-6c4581eb1ce2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67ab9de7-68f5-4d46-abc6-fed5d6ab7386",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee7cf72c-ecab-43af-ae4a-45f26f261222"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8848decd-66df-496a-892f-d605bb45112d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4dc9f430-6298-4e6b-bb84-e03522a3ec44"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91cba91d-a635-4ee6-80b5-13a4f08b81e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2aa152dd-9c5f-4cd2-b944-a44042b3f538"
            }
          }
        ]
      },
      {
        "id": "0c2e3ba1-3715-4cce-9069-5e9e132a067c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5ab6d138-c7ad-4e51-a269-e2f6da784f94",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a3316a9-15ae-4300-a3dd-f6e1e226d878",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5cdaa85f-b0af-4be4-8b22-e97c825e6833",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b18c749-0af7-48c0-af43-67666a4d55ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb47015f-98cf-4973-b601-d10c4f51ce99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48099d11-550c-455e-9a2e-a6c437a8e2a8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba17c81d-f350-4e0d-b336-a405b5358acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec26c4f-cc6c-426c-821f-820fc88eca71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247e652e-4df1-47fd-9d65-6976f6529ec5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba8bdfa-ea51-49a1-bd12-d47907aec21f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c6cb845-5e47-496b-bdba-11bd86bd23b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f09e03e-e661-4057-909f-0c58e75b753c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661ca436-637f-4e4b-94a1-7c5c622e9052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e7c749-da3f-470f-a49d-055da26fd4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef9c695-7031-4249-8e21-21c6deadb950",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb5145b-6334-40d4-9d5f-e1b7b13290f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190c6f92-237d-4517-a53c-eadc21bc4d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8481e9a2-8fed-4add-9969-f941c4c6ab8e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9a3c63-ba69-42e5-a77e-7366276dd04b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e10218-0189-40fc-a931-0b330d876ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b14bec5-63bc-4656-90a9-bff24f9e5667",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5811f0-3f40-42fc-8eb7-1e66fba40a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6506a5a-0b72-44ab-96d1-9c07d632edc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a2b2fe-60ff-48e2-bdc0-5000c7a4a6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f98e02-5066-42be-a3c5-249841e300a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c2f19c-6b72-4d2f-93d9-62df9d63b070",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efbc99f-0145-442e-97d5-0d66a15a3ef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbc766fd-c6af-40b8-8b81-583344bb59a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02774936-5861-464c-b4ef-ab9274b7447e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f7a6ba-8f9d-4fb8-840e-cdbf40e7a426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056fdea6-bb60-47cd-b14a-fe1abc8ddf55",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290511c3-e6cd-4e79-bb35-7e490ebb98fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3defc7d-69a2-4eba-941d-4e5aeabfa7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e947e68-1c46-45ae-8984-02d74888be5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a7183f-37cb-4c46-8a64-a9d20aaf5732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0b1fda-76e9-415f-a637-7464e16d156b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46c8a08-5c82-47a7-a15d-499b13eb555a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d36e408a-ca39-4bce-8207-509b0746588b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e536ca2-6a51-4bcb-902e-8534442a3f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e76860-59b9-4188-b21e-d5fa37351e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fecc31-1fba-4fde-8e63-be198d7a43a1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b957ede-97af-4929-94b6-3e54c629cb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881454a7-c14d-4e30-acf7-495d44c57623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a4d8ed-8e9c-45bb-9d81-056622f613aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173c1fd5-9b4c-40f3-b4cf-960927bc1e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57373149-ed0f-47f0-91e4-395f8facd60f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b922bbe2-295d-4bf6-9e12-55c066d4dd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb9f6ff-190e-4274-8cf2-a13da74875eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e26760c-04e5-4c05-a4bf-b07bba8118fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26bb8b8a-5a47-435b-938a-e3702eb88b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed4a23b-29a9-437e-8689-51d854c9179d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89593df6-04a9-467d-bc34-cae0755e4cf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a63e7c9f-6a3a-4335-898a-2178194c98de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587a0992-4fb9-4432-9538-83cedf8b1d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2b9bc9-1ebe-44e6-91f9-8f239f88a7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d256d476-0e1b-409a-9a2e-ec6669bbae29",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18e450d-f5ae-42ae-a67f-669587302228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1671b565-7268-4818-beac-55e134709064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f76cfd-dd22-4495-ac9d-b3c0378f4989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51fd6df-e8c7-4ba6-9b98-6f253b32dbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6556908-a6fd-43e3-a715-5563ad3f9c7f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302aea21-97a3-48f8-9134-a0ff6a69e50d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8a987cd-6cc1-49a3-ba31-657098218858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77aaf03-979a-4651-84b0-3cb5db486f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16688a84-01bd-4410-a7d4-34bc2bfa73d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f49b75e-1dd2-497f-9c8d-b88459839c14",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a7901e-0e6b-40fa-a836-2f36c968583c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d869362-2485-4da9-8411-14f7e8214067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fe0b2b-2354-41e4-a3dd-a912c3fb9a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97591ada-f2e5-473e-8385-dc72737002bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750bd6ad-c8fb-45eb-ba87-1aa0d0b350df",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46957e7-392f-48fd-89b7-61ff67de79aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f632ea-51ed-4b35-a8cb-3474f7579b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcf90ad-e5bc-4bc1-98ca-a741ca275492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89fa6ba7-761d-42d1-ad0e-7ff81d780d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322964f6-216e-4788-9862-fb8f8bd53ba2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737524bf-6c3e-488d-b944-c52942f9ced5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf32495-e9ae-434c-82f6-de8c40ea65b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8b68d5-8d3d-44cb-9bcc-9f94f38cab28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a3056b-05ab-408c-9038-ceeadce27ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23476cba-2db5-4012-ba63-059d2f670679",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09190178-764d-485a-b9bc-bd0da424cce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bdabcea-a167-49b4-88ba-2c7bcd005eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc92873-bb57-4b9f-b00a-4be0b2dad16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d60e7d0-5617-4d87-bc79-ce5d1e0cb313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd3b26d-98c7-4baf-806d-13a1f3e2b003",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591fa3a1-a56f-41e6-bcd7-6dcd95586265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab33a4e3-df13-45ac-bd75-399950443a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfe7717-47b3-42bb-b19a-5e98d87c2e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d1101f-9289-4234-854e-45e50d9dfb86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe17a2c4-0f2a-417e-9481-266111f35fd2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae21525-1c4e-463f-939e-b6e00cf21f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02044ca-eaea-4b9b-b3c8-32d51621dec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9568fb0-8d0d-4acc-a150-ad6d2d94fb52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a169eb-6454-43d5-a06a-5f84c36eb58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2dd35d-83c0-4c84-9683-98c906012a9d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca05a7ac-8ce3-4951-86b8-5c7c602ec3cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e43aa2-90b7-423a-bbec-f5cc5fe15781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51505bcb-d0a5-4523-bae0-777a2d2e8ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1bbfc5-c796-466a-85e4-574510aff08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1933c537-b19e-49c4-81c1-6c749149ada7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ff2d7e-4510-4ca0-9ec2-b4eab92638ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f8a28a-dda7-49f8-8ec3-0e3ee9d1085b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "977dc1d8-c228-4560-bf13-937ab4915e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992a0971-7b95-48d8-b747-955825d6429e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cab4d8-05e7-44b0-9158-5a248ea7a9dc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a81a3a8-0cd1-4148-a121-76a19b616d71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24787386-ede0-43e2-8026-ec0e5929c019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cc254f-189c-468e-afa1-5cca93c6930f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7bdb416-9912-4f0f-b41f-718e4844f2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7348cd-9134-4776-bc89-5e2d1cedc3e0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42634d60-3348-48c8-b8f5-f08c99f762b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d3d5aa0-f5c6-4142-abc5-15bfe4235942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1033c4d5-1abe-4c03-8f2a-c70000df6d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb7b98b-72fc-48bc-bbcf-2390089f44ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4958bc5d-87c6-4634-8e7c-3672205fb372",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e09baf4-0745-410b-b4a7-6076c6ac18fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3f9a3de-b586-4827-a7ac-a21b600ec091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "178cb8c7-8ee4-4e18-9e5c-0d4f3a1fdfbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb49e11-d5ae-445e-abb8-74261317dfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96ca79e-f9a6-4802-8091-99987b09a836",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee999ec-b891-4b2e-a974-f586bbbcc841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a568d07-8191-47d0-a6b0-c52fb95a73b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42face87-87f9-40c6-ac23-22511f71c870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5386f5c3-6cbd-45a7-8314-e11e6ddcae87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253982c1-b6a5-459e-a5f7-23be713385ee",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba76fe16-e115-41c7-998b-d8088730edd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f87354c-9251-4926-8fad-397ea703e25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4468ff-c319-449e-83ea-684ef227a8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a85a3d80-7185-4af2-b05b-072bb4348dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f58fa7-b77b-4bfc-bb5b-f07a41aa0dfb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1d7c23-a6cb-4770-9873-2a78c8f76261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f53a43b-832e-414a-b93e-e978bfed7984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3d1576-2aa5-40b8-ab40-758394fa9b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4516de83-58f6-4ddc-ab51-6f75e940af98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397fb98e-6a2e-411b-bf2f-b1cc39bfbb95",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddbdbae-6058-41aa-9d84-60fc9e68e05c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50dca0db-7437-4eda-8d2f-1c893158fcde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2f614b-dad3-4565-8544-b01cc97a6db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359c968f-c404-410e-b942-e8bb21c8281d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3789d613-ea21-4e96-a4ed-4adaade52abb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10dd371c-0497-4880-a80f-d36966190744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c791784-b72a-4b61-a945-34a9b7dddcd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c55f6e8-6413-4fd8-a80c-44877f92e88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31fd654c-c55a-40d4-bf32-fae509a5bd2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e274cc9-0019-40c9-83f9-dedfb02d6b7f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595f6177-1b4b-4974-b221-b8039b5ebfa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfdc2789-ad8c-420b-aa85-eba14e8a37b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab2ce56-7eb6-451d-9c1b-536fd871d2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd60d4d2-964b-4c3c-af29-84f1f777e77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4580d3-fe43-4551-af59-03d2d1d13663",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d44037-5461-459f-9a2e-36f20b664d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e4608d7-9120-4d85-9d24-1041bb7077f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e8ac5e-70a5-426a-82b8-05b380799cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8840b4e2-bca8-4358-b9cb-23178d028540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e14c9d-6405-49c9-bb79-3a20c25515c3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3fb205-a13f-4787-a24f-d714292a344d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9ebe2f7-2fd8-466c-b1c7-01390a45523e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8c3d90-ebbe-467e-9ad1-a5d2a3344340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe0893a0-a3f3-4d5b-bf68-b008dd23d15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8357dba1-5e74-4005-b0e9-c236b5ae0beb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fffb94f-f461-4590-a830-455df38fefe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2ed066-6cff-414a-8281-9f64785180da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5298848b-c61b-43bf-acc6-62a41fbce37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a512f32-2bec-4ee5-90b9-8597374bba1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbfc4fe-17c2-46bd-9138-b0efde5bd7cc",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f8a2a2-6501-4a80-927b-91347556e82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac4ecd9-01cf-4afb-b6f3-e512e2768992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed6b984-852c-44bc-a2df-0b64ec2a2971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a024bd08-1c9b-4c11-9261-ae6d65f65203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da3a74c-7880-4182-b24f-d85f6d025b05",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ef0b83-78e7-47d4-a956-f92b127ca0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da87901c-a05d-4527-9a2f-e126b0f521fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e9b224-2915-4060-93f0-89b97daaae88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b089487-6294-477c-a756-af7a334fbc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cc8fad-787e-48df-a111-71cd51795ad0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0104fe37-c1af-4d55-a205-10ac10439666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452cf1b7-ebdf-4735-9c8c-afa7a1217b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46806dc8-91e4-4ef3-b9f7-2f9d21fda960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "189f91c1-68e1-41f6-afcb-6b1b64bcc1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9160536-50af-4283-8ede-401615b0a90a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23bbc3f-5ba9-4f2e-9f8e-80902fe7c7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d3c270-30c8-491b-a0aa-711dab4bc642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0adedc3-553b-48f2-9551-91f05190fc7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1483899-b20a-4308-af01-af1ca9cfaa7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30746d8b-5461-4b86-8f57-939e5611bdb1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4279bb05-e0dd-4821-973f-d97c983c2b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930be1f1-fa89-4516-9600-e2ee2394d804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b74c111-4ee8-450d-8d6f-4b114ce59da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5fdc99-48c2-4ee4-8bcd-c72857df809c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77c7b59-450a-4d30-99b4-4f51b22fa979",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f5d529-69ee-4b2d-a376-4666c2358e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fcca90-bb7d-46bc-a705-2dbc6e701e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebeaa0c-dc65-4b16-951b-e117a65c663d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f99a763-1a9e-4c33-99a3-710efc285fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e00111-689d-4b3d-9e2b-06473bff8db0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1815fc42-b78a-4de0-91cf-78fd2b63823b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea74a9f-0c3c-489a-842c-07bed2e3bd74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff8707a-a362-4045-958e-351af29cf0ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56629adb-aa0f-43ff-b34b-ce3c31c700c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ab105a-53b9-42a8-af71-0abad17641e9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c325b042-e718-40f6-9a97-fa70ad95ffa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8384005b-dfdf-4e2b-867e-9dd6f9e23852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "684294ff-8cf3-4ddf-aaf9-aa3b7d5afcda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164d551d-fb2f-48f8-8239-9654b2cd02c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec59c749-3287-4187-9c98-46159efd817d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fa7e86-87f8-4ec4-bd42-5472767dd7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce75886b-e22a-40ec-9359-0b26622d6dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a1e6cd-2d60-4f67-86c0-fd6336ad5479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d42939-9c32-4df0-bddd-f908642db107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d6b9de-8cef-46eb-9601-24690171ab86",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42aa8bfc-2463-4e14-a141-caaecb867a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa1d22f-c635-49eb-ba19-506aa494417c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf559f3-f0a7-4c65-9bf7-0e531afe71d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8927a1c9-2439-48ba-af7c-e9b3dfeedf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e88c2ae-81ed-45ff-97ac-e7ab4bbd7df2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e5b2f5-37d7-437e-a9c4-5b5f17f26983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0bd183-56aa-470d-a1b6-e87a781b657c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b832a0-8378-47e1-be3a-494cbf6ae21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ecd9361-2e6c-4c2a-b62e-3263daf7f95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc05ab4-602c-4109-910e-ad3a4b783d4c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4ce61f-52c2-4bd2-936d-96b8f1dd3e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24894699-f0ff-4355-91e8-bfbbc5ed7cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed0d5da-16c5-4eda-8f08-41115c67bb6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f0a1a9-8c6d-4d59-9049-56874b5c7585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7051688f-390c-4162-b732-68fd65b5cc72",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2f3224-6606-4797-9485-129d60a42ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f102668b-e536-4d97-8282-b149f9e7cd94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4fa067-1844-4db9-a774-f9409b3f2b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ea66b9-8bd6-44e0-a485-f9f3f9dc64bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50862ff-743a-4906-b96d-75aba932fd99",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6577a44a-a93f-450b-b7a4-4144b7fcf796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef48067c-5e42-40ef-b191-50bfd9171ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5600234d-5b0b-4c1f-a2fa-130e7bcf2a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794ffec7-bebb-4e5f-a236-ef93ae2c873f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4b6521-bf41-4cd6-bbad-b5a6dbef81ab",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee22d0c-7c34-4af3-9817-e6c4b640d8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9a9651-7bb3-443e-b90e-b56f2563309f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c3859c-9e2a-48bd-a725-0d5c8b75d97d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb82172e-7813-41a6-aa6c-404fb2cadf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9bf452-88e8-45c4-a63a-881bcaebc83a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4488c7bf-8c9c-4891-9a0e-9e89f1b00a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e88d06-b5bf-4d6a-9be8-71db48edf892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7617d419-9213-42d1-8e73-9a464e05054b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183e9294-e276-4cb0-8d78-d4954ea42dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923f2be1-c966-4a2f-81db-1355374c2faf",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc7830f-2a42-4569-8d6c-5dde32ae4d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c0bcb8-f4a5-4554-9c71-003d82d933d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187e0ec3-17f7-4dbf-8b0c-9325aa7098d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460a66b2-cddb-4e1f-b4ac-5834cc106ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54242ecc-6482-4786-b67e-c9999c05e4a9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b7008a-5fdf-43a9-8b2f-0525ea1929bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829718b9-87da-4bd8-97c7-6e1f3bf32c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7076d16-3f5b-4bb8-8e6a-3c6f9395a6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a61860c4-21b8-4526-9a03-065adc47a9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d628c127-4e34-4156-9475-72d962fe1a91",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f703dfc7-af53-4b36-834c-5466625eb363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d027085-0ca3-4915-9602-2c813aefd767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ccd694-a635-4871-b465-e05053923ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d37c75-8f49-4262-a780-6f11afdb6ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d34a8ea-2e4c-4a0f-a543-2dc2770a495e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad6185a-e851-4cdc-a19b-727848927e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97340371-6bf9-407d-a5d9-99f48dd97800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb43a798-1a46-4f0c-8a4c-d8cf41a58890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef5f9ef-d273-49d7-b2c7-b10b29540c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f4e82d-52f9-4aa4-8dc0-8378ad6bebb0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e424c8c7-8b43-4c56-b5ce-ac670c1e6ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0becebf-0c08-4eab-a734-3bef8184befa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c791cd1-d8e2-46ca-88c7-0f4a4c30c62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4899ae85-025f-4a19-b9ea-d785371d2b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee59c115-38e4-4b47-acbc-79d6123768ed",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3d1ae8-88d5-4cf5-8c93-7d3fa7d99cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69c0cbb-41a5-46bf-a8e8-18e2fd9c0169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056410e1-31da-40ef-b1dc-6126710a1191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76439bb5-ba19-4431-a2ca-17d5ea9cc88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2474e5bb-c512-42b9-8905-68a3d4eb46fa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4aef604-658d-4eba-94b2-0cc9a270add0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaed0e4a-ab6d-402c-90f3-1e1a2410bec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39161afe-580b-4e78-a67f-170c0d647b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b402740-3b38-4916-8bf9-3e5a637eb7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa27cf3-ec5c-4050-bf99-30cbf62ab0dd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2209c2e-2622-48d8-8e2e-0c97d4af48d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1ba355-1f28-4906-82e9-933f16321ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41eebe9c-476e-4507-8a3d-4b7d94a00332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150825b4-4e17-4da1-985d-647c92f5466b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c263b4-f139-4282-bfcb-814c26bbd4c1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2a2d28-a3f9-4360-9283-b0888c1fb366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2148dff-58ae-411d-aaa8-e23eb40b2e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde6be65-b3a1-4ff5-93eb-dda9e273d021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2ebc9a-ed8e-4753-8988-9c940b100e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64215e2b-b71f-4919-b5ad-a8210c7d721f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1733a9a1-e2a2-41eb-9049-a542be1cb30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "139e0348-2480-466e-997f-74f8d81b724f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b998fc1-979d-46c8-b6f1-34c7bb5cf50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3d6caf-9a30-441d-882d-f54562f2f2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadede2b-7dac-4be5-9c8a-2527119f15a0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935bd526-253a-4625-9709-4b046ae34cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d49ba2-8274-4c65-bba0-b25219aad92a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94727299-3e76-43f6-837a-29683cfa9733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e92c5f-1079-4bc4-a39e-618c5ba9b6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e5c7c5-4584-4a9c-8c53-a61ec32e4770",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b505b01a-a9a4-4701-b1df-da2a25b19d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cef4a30-d4ba-4ff8-93e6-ef63620c6bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50bd8e8-df8c-4980-b0ab-445529debf8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c751892-3c49-44e4-99df-5016d8317698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f899371-8702-4ffe-812b-47c97801402f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06989013-46e1-4d19-8b69-20faf1895bcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbc53085-9da9-4743-afa4-bc8e1fbaa988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e5fb6a-fa35-4f9c-8d59-df95904a9f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a93de54-543f-4413-a562-536fead6af93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a0aaeb-2317-4321-a256-e80081cf783a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba85a9f-9448-4d40-a83f-6a44df8c873b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6028f0a5-fe2d-450d-803f-f90c041d1dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed04e17-afb1-4efe-bfba-43ab8104cd0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922f5c3f-cadd-4411-8b8f-569901a7be4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ee1a65-7b86-45c8-b8e2-794a89d866c6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52eacf8-7d6e-4271-8663-e09c1cb26420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "665478b9-84c7-4d8a-9902-d6625688d4e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7672b456-56ea-4d6d-946e-e3754d1b6a6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a72b72e-b083-4e4b-b62d-3cf746bea953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b8a866-6f9a-4875-a6b4-21ae7b0dc3c7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf7e823-ac75-4ac6-a393-35b8f8bf7b39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21e0829f-bfc3-4536-9196-4995b04f7b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a57a5b6-047e-4717-9a1c-dd420eee4135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17bd392-898a-4fa2-a839-cdaf9bad1ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e0b9c3-2a71-4338-9cdc-b582c21b5b3f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae2cbe0-3c1f-4e54-b2d1-802630dbea3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a77851-0e5a-48e0-be08-91080a138378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54faf20-a20c-4168-80f3-34747d557324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce47bc5-6ebd-4bac-993c-99271e6cd9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d493ce02-8627-4da3-b302-b296d7b86d3d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f348ed9-6ce5-413c-a2ff-6a1a83680e76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b61f652-918a-4ed7-b2cb-9fdb765682c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797ef0eb-f8fb-4b0f-baaa-aa91b8f69c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cda0af-65ad-4e44-b86c-609a1f6434d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32bdb996-6710-432a-9519-1c610955a41b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4f73a9-deb3-4813-a18b-abf1988b3a94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f857f0f1-47b8-453f-bf7d-478dd6f5a572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0e38cd-33d5-4cf7-8925-92fededadbd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc84b49-aace-4bf1-a74f-13eca296da5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b88aed-5e1d-40d4-84ff-e66acb995d5d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a2b0bd-7450-455f-a7b6-9d140b0feccf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "411c793b-9780-45b3-afda-84d4a5ac6cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c6d8c2-d64e-4c97-aa54-d4ce3ad9e172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c98498-51ea-46b0-b077-7912ed941305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c948dbc4-0ade-4e8d-af39-32ec30b6fd7b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277923ff-65bb-4669-a8d2-f2ac3d99c76f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf85baea-555a-4c26-8c27-231bf715df2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6281d8-7e2a-400c-9e71-798441a9f36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8eb9f96-74e6-4cae-83c4-2616884f83c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fdc4ea-7e3a-4a8b-ab7d-6f4c2156b795",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383e68f9-2d92-41b4-afb5-4f2175009ded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdc59157-c65a-431c-a1f7-202036c0350b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cae89d-d875-4e0c-8a03-608a7c7d8b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a510cf3e-7a0c-4e78-a56a-5a0b65aeb551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada0b731-0578-4de7-8afb-77356274f107",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbbe629-88e0-4669-83d0-824144a0ac4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a5fab49-341f-4b50-90bb-47718eb3da21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7578732-cf9e-46ce-a796-6c9d2dfe4f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88af4a15-9dbc-415a-9c9d-4bacd3df65b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5622fe-4232-4f7b-b225-b6ffbff0dbab",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728ee7c8-c4cc-4f6f-af16-a84cdfd2d838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1ab8b23-921b-4dfe-b5a1-8f79e529be2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0955222d-84df-468c-a9cc-cecc984fa6d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc12152-f8f6-49a2-9a64-2b98d576f5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00c7b85-eeaa-4146-8650-383675467241",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddda765-3311-415d-8e06-e12a39007e78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9217cc4-4fe6-405e-8705-70fd5aaa9bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1110bf37-b418-4831-b0fb-cf79c41e4cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99722094-369f-425e-bda3-6651628e4d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca783bc5-8031-4f0a-9f7c-05e79a648d9f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48279fec-e5c6-4829-bf0b-05e790ffb7ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3466e8a3-c068-4827-9f77-dc6e02e83f4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85243e73-568a-4808-b86a-dbb105c79118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6825720-7526-49ed-b50f-0e06e99b2eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e851d3-298e-4b3b-9c80-55777cc32386",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f975caad-2377-4ffc-b8c4-afda510fb61a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69015f94-f0a1-46cf-8a4a-0b105bf09ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab958811-519f-4bf4-a4f1-40ca245b5d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1495253f-aeb2-47a4-97e8-09da95a71e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bedf16-d025-4b08-a327-471101bfa53c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c8da05-16e2-44ae-bb0e-7439307481db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7832dd78-dfd9-4485-a8b3-e06dc91a0cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff146307-8d04-4cb3-8547-3531b136d238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34e3ec0-7865-49ad-b474-290c89b4eac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f7ba8f-07fa-4eb5-ac40-edaf9dc0128d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482b01e2-e65f-4f28-a616-633da72ad7f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55179c34-1627-4a13-a625-80d124a7f54d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae03e058-1fb0-4d4f-ab73-d72e774ad6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddfcd2dd-60a2-49f5-89f3-ee5beaf63b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7653370a-5ac6-4467-b4b6-c48c87c16c27",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3a956b-7a62-4ce0-91fa-0f402e21ff1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75e3cdd8-c1d4-4571-bb1c-2dcf231fd1d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc60bf3-008f-43b2-a496-15a36bedc5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ffd97e-9534-4ce5-964c-49f60d9937f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5932de-35dc-4d31-af75-5f0348e1e815",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e3466c-d273-40f2-a968-600a13528802",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef92a795-6450-4f74-b830-b6ac09f15c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c91e8d-b682-4a1b-be52-8fece54030b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e639066-208a-48fb-8d13-abd3dd753edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5a4ea1-822e-4192-a12f-4642c89ca015",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1db81f-795d-4891-82bf-00fbccc598fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0ef1fd7-6059-4558-a124-de0fb4b82b23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b38b94-fa95-4311-bc0e-19f87e8ace50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0f2b54-8371-4fb1-beb4-5141e7927840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87864b4e-4890-4d7b-982a-ce145f36566a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f59791-3ba3-478c-b7f1-1a937dceca40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a554fc8-3e55-48ce-9a35-46c76931b585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2552ecdf-f3d8-48fe-a0c7-20832d77e3c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa5c631-6c36-48cc-820e-0f9b7dd76614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3baa2dc2-52cf-4f37-9f2c-3dc168d11b42",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d959498-a942-4baa-adc0-3d4ba94f1575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20b4d7e8-6f1a-4d4b-8836-8818789fca3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263eff21-79a9-4164-a46d-c014ee5582d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1869bb1-f699-4675-ba54-dfec050ace47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35699cfc-0edb-4e93-be32-d7ddee33065a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bd23f1-ef58-4ea4-8b5d-3842b533d60f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f75b2208-ef74-473f-8297-5dbe17ff84bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245f6740-b553-4ed5-b260-adc78b28fe8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33333e80-75c5-4f1a-9ba8-e0217aabc0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7895f7-e0e7-4482-8e11-aef409958b0e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032b9abb-8d3e-4924-bee0-df7b5057de79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "555df898-44de-492e-a696-f0f6172180f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6163f567-f93f-4c8a-a143-dd2772a6f45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "002b76e0-164b-4de1-a1b5-c55ccd7d0dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709971a0-006d-4b60-9f3d-9ffa7429e576",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc09566-4bdd-40bc-b28e-431b5affc748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abfb88b5-7ae5-4718-8d8c-66265dae4bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8389b2d1-53d8-47da-b8ce-23ca617c64e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a92d117-eac2-403e-aa8b-aa8633a8c774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce290300-64ca-4d71-be74-f98b9ab55c31",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d761f3be-c8c3-420c-b031-afc4a50baf75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ceb6826-1e02-4f17-b0bd-cb72d6fbe4b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c594295-93df-4b80-aa81-ebc38fc4d508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3c4f00-fc3d-41d5-ab44-3db8344aef93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f83380-251d-4eaa-86e1-718878830b4c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efbb3bd-66f2-4e49-ad41-e9cde287d337",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e71e798a-4d8c-48b6-821a-2de775ad66eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f42eccc-c6c6-423b-b6b7-b0434a5d13c8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba79db0b-758a-4c55-b871-410e85a38f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539d126f-c4ee-4c1f-8d35-5bc4656e9426",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7c441f-c8a9-4c33-841d-09ce9c52ea2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3f231ef-eeb4-4eb4-bca6-cd93b541a988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7df394-aa4e-4bcb-b1fa-782bd5fd76dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c876c69-2dba-4a50-8d48-e20fe0f2c512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b090423-68fc-4a56-bd0e-5e648c572092",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec62c9b-fd59-405a-8479-528963ed2cfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "008074b7-63a3-4c3e-b898-b463d7f3081c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce75ce9d-082d-4ce4-b849-e012191fdb1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af14ce09-7e76-4ab5-b447-22a2a746060a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3a645b-71ad-496d-a1e9-e524d9860941",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd78d26-d2c2-4c49-8289-68a68ee42a74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67cb457a-baa0-4d50-a74d-fd7c79929ed0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "982aae46-3421-4cc4-9c39-950e01e930f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcfb77b-824a-498e-a743-36dd52db3fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a1ca10-c7b5-43a8-98e9-6d1141447d2e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4773cc20-8f24-42bd-a8ed-e8731711b171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f171222-bbaf-4e7b-b0f8-bd78f4bb68f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "635abaad-ef01-41be-87a4-1c67c0b91cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1254df86-337b-4224-85e9-54a4d86a46a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67d7117-3694-42b3-863f-b680920afd7c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6295094e-0365-4a50-befd-4bbd0060f90f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31f4ca9b-acff-4900-a558-b198ef67841a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a83439-d28c-4097-8c37-9d807d5b77c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d29e5460-9705-45f7-993e-5d7b0932592a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccddc2f-4994-459e-a028-782f57b1616d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165025ce-46c5-4453-8a0b-7937d26165e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "266a98d5-5de9-4e62-9b19-aae073ff24e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bb9ebb-6404-4f47-9cc5-ade0e4ecb6dd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92384c87-7c97-4669-af6c-7e50e10d5963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16d66e7-370d-4e5d-9b4f-6285902bc481",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb4b351-f3fa-4f88-8b50-712146d6059c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ecb8c73-f702-4d33-9fb8-97fd49f001bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9dda701-86bd-4038-992b-9832ada9d78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a81b87ba-4cb6-484a-a862-1068acafaf12"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0582d8aa-3eda-45fb-802c-717ed86f65a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15515798-6266-41c1-80cc-e295a6706190"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f89c1b3-e0b2-493c-84a8-fd1b5aee4d3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1dc08c32-79db-4080-933a-51c2ebb70e9b"
                    }
                  }
                ]
              },
              {
                "id": "890f15d2-f46c-4e9c-9147-a0c90d2cbe83",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22a609e0-43e9-433a-9bea-f81020ddb427",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38718f89-7ed5-4f55-8c20-e5f192e29e7f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a6684b34-58f0-4a53-9bd0-c4ff113136d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c099ca4-8a28-4e7d-ae17-c00f09ea706f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3e5675f-5403-4696-9922-7c2c83ae7046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e76c818-af3d-4978-a4c2-681347cf51d2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76afdbbc-e17b-47bc-933c-ed479eea31c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8c6b5519-670c-4c42-8b69-e136a2b7f75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bdaca7-0bcf-4c4d-b1c6-857c5087aa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6438727-0492-45e7-b5a7-c2b9ddb80939"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65330f10-9c6e-4909-bcc7-66ddc7d2106b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17b92c89-384d-4258-a92e-9aaeb86289cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7ed76c0-c0d3-43d1-8a61-bcdeb05e32e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27ac4044-3727-4285-ae5b-17d20f70cd3b"
                    }
                  }
                ]
              },
              {
                "id": "ee2811c3-c9f5-41cf-89ed-6a3c3ebf01d0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cc123bfa-a61b-479c-8074-4a3af3b46b04",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47751a66-c1d2-47b5-a7d9-e51fbdfd704e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "688cdb09-1765-4dd3-996e-8d7130fa861e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58cd880-d6f8-41ca-bd70-ead7984d2310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8c918c-c024-4738-9177-fc74b393695a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2416790e-33ec-4946-bea9-ce5b6d37005a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "85087ffb-b77a-4047-91cd-3a4949f5d923",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b9dca09-eeba-4511-b835-544fe9b5ab17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2f374952-0923-4213-9107-2932123bb60b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19a5c0d7-4bbc-451f-8300-ecfcbf8fbf4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f59dd0f-74d1-4d8e-8449-1fd55f586e96"
                    }
                  }
                ]
              },
              {
                "id": "e089e816-874f-429f-b1fd-dcf75d916153",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b2c9146-6825-4e5a-86e4-6c701f531658",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a4651ba9-98da-4010-8d1b-eb46b1ae9006"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc1a47d0-abc7-4ea4-a4ef-094434af6d3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5045cc6b-afe9-4728-a936-3b97fb9a508d"
                    }
                  }
                ]
              },
              {
                "id": "fc2741c9-953b-4569-b369-99ab58fa7898",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e684c16-c46a-498b-9254-07b79ab5d877",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4d76e63a-8469-4759-abc9-34985fbb45d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e4d2d51-1dbc-4728-b4ba-662889fa87e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43a0cf0d-bda8-4172-abf2-18afa4cff685"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8d3091e-ff9e-4bfe-9750-80895542ceb2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "48460e1d-0d56-404c-b894-a958b819b806"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9728e39-5ce0-4c00-a54f-f6e4bed3fa18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8f6d8d3-c0b4-491f-8a9b-5e85c8b5d875"
            }
          }
        ]
      },
      {
        "id": "43b5d881-349c-4625-926d-8659a3026807",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2a0b64b9-2a3b-4528-bbf3-40372a657b7f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1c59352-f743-4b72-81fc-474662f18d02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a651b01-bf37-43c5-8ef2-33fe9771014a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fcc686-757b-4bdd-a671-0935b8dabb0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "62106daa-190a-4459-8d71-325bfb666091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db282d3a-d3e0-4d99-945f-4364f980f198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8e61fe8-748f-4d01-84b4-17cb616774cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e77c7f-9463-4c71-9a5c-5150ae7aa31c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14a92a3-cd08-459c-848b-a4e26c4e9920",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "85a43b80-b18e-4ce3-92c8-9b21f92b7b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbaeafb-34a4-4dca-beed-3d501589f6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f76e60f-574f-4f6b-bc64-17e3f73b916f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4b9bbe1-0b83-48cb-aa95-70c1f581902e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e9224a6-ae45-4d6c-a4e9-e1c1bf1bf111"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdc72deb-43b6-4f83-aba1-267d628a5012",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ef4d525-ec4c-4843-b48e-b6d80f837258"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28d3455c-b201-4ccb-844f-98c5e5ebbe88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fdc7f416-9788-4088-8a47-2078544cfb2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8887358-38f8-492b-9162-2046d51177e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "176720e7-c624-4a93-9b99-e384528375ab"
            }
          }
        ]
      },
      {
        "id": "fa5875d3-2737-4608-95bc-9bf300a023da",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f6924280-3599-4c85-be81-399cba706e0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41cd8ad8-27a3-4817-9cc0-b2d11a4f8775",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77a6b004-d11a-4fb3-b0d5-b2394033e2d9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc768f48-960d-4c12-98d9-2abb8c1ec277",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ec40bd8b-1e50-4ba9-a348-28a538810183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194ce568-f351-43b1-9a55-660f00052b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31d73d9d-3caa-40ec-a589-a0d9cd7e3307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8c9917-c72d-4fca-9e17-b9dba9ed4828",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7242a4a3-1258-49e4-82f5-a9946bc69169",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fe5dc081-4c01-428a-a9a9-adda73d09b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15edb4b2-9d85-450f-b0cf-e3e71479e8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e980f538-6831-4600-9657-3b787cee7d47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7f441e2-9f98-4110-8e9f-cc209ae32088",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43579634-7d47-4f59-9180-f59a08324ea3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "daae2cb1-5094-40e9-958a-51201c4e0403",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "723e7771-1cdf-4c3d-aadf-fac15a60c8cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7310cf85-0ed8-4818-a386-8911d1092fc5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f3820fd2-246d-4b33-9f6b-a7b697ae360c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1037ce4-c9cf-4360-8c16-07caa5cbde20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "474e566f-849e-45ae-9420-5274fef5478e"
            }
          }
        ]
      },
      {
        "id": "44dbce93-e031-4b6b-a418-bb477102894a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f902951b-7c55-40fe-95a1-a96e04d31b12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d241508-87c5-4d18-9c2a-91ecf8f1d42c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37654308-e963-4800-a76d-d5082ab0990a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619a6332-ec1f-48a9-b1e8-cb469aec5eab",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "931784d5-3f1d-4e2a-b742-e275431a5113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceefc484-bd08-4318-ba29-c53f734411cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e72e2da-cb93-4e16-a27d-28824871d234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720bebfa-631d-4024-8d4a-98dad48dd62a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d99b24-cb63-452d-b097-2e7703029ad9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "df4539f7-084b-40e2-b816-3095d658eb55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d79e85-92ae-4085-aee8-41f1af5debd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74c7823b-682c-4be1-99d0-bc7f9c7b7df9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abb69524-54f4-4c06-bf52-cd508ca4ef92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fad10159-1ff5-4776-bc35-20aa4ad549da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b909f667-bc18-493c-ba33-061e8eca7251",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6aa3834-d1ef-4cf5-aa28-4653b01f87f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0d69763-8e4e-4140-8f83-920395f6f68c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9b57f709-bc62-4ae4-99e0-b7bd4a372171"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78a4ed39-3c60-4e01-82c2-aa44d00d1f69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c459253-d06f-4bdf-a196-327581b11183"
            }
          }
        ]
      },
      {
        "id": "06621827-d69e-4267-9491-0bf1344961e5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a231fa0b-2b9a-4f21-a79b-d35575237207",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2577c674-ef48-4f2f-8d05-d7b370dd14d6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "023ee1c4-49db-4c02-823d-24fd6f63dde1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddc1d4db-8b18-4dd9-a1df-e84eb22e2fb4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "593bad68-d08f-47d0-94d8-8d4c73dd3b66",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 107.70114942528734,
      "responseMin": 14,
      "responseMax": 624,
      "responseSd": 102.34527036700287,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669336911046,
      "completed": 1669336951982
    },
    "executions": [
      {
        "id": "8b1464f5-10b9-4403-897a-915737c21b24",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4a9b475a-0074-452b-9bae-2f8e49755655",
          "httpRequestId": "437f1b1b-17e9-41d2-8b6e-284d63384bd9"
        },
        "item": {
          "id": "8b1464f5-10b9-4403-897a-915737c21b24",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fd03b774-4a60-49e5-ab5d-8965cde95afb",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 0
        }
      },
      {
        "id": "e63b50a7-b8ee-4ef3-a148-211e7578061e",
        "cursor": {
          "ref": "6841e7ae-ca52-41eb-b85f-fc5acc71f505",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "17263d0f-c69d-4123-a88f-01ef217caccb"
        },
        "item": {
          "id": "e63b50a7-b8ee-4ef3-a148-211e7578061e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7ab3edd2-c12c-4ade-bafa-b2b6f27a0e13",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "a3db8683-fa1b-4d0d-bf5e-1ff223cb9c3b",
        "cursor": {
          "ref": "2771c17b-519c-4b29-a2e4-a967ed5ca0bd",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cbe9392c-a877-4971-8332-d1d2a77a079b"
        },
        "item": {
          "id": "a3db8683-fa1b-4d0d-bf5e-1ff223cb9c3b",
          "name": "did_json"
        },
        "response": {
          "id": "dd8275f9-3c30-47fc-afb8-08a23e8ba576",
          "status": "OK",
          "code": 200,
          "responseTime": 288,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9262e34a-3af2-41c8-acdd-83193791b1db",
        "cursor": {
          "ref": "5153a5e6-0ea7-4509-9618-9612f0cae264",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cb4a1ea4-acbf-44c9-9a7d-454ff23f010c"
        },
        "item": {
          "id": "9262e34a-3af2-41c8-acdd-83193791b1db",
          "name": "did:invalid"
        },
        "response": {
          "id": "e099aaf0-99c5-408e-aafc-3eac2581973f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9262e34a-3af2-41c8-acdd-83193791b1db",
        "cursor": {
          "ref": "5153a5e6-0ea7-4509-9618-9612f0cae264",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cb4a1ea4-acbf-44c9-9a7d-454ff23f010c"
        },
        "item": {
          "id": "9262e34a-3af2-41c8-acdd-83193791b1db",
          "name": "did:invalid"
        },
        "response": {
          "id": "e099aaf0-99c5-408e-aafc-3eac2581973f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003168f9-29ee-4706-be84-c54b148e6de5",
        "cursor": {
          "ref": "f11bae7c-51f8-45e5-b133-e2a39c5c926d",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1307fc5b-31e3-4878-891c-4814f86329f3"
        },
        "item": {
          "id": "003168f9-29ee-4706-be84-c54b148e6de5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "19aebe18-ada5-412c-90c1-832548997bdb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 215,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b392e225-c6f9-4704-b4a2-fbf7695ce1ac",
        "cursor": {
          "ref": "f77bad82-0f9e-4835-aca2-5748d9712a43",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "97453714-3249-4f8e-b4e4-c105534b9ff8"
        },
        "item": {
          "id": "b392e225-c6f9-4704-b4a2-fbf7695ce1ac",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e5eb2c03-8ba9-4d67-9162-b6d2f319f393",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017b39c1-c8a0-4543-9260-1e35ae8f7318",
        "cursor": {
          "ref": "c04d3191-d328-42f4-9785-c364cfed285d",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ec426a86-2485-4799-818a-a51357ad2383"
        },
        "item": {
          "id": "017b39c1-c8a0-4543-9260-1e35ae8f7318",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ed76a7dc-4339-44ac-962e-362f80640ef1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3d1ed0-1291-4921-b131-f476533b86ea",
        "cursor": {
          "ref": "f6ab2920-d1e5-4847-88ea-c54764732202",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f2bca3ce-fd3a-4b68-b99d-b1e115cd46c3"
        },
        "item": {
          "id": "1c3d1ed0-1291-4921-b131-f476533b86ea",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5a60ac89-5469-4e43-a4e5-5d64ce656f6b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3d1ed0-1291-4921-b131-f476533b86ea",
        "cursor": {
          "ref": "f6ab2920-d1e5-4847-88ea-c54764732202",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f2bca3ce-fd3a-4b68-b99d-b1e115cd46c3"
        },
        "item": {
          "id": "1c3d1ed0-1291-4921-b131-f476533b86ea",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5a60ac89-5469-4e43-a4e5-5d64ce656f6b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620558d7-349c-479f-aa30-0ba2e45320a6",
        "cursor": {
          "ref": "357cf3b1-b4e3-4fbb-b0a3-221a02a96375",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b046660b-fb20-40f9-98af-dab3588779d9"
        },
        "item": {
          "id": "620558d7-349c-479f-aa30-0ba2e45320a6",
          "name": "identifiers"
        },
        "response": {
          "id": "75f1236a-9e74-4184-a34e-6559af1c8353",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae318f8-c3f5-4c7a-8a7f-74deb9125042",
        "cursor": {
          "ref": "accb1531-b11a-489c-adfd-d6eb08b89986",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5db1311c-cb61-4f24-9419-ccbbb797abf0"
        },
        "item": {
          "id": "1ae318f8-c3f5-4c7a-8a7f-74deb9125042",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0a38f6d1-3554-4972-8399-9a8f809471b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae318f8-c3f5-4c7a-8a7f-74deb9125042",
        "cursor": {
          "ref": "accb1531-b11a-489c-adfd-d6eb08b89986",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5db1311c-cb61-4f24-9419-ccbbb797abf0"
        },
        "item": {
          "id": "1ae318f8-c3f5-4c7a-8a7f-74deb9125042",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0a38f6d1-3554-4972-8399-9a8f809471b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b663d92e-99ad-4df1-adf6-4d0235191e0a",
        "cursor": {
          "ref": "00e5f684-45e9-45e8-82f8-6d08bbcae625",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "36b583d8-66c2-4a06-813f-ea7e2d97c086"
        },
        "item": {
          "id": "b663d92e-99ad-4df1-adf6-4d0235191e0a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "739a36dd-7597-4c8a-b9d9-1bfb8e96b554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826e59c7-257c-4623-9414-3488adbea776",
        "cursor": {
          "ref": "b57c54e1-a369-43ed-886f-4b6ac58e14da",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c9689ce3-b40f-4147-9e99-b89add41679a"
        },
        "item": {
          "id": "826e59c7-257c-4623-9414-3488adbea776",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4d420f83-57b2-4959-951e-9d4021279392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26715542-dafd-4a87-88c6-f4ee561451f5",
        "cursor": {
          "ref": "f7712667-f03e-4399-83b9-f3ec99df9327",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3f166193-3d39-491a-ab3a-10a774974df5"
        },
        "item": {
          "id": "26715542-dafd-4a87-88c6-f4ee561451f5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0fb59669-fd45-450e-b1c2-8de43e928f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5a4541-5803-425b-ad1b-83db80a2abdb",
        "cursor": {
          "ref": "5591bdeb-3e6c-474f-879d-831134ff30d2",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c599b60d-9d9d-44e1-bb5b-87a734b4e758"
        },
        "item": {
          "id": "af5a4541-5803-425b-ad1b-83db80a2abdb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a88215e7-12b7-4336-8e76-e02be84061ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ee7560-94ef-4661-9bfc-21a177e52931",
        "cursor": {
          "ref": "af836436-1df0-41a8-96a8-74fb0b828599",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "38bfe54d-8f52-4d55-98e9-d72221632c4f"
        },
        "item": {
          "id": "73ee7560-94ef-4661-9bfc-21a177e52931",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "11cf2bae-0bb7-47e5-a28b-da510005d984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffa155d-aa53-422c-b332-edc818fde973",
        "cursor": {
          "ref": "cfcc569e-8c98-4f7a-9c3f-054c5ddb4b8d",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0fa3693f-a693-459f-937d-1a0c421a5dbb"
        },
        "item": {
          "id": "4ffa155d-aa53-422c-b332-edc818fde973",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d12711f4-5571-4e14-9b04-96ac68593bc3",
          "status": "Created",
          "code": 201,
          "responseTime": 515,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "4c0d3918-404a-4c66-8b26-df0da75195d7",
        "cursor": {
          "ref": "76f543b5-1741-4e03-ab49-8efeba0b8493",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a64ec571-9db2-4851-a294-266fc2def04c"
        },
        "item": {
          "id": "4c0d3918-404a-4c66-8b26-df0da75195d7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "982b04f2-ac76-47bc-baad-d881e3b9389f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2e10b9-b189-4476-a043-3de3fabc3090",
        "cursor": {
          "ref": "92d6d70b-2fb1-459e-aa0e-3fa8a05cd91d",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "808f1917-2556-44e7-82f1-0d7657f4f4fa"
        },
        "item": {
          "id": "4f2e10b9-b189-4476-a043-3de3fabc3090",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "950f757a-d5c0-470b-8394-a2122d36c6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ef1f16-f60a-48a7-be96-48f9d0e0fa9d",
        "cursor": {
          "ref": "1ee6032f-d8de-4565-a599-d88e0bc4c574",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "32f577fa-6384-4705-9108-5e54b93a7e4a"
        },
        "item": {
          "id": "e5ef1f16-f60a-48a7-be96-48f9d0e0fa9d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7f6286d0-2d91-4add-9435-c2b8e66b7393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849eb7cb-4030-46dd-aa7b-2456f588a8b7",
        "cursor": {
          "ref": "07fbb3fa-25a3-4794-b585-a6acd15825fe",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "58b871f3-794c-4b05-9f1b-5adfece96676"
        },
        "item": {
          "id": "849eb7cb-4030-46dd-aa7b-2456f588a8b7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ba8f0a3e-bbc3-4eee-bd59-b1a6a7321c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214220fe-3b2f-461b-86c2-0a04a9d9258e",
        "cursor": {
          "ref": "2f04ea1f-cd3a-4197-8474-f40e76594278",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "73e50087-8e70-403e-976f-627095b3ac23"
        },
        "item": {
          "id": "214220fe-3b2f-461b-86c2-0a04a9d9258e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "091ce607-1b6a-47f7-8865-8ae2ed26862a",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "050631fc-0ade-430b-985a-0ee7d4f7aca0",
        "cursor": {
          "ref": "e3a4f692-89b5-463f-9eaf-ebdb191a0a83",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c39f4265-7b08-4f78-af24-af122e22ab35"
        },
        "item": {
          "id": "050631fc-0ade-430b-985a-0ee7d4f7aca0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "390eafae-da21-4068-b741-8118e19ef704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951eaef7-69a4-4b3b-a0ec-81778774835b",
        "cursor": {
          "ref": "f20ebfcd-416e-4a4a-87c8-659e3239e628",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "37726cc0-12f6-4a4a-a3ff-d664c0c9fec5"
        },
        "item": {
          "id": "951eaef7-69a4-4b3b-a0ec-81778774835b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f5aa2c5a-285d-4da8-9595-82814b8e069c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730400e0-683f-4595-b603-52972dd4ebf3",
        "cursor": {
          "ref": "eed9059f-22f3-4672-93d2-070fef110e2d",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "033950ab-786e-4188-b6da-c0c78e2a0ecc"
        },
        "item": {
          "id": "730400e0-683f-4595-b603-52972dd4ebf3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c084fc75-054b-4162-967e-a07897f1cae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29aaa99f-8bd0-40ec-aa46-41d7f989c194",
        "cursor": {
          "ref": "db27e383-23c9-4fc5-8720-20afec9f394b",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8d48f1ac-d447-4f3f-9083-ba4e001ace00"
        },
        "item": {
          "id": "29aaa99f-8bd0-40ec-aa46-41d7f989c194",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ebdd008d-5425-4681-9beb-acd81bb6d9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b75653-9da8-4a37-9374-6f732f8c691d",
        "cursor": {
          "ref": "c19471e4-4fc3-4bf7-8d1b-8603ccbf555d",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a3465a67-3987-4e4c-8b29-dc5ac9ae3bbd"
        },
        "item": {
          "id": "53b75653-9da8-4a37-9374-6f732f8c691d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fdecea7e-37ec-4419-aa3b-5496b23c5ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfadc3f8-3066-4e7f-808f-e9917e66e723",
        "cursor": {
          "ref": "8d8c02b9-01d1-486a-b3d1-e87755dbfdd9",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c7f41c6d-dbed-4112-a098-d44e6e5ea8fc"
        },
        "item": {
          "id": "dfadc3f8-3066-4e7f-808f-e9917e66e723",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dcc682cd-0518-4637-9320-ecc62443e17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd1a045-0989-403f-b8fe-7744542f44b0",
        "cursor": {
          "ref": "67990725-bfa8-42f5-8e74-ca4a8f54db11",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eb810ad9-cb5e-4d05-a2a0-2a9292650c7c"
        },
        "item": {
          "id": "4dd1a045-0989-403f-b8fe-7744542f44b0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c5331cae-bef6-4d3d-abc0-36fff224f185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb17a947-de97-4413-95cf-c376125f9b21",
        "cursor": {
          "ref": "841a499c-0c21-4b05-8be5-44670c06fd37",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "61a64bd2-11cb-4c82-9fe6-ad5b0893ed5d"
        },
        "item": {
          "id": "cb17a947-de97-4413-95cf-c376125f9b21",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1f155ffd-69ac-46d4-9dad-e3123091ec91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fc2428-7b69-4a34-b45e-668b6e84cba1",
        "cursor": {
          "ref": "6aa68cbe-8c76-4f93-97a2-6fac2d2f7938",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7095c716-e359-48cd-a4ad-da36350a3fd5"
        },
        "item": {
          "id": "14fc2428-7b69-4a34-b45e-668b6e84cba1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5d7e06f0-49af-4def-a648-9f619c7e0209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e09e14-74ae-4f85-919b-0d06ad0454ba",
        "cursor": {
          "ref": "4ef4ef3c-d132-4663-a72e-5ce6c2a63fba",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "efa51f2c-4ce8-49b9-bf93-661bf48d6c89"
        },
        "item": {
          "id": "84e09e14-74ae-4f85-919b-0d06ad0454ba",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7049bff2-b404-4fa8-a9c8-8a0a3a7a789b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44051999-05f7-49dc-af9c-2555f4becf0f",
        "cursor": {
          "ref": "f9700671-f90f-4e01-83f8-27719acea99c",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3e5edf3f-5387-46b2-b3e6-5c9ff9204346"
        },
        "item": {
          "id": "44051999-05f7-49dc-af9c-2555f4becf0f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1f203e46-6a37-4bd0-bc6a-03e600c83b09",
          "status": "Created",
          "code": 201,
          "responseTime": 477,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "81cd5121-02cf-40a4-94d4-4c1e84e6f676",
        "cursor": {
          "ref": "ee743f5f-8a28-41cf-8238-f824b5f831d9",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5a0b736a-d518-4b86-b9a1-dc6947e2101b"
        },
        "item": {
          "id": "81cd5121-02cf-40a4-94d4-4c1e84e6f676",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2ad28497-2274-4d74-8a9c-9e903107563e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e451ad3f-71af-4132-bf2b-599d6a2efa32",
        "cursor": {
          "ref": "6458a7d9-46d1-46c0-abad-525720508e7e",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4297d932-8de9-4bf3-85f8-0720c6198aa4"
        },
        "item": {
          "id": "e451ad3f-71af-4132-bf2b-599d6a2efa32",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e3d5450c-0c41-4299-bae0-23d5fac1fb48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5271b0fb-db15-4f1a-a056-388e071e8172",
        "cursor": {
          "ref": "c491f746-17cd-4355-9174-57e5816e7125",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "081acda1-182b-41b1-b9c5-8390df7f592e"
        },
        "item": {
          "id": "5271b0fb-db15-4f1a-a056-388e071e8172",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ad58bc27-f5a6-49c2-9583-4c2020182a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2d5505-461e-4474-8a4f-3924a8f501aa",
        "cursor": {
          "ref": "e7deaaab-0ba6-440b-8f99-a815ac1a7a5d",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c90f9254-eb9c-4746-aca7-70b616063d1f"
        },
        "item": {
          "id": "ac2d5505-461e-4474-8a4f-3924a8f501aa",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3ac1cb2e-b020-4d8b-932b-dda368797278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f41fa00-8d20-4a14-a832-f524cfbfe28f",
        "cursor": {
          "ref": "2dd54513-f33d-4ccf-93da-96879b96db43",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7ac7f620-10e5-4b01-a6a6-d01a6ee9740f"
        },
        "item": {
          "id": "2f41fa00-8d20-4a14-a832-f524cfbfe28f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e2584bd7-d1dc-4217-a881-79d0896e3f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cbd48c-f52f-47ec-b9b6-90ef24f61b8e",
        "cursor": {
          "ref": "dffb0880-a31b-451d-8cf0-8d85d68f30de",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1603be67-ecac-4f06-8381-016aab187e05"
        },
        "item": {
          "id": "b0cbd48c-f52f-47ec-b9b6-90ef24f61b8e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f4ccf212-793a-4e1d-b80c-4fb0425c39ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fddeb7-73a0-482a-ba3e-95d260338615",
        "cursor": {
          "ref": "cdb5b7f0-ef29-42e1-be59-a6f6c588a371",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8b49d56e-c39f-4aa9-91a0-9c2deb0cf17e"
        },
        "item": {
          "id": "f6fddeb7-73a0-482a-ba3e-95d260338615",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b8976608-e042-4587-95be-b0df1f40698a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8963bff7-ef4f-4803-a0c2-925234657200",
        "cursor": {
          "ref": "dd603a18-eb39-486b-a336-a7c5c3dfe0a8",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6cd273e9-0762-454c-badb-6450c13ff753"
        },
        "item": {
          "id": "8963bff7-ef4f-4803-a0c2-925234657200",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "67b7b421-6a90-4bb7-96bb-e44d2b4c8533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1013996d-d441-4828-97c1-5ee1ff57c1fe",
        "cursor": {
          "ref": "bd6bd573-3b35-4659-ad63-1a99f9729a58",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9e797e59-9126-452b-a484-6c6a085598d1"
        },
        "item": {
          "id": "1013996d-d441-4828-97c1-5ee1ff57c1fe",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a6efe7df-27f2-47a7-be20-13c1827f1796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a98b83b-fb20-4248-b0e4-50e8986f1346",
        "cursor": {
          "ref": "d09b99bf-4b0f-4a64-ae05-ce741e424aed",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3ec3f477-3fbc-450a-8be3-8fa709e36c01"
        },
        "item": {
          "id": "4a98b83b-fb20-4248-b0e4-50e8986f1346",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a525651d-b8f5-48e5-8214-01ebcc7696be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80881e80-c69b-4267-a403-63b94264b74d",
        "cursor": {
          "ref": "4db2785e-3686-4cfe-af79-7db056244637",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0fdc350c-89bc-495c-9f2c-fc6a2a5e8ac9"
        },
        "item": {
          "id": "80881e80-c69b-4267-a403-63b94264b74d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8f79eadd-59cc-482d-9409-6b6d2506078e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc089cd-459a-4610-9de9-fa435a41f53f",
        "cursor": {
          "ref": "42e2f5a7-63c3-4d88-80bd-8d0aba9a94f2",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fe662a18-3d50-4a80-a6be-9462e3a68c1c"
        },
        "item": {
          "id": "0fc089cd-459a-4610-9de9-fa435a41f53f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c1d4633c-d87d-4695-adf9-f24aaf7b9062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0894a671-40b2-487d-85d4-106fc706c768",
        "cursor": {
          "ref": "af4782db-ed49-46c6-9bec-9bf99d6f0808",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ff98002f-06da-4d8a-88c1-76528526803b"
        },
        "item": {
          "id": "0894a671-40b2-487d-85d4-106fc706c768",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "20736e85-a1f1-4fb4-a428-1391b512ccf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ba52c7cd-954f-4f14-8403-71dfdbf2d76c",
        "cursor": {
          "ref": "e1c5af56-0552-47c6-baae-bf287fe52b94",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a323b497-7f55-4ea3-80ad-03447a9dd982"
        },
        "item": {
          "id": "ba52c7cd-954f-4f14-8403-71dfdbf2d76c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3f56e5e0-10bb-4c95-ab8c-bc11ae84af5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8991df6e-1752-4138-be5e-c416514d7583",
        "cursor": {
          "ref": "5862921e-6474-4e03-a735-042e747f9c3e",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "81050373-2ff1-44e0-a29a-b6edf58220e9"
        },
        "item": {
          "id": "8991df6e-1752-4138-be5e-c416514d7583",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "be7fe405-20ea-4056-a720-bd11714ab5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3622ce5f-e341-4daa-ab6f-afa64100fbdc",
        "cursor": {
          "ref": "8a8e06e8-aa6a-4675-9fb2-8eda6d3a1f7f",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "054775ef-cbdf-4c28-b067-64b818072125"
        },
        "item": {
          "id": "3622ce5f-e341-4daa-ab6f-afa64100fbdc",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6813cc2a-3dcb-4051-94b2-8f994295db7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7beec13-5ba9-4c41-8661-af9f999f7181",
        "cursor": {
          "ref": "224eaf95-68a5-41f1-9165-fc033795458d",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dcc94e69-09fd-4d52-b271-187c6bcfeec1"
        },
        "item": {
          "id": "f7beec13-5ba9-4c41-8661-af9f999f7181",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a2ef4b50-42e1-4b58-9b82-65c24e2edbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea9b5db-8652-497c-8cc0-262067cdcc15",
        "cursor": {
          "ref": "d2cb4c4b-007a-4825-8336-791295200af9",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6cf84eb3-c489-4c5d-8d68-8ed8ae5766b4"
        },
        "item": {
          "id": "1ea9b5db-8652-497c-8cc0-262067cdcc15",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e6ca082a-f9a0-4635-87cf-a7291cfc8f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e7e320-2a5f-46a9-96dd-a6fef22be2bd",
        "cursor": {
          "ref": "e1244a63-7817-4e1a-be6c-dd18a7b1f576",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5d6f5faf-bd2a-47e1-83e1-a8ff5341e517"
        },
        "item": {
          "id": "d2e7e320-2a5f-46a9-96dd-a6fef22be2bd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "839a05c8-5fa3-4f00-882d-350d34ee2ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750e3090-eec7-4293-b9a5-02c1fa6fe992",
        "cursor": {
          "ref": "4a7ecb23-e762-459c-9c43-01358abc2f9e",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "777cfdf9-5558-493a-88bb-2453d631c08f"
        },
        "item": {
          "id": "750e3090-eec7-4293-b9a5-02c1fa6fe992",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fc4b3b25-3f38-41ab-ba75-0fc4b4be8d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6a7fecba-22e3-424e-886b-d80319d4011f",
        "cursor": {
          "ref": "8811c1f5-6461-498e-ac68-dc2b3851382a",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "19716f23-7f36-4a24-8804-542a52aba568"
        },
        "item": {
          "id": "6a7fecba-22e3-424e-886b-d80319d4011f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b33c6969-573a-491b-9f53-591b6ee67aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedcbdfd-83ff-4a84-b61f-fdad7123f760",
        "cursor": {
          "ref": "ec34422f-d0f6-401a-a569-4228221871cc",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c534bb35-fd45-492b-926a-9cf5f71a0702"
        },
        "item": {
          "id": "cedcbdfd-83ff-4a84-b61f-fdad7123f760",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "df890233-b859-4fd9-9084-f0e8c35fc73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d1a434-456d-46b7-bbf2-054f5ffaab8a",
        "cursor": {
          "ref": "6a0ee098-cce6-476d-87e0-2cc3956e6c80",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7218b297-4858-42e8-9578-803124d497d6"
        },
        "item": {
          "id": "75d1a434-456d-46b7-bbf2-054f5ffaab8a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "62ceeb88-7cb7-4ef4-b138-709b490779bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a9d089-15f5-46f9-a2d5-d1c957b332cc",
        "cursor": {
          "ref": "6b36c260-8dba-47e0-b346-a74d5318a104",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "24d2c6a6-cfbc-44c6-b2b1-40aa7d20f63d"
        },
        "item": {
          "id": "d2a9d089-15f5-46f9-a2d5-d1c957b332cc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b8134289-6971-4f07-a5e2-dcd2d44cce45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4622677-aee3-4349-b3ad-bf0730286122",
        "cursor": {
          "ref": "3c7634c5-d719-4cde-84b3-2d90c0d8933f",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "670a286d-0bf9-4c3b-8b70-9d9cf0749682"
        },
        "item": {
          "id": "d4622677-aee3-4349-b3ad-bf0730286122",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8a2f0d08-2c6d-475b-85e0-b6cacd1781a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7fed3f2-1c74-4140-82dd-8737ea30b1bd",
        "cursor": {
          "ref": "99412df3-3ab1-44c9-b4bb-87bab1ebd83f",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c52be882-8039-4db9-9906-8d6ae534ca95"
        },
        "item": {
          "id": "a7fed3f2-1c74-4140-82dd-8737ea30b1bd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2f3f40f7-9145-4a9d-b0dc-c086783206b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad24ee09-0c25-48a4-bd19-3fecc9c5e982",
        "cursor": {
          "ref": "f7a8dac6-3a29-4447-aede-2c81069bbed0",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2c7d8f04-fe1c-46df-8a07-fb8c330923aa"
        },
        "item": {
          "id": "ad24ee09-0c25-48a4-bd19-3fecc9c5e982",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "855079d4-f776-4fd9-a2d7-cce0ee31132a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c93e17-113f-46b5-8735-bed59047212c",
        "cursor": {
          "ref": "3e821f4f-2929-46d3-8f65-57f7f39b3427",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "47d23684-88fb-41fa-ae4d-73216620af10"
        },
        "item": {
          "id": "a4c93e17-113f-46b5-8735-bed59047212c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9cc38053-f79f-4b17-8cc7-dcdb5fb3f7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2f5e70-29b6-4d70-ac13-e46bf1b683de",
        "cursor": {
          "ref": "e5287c09-fb53-4311-a1a5-dd2aac3a8b4e",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "71430820-c5fd-43fa-acce-5c623146fdf8"
        },
        "item": {
          "id": "9f2f5e70-29b6-4d70-ac13-e46bf1b683de",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5c716879-a367-4236-a403-58bc6ff69192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c6e2b3-0b21-42cd-9446-e5bc716c7a91",
        "cursor": {
          "ref": "0e5d4524-b9e5-4099-863e-61167e7f0cac",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0bc6ff11-5962-49e9-8535-8f70b0ea4848"
        },
        "item": {
          "id": "46c6e2b3-0b21-42cd-9446-e5bc716c7a91",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "100578ec-b7f9-43fb-a6c9-a30ac371504b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6714dc5b-b1d0-436e-a1d3-30164a394440",
        "cursor": {
          "ref": "b1076220-4726-41d2-a323-a4a28ac2669a",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8d3b21ef-d0fc-4f6a-a6a4-11001c1994fa"
        },
        "item": {
          "id": "6714dc5b-b1d0-436e-a1d3-30164a394440",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b9d2123c-fe34-481b-b973-4957c7ec2067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2bf88f-f3a4-4c6a-bd24-7b1ce60f499c",
        "cursor": {
          "ref": "f2be82c6-2add-496a-b031-ca6d4ca23c45",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b956d23f-deb3-4a57-8141-722fc4739b42"
        },
        "item": {
          "id": "8e2bf88f-f3a4-4c6a-bd24-7b1ce60f499c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bf58d2da-5702-41f4-9729-2b36633562c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a676b43-5093-4f27-81a3-7bf2ea613d56",
        "cursor": {
          "ref": "ea991943-3e65-4aaa-9f36-1e13090c5b1f",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8d06857d-b53a-491e-a922-a7d3407dd099"
        },
        "item": {
          "id": "3a676b43-5093-4f27-81a3-7bf2ea613d56",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4761cfd0-6802-4170-8760-88d7fa9da133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545b01d9-461e-428c-b800-5df7e9200831",
        "cursor": {
          "ref": "1cf3ab7c-f4c6-40ed-a1bf-7e59a67b638c",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0db653c0-0892-48da-bd96-5e63fcee7988"
        },
        "item": {
          "id": "545b01d9-461e-428c-b800-5df7e9200831",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b1e176e8-888e-472b-8c42-598571b15a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c540aa1-d82c-4fbc-ad65-6185fafe6d89",
        "cursor": {
          "ref": "f4e281a3-f45a-4c2b-8551-46ee0fb03e63",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "57b1510e-48b0-40fd-a20c-c8971b3595d7"
        },
        "item": {
          "id": "2c540aa1-d82c-4fbc-ad65-6185fafe6d89",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7135e21b-d3ce-4ec3-866e-b9f77fccb109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e735a51-cff3-41e3-aaa3-9b18881d83e1",
        "cursor": {
          "ref": "ecaa6911-35fe-4ce8-b170-bd1887197590",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ed5efc78-22c0-4805-9bf6-233d037c506c"
        },
        "item": {
          "id": "3e735a51-cff3-41e3-aaa3-9b18881d83e1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "570e20d1-2c54-4899-998c-6d9b08a5fbef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed80f253-aef9-4dfd-91c2-350281c2184f",
        "cursor": {
          "ref": "d89b1575-6c29-4b94-9154-1888252cdb16",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a8c13bc8-895b-4981-a754-e480f3b2a6b0"
        },
        "item": {
          "id": "ed80f253-aef9-4dfd-91c2-350281c2184f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "40e4a5f6-d5fa-4081-8d46-7ea55bf18d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ac9662-b90c-4130-b64d-323c36e82c1a",
        "cursor": {
          "ref": "7c70336a-551d-403f-a085-ba1389a59bc1",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "240767d1-344b-4a27-a94b-7cca57d15393"
        },
        "item": {
          "id": "46ac9662-b90c-4130-b64d-323c36e82c1a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2ac79e68-f13c-42a8-b15b-1c3744d7a23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0288be87-64d2-4e62-8055-6184961a0ec8",
        "cursor": {
          "ref": "6a20ce50-fa6b-42ed-b048-9a71118c6c60",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ac6cae26-6ed6-44d1-b20d-f4950eb94656"
        },
        "item": {
          "id": "0288be87-64d2-4e62-8055-6184961a0ec8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "352efccc-42d7-4ba6-987d-5bf0758ec50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77001316-1b2e-443a-814a-70f222c3b7d1",
        "cursor": {
          "ref": "fc12ca2e-c463-460a-a58f-fad80ce448a5",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4e73a800-8274-4b7d-a306-d9ef2f70caf9"
        },
        "item": {
          "id": "77001316-1b2e-443a-814a-70f222c3b7d1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4e1f471a-3085-4ab6-a11a-77f19fd9c432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679fc552-d109-499d-ac76-3eee384a23a1",
        "cursor": {
          "ref": "37352a57-0975-47b5-bdf9-18a71f6216d1",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "172dd50d-aecf-4c25-a75d-b149bf214228"
        },
        "item": {
          "id": "679fc552-d109-499d-ac76-3eee384a23a1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1c15bbb2-e786-48db-b5fd-26731d6feb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99592736-8354-4aa0-989c-1895d4d05688",
        "cursor": {
          "ref": "7fa0ca7a-f017-44b8-b514-2b1b94785965",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c25e0ef6-0429-4aeb-a8a6-59427b7681a1"
        },
        "item": {
          "id": "99592736-8354-4aa0-989c-1895d4d05688",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ee2adac9-6aed-4115-90c4-d055a3dd6770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0556ebc8-0957-4c14-9ef9-654cbdab5630",
        "cursor": {
          "ref": "dc6504f6-6c6b-4919-a3c8-b9b9e85e288c",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cab02a9e-a836-4654-a5cb-bf42a30fde17"
        },
        "item": {
          "id": "0556ebc8-0957-4c14-9ef9-654cbdab5630",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7743c21a-0882-40e5-9c80-c192374cece6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203ddab2-8df9-40f8-81c2-cf505d52d8f7",
        "cursor": {
          "ref": "5769ff8a-8735-4213-ac10-2a9cdc7db208",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a946c1ed-7d63-466b-b61a-46db8f487cc5"
        },
        "item": {
          "id": "203ddab2-8df9-40f8-81c2-cf505d52d8f7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "83628eae-c2e1-4bdf-817e-fd554506b5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78217eb-8642-4478-8b5b-2f5960513115",
        "cursor": {
          "ref": "54544ad5-375d-41e1-a5d4-a1e7a22dac4c",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "31b951f2-a132-4550-906b-14fec55283b6"
        },
        "item": {
          "id": "d78217eb-8642-4478-8b5b-2f5960513115",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dbbb0667-dc93-4706-96d1-f8efb91f5ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c9fd29-7598-4fd0-bcfa-fd17b137b3ec",
        "cursor": {
          "ref": "6dfdfae4-a3bd-4f20-a054-1fd737ca8ff1",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ac76df7e-2ab5-439e-bd1a-3f0f711dda9d"
        },
        "item": {
          "id": "85c9fd29-7598-4fd0-bcfa-fd17b137b3ec",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3ab899b1-de01-49b0-bac5-5a3d2e238db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85693354-59e7-4eba-b5f6-cbbbfefe438e",
        "cursor": {
          "ref": "e64c21f3-e704-46e6-bb71-d0c2a203928b",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a60e9bbb-437e-46a7-b971-2480e9580560"
        },
        "item": {
          "id": "85693354-59e7-4eba-b5f6-cbbbfefe438e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "dd3798a7-66fa-486e-89a2-b2905609b407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49a42ac-91c6-446f-a973-7ce7cc997cd0",
        "cursor": {
          "ref": "90948f0b-cacd-4615-86a4-0628efd56d08",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9e80478b-8cda-4079-9780-8626ad1bf8b1"
        },
        "item": {
          "id": "a49a42ac-91c6-446f-a973-7ce7cc997cd0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "214571ba-7dcc-4595-8b02-eb8041d31423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5c68fc-2c51-4ab0-820d-c0e810fee7e2",
        "cursor": {
          "ref": "dc70f000-4ec1-4e31-90af-b5fb15e21069",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a092a489-169e-41aa-8df1-407045473256"
        },
        "item": {
          "id": "9d5c68fc-2c51-4ab0-820d-c0e810fee7e2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "90ea443a-1c93-4c41-bd8f-e06477d199a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7b3340-655c-46f6-b8ca-4d821bfd26d6",
        "cursor": {
          "ref": "201ed989-99fd-4170-8710-471d52530ab3",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d908409f-4de5-42d5-a8df-849efc48ad79"
        },
        "item": {
          "id": "ea7b3340-655c-46f6-b8ca-4d821bfd26d6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ae3d3e72-790d-479f-8a0f-2f0aa14274a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbee0180-57d6-4346-81df-a78cf980bfbb",
        "cursor": {
          "ref": "1b0426b9-ebf6-4401-b22f-7e7b90368688",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cac0dbaa-c48f-42d0-a730-021ce19c3aeb"
        },
        "item": {
          "id": "fbee0180-57d6-4346-81df-a78cf980bfbb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "be287587-5ae2-4783-a6d6-920fec6ee511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 373,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3da0674-9129-4a93-a994-72ef50db72cc",
        "cursor": {
          "ref": "fe3b60ad-13de-446e-b8cd-36e8b2fa0ff0",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "575ae827-45ab-4421-9a6e-49d30843ba2d"
        },
        "item": {
          "id": "e3da0674-9129-4a93-a994-72ef50db72cc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "54915f7b-b3ff-4d1b-836d-10314fa734ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93229853-6627-4085-b310-494ff2e08013",
        "cursor": {
          "ref": "9fd1dc6a-057f-477d-80ba-c9eda5dbaf0f",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "48f9e731-b2a1-414c-91f1-26cca6e80472"
        },
        "item": {
          "id": "93229853-6627-4085-b310-494ff2e08013",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cc1eab2f-4171-49f3-861d-fe5d243a106f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55de1dc-f87c-4b4c-b59e-95ec4127605a",
        "cursor": {
          "ref": "20ca4cfa-ac2d-4f0b-8f6b-c6cc724fb9f6",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4dde69a2-4066-42c5-ad90-947baab8e679"
        },
        "item": {
          "id": "b55de1dc-f87c-4b4c-b59e-95ec4127605a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4a2daf25-7ed6-41ea-8238-fde998052e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daee22cb-2043-405c-86d6-4e7751dc6656",
        "cursor": {
          "ref": "7c19d71c-88ae-4144-a99b-4158dae52c1f",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8efaa50d-ab38-4bc5-bd4f-215e47028689"
        },
        "item": {
          "id": "daee22cb-2043-405c-86d6-4e7751dc6656",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "536ed314-4eec-44de-8b1c-043167e2f71a",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "f9f70993-4759-4653-81e2-fad97efec7c8",
        "cursor": {
          "ref": "045a931d-7b58-488c-b8d5-55e277de377d",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "37f92186-ca0b-4bf7-bd60-c95f9ecc0c1f"
        },
        "item": {
          "id": "f9f70993-4759-4653-81e2-fad97efec7c8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a8d0f2dd-7c94-4e6d-95bb-8ea4295f8ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cfaf59-8f1c-4fe6-a4a0-6d4b460c1840",
        "cursor": {
          "ref": "c1e002f7-ba3e-45c7-ad9d-174d8249f0fd",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "31bd0665-4d6a-4fe9-bcb1-1ceeb1db6c28"
        },
        "item": {
          "id": "d4cfaf59-8f1c-4fe6-a4a0-6d4b460c1840",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e5b5443d-b352-4b2e-82be-4257d0b143a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffebad2-f8c0-49c5-bc10-ae4a83d5c09b",
        "cursor": {
          "ref": "1ce5a568-3c8c-45fc-ac5f-1aa1d49ba8ae",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d1722028-d5a7-4b0e-b619-d27de854d560"
        },
        "item": {
          "id": "cffebad2-f8c0-49c5-bc10-ae4a83d5c09b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dcd41709-10c3-4fce-bdf0-140ad0654fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755e8c15-9fd1-46d2-8f30-cc5cf41539a6",
        "cursor": {
          "ref": "3de1b04e-a09a-4386-82d6-d812dc05afeb",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2c177b17-b45c-4811-a084-6f4ac787e67e"
        },
        "item": {
          "id": "755e8c15-9fd1-46d2-8f30-cc5cf41539a6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "960b51c7-eb61-4e6a-bac1-4bff030641b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842fdc6f-e59e-4ef9-9a2e-86b1d513b988",
        "cursor": {
          "ref": "d214161c-6c5f-4b80-84bf-73861dee8d9e",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "893c0978-1828-4985-a3c2-e09238592f05"
        },
        "item": {
          "id": "842fdc6f-e59e-4ef9-9a2e-86b1d513b988",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "93f63698-418c-4806-bbbb-ca78070e6145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0ac61f-e6ba-4aa8-ab4f-3df32c65208f",
        "cursor": {
          "ref": "dccbcb61-e148-4b81-88ed-5bc7689b6296",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4656fd77-a033-4eeb-adf8-4a250a032390"
        },
        "item": {
          "id": "bc0ac61f-e6ba-4aa8-ab4f-3df32c65208f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7a1c7018-1a6e-4258-bf4e-519ccd4592d6",
          "status": "Created",
          "code": 201,
          "responseTime": 382,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "e027add0-1ab2-451d-b214-6bba4834ff69",
        "cursor": {
          "ref": "b0740a09-d140-445b-90bf-36d48e6e20af",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "35799281-bbce-4737-8550-140b433f7e5b"
        },
        "item": {
          "id": "e027add0-1ab2-451d-b214-6bba4834ff69",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "48cd1103-394a-4acf-81da-665f9c7654ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea215b0b-3072-49eb-85ac-ed1a0134a99d",
        "cursor": {
          "ref": "df8dbba2-fa18-4c1f-b012-5faf1382f7c4",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "54def07a-6fae-4faf-b28f-05ddb97ab54f"
        },
        "item": {
          "id": "ea215b0b-3072-49eb-85ac-ed1a0134a99d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5428e3f5-2f35-4914-b6c4-7a093716d957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb06b2d-731c-4466-abf8-d1a74d1dfa31",
        "cursor": {
          "ref": "ef5298b7-f097-47ed-ab8a-483f35e6f0db",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bf3140e5-e128-4677-b57d-f52f5320d87f"
        },
        "item": {
          "id": "7eb06b2d-731c-4466-abf8-d1a74d1dfa31",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f40ec52e-0704-475a-9b62-7b8a932c6760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c806cac1-623c-4043-9ed6-0b3b0290e265",
        "cursor": {
          "ref": "2d76509e-e7a9-4b44-8d83-4f269e6babbb",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a8445a47-57da-471d-9d5f-1bd60aca9ba9"
        },
        "item": {
          "id": "c806cac1-623c-4043-9ed6-0b3b0290e265",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "faf400ca-b1c6-4820-99b8-cc0535826266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7246e4f1-2196-4b12-b545-614a47a77d3f",
        "cursor": {
          "ref": "2f471c67-141c-4d95-bec8-7eb4c3cfc971",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "258e3a6e-df85-4ae8-b8a7-f081184ef228"
        },
        "item": {
          "id": "7246e4f1-2196-4b12-b545-614a47a77d3f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c54d9e73-b20b-45b1-89e4-70e28fe3b411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048e4b98-64aa-45a8-8d63-b25811426f92",
        "cursor": {
          "ref": "d181f184-f0c9-4045-868c-f09c1abbfe2c",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1dbacb51-2656-40db-bf39-360c79af2653"
        },
        "item": {
          "id": "048e4b98-64aa-45a8-8d63-b25811426f92",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7861e028-8e3a-40aa-a22b-a917444c2710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10535b5-d9d2-49d1-a613-1ee33561fe6f",
        "cursor": {
          "ref": "1969eb12-0b01-45d7-b624-ffa0a8ae3e9d",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "721fd616-d795-4ab0-9533-abc9054ed47f"
        },
        "item": {
          "id": "f10535b5-d9d2-49d1-a613-1ee33561fe6f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "212ead8f-51ca-4d42-a425-a52534dedbe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fc5bd8-1460-4b26-b47d-3b94ebe2a3e0",
        "cursor": {
          "ref": "40d4b599-9c22-43cc-8360-435df401a426",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "83bb9bf2-8e1c-41fc-b001-5ad3d2a0b943"
        },
        "item": {
          "id": "b5fc5bd8-1460-4b26-b47d-3b94ebe2a3e0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f9cf8d4f-7665-42cf-a1b6-c9bb3041ec7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83039363-bdbf-42c5-9dac-51509d76ad9c",
        "cursor": {
          "ref": "ebb217c7-166e-4f13-805e-3db1a68f827c",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e4772974-2ec9-4f5d-9262-70b2662cf03b"
        },
        "item": {
          "id": "83039363-bdbf-42c5-9dac-51509d76ad9c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1c294f2a-9af2-4162-9bbc-2d7c1ad4f70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "b1444cf5-6e8b-4c4a-887b-5d193734f5c5",
        "cursor": {
          "ref": "4cabb48d-75a6-444c-aefc-ad403adaeec8",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "dae905b4-ce25-4526-a843-57ce15640949"
        },
        "item": {
          "id": "b1444cf5-6e8b-4c4a-887b-5d193734f5c5",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3add227f-c45c-44ef-b287-b7a0145e04c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "23ccb26a-13b2-4daa-8a8b-e1ad484ac5f1",
        "cursor": {
          "ref": "91537c30-e35e-4056-8ab6-265448cef0f2",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "216e656a-2409-4b36-b1fd-37345618ba0a"
        },
        "item": {
          "id": "23ccb26a-13b2-4daa-8a8b-e1ad484ac5f1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ba2bef21-2ae6-4ca1-91cf-faf243fa9544",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5301d307-847f-45d9-80c8-4b8712527e0b",
        "cursor": {
          "ref": "64dd4053-bdb3-4840-97a9-fa325e86a41f",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d64f48b4-6ac3-4b60-8955-84917555acaf"
        },
        "item": {
          "id": "5301d307-847f-45d9-80c8-4b8712527e0b",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "47b4762a-1f63-4cce-8617-f816a30c7b58",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e39cf50-b3e4-4d0e-86e3-2b713e7358f0",
        "cursor": {
          "ref": "0fa4f89a-9647-45ef-88ba-e325613a51f8",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8120e4fc-74e6-4675-8488-18c48182cde6"
        },
        "item": {
          "id": "0e39cf50-b3e4-4d0e-86e3-2b713e7358f0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2119643f-57c5-43b7-9211-f8ab3526c8db",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c12001-309f-4af4-986c-7f93141dd977",
        "cursor": {
          "ref": "40c97c82-a292-484c-b869-cd7e4924f947",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dc2c9d4a-e68f-478d-9dba-2fdc2b6d15a1"
        },
        "item": {
          "id": "40c12001-309f-4af4-986c-7f93141dd977",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0ea1f3c8-5ade-48d2-b8fe-e5568a6d31d4",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "97af8fd9-63c2-4b77-9bf3-4e0a3c950e46",
        "cursor": {
          "ref": "6a77f2b4-d413-420c-aac9-d33580c415a3",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e0f391a4-2126-4d15-9041-d3b6bbde98bb"
        },
        "item": {
          "id": "97af8fd9-63c2-4b77-9bf3-4e0a3c950e46",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ad68c05b-9505-48af-bac2-a92adb484d41",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "97117796-9c44-44b3-8389-716c71df61b4",
        "cursor": {
          "ref": "0558cfa2-6cbe-4885-a81c-ebb37a06f7da",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cb996ee5-8a4c-461f-a096-f7544b4e94d4"
        },
        "item": {
          "id": "97117796-9c44-44b3-8389-716c71df61b4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f75eec51-8e0b-497b-95a8-6e7e1df58fe6",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd462a1-4718-4a3e-b900-1104613e9342",
        "cursor": {
          "ref": "6e13eeb0-1e8a-462d-8ffc-d918ed9c315c",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b36bf69c-0755-47c4-bf49-a7a68eb2ec5f"
        },
        "item": {
          "id": "ecd462a1-4718-4a3e-b900-1104613e9342",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8912402e-d8d2-47c0-ae21-9d752d3f3f2e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "ecd462a1-4718-4a3e-b900-1104613e9342",
        "cursor": {
          "ref": "6e13eeb0-1e8a-462d-8ffc-d918ed9c315c",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b36bf69c-0755-47c4-bf49-a7a68eb2ec5f"
        },
        "item": {
          "id": "ecd462a1-4718-4a3e-b900-1104613e9342",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8912402e-d8d2-47c0-ae21-9d752d3f3f2e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f37c3f57-e46a-488d-8d07-54142c3f6586",
        "cursor": {
          "ref": "ff2ef0c3-ef3b-4dc7-910d-fce9fefecad6",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c62e81fe-4530-4190-a263-ca3fb8d61d2b"
        },
        "item": {
          "id": "f37c3f57-e46a-488d-8d07-54142c3f6586",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "717caf99-b1ad-4f05-9389-ca6f1af7864e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9617a98d-d1e4-411f-bfec-31a8f0651c6f",
        "cursor": {
          "ref": "43a44328-1238-45af-963c-029d74a9fd5f",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a4e5aeb9-0a20-4971-a775-38f83d51585a"
        },
        "item": {
          "id": "9617a98d-d1e4-411f-bfec-31a8f0651c6f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a1653ca7-17fe-4fe3-9ad2-9337f07066b6",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b2bd834a-06ed-4950-8778-f62793a1b368",
        "cursor": {
          "ref": "8b7c5626-4622-4429-ae41-71b54b6aae94",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c8480b79-0997-435d-b803-cf74ef663dee"
        },
        "item": {
          "id": "b2bd834a-06ed-4950-8778-f62793a1b368",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2c2687f8-39e3-43db-a447-0313cf36a2d3",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "48a1e72e-a201-457e-b9ec-65a250d10e5a",
        "cursor": {
          "ref": "d38fc138-a072-4ce8-a172-1ec1840b5e4c",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "42329ffc-da66-4de6-86f7-2a21824065e1"
        },
        "item": {
          "id": "48a1e72e-a201-457e-b9ec-65a250d10e5a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e06f6db2-f0a4-4b7a-ae15-abb97615a9d0",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "66fed428-400d-4ee1-9a85-0c37ce4f532b",
        "cursor": {
          "ref": "74efd2b1-d3fb-41c6-8603-1a90f7eb019e",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4e29939f-b9b2-4aec-a72d-c2fab7048be8"
        },
        "item": {
          "id": "66fed428-400d-4ee1-9a85-0c37ce4f532b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0bd7217a-dc72-437c-af41-1e8f696cfacc",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "fc5deaa6-3a03-476a-9345-f3ca24522e36",
        "cursor": {
          "ref": "23090346-c6a5-4615-b29e-6d571192ab49",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "64c0e742-8442-4414-bea1-0093dd19dff3"
        },
        "item": {
          "id": "fc5deaa6-3a03-476a-9345-f3ca24522e36",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "504e6486-517a-4a94-8f53-95d47b929f49",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "afd869c1-89f7-4775-bd68-e2897d4faea0",
        "cursor": {
          "ref": "619ef3c5-c71f-4ae1-b000-a45f918b44cb",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0fb81bd5-ee59-47be-8920-dde2fea2f180"
        },
        "item": {
          "id": "afd869c1-89f7-4775-bd68-e2897d4faea0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ba1b5d72-605c-4831-87a9-0a0b190c2046",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "f353b030-735b-44f5-9f33-a0d72aebded2",
        "cursor": {
          "ref": "0dcc0efc-62f2-421b-83fc-505100342b01",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "181f1123-e1e0-43ec-9dc7-ea317e739137"
        },
        "item": {
          "id": "f353b030-735b-44f5-9f33-a0d72aebded2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "387d9355-5473-42d9-ae05-31132c783ed3",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "02d5922c-cd5d-4fcf-a4c9-4f86c9db9725",
        "cursor": {
          "ref": "68e90998-1322-40fb-a144-6028c7110296",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ba1016c6-afae-4fba-9bce-56a51cdcc473"
        },
        "item": {
          "id": "02d5922c-cd5d-4fcf-a4c9-4f86c9db9725",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b2f1e831-e129-4829-accb-8832074a2d3c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "77012c5e-4262-447f-9484-066c1f13354a",
        "cursor": {
          "ref": "ca719b70-a75f-4228-b340-82349d4ad82b",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a0087246-63fa-4b64-8860-addf4a17974e"
        },
        "item": {
          "id": "77012c5e-4262-447f-9484-066c1f13354a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "94be5bbf-7703-4dc3-a534-7d5f32aaf045",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ea102402-c5a8-425f-8b94-4a254ed5e489",
        "cursor": {
          "ref": "681c532e-4cab-4e92-96c6-edeb9647dfab",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "98444263-68d0-4380-977e-6f37f02a9bf6"
        },
        "item": {
          "id": "ea102402-c5a8-425f-8b94-4a254ed5e489",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "95cfc160-159e-41cb-8648-58546f51314f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "72a15fbf-6fa3-49b0-81ef-4c8fb71a6453",
        "cursor": {
          "ref": "df686d95-e61d-40d7-9179-6449b5b75729",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "72aa5591-9821-44f0-8711-29cf6e732336"
        },
        "item": {
          "id": "72a15fbf-6fa3-49b0-81ef-4c8fb71a6453",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7c07c0fa-8a7c-44fc-9ffe-0892a4d59dd4",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4330fbff-b298-483e-9459-d46c2c984155",
        "cursor": {
          "ref": "0a648737-a4cc-43a6-88e8-9e47d5bece57",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7ba88d6c-ade7-47c2-87ae-06ae634d656e"
        },
        "item": {
          "id": "4330fbff-b298-483e-9459-d46c2c984155",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "724745a3-f860-4675-a60b-676d07bcc2d1",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "fd8290e0-9ec5-4578-bd7d-71218521c514",
        "cursor": {
          "ref": "51dbca3a-f0f0-4bcf-86e5-25d20ef794f8",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d73a89c9-66a7-43d8-92ea-b1e68c5ffd2a"
        },
        "item": {
          "id": "fd8290e0-9ec5-4578-bd7d-71218521c514",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ee87b952-137e-4bbf-9b96-0eef6f8b7fd5",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f0170ec9-f343-444f-97b6-ba423307b7ee",
        "cursor": {
          "ref": "ad3d6658-74a6-46bd-a11d-2d293b4d0e30",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d9997026-1643-4912-af63-8b296db06691"
        },
        "item": {
          "id": "f0170ec9-f343-444f-97b6-ba423307b7ee",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7479269b-fda1-4ec8-90e3-05071edfafab",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "ef3512de-3b08-4922-8093-8f1abc61db37",
        "cursor": {
          "ref": "ad723186-f6e5-467a-97f9-c2390441b260",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "149d82e2-5c55-4902-bb70-511e7d2014c0"
        },
        "item": {
          "id": "ef3512de-3b08-4922-8093-8f1abc61db37",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "52e5de2a-6abd-4716-a5e0-f865861171eb",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "167c89f9-aac2-4345-a7e4-1b74d072f116",
        "cursor": {
          "ref": "60956916-a47a-4928-b7b1-6960c887e307",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "65bfac55-bc78-4d76-914b-c412090682c7"
        },
        "item": {
          "id": "167c89f9-aac2-4345-a7e4-1b74d072f116",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "102197c0-c0f1-4696-b287-9b5d5a03b462",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "7204832e-819c-4835-bcdc-abf62e9da26a",
        "cursor": {
          "ref": "6c357992-8063-4a5a-abb1-a4298c4e7efc",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c88cef3c-ddb4-4caf-a189-a866479e95ae"
        },
        "item": {
          "id": "7204832e-819c-4835-bcdc-abf62e9da26a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ee38cfdd-4e33-44c6-9d02-4e6067d9bc5e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3643020f-a76e-4cf0-8917-108d3e5bf0d5",
        "cursor": {
          "ref": "e762e511-ee5f-4fb6-81e5-bd820914672c",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6568109d-9f60-40dc-8894-5035e230a52d"
        },
        "item": {
          "id": "3643020f-a76e-4cf0-8917-108d3e5bf0d5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a63179ef-13c1-40ce-b25c-0587b242ad6e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "831f3684-a4fa-4f49-b6c0-a77d900a466f",
        "cursor": {
          "ref": "2252ab9a-f13b-404d-96bb-8913c8c7d973",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "594437fc-d12c-44e9-abeb-e1bce0d3ebf8"
        },
        "item": {
          "id": "831f3684-a4fa-4f49-b6c0-a77d900a466f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "39cada9c-8404-4cd1-af5e-d2169d167842",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "4fc6ae07-d39d-4aec-8504-0b389cdfac74",
        "cursor": {
          "ref": "890f094d-25be-4098-86e9-7e1cd50fc1d2",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2ecc8ab9-bd54-4757-a18c-16708ae6ecf7"
        },
        "item": {
          "id": "4fc6ae07-d39d-4aec-8504-0b389cdfac74",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "57e8d957-a3a8-47fa-9f05-ca5db27cae08",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "a13f07b2-4120-460e-8747-016fdeccfd5a",
        "cursor": {
          "ref": "26932d2b-00a8-462f-badc-1de6f8916efd",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c68cf2ee-a2eb-468e-9b9f-eb8a9817c1f7"
        },
        "item": {
          "id": "a13f07b2-4120-460e-8747-016fdeccfd5a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e02a7d20-732e-4259-a941-aba47bae7493",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "656be14c-74c6-4a27-baa6-ecdceb8b5f65",
        "cursor": {
          "ref": "ae701c37-e996-4748-85e7-e8ecf9be32a7",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1569eff8-fabd-479e-a7fa-7e10bad0ddb5"
        },
        "item": {
          "id": "656be14c-74c6-4a27-baa6-ecdceb8b5f65",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f000ea6a-0557-4438-ac6f-4121e374e832",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "e3b0fc65-6f9c-483a-8cf4-1c3e9bf3212d",
        "cursor": {
          "ref": "e8b01a50-ef54-4690-8798-89b54bc23990",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4e8ad9b4-1025-42ac-9042-e6744c16e330"
        },
        "item": {
          "id": "e3b0fc65-6f9c-483a-8cf4-1c3e9bf3212d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "df70708e-07c1-4829-976a-6f185b03208a",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "be5411e0-2ba7-4c4c-941f-5fb30b244126",
        "cursor": {
          "ref": "b2c78119-56da-48af-b4c9-4dc76d138aeb",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "28271194-4354-4a99-8a26-be14d9efa8f5"
        },
        "item": {
          "id": "be5411e0-2ba7-4c4c-941f-5fb30b244126",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6119ccf7-2272-4ab4-b3d0-41d76ead0156",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1fdcd6f8-2a45-4118-8739-eb08e0ec4de4",
        "cursor": {
          "ref": "5e0cd9a7-9895-4f2b-9a99-628399e400fe",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "82021d30-0def-4bf5-9233-13c657dff880"
        },
        "item": {
          "id": "1fdcd6f8-2a45-4118-8739-eb08e0ec4de4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "81378315-3c3d-4924-ae26-0495701bde4a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "dcabee44-1de6-4d3f-9e71-bd8c178874e1",
        "cursor": {
          "ref": "e36d1767-db83-4b8d-a1b8-22fa0c7e7dc3",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5011ea91-6d7f-46d9-8c81-ade67cd0ae51"
        },
        "item": {
          "id": "dcabee44-1de6-4d3f-9e71-bd8c178874e1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ade72bd4-c060-420a-aa5f-51acc89847f9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "873975ed-9b4e-4f4d-9bbd-89a53b0de5eb",
        "cursor": {
          "ref": "f98249ac-f1c1-456d-a671-b9fe4388b0fb",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "369c0b4d-1a88-4be8-9aa4-0fb99558d7c4"
        },
        "item": {
          "id": "873975ed-9b4e-4f4d-9bbd-89a53b0de5eb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9e4d0655-4298-4a68-a8c1-61b9f093d9ab",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "03984014-0599-4e70-b22d-f2cdf51209b5",
        "cursor": {
          "ref": "84110327-3f9d-45a8-971b-a7afaca4e84a",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d04a723b-4b37-4b61-9287-ed0f335dee2b"
        },
        "item": {
          "id": "03984014-0599-4e70-b22d-f2cdf51209b5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "34ae3f64-4289-4fdf-8dc1-60909108d1e9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e50fed8f-7ac0-48be-8fb5-d6a2d207e99f",
        "cursor": {
          "ref": "73b6a3ac-5026-4c60-b39e-c9bc6920c2d9",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "86b3063c-e107-4693-a3c5-6cec8fedbba7"
        },
        "item": {
          "id": "e50fed8f-7ac0-48be-8fb5-d6a2d207e99f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "221141f1-cb81-4e23-9031-4d064ad03328",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "a49ab750-4d76-4a4e-a2eb-9680a6f115f3",
        "cursor": {
          "ref": "5cbdbaa5-1f1d-4293-8c8d-c1f5a854dd0a",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e8ea49a1-348a-4859-82eb-9e41f36d101a"
        },
        "item": {
          "id": "a49ab750-4d76-4a4e-a2eb-9680a6f115f3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "00352687-edbf-480d-99c7-7844877519ae",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "9c680e75-adb5-432a-ab44-d5256cadd150",
        "cursor": {
          "ref": "8dcb9003-d5ad-4b7a-b8c6-fafa47e6223f",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "826712ba-372b-40c1-8d65-7c65a1ed1a4a"
        },
        "item": {
          "id": "9c680e75-adb5-432a-ab44-d5256cadd150",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3fcb3126-b601-445a-92e6-4720983eb6b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9bc730-873c-4cfe-a46e-c06535ee7ee5",
        "cursor": {
          "ref": "759bf0d6-3fa9-4ab6-bf8d-7b42f415e5dd",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "97a061a9-2c06-4135-9503-ceafd24f0f78"
        },
        "item": {
          "id": "1b9bc730-873c-4cfe-a46e-c06535ee7ee5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5f771abf-4bc1-430b-a288-f5014971b7e9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdaa85f-b0af-4be4-8b22-e97c825e6833",
        "cursor": {
          "ref": "00c0a3bb-6650-4397-9577-c93a43dd0474",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9a7087da-ec47-4c8b-9b93-4517431eddb1"
        },
        "item": {
          "id": "5cdaa85f-b0af-4be4-8b22-e97c825e6833",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ae822cd9-931b-4b8e-9ef8-042bd53dcb0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdaa85f-b0af-4be4-8b22-e97c825e6833",
        "cursor": {
          "ref": "00c0a3bb-6650-4397-9577-c93a43dd0474",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9a7087da-ec47-4c8b-9b93-4517431eddb1"
        },
        "item": {
          "id": "5cdaa85f-b0af-4be4-8b22-e97c825e6833",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ae822cd9-931b-4b8e-9ef8-042bd53dcb0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48099d11-550c-455e-9a2e-a6c437a8e2a8",
        "cursor": {
          "ref": "9d4f8d9c-c673-4293-bd6f-bc3340ef33c5",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bdb56f17-8406-419e-a700-2d83c2190dc4"
        },
        "item": {
          "id": "48099d11-550c-455e-9a2e-a6c437a8e2a8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5ac49df6-c2a8-4a65-b384-7fc61f8916c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247e652e-4df1-47fd-9d65-6976f6529ec5",
        "cursor": {
          "ref": "62ae3040-2b59-4139-aefd-98b8c955c52b",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fd66665e-f91f-4e7b-854b-2c5323822185"
        },
        "item": {
          "id": "247e652e-4df1-47fd-9d65-6976f6529ec5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2a7035be-7792-40c6-a10f-7396b6e0c7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f09e03e-e661-4057-909f-0c58e75b753c",
        "cursor": {
          "ref": "3f910856-ba5c-442d-bd53-cbbc5e589e4f",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0c86918e-753a-49ba-b26a-f41d650e9785"
        },
        "item": {
          "id": "8f09e03e-e661-4057-909f-0c58e75b753c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1ba9ec9e-dadb-4f41-98d5-da01a3452a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef9c695-7031-4249-8e21-21c6deadb950",
        "cursor": {
          "ref": "a50b3872-10dc-4192-8164-c1df645fdbcf",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "af3bb9e3-b839-4bcc-8d55-f79c63a41b1b"
        },
        "item": {
          "id": "3ef9c695-7031-4249-8e21-21c6deadb950",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e32ada2a-b597-467a-b2ef-d234e10c0364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8481e9a2-8fed-4add-9969-f941c4c6ab8e",
        "cursor": {
          "ref": "b1157b08-105b-42b3-ba75-ed3926ce2335",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9c306ce7-a7f9-4382-981e-c3b8fbecf07c"
        },
        "item": {
          "id": "8481e9a2-8fed-4add-9969-f941c4c6ab8e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cca8ca27-42ad-4f62-86da-3cee6cfad788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b14bec5-63bc-4656-90a9-bff24f9e5667",
        "cursor": {
          "ref": "e01a7887-a9c5-4a7a-a61b-b0b844ef43e8",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "07043925-5831-4fc2-8480-6f51098e11ea"
        },
        "item": {
          "id": "3b14bec5-63bc-4656-90a9-bff24f9e5667",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a2d443f8-c6e2-4618-be66-252e56ce3ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 624,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c2f19c-6b72-4d2f-93d9-62df9d63b070",
        "cursor": {
          "ref": "169569ad-0693-4907-b5b0-66bcb35a1b83",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "31e721f6-5c37-4b6e-8b06-915f6bab026e"
        },
        "item": {
          "id": "18c2f19c-6b72-4d2f-93d9-62df9d63b070",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "78d85fcc-8932-459c-993e-b6962d3af841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056fdea6-bb60-47cd-b14a-fe1abc8ddf55",
        "cursor": {
          "ref": "01557d70-241b-4169-a2cf-8e9b078729c0",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6e8c1836-b33e-4f3e-8510-ee616e28aa2c"
        },
        "item": {
          "id": "056fdea6-bb60-47cd-b14a-fe1abc8ddf55",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "078035ee-66ed-4cfc-aaa6-5214b7dfb4f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0b1fda-76e9-415f-a637-7464e16d156b",
        "cursor": {
          "ref": "52542abb-9a0c-4731-86c3-f405a87abe18",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e1808975-34db-4701-8a2a-916da0ac01fc"
        },
        "item": {
          "id": "df0b1fda-76e9-415f-a637-7464e16d156b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3e61e266-259f-4177-86ae-a1efb808c385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fecc31-1fba-4fde-8e63-be198d7a43a1",
        "cursor": {
          "ref": "08a5db91-adbd-4ea3-a768-2bdbbbeee1f0",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a58fb069-c298-4e14-a4af-cdacc86e1446"
        },
        "item": {
          "id": "75fecc31-1fba-4fde-8e63-be198d7a43a1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "96eb8bcb-4796-4fb5-ba13-919c58b6c606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57373149-ed0f-47f0-91e4-395f8facd60f",
        "cursor": {
          "ref": "d1472cfd-9102-4108-ae8a-f55065bdad37",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5c4deafc-45f1-4157-b949-b2ed818a6e2f"
        },
        "item": {
          "id": "57373149-ed0f-47f0-91e4-395f8facd60f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3112ba8f-5ebf-4b0d-9f27-808d1244b1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed4a23b-29a9-437e-8689-51d854c9179d",
        "cursor": {
          "ref": "f4c7b925-6f2f-4a1e-bf6f-c829a9f4243f",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d0e1152c-183b-4276-af39-8c4592a46ffc"
        },
        "item": {
          "id": "0ed4a23b-29a9-437e-8689-51d854c9179d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0a56b866-7505-4e53-8096-574d028f90eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d256d476-0e1b-409a-9a2e-ec6669bbae29",
        "cursor": {
          "ref": "cf33c517-04af-4e6d-af93-b7fd52146a91",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2a2b5936-5a82-4211-9400-e71f5ea8e5fe"
        },
        "item": {
          "id": "d256d476-0e1b-409a-9a2e-ec6669bbae29",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "272c7ce4-c770-4c66-84d0-27cea3f0f2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6556908-a6fd-43e3-a715-5563ad3f9c7f",
        "cursor": {
          "ref": "58938b0d-bd76-467b-8cb4-a3c0cfbd8155",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f1b56b6a-a62e-43d6-9aef-09f1d10f7cca"
        },
        "item": {
          "id": "e6556908-a6fd-43e3-a715-5563ad3f9c7f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9302edad-73a0-414e-b43a-41fbb504290a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f49b75e-1dd2-497f-9c8d-b88459839c14",
        "cursor": {
          "ref": "9dac3520-2f89-4d82-9fd4-c139882547cb",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "007c3332-1236-490c-a95a-317525b5be48"
        },
        "item": {
          "id": "8f49b75e-1dd2-497f-9c8d-b88459839c14",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e55886d7-1663-4b72-b574-482e086f49af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750bd6ad-c8fb-45eb-ba87-1aa0d0b350df",
        "cursor": {
          "ref": "f5003f65-2135-4d3a-9749-d074ccab84b1",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e6d46b02-d8fa-470d-ad0e-6cc557ed2834"
        },
        "item": {
          "id": "750bd6ad-c8fb-45eb-ba87-1aa0d0b350df",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b8f97f67-9606-4e6b-8f3a-0609bfeda20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322964f6-216e-4788-9862-fb8f8bd53ba2",
        "cursor": {
          "ref": "6abc7280-5657-4e1d-830b-2ce328ee49ba",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "15c6cb59-ecf6-4a3f-9ee4-16d691f487ab"
        },
        "item": {
          "id": "322964f6-216e-4788-9862-fb8f8bd53ba2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "068a553e-5af3-48a3-ba48-537551403b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 364,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23476cba-2db5-4012-ba63-059d2f670679",
        "cursor": {
          "ref": "656690ff-0bb7-4440-a78d-56009c32e378",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a91744e3-5fce-4ac1-ae5d-135caea972b6"
        },
        "item": {
          "id": "23476cba-2db5-4012-ba63-059d2f670679",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e77ac764-0871-4950-91bd-4abedb1e1e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd3b26d-98c7-4baf-806d-13a1f3e2b003",
        "cursor": {
          "ref": "8d1eba55-0522-490a-a929-8f2559c70ea3",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2f8f0ae2-75cb-4f9f-98a7-c8784646fbe8"
        },
        "item": {
          "id": "bdd3b26d-98c7-4baf-806d-13a1f3e2b003",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6ec33cb5-1a87-4cea-92cc-7ad6e4600d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe17a2c4-0f2a-417e-9481-266111f35fd2",
        "cursor": {
          "ref": "31dd2598-1bdf-4409-b6ad-dbc8bdf76728",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1aefb08b-2742-4f95-82c9-b4df661caabe"
        },
        "item": {
          "id": "fe17a2c4-0f2a-417e-9481-266111f35fd2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1ea3c7ac-d632-4a07-8473-1a28f7f647c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2dd35d-83c0-4c84-9683-98c906012a9d",
        "cursor": {
          "ref": "903105e7-0188-42bf-904b-54f9a963328c",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a2538a2a-5143-4523-925c-c92f50fb7047"
        },
        "item": {
          "id": "1c2dd35d-83c0-4c84-9683-98c906012a9d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d62b65be-7680-41bc-966e-56e2a5694f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1933c537-b19e-49c4-81c1-6c749149ada7",
        "cursor": {
          "ref": "df3a9c88-f12c-4488-ac64-14bc66624342",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "dc842d40-8f49-40df-a61d-9944822f4c05"
        },
        "item": {
          "id": "1933c537-b19e-49c4-81c1-6c749149ada7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f6fe2c56-eec2-4034-98d2-95da173571c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cab4d8-05e7-44b0-9158-5a248ea7a9dc",
        "cursor": {
          "ref": "90e9737f-d986-4e5e-bd9d-bde15baacbd6",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7744de8b-0e1d-42b3-a927-6b088306056c"
        },
        "item": {
          "id": "54cab4d8-05e7-44b0-9158-5a248ea7a9dc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "564090b2-46d5-4fab-9574-da806049883d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7348cd-9134-4776-bc89-5e2d1cedc3e0",
        "cursor": {
          "ref": "6538a479-d490-4a04-bfee-e3dd9bdee6dd",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "99334653-e529-46f8-a461-1f8473ab2372"
        },
        "item": {
          "id": "5b7348cd-9134-4776-bc89-5e2d1cedc3e0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b0848485-1c00-433b-bb31-78889292e5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4958bc5d-87c6-4634-8e7c-3672205fb372",
        "cursor": {
          "ref": "8b37f6db-b2cd-4b52-998f-1d43fd646e5e",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f8847497-c4e8-4ee4-a557-f3b452dcf469"
        },
        "item": {
          "id": "4958bc5d-87c6-4634-8e7c-3672205fb372",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "933f94c7-42a7-4613-b521-c2307304623e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96ca79e-f9a6-4802-8091-99987b09a836",
        "cursor": {
          "ref": "8b1f5ab8-fb90-4ed7-934e-87f252b0fa3f",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "537ded6d-f169-437b-b2a6-15e53211cf24"
        },
        "item": {
          "id": "a96ca79e-f9a6-4802-8091-99987b09a836",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f99fbb67-8edf-4605-a4d7-893bd5ba194e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253982c1-b6a5-459e-a5f7-23be713385ee",
        "cursor": {
          "ref": "71c501fe-046c-41ed-8bdd-f7edbf06cc15",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a5f27f7a-4dd1-4ecf-b412-1fba89fed53f"
        },
        "item": {
          "id": "253982c1-b6a5-459e-a5f7-23be713385ee",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "719ea09d-199f-433b-950c-f4813493c866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f58fa7-b77b-4bfc-bb5b-f07a41aa0dfb",
        "cursor": {
          "ref": "2bb61550-244a-4f11-a770-c0530124d562",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "862e9c75-8060-444f-8b97-8e9c477d1762"
        },
        "item": {
          "id": "d4f58fa7-b77b-4bfc-bb5b-f07a41aa0dfb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b71a4a1d-b281-43ac-9aa1-bb4f0db72e1d",
          "status": "OK",
          "code": 200,
          "responseTime": 211,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "397fb98e-6a2e-411b-bf2f-b1cc39bfbb95",
        "cursor": {
          "ref": "c4f98e2c-7691-4ce5-9769-5e56a459d7c0",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e96c76a7-3857-4d8d-a176-f3ab7ba6c8f8"
        },
        "item": {
          "id": "397fb98e-6a2e-411b-bf2f-b1cc39bfbb95",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "13697974-755d-423f-8737-9e7f730e4092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3789d613-ea21-4e96-a4ed-4adaade52abb",
        "cursor": {
          "ref": "c518bc2f-30ae-4786-9e13-be72930965e3",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d83639b6-a705-41ae-b771-85f7a6785eee"
        },
        "item": {
          "id": "3789d613-ea21-4e96-a4ed-4adaade52abb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "590a664d-af3b-49f6-839e-8403b6b592f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e274cc9-0019-40c9-83f9-dedfb02d6b7f",
        "cursor": {
          "ref": "f3b7b62f-33ba-4b18-a7c9-24444488e416",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3f82b84f-d38d-4a83-a963-28ebd8b1dbdb"
        },
        "item": {
          "id": "9e274cc9-0019-40c9-83f9-dedfb02d6b7f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "dac2546d-57fc-48a1-8068-5131f3263663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4580d3-fe43-4551-af59-03d2d1d13663",
        "cursor": {
          "ref": "99c10994-5bd5-46bf-96b4-8c1ff604cba2",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "33e1fab8-a33c-420a-8b62-a4d409654ba4"
        },
        "item": {
          "id": "1d4580d3-fe43-4551-af59-03d2d1d13663",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b1341d37-9962-410e-9995-b049b41e828a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e14c9d-6405-49c9-bb79-3a20c25515c3",
        "cursor": {
          "ref": "f6ef0dd0-7b3f-4f33-9235-9a01ff66aa3b",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8510fb38-5f64-4272-8a2d-68282f785c35"
        },
        "item": {
          "id": "79e14c9d-6405-49c9-bb79-3a20c25515c3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7117e445-888f-4b5d-a174-76fd5c8a0bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8357dba1-5e74-4005-b0e9-c236b5ae0beb",
        "cursor": {
          "ref": "09d5e71b-3c70-4079-8910-e409ec39eae4",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bf2fbb56-8ac3-477c-87bb-73c58082377c"
        },
        "item": {
          "id": "8357dba1-5e74-4005-b0e9-c236b5ae0beb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fa211c8e-1e01-4ab3-861c-ebe231b75b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbfc4fe-17c2-46bd-9138-b0efde5bd7cc",
        "cursor": {
          "ref": "61deb2f5-48c0-4659-9d06-836599f15774",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "267cff91-8168-4437-ae06-e82cfea5f882"
        },
        "item": {
          "id": "bdbfc4fe-17c2-46bd-9138-b0efde5bd7cc",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c14b2160-cfb7-4577-8742-894314524524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da3a74c-7880-4182-b24f-d85f6d025b05",
        "cursor": {
          "ref": "60fe8d04-9491-404c-9549-bcf173ba796f",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d78ce59f-1c16-46e8-9487-27fc9968085b"
        },
        "item": {
          "id": "7da3a74c-7880-4182-b24f-d85f6d025b05",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "45b2c7dc-c5f1-432e-8aac-726c59ab10fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cc8fad-787e-48df-a111-71cd51795ad0",
        "cursor": {
          "ref": "98724d28-0422-468b-b145-66570c51302c",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "42d014e9-1574-4531-924c-de4bcb89a087"
        },
        "item": {
          "id": "97cc8fad-787e-48df-a111-71cd51795ad0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6bf6e921-c13b-46cc-8612-1610734c7caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9160536-50af-4283-8ede-401615b0a90a",
        "cursor": {
          "ref": "24ad08c3-5883-4390-b536-d257f771bd90",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6fe249cf-5aa2-4ab8-9771-b6201efa4247"
        },
        "item": {
          "id": "d9160536-50af-4283-8ede-401615b0a90a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "76990ab7-49f0-4305-a992-c727d8f53cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30746d8b-5461-4b86-8f57-939e5611bdb1",
        "cursor": {
          "ref": "3bd1a361-6188-4063-8889-3cb0e1d1e5a5",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "58b80147-5904-436c-bee6-861562ea6b28"
        },
        "item": {
          "id": "30746d8b-5461-4b86-8f57-939e5611bdb1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5237e26b-3121-4791-918f-488ac9946f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77c7b59-450a-4d30-99b4-4f51b22fa979",
        "cursor": {
          "ref": "4c45617b-f5c3-41bf-a2c3-9bf8d13f4282",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "90003be6-b6e6-4f29-859e-b289e800e4cd"
        },
        "item": {
          "id": "a77c7b59-450a-4d30-99b4-4f51b22fa979",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0f980a6f-2868-47f9-841e-15222ca10135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e00111-689d-4b3d-9e2b-06473bff8db0",
        "cursor": {
          "ref": "239f519a-a144-4387-ba90-2e7d198711c0",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bad4d9a8-e381-4b0f-8c75-7940eb65a6ec"
        },
        "item": {
          "id": "00e00111-689d-4b3d-9e2b-06473bff8db0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "36ff6c75-f4cf-4e2f-98bb-9ae2daabdf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ab105a-53b9-42a8-af71-0abad17641e9",
        "cursor": {
          "ref": "4da2a189-cc12-4a16-9e57-0c932a65bb7d",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2e4ffec1-580a-4a57-b984-85b18a8aca1a"
        },
        "item": {
          "id": "97ab105a-53b9-42a8-af71-0abad17641e9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7ffac4f2-6896-459f-80f5-ce1d6b4a04c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec59c749-3287-4187-9c98-46159efd817d",
        "cursor": {
          "ref": "6a5ac331-f993-42da-805d-d9eb1b8613dd",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3e3201a1-0c77-4adb-944b-6d71800a3f75"
        },
        "item": {
          "id": "ec59c749-3287-4187-9c98-46159efd817d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d2e7d56e-64e8-4e4e-8eb8-1c54a09120e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d6b9de-8cef-46eb-9601-24690171ab86",
        "cursor": {
          "ref": "3ca7b72d-2ecd-49b6-80ff-f53befd3dbde",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5a5adbaa-47b3-45da-8e4e-5692d555e7f0"
        },
        "item": {
          "id": "a6d6b9de-8cef-46eb-9601-24690171ab86",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "12002db9-702b-4d38-aab9-084722179e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e88c2ae-81ed-45ff-97ac-e7ab4bbd7df2",
        "cursor": {
          "ref": "9d5a7d5d-21d2-44c6-9b21-1e5694573189",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9dd1fd54-ff0d-43be-8b89-4e5d920f1f2c"
        },
        "item": {
          "id": "2e88c2ae-81ed-45ff-97ac-e7ab4bbd7df2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9943a341-0024-4ca5-951a-d209044f685b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc05ab4-602c-4109-910e-ad3a4b783d4c",
        "cursor": {
          "ref": "2b128e01-8750-41fe-af47-acf4ede786a5",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "71a9366c-6c6e-4771-8362-34be10ab94dd"
        },
        "item": {
          "id": "6bc05ab4-602c-4109-910e-ad3a4b783d4c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c9c939ec-c192-4f2d-a5c6-6627d369ece2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7051688f-390c-4162-b732-68fd65b5cc72",
        "cursor": {
          "ref": "620e4e45-704f-4790-8e1e-ecd88e707766",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3188c64b-9693-461a-895f-7f96a5fe2270"
        },
        "item": {
          "id": "7051688f-390c-4162-b732-68fd65b5cc72",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0e72ef66-967d-4380-8d0c-566edf985fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50862ff-743a-4906-b96d-75aba932fd99",
        "cursor": {
          "ref": "6933579b-19a3-4082-b68b-b1cb32e923cc",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "df5079e6-15c7-46a5-9259-1bcb18557eaa"
        },
        "item": {
          "id": "e50862ff-743a-4906-b96d-75aba932fd99",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4f5017f8-0c47-4e8f-bf4e-8b5d4645fdb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4b6521-bf41-4cd6-bbad-b5a6dbef81ab",
        "cursor": {
          "ref": "f055785d-dac9-4b14-b246-1a24de0cb908",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "358c53ed-7b01-4ea4-b7d7-cf4636e2d517"
        },
        "item": {
          "id": "bc4b6521-bf41-4cd6-bbad-b5a6dbef81ab",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "96ea5453-8bd9-4099-bd0b-9c344a8b42dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9bf452-88e8-45c4-a63a-881bcaebc83a",
        "cursor": {
          "ref": "bee39e0d-ce39-4625-a943-b403fda12353",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "25f65c86-ba7b-4ea8-afa3-d8c6a7d89224"
        },
        "item": {
          "id": "9f9bf452-88e8-45c4-a63a-881bcaebc83a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "20c52bc4-9146-492a-b570-2ea166a689c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923f2be1-c966-4a2f-81db-1355374c2faf",
        "cursor": {
          "ref": "f4759632-f656-4c89-a2d4-3f945bd2cc70",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cc3179c6-b35a-414d-9ff1-0fbf0aecb5ae"
        },
        "item": {
          "id": "923f2be1-c966-4a2f-81db-1355374c2faf",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "69b26b01-0d47-4d09-8c67-4e3477314e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54242ecc-6482-4786-b67e-c9999c05e4a9",
        "cursor": {
          "ref": "b522f8fa-1d28-439c-b2a3-1a4232bea4fc",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "94ebcdba-61ff-49ad-83d3-778e904a70db"
        },
        "item": {
          "id": "54242ecc-6482-4786-b67e-c9999c05e4a9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ccfbbd57-9049-4c64-a8da-508608466afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d628c127-4e34-4156-9475-72d962fe1a91",
        "cursor": {
          "ref": "12530af6-b315-44f9-87f0-e63875ccf03f",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "459fdab5-811f-489d-9845-52cb63f42b25"
        },
        "item": {
          "id": "d628c127-4e34-4156-9475-72d962fe1a91",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1cdfb440-ee45-4cd0-be68-b09c97fcf9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d34a8ea-2e4c-4a0f-a543-2dc2770a495e",
        "cursor": {
          "ref": "694131cd-1277-49bb-8af5-a82d16c8a9d7",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9693f38a-2eb8-4a99-884b-8919d3945819"
        },
        "item": {
          "id": "1d34a8ea-2e4c-4a0f-a543-2dc2770a495e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f17ee27b-b569-41a0-a017-b058b4124378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f4e82d-52f9-4aa4-8dc0-8378ad6bebb0",
        "cursor": {
          "ref": "ef02104c-7e35-46a4-99a1-c99931e6acf3",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "59a05f66-27e1-4f3b-af94-9c565c0cb6b0"
        },
        "item": {
          "id": "26f4e82d-52f9-4aa4-8dc0-8378ad6bebb0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c7f41b8f-db2b-4aa0-822b-d73c334d14b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee59c115-38e4-4b47-acbc-79d6123768ed",
        "cursor": {
          "ref": "f2eebaa4-cbd5-44c4-abf1-add8564cafad",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "31d10dd0-268b-42c4-8510-7e66b0192961"
        },
        "item": {
          "id": "ee59c115-38e4-4b47-acbc-79d6123768ed",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "85afb2cf-5aa7-4ade-bab9-ce7eebb73cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2474e5bb-c512-42b9-8905-68a3d4eb46fa",
        "cursor": {
          "ref": "2a360abd-c406-41ff-ace9-be051f0c4e58",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1bf5fa61-b4b9-4b53-b376-93d8d3dcaa63"
        },
        "item": {
          "id": "2474e5bb-c512-42b9-8905-68a3d4eb46fa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cb903f10-b7ca-49dc-8c4c-9aa15e102cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa27cf3-ec5c-4050-bf99-30cbf62ab0dd",
        "cursor": {
          "ref": "9b7444dc-a288-4e79-91cb-42822495708f",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4b022da4-330f-422e-b956-6acbb164f70b"
        },
        "item": {
          "id": "4fa27cf3-ec5c-4050-bf99-30cbf62ab0dd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2f585958-2b35-482e-99be-043700cfd09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c263b4-f139-4282-bfcb-814c26bbd4c1",
        "cursor": {
          "ref": "a5e11bb2-846d-4090-ab5c-e52be488c88b",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "439dbd53-5790-4064-bed5-c0e55f6704dc"
        },
        "item": {
          "id": "a8c263b4-f139-4282-bfcb-814c26bbd4c1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1ff37034-2aa7-48fa-baec-7ac4c525ec37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64215e2b-b71f-4919-b5ad-a8210c7d721f",
        "cursor": {
          "ref": "5d0cad18-c5b5-4be3-8007-3b7c2653d325",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "04daad3e-8f43-4a2c-8f0a-99262c231194"
        },
        "item": {
          "id": "64215e2b-b71f-4919-b5ad-a8210c7d721f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "101e110f-8517-4306-a386-97fb5ea26e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadede2b-7dac-4be5-9c8a-2527119f15a0",
        "cursor": {
          "ref": "25651356-79dc-43bf-8518-d284ca6b0720",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4ff23a8f-eb83-4469-a39e-90ef9d42f914"
        },
        "item": {
          "id": "cadede2b-7dac-4be5-9c8a-2527119f15a0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "01df922f-a582-44df-96ba-cea44d5b0637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e5c7c5-4584-4a9c-8c53-a61ec32e4770",
        "cursor": {
          "ref": "b83457c6-267b-4934-a64b-2e45e1386fc9",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "25c343ef-9e64-49a2-b9c9-484ec04eb21e"
        },
        "item": {
          "id": "14e5c7c5-4584-4a9c-8c53-a61ec32e4770",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "956841db-c289-4422-80a0-582939ab73ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f899371-8702-4ffe-812b-47c97801402f",
        "cursor": {
          "ref": "865765b9-daa0-4317-a585-8954a1e8f2ff",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1574688b-1e10-4245-ad89-33b243d2a464"
        },
        "item": {
          "id": "0f899371-8702-4ffe-812b-47c97801402f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "47751439-26b5-4ddb-99a6-199da384e5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a0aaeb-2317-4321-a256-e80081cf783a",
        "cursor": {
          "ref": "c4a387b0-d04d-47f4-ba39-65a1779fab5f",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e4bc5c97-de09-493e-961c-02f799f11cb2"
        },
        "item": {
          "id": "95a0aaeb-2317-4321-a256-e80081cf783a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bc49722d-0d92-4fed-9cbd-a6c231ce01ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ee1a65-7b86-45c8-b8e2-794a89d866c6",
        "cursor": {
          "ref": "b60414dd-82e2-4dde-8ef2-45bee3ff1382",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2224380f-b4a0-42f7-a5d4-385270bea0b4"
        },
        "item": {
          "id": "a7ee1a65-7b86-45c8-b8e2-794a89d866c6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "68514a49-43cb-4881-942e-7336340a778c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b8a866-6f9a-4875-a6b4-21ae7b0dc3c7",
        "cursor": {
          "ref": "aab2e709-5602-4fc3-877f-5df4bdf9b68c",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1562a76d-71b6-4618-96f8-d5fb46eecc35"
        },
        "item": {
          "id": "b6b8a866-6f9a-4875-a6b4-21ae7b0dc3c7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b690394f-c1c1-47f3-9405-fd2ddac38fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e0b9c3-2a71-4338-9cdc-b582c21b5b3f",
        "cursor": {
          "ref": "6a9fbb87-0afa-4d21-be0b-dc22d3a18182",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f6d6268b-1f6a-4347-952c-e95b08315d42"
        },
        "item": {
          "id": "e7e0b9c3-2a71-4338-9cdc-b582c21b5b3f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4e32be41-d04e-4ed2-bd2b-2b6602383221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d493ce02-8627-4da3-b302-b296d7b86d3d",
        "cursor": {
          "ref": "1da83f49-1e2b-4468-8088-ec195b15af4e",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7ccde2c4-1ef0-44cf-9803-27eb9fd80bf4"
        },
        "item": {
          "id": "d493ce02-8627-4da3-b302-b296d7b86d3d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "90e9d200-188a-4cdc-9edb-4a9d1064d0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32bdb996-6710-432a-9519-1c610955a41b",
        "cursor": {
          "ref": "8ac4ff48-611c-42e3-aaa2-c5d13b1a6cdc",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "13a35704-49b7-4fe4-a4ac-2d8d505f1fa8"
        },
        "item": {
          "id": "32bdb996-6710-432a-9519-1c610955a41b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bb47efbb-b28c-42dd-bef6-f3d1f68ec7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b88aed-5e1d-40d4-84ff-e66acb995d5d",
        "cursor": {
          "ref": "a4ac3acd-70b9-42c1-b7c6-0d1b66546cae",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "092831a7-e4c4-4089-8605-7bf7151404f1"
        },
        "item": {
          "id": "46b88aed-5e1d-40d4-84ff-e66acb995d5d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "aa03f206-1b5a-47e6-96f1-f45488dc6950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c948dbc4-0ade-4e8d-af39-32ec30b6fd7b",
        "cursor": {
          "ref": "5009dd06-6c5d-4f63-923b-27fb981e1bd7",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8a6e0dcd-638a-4bc1-a88d-8f39c34bb206"
        },
        "item": {
          "id": "c948dbc4-0ade-4e8d-af39-32ec30b6fd7b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "442fa358-4213-4af9-81df-573e0ef057f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fdc4ea-7e3a-4a8b-ab7d-6f4c2156b795",
        "cursor": {
          "ref": "310f72f3-b543-441f-ba3e-b7f98a087934",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b1049a48-751e-4031-ab61-b624b9c44bea"
        },
        "item": {
          "id": "38fdc4ea-7e3a-4a8b-ab7d-6f4c2156b795",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8a8f8464-c984-4f21-bbbc-dcbd36e37edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada0b731-0578-4de7-8afb-77356274f107",
        "cursor": {
          "ref": "9d63cb04-562e-49ff-a160-5c9ae5bf1f70",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f301c348-c9f5-4a41-bac5-60f7cfe799fe"
        },
        "item": {
          "id": "ada0b731-0578-4de7-8afb-77356274f107",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2f1a5917-9e00-453a-a456-7b51716fc871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5622fe-4232-4f7b-b225-b6ffbff0dbab",
        "cursor": {
          "ref": "15b8bf84-3a8a-45db-8eba-f887ac2cec17",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "40ea5876-4da4-42db-a3ee-f614b1f939f9"
        },
        "item": {
          "id": "9f5622fe-4232-4f7b-b225-b6ffbff0dbab",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ff7e53bf-2eff-4095-911c-038aeecb0779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00c7b85-eeaa-4146-8650-383675467241",
        "cursor": {
          "ref": "58aaa270-25e1-48dc-89b2-de5952d4e883",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "84dd3715-0ad2-4d18-b7df-304e79fa5de6"
        },
        "item": {
          "id": "b00c7b85-eeaa-4146-8650-383675467241",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "968add3b-18fe-4291-a6b0-731b3d587a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca783bc5-8031-4f0a-9f7c-05e79a648d9f",
        "cursor": {
          "ref": "be371a7c-6de4-426e-9128-2cc02aa12546",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6a77ba53-e63e-475b-8bdf-17d5ab4fcc88"
        },
        "item": {
          "id": "ca783bc5-8031-4f0a-9f7c-05e79a648d9f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "49c1581a-28f2-4d58-976c-f0c69a9c4427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e851d3-298e-4b3b-9c80-55777cc32386",
        "cursor": {
          "ref": "aba10f9c-abca-4a32-b144-49cec18c7e06",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ae98b303-420c-4d58-8694-1fa81a7ccafd"
        },
        "item": {
          "id": "a6e851d3-298e-4b3b-9c80-55777cc32386",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b84e1904-64ae-40a9-b4b5-4a1a7000a635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bedf16-d025-4b08-a327-471101bfa53c",
        "cursor": {
          "ref": "7fdf4a6f-bf5c-4edd-bd76-100b8257339f",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "027ada8c-5620-4c53-a3c8-b82862244267"
        },
        "item": {
          "id": "57bedf16-d025-4b08-a327-471101bfa53c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8134c65c-bff1-4023-8a2f-4b231c63f270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f7ba8f-07fa-4eb5-ac40-edaf9dc0128d",
        "cursor": {
          "ref": "c2321b5f-e7f4-43ef-ab20-75a4e77e27af",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1fc2f38d-00d5-4661-ac0d-a000260241f4"
        },
        "item": {
          "id": "a8f7ba8f-07fa-4eb5-ac40-edaf9dc0128d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f1ad7855-c782-4849-ab8d-2665fba18342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7653370a-5ac6-4467-b4b6-c48c87c16c27",
        "cursor": {
          "ref": "e6f2bfb4-8af5-491a-b619-010a41d70d1b",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7d16cc3b-4518-4c5c-a9b0-b24e557e1599"
        },
        "item": {
          "id": "7653370a-5ac6-4467-b4b6-c48c87c16c27",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c90b6e56-e02b-4e6d-8e27-c318e1491db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5932de-35dc-4d31-af75-5f0348e1e815",
        "cursor": {
          "ref": "22cb87c9-a912-404c-b233-6f469ce09519",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "aef4efc3-bfe8-4db5-a359-b6caaf71dcec"
        },
        "item": {
          "id": "5b5932de-35dc-4d31-af75-5f0348e1e815",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "dc72a159-0a53-41fa-9180-649912c01c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5a4ea1-822e-4192-a12f-4642c89ca015",
        "cursor": {
          "ref": "65024c3c-878f-4ae4-969a-50bc86433ca4",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "171d7735-0ecb-40dc-81b3-e0cdf230223f"
        },
        "item": {
          "id": "af5a4ea1-822e-4192-a12f-4642c89ca015",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e5865144-4c85-4c97-beda-8178e21e5a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87864b4e-4890-4d7b-982a-ce145f36566a",
        "cursor": {
          "ref": "2f370875-7f5b-45a7-99b6-b38c50d0c02b",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f81bd6ce-6084-40d5-ad82-c89cfc268552"
        },
        "item": {
          "id": "87864b4e-4890-4d7b-982a-ce145f36566a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "27138f25-39c6-41a7-89ca-75e331fba471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3baa2dc2-52cf-4f37-9f2c-3dc168d11b42",
        "cursor": {
          "ref": "af3fa648-33c4-4d63-bbc0-dca5be48bc53",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ceb8898d-747f-4ed4-b370-96cc20669318"
        },
        "item": {
          "id": "3baa2dc2-52cf-4f37-9f2c-3dc168d11b42",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dab23194-1136-41a1-839d-256c2078e950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35699cfc-0edb-4e93-be32-d7ddee33065a",
        "cursor": {
          "ref": "c76d9b53-0879-4fd6-ad47-027d26577a0c",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cbac83ed-e1ba-43d2-9849-ea3b9711da5b"
        },
        "item": {
          "id": "35699cfc-0edb-4e93-be32-d7ddee33065a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "841897b2-710f-44b7-bbad-63f0756a1dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7895f7-e0e7-4482-8e11-aef409958b0e",
        "cursor": {
          "ref": "b9dcf076-84ef-4168-b016-fa3fdcdb64c2",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d157bde7-0c08-4285-9489-95978e802f33"
        },
        "item": {
          "id": "fc7895f7-e0e7-4482-8e11-aef409958b0e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d282a8b2-3789-4f20-83b1-a6aaffc2503f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709971a0-006d-4b60-9f3d-9ffa7429e576",
        "cursor": {
          "ref": "f3d30ec1-f175-48f1-bf7f-7e415e9e4e26",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "eebe28bf-bd15-4ccd-ba17-f06fa848d171"
        },
        "item": {
          "id": "709971a0-006d-4b60-9f3d-9ffa7429e576",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c7333e0b-3266-4d48-a618-e1d9531061af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce290300-64ca-4d71-be74-f98b9ab55c31",
        "cursor": {
          "ref": "f487f822-80fe-4a00-9a80-a1780b292604",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cb13cba0-af74-4c2c-accb-f664661eac4f"
        },
        "item": {
          "id": "ce290300-64ca-4d71-be74-f98b9ab55c31",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "94cde061-b73d-4588-a133-ffdf836eb3fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f83380-251d-4eaa-86e1-718878830b4c",
        "cursor": {
          "ref": "13111899-f314-476a-a1ad-1b8a70544cad",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "64a2b0d7-065c-441f-bb35-b93fc7f1ff73"
        },
        "item": {
          "id": "35f83380-251d-4eaa-86e1-718878830b4c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "aa095b0d-8975-4948-87c6-047cbedc1846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539d126f-c4ee-4c1f-8d35-5bc4656e9426",
        "cursor": {
          "ref": "86558b85-b2c4-430b-9a96-2c4e44541577",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fe7b5219-bae2-40a0-8f48-ceadc0ffd8b9"
        },
        "item": {
          "id": "539d126f-c4ee-4c1f-8d35-5bc4656e9426",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8cec1cf7-f041-4f72-8a8d-7529c7f9d8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b090423-68fc-4a56-bd0e-5e648c572092",
        "cursor": {
          "ref": "d657ea1b-d504-429b-be22-b4b823da4670",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "896e47cb-a3c4-4116-9f1e-8cd0e89a2f38"
        },
        "item": {
          "id": "6b090423-68fc-4a56-bd0e-5e648c572092",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ad4782b1-5823-4f27-bd99-668c71d4bd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3a645b-71ad-496d-a1e9-e524d9860941",
        "cursor": {
          "ref": "d82f64b5-d540-4d2f-a409-7c4a5272a4e5",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9156778a-1a76-4db9-8836-ea7793fff1b8"
        },
        "item": {
          "id": "1c3a645b-71ad-496d-a1e9-e524d9860941",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1764a9af-75ce-46df-8687-204e7ca326a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a1ca10-c7b5-43a8-98e9-6d1141447d2e",
        "cursor": {
          "ref": "0fb62dae-2b84-460e-9a7d-324802d0e268",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9feb52e2-85b0-4120-9909-a74725a0dc3f"
        },
        "item": {
          "id": "86a1ca10-c7b5-43a8-98e9-6d1141447d2e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9f731b33-70b8-4704-a4c7-b7a68e1b16b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67d7117-3694-42b3-863f-b680920afd7c",
        "cursor": {
          "ref": "6fb52cd7-1d29-40dc-a0ad-f8a221dcd092",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e1fb12ab-c1ac-4a50-bdc3-dc2926efb11c"
        },
        "item": {
          "id": "d67d7117-3694-42b3-863f-b680920afd7c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b9e24a30-da80-4244-8f3a-28907254794c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccddc2f-4994-459e-a028-782f57b1616d",
        "cursor": {
          "ref": "c8a20eda-67db-49a6-92f2-795f0006945c",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c29d76e6-9295-455b-a7ae-0c2d3e58ba16"
        },
        "item": {
          "id": "6ccddc2f-4994-459e-a028-782f57b1616d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "29f839a9-7991-4dc7-ad8d-03041d3eea6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16d66e7-370d-4e5d-9b4f-6285902bc481",
        "cursor": {
          "ref": "5abaf61d-9894-4b8b-a4cb-36d7f432fe5e",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "67af373f-a8c8-4bec-bc00-29967f5466d6"
        },
        "item": {
          "id": "f16d66e7-370d-4e5d-9b4f-6285902bc481",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1c39761e-8db7-479c-8742-b4712bfd6e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a609e0-43e9-433a-9bea-f81020ddb427",
        "cursor": {
          "ref": "55c3c34b-3aee-42f4-b408-cccc52d95325",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9b1f369a-2c24-430b-988f-eeaef9fe054d"
        },
        "item": {
          "id": "22a609e0-43e9-433a-9bea-f81020ddb427",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4826099c-11b3-42f3-bab0-8c4e4af8b428",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e76c818-af3d-4978-a4c2-681347cf51d2",
        "cursor": {
          "ref": "969515cf-30d5-4783-a29f-126e2299e4a1",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9849ee74-9533-426f-9773-3a3083d7a037"
        },
        "item": {
          "id": "0e76c818-af3d-4978-a4c2-681347cf51d2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c4ce7ef3-0a10-4a5e-9974-2b297dcc167c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 69,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc123bfa-a61b-479c-8074-4a3af3b46b04",
        "cursor": {
          "ref": "9c5d13bf-1829-44ff-b7d5-945f710cf540",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4af9a06b-e590-4336-93d6-6bae8108a323"
        },
        "item": {
          "id": "cc123bfa-a61b-479c-8074-4a3af3b46b04",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "24ca1e3d-8bca-473e-be49-d116307e2b0a",
          "status": "OK",
          "code": 200,
          "responseTime": 464,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "85087ffb-b77a-4047-91cd-3a4949f5d923",
        "cursor": {
          "ref": "87aa0ef4-9352-4e39-b304-7421869bd86d",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "65b47c5d-f749-438a-9dfa-323bce5122d6"
        },
        "item": {
          "id": "85087ffb-b77a-4047-91cd-3a4949f5d923",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8c788c79-ed6e-4f6a-823f-c0ec26261efb",
          "status": "OK",
          "code": 200,
          "responseTime": 371,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e089e816-874f-429f-b1fd-dcf75d916153",
        "cursor": {
          "ref": "3d51cb92-b4af-4417-ba1f-1f90cb6ea9f4",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "64818cbc-a1cc-4df0-a633-40772e7e61ed"
        },
        "item": {
          "id": "e089e816-874f-429f-b1fd-dcf75d916153",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "95c1b5b7-8da8-400c-bdef-7f0025837c9f",
          "status": "OK",
          "code": 200,
          "responseTime": 471,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2741c9-953b-4569-b369-99ab58fa7898",
        "cursor": {
          "ref": "d11a1f0f-f078-4748-89a5-81d466bf33f4",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7069d889-5994-40e8-bd33-878accb883eb"
        },
        "item": {
          "id": "fc2741c9-953b-4569-b369-99ab58fa7898",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "686a8e3f-c6d0-4330-a35d-a32a1e255c3c",
          "status": "OK",
          "code": 200,
          "responseTime": 369,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a651b01-bf37-43c5-8ef2-33fe9771014a",
        "cursor": {
          "ref": "d61b2262-7969-4bc1-87a8-c0ec72a80648",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "508efba2-34ac-438b-bdd8-ae607b96c7f1"
        },
        "item": {
          "id": "2a651b01-bf37-43c5-8ef2-33fe9771014a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "74ed6c10-3218-4676-976a-224439d16207",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a651b01-bf37-43c5-8ef2-33fe9771014a",
        "cursor": {
          "ref": "d61b2262-7969-4bc1-87a8-c0ec72a80648",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "508efba2-34ac-438b-bdd8-ae607b96c7f1"
        },
        "item": {
          "id": "2a651b01-bf37-43c5-8ef2-33fe9771014a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "74ed6c10-3218-4676-976a-224439d16207",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a651b01-bf37-43c5-8ef2-33fe9771014a",
        "cursor": {
          "ref": "d61b2262-7969-4bc1-87a8-c0ec72a80648",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "508efba2-34ac-438b-bdd8-ae607b96c7f1"
        },
        "item": {
          "id": "2a651b01-bf37-43c5-8ef2-33fe9771014a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "74ed6c10-3218-4676-976a-224439d16207",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e77c7f-9463-4c71-9a5c-5150ae7aa31c",
        "cursor": {
          "ref": "e596e299-7c90-4a2e-8c4d-606a6e69aa15",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ee3a88bb-3be4-4bd5-9669-06deab764125"
        },
        "item": {
          "id": "92e77c7f-9463-4c71-9a5c-5150ae7aa31c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e450b921-d5c8-4e83-9d3d-163666ccce10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 71,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a6b004-d11a-4fb3-b0d5-b2394033e2d9",
        "cursor": {
          "ref": "8228fe8c-38df-408f-8aaf-1e6f5f6741c9",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d4cb4d0d-3c2d-4a4d-9e50-e40603bf9ab6"
        },
        "item": {
          "id": "77a6b004-d11a-4fb3-b0d5-b2394033e2d9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f856f159-128b-49c5-b93e-109a18b2dd70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "77a6b004-d11a-4fb3-b0d5-b2394033e2d9",
        "cursor": {
          "ref": "8228fe8c-38df-408f-8aaf-1e6f5f6741c9",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d4cb4d0d-3c2d-4a4d-9e50-e40603bf9ab6"
        },
        "item": {
          "id": "77a6b004-d11a-4fb3-b0d5-b2394033e2d9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f856f159-128b-49c5-b93e-109a18b2dd70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8a8c9917-c72d-4fca-9e17-b9dba9ed4828",
        "cursor": {
          "ref": "3b1a38b8-43e5-42fa-a4ae-5f13aef21a01",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d961d970-59ef-457a-9711-581bb84c6d39"
        },
        "item": {
          "id": "8a8c9917-c72d-4fca-9e17-b9dba9ed4828",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "23e7d94e-58f6-4b5b-9bfe-87aa5d59d8b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "37654308-e963-4800-a76d-d5082ab0990a",
        "cursor": {
          "ref": "4e12fb50-05f2-4b0a-8afb-bfc0ecf34a78",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e3e92a31-426d-4304-a668-28e2504a96e6"
        },
        "item": {
          "id": "37654308-e963-4800-a76d-d5082ab0990a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "75e2e325-c898-4f4f-8d73-0bc92f3dc461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "37654308-e963-4800-a76d-d5082ab0990a",
        "cursor": {
          "ref": "4e12fb50-05f2-4b0a-8afb-bfc0ecf34a78",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e3e92a31-426d-4304-a668-28e2504a96e6"
        },
        "item": {
          "id": "37654308-e963-4800-a76d-d5082ab0990a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "75e2e325-c898-4f4f-8d73-0bc92f3dc461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "720bebfa-631d-4024-8d4a-98dad48dd62a",
        "cursor": {
          "ref": "af80c4e5-35fd-41f3-a67d-e235fbb6d561",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "56c74308-dd08-496a-82c4-a36533c3fd48"
        },
        "item": {
          "id": "720bebfa-631d-4024-8d4a-98dad48dd62a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "fac9cd7a-18b9-459b-8f76-5632f42b0cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}