{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ab470c84-2a0b-455c-9703-7b1e77546eca",
        "name": "Clear Cache",
        "item": [
          {
            "id": "01d44fc4-4ab0-4f4b-b86d-fac12f8e8485",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2c652bef-6b13-4276-aa01-361a35ec23c3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8eabb6af-c04e-4d32-83c9-1168e74ee9cf"
                }
              }
            ]
          },
          {
            "id": "01598aba-66fa-47b6-97d7-e2f90d95de63",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e4384d65-ce5e-47ef-b3fd-49849d98aafc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8f66cdce-cb14-4555-984e-f16736122dda"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "21f78a6e-361b-4e79-90a2-a9284af84d44",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5f0c4878-31d9-469b-8d52-c70217ead21a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5d8ed437-f635-4732-abc2-f5473ee0f108",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49531eba-e16c-4aba-9963-033d0595022c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35573ae0-c548-4721-8e49-1e858996340d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "57f52541-4d8e-42a9-bb75-13a5410ef6bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "343bb5e2-3781-4608-934c-223b4966fba3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2a2eff9a-c9b7-4531-94b2-dafe3cc9ca6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "170c0078-4669-482d-b3b0-152e9f812bc4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f5e1be3-5dce-4259-9cb7-24df154f50ab",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d3d9c578-29ce-4e07-ab2a-f438f4b81a7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08afe9e2-9553-41bf-8a30-cb0dd8db7f88",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1962d6c3-4d37-4630-8065-d32d859e4e87"
            }
          }
        ]
      },
      {
        "id": "cec31a55-e158-4836-a528-776e42b3ad84",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "458340bc-5cf8-4bfb-ae1d-55bc6eb5cb2f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27cce2d7-1153-460c-88a9-008bb81f6910",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e700069-4120-4ad5-9f4c-8e5f924be16d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8987308-3502-4055-b023-2e8f9221bcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d2c2f09-b6ae-4642-9518-c91443747bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8d991c-691e-4064-9e75-45fac59fee04",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4859ea0d-f311-43e2-b368-8e7b3b8bd193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79269de5-3491-4fca-8c38-cd607f6dfa7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fcc28b-add6-44c6-9c86-a3a42f5a29ab",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9709c0d5-6c97-4ea7-bcb9-9dfd90a3b230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c000848-3065-48a0-a4af-ae7c5fdf571c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6a4ebe40-ce62-4e18-8d32-89d7ba1f0748",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c340a38f-2d0d-4098-b9d2-a275e5296387",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab8879e-7e58-45d8-9f4e-f2c15ebf5b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dde94481-a448-45ce-b90b-5f89ebd8d874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed18c64-c055-4562-83f6-bf95792223cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4039f5-7de1-4620-b403-ee9ad5eac26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4133a0b4-ee36-4b01-b40f-bd746b041a00",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7188d952-aeb7-4a96-804f-156bc70e6010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b17616ba-0f04-49d5-9ec4-4c62f4c4b830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d863a076-7086-4942-bf60-b5cac6c04424",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "89a1c592-3ba7-4f8d-9c6d-35cd8b52ad8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a3a2089d-1b54-4bd0-8c0f-68a2f641a46d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "57638c17-d3af-4c14-a782-1a07b3e8cc40",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3a3eb1f-4b75-4c5d-b844-0f50e96995f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4ccfd692-96a5-4864-ba72-078bf8152b5e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f276536-b73e-4ec8-958a-d08fda428f68",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "75239d15-b512-403f-a956-a6aa707958f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e49335ba-92b0-4a7c-8e20-d44f7afe8ace",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d38cb32e-b6e9-4bd8-8a37-8105b76327b7"
            }
          }
        ]
      },
      {
        "id": "d64dae2f-e50f-417e-bef1-05961b670307",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "20c61a83-1ab4-4441-a3f1-200d604e5246",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c1f5301-a92a-4db3-8b58-eb071b6ee520",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "70af825f-1714-4bfc-8998-70caa192887b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2394c19-6aa8-4708-938e-0416bf720e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "717ddb6e-7b6b-4517-af3a-61912d2450e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8403cda-aee4-4fd9-a2e9-a913d74a70cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f890880b-1621-4817-b7e6-cf173368636a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a56ebf-90e7-4a93-b9a6-2c23e404ce32",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6324b0-7dc7-4207-8acf-6558fe8f581f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80fbadf-7efd-49ee-948b-7d4b71b13637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f340df-18cc-4631-ba0a-31611f790f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83e4ca1b-6e82-4a13-ae29-19003e6d43ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a1f35f-2e12-4397-a09e-862873c0d841",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f064043d-05ab-4a55-acc5-e2ddbd3d5869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba5854c-48e4-4acc-9d33-98a045801a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee25cc1-cf49-4307-877b-081d4123d2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5499885d-3856-444b-8265-48b9bf61cb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b5a0d7-dd67-4d57-8add-de07ce7f6d3f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d0e14b-03cc-487a-bd5f-c296edf19fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2c83ee-787c-4275-931e-286a15afabe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e93ab6-3b28-4965-b1c4-bc3fa6307845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb7d0d87-cfe2-4872-9a9e-517489a30eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb6e7d1-d8b5-4e8e-a079-4285f7bc896f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341cebd2-a8b9-423e-b9cb-5bb779166b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0798af-8a1b-4c1f-997f-86280a834040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134dfa33-f0dd-4e05-8b3d-d5b411d23a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5aaab836-b930-44f7-bc41-435f83026987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d29bb7-cd8c-413f-a4d8-c63b30f2cd95",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efadb50f-2927-47cd-aa64-8acda4ef8c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832cd8cc-1ee2-4099-9b97-65c1ec6ba301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b27361-e940-459f-b7ce-31a6f7fcdb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fb3c05d-8630-451f-84d0-c5d16ff1b29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ad8324-67f9-49e3-a71a-365899c48b7f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cf2287-d1a1-4534-9f73-81f473081451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2130e0-fa9a-4d63-a677-4d84e2ee3cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fa2af2-e1e3-4d9e-a79c-8ff77f3f0e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06008bf9-e616-4e99-a9a0-f3c3ef29cab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f02c23-ac5a-4255-ad0a-767e365c5bec",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4c4bda-2e31-4d61-9e5a-2897c11f75df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9174797-c2a3-48b4-8a1d-f326ed555734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d40b87c-caf5-479e-87e2-d16ed671cab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1189eee8-b324-4e5e-b268-cfb59ceac1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0527f7f2-e0b4-48e7-80e9-f145abf750c4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089e3605-8119-4150-84ae-5ebf0a7c30fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a3df62-1d5c-4de1-abf2-bda71d6da3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf2ad19-a590-43bd-9e7c-4c5b6814359f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6234965c-d844-4c51-bea8-f9e8960ae191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb85a018-fc5e-4c0f-adcb-a2a803f096fe",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d292fda-9be0-4706-b809-1369a91477df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c24d88-a73c-4463-8f8f-ccae2915183a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412e304f-efb9-4106-98ef-9a62192febe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f96c0f2b-3a5e-4dc7-81f2-3b1c45b0b17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7e23fc-2845-4d0b-9f5f-533676d7cf6c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b9f34d-1550-4988-8777-db4ae53a9763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61150550-780d-4267-9fdc-cb9480c4706a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d39989-9c94-49b2-80b7-3eaab7302ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23b2c536-c846-459b-8478-fc2958e087fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2ac720-a203-4e1a-adba-9242e42761ce",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68ec7f9-c0d3-4d7e-893d-b3e305d0a3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a74b6d-8eb4-44d1-b65c-bf6636f1402b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57235212-5bee-4c2d-9279-fc6f0b686284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ac21834-fb25-4d80-9976-1f8cb711cc87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01929f19-1a77-41d7-aff8-743ac8bb5c17",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1e7261-a14d-4600-8843-b72133280f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983f6eb1-3010-4b5b-94a0-a575dc69c1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f8fb3e-24a2-4468-a9a1-cd79d08a93b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e592dc9-3ad8-482c-95e7-2d67656f9cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ca7486-2031-4bb7-83f0-9ebfb9668659",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8b709f-168a-4e05-a1e2-99a5fce80b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa9a1b0-1a09-46b8-b3bf-157c65357841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cee4d4-f0bd-41a7-822c-818bdef20685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed54f8a-3005-49ca-934f-3b7cc92b4fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb9ce3e-26ec-4ff3-8d93-4d004ca5bb87",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b974982-8b85-46f5-a1ac-8ae474c088ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c05547-4117-48e1-8a53-c0ad8d6f34e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945dc28b-d734-44c5-b60f-097c0791a337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16a971cd-e60d-4aa6-8295-d3b07e5f8ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1333bd9a-2e2d-4d12-8918-ec72206899ee",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e85daf-36b2-48d2-8c5c-8fda6cb21faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20851383-4679-4e42-aa35-51cb2610cb04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c37a1e7-59ee-4a94-8728-96a03f2159ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba9e2e47-6741-4b4a-b9a2-658106b8ec23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff7afea-a66f-43d9-9e65-0bf73b2da854",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcad5222-d082-4207-9092-a100ab3547df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c8191c-c671-4da8-ae63-33088b6109dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5de6b92-44a6-4ae8-8fa3-2b5ba9f133a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c83844f4-7f9c-45ab-adbe-532a1a4854c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c793b9-87fe-4d1a-a601-6525bbd34842",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b12d2e-b202-4b19-9b3c-a9d5aa27cc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43443eb-9212-4cb1-bdbc-dab94dabd4ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c9ff5a-bd3e-427b-a2c2-4caea95f9e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f860c09d-868c-4945-b3f5-09e31eae33e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4281323a-269e-45f4-aec1-0d6144aa3eb5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9acb8c-8f8d-4687-a20a-62b0ba3c9831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3928e146-2dba-4946-8f3a-8b7886f58630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52563fb-db26-426e-8d1b-0adf0ba6ff86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4082938b-0c5a-49c4-bbd3-77168c165a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794c6128-b367-4fcd-bdbf-f052ddeb6e24",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7d5198-a267-4c00-bcd6-83d6c118df7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e91c2d-58ff-43be-8141-c1660a39026f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c240d5-35af-4fa1-97ae-af445fbd918c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b4fd89-bff0-4815-9e79-cb1ddc9cd770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2241d1a-62af-4848-a951-b821e5d3f14d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19d4bc2-a666-404c-a0ac-beb1317b3c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8271eacc-81cc-43ca-afdd-56931c7d219e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c307e55e-1416-425c-9e3d-a29f2b0f45f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9c9c73-9bfc-465a-8908-906b2638c4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee00e002-acf5-44c2-bbc9-e463c2003a6d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a782815e-38c6-44c7-841b-9ecadc039c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54641ba-bd9a-497d-9268-8ff8bb415f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35c293b-f2b4-4231-b375-10b5034cccb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4b1d53-7488-4405-b96c-8f56903e10dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d815bc3f-8561-4268-9ea8-6f5227e184f5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75753807-554b-4d63-b5b4-df63e6ae83fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e6f6fb-3e19-49cb-90cc-c431b629ad28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b1c971-8e28-4db2-a2bc-3413ccca08e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b479143-5218-4b0f-9cb5-a874b0b7b6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98c1031-a6c0-4fed-96f0-0e5fa663b920",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b6a935-4510-45d0-a839-eb3dacab5e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f116894a-ed62-4814-8616-09fcea8e49ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf1413b-f0ba-4b5e-8e3b-42b6cb446399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4325c9b-3d88-42d1-8b30-8dddf22e11d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19de6e9f-b9b7-41a4-84d6-565ff6669ec1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1a0185-d5a5-4060-b167-1886b2c038e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94df40d1-b65d-4f5c-a87d-86ca9cd0d174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2dd761-ccec-46a6-be67-ebfee20e188d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c28c36e-25e1-4b4e-9f16-b471b1e2085f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf293919-5285-406c-b728-0547ca743cd7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a08875-1e97-4779-8a68-d72b6bee14d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd7bf0e-9c03-4ac3-a576-2a93f59cda6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc0bf97-3d2f-42e6-abeb-b13c22f9cd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "773fa60e-5973-4807-bc89-a455d82b7a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991aa152-83b5-4212-8311-a6c0a3dfeb33",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e331f3-5548-40fa-bca5-925e8e1c77f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda27db1-7f5c-4530-8883-32b3da5d9cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cc8787-3156-4b82-9552-21240af8535b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ea4bea-e7b2-401b-a669-71bf7160c4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5229f224-f335-424b-aa7c-5a450d871fb8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41068246-7527-4284-aa92-b62e134f8669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea41fa02-f64b-4a58-a8c1-087964d87854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d66900-90ad-428b-8c10-bfd2f890e38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70d48948-6b36-463b-a5f2-519b301386d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18010e2-bf1e-4ca5-adbc-b056bf8a79a1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d31fe10-6d53-418b-a461-2f9bf6ecfcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8070863e-bac8-4923-8296-db5994514ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd70a07-9247-426c-92e1-a111c6dfb299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00f767c3-38b3-4a21-acf9-2f57d5e08283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b06fec6-8ba6-45b6-aa72-4b9bcb55b7b3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837ad426-ea8a-4e43-9784-8381648a5de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92a283c-b958-4fd9-b7f2-62f60ff9684c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732689c9-6ab5-462e-b58d-3a857667dc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "701bbea0-9a07-4b06-a2d0-305a68e0deb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f994876-2c2b-495e-91c8-9d86db02674c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd6c240-377d-4972-a719-74eef5e48ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90505d13-bf15-40cb-ab67-b0d0099b02d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993a21f7-dd06-476c-a2dd-a49d9392d23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9b3404-7450-4c09-86d3-27936101c530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c17c7b8-b71c-4957-ae7f-f8c21ee5f7ad",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c279d997-0129-4cd3-85df-cb03b3104d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df1fcc0-fc03-4a26-bb81-0cf128cd1759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ed9a1d-836d-4d61-8164-29e7816f7884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee4dcb3-9c63-42cf-81d0-9acea5f6703e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e0edb3-9f63-411f-ae7f-02be6e808d6e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4264d8-050d-4bba-89df-55a6b6a551dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b3712d-0931-486e-a41e-234ec01dff98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728d893c-eef9-4f88-99d8-db61cb5b4a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff20bcea-2302-46aa-8c15-5fb771010c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb62d70-5a0d-4b5e-86b1-9c09acf10d98",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01511bb6-5179-4077-a967-405410368f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e759093-8ba0-4643-b0f7-d2d11576b5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae900ce3-44dd-4f2e-93ab-1114507699f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d18a8525-d4a1-40e5-ae8c-463cc7f2d1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e75393-b7a5-4e0a-a668-1e0d47e1dbe4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88eebc5-1540-446c-ba7d-b55ac04a0ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c792035-93a5-48b2-8e47-211aae026bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e724ce-74cd-4b52-8987-d6360f5c1430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e629cc6-e321-42cc-b5db-b1410079b47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df34460d-8891-4e3c-826e-8092793f385d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294ecf07-a048-40cf-8bf9-3d519fb1c5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1822336-4c5c-485e-957e-f1ffa041c956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07338e62-f0ec-4fd9-9a47-819d691bb8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f556ec-0e05-40b7-89cb-366c9e21cba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06296a6c-c1be-4993-9d9d-d4acd15e99b1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9e8a89-be3e-464c-b7c6-1c822098884a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd27fea-ac5a-448a-9e3f-a0bba6afe6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b5eae0-d60b-4a70-b40b-941f68ed0012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "372174e6-9c54-46ed-a987-317d1de0530a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019fb205-2ed4-4676-8b2c-0d33cb4da868",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa14564-24b3-4ad6-9783-5a095e435da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c82482b-ba81-4e0e-b609-c6a1e9d5c893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4953418-a43f-4468-833f-659bff97e55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a89fcee-4b74-45b2-9566-85c73f9ec407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de16caeb-aa66-4c45-9b25-4458db0b29e5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cda336-63b2-428e-9513-40c093df897a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e4a6af-93a3-420f-83fc-8b588fa1e0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137928f6-b56e-4279-9b9c-d2369a6ecc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "021a7d6b-1c5e-4371-a5bf-d9c8a89d966f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae45fe6d-0366-4150-a370-778aafe95232",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b71ce30-4f2c-438b-aa7d-3da2ce65beff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a72d3d7-23e6-4754-95a6-614ed1479688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0396f5b-5f6b-4c61-9352-681d60cb75ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "be792672-83dd-4c3f-8606-0fec56303a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d62b33-480e-4dea-8ab3-6b4571a99834",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd316fb-65f0-490d-9266-9ba1593f1d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c037a13-1197-4836-b130-6a02b1bfb7bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e681fc-1a93-440c-90c1-de3fd7b52acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "23a303d8-a31a-4f04-84c3-78597d7628e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137f8bb0-5a17-48a3-bb60-3317e856f1b6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a53c20d-6910-47ff-9393-28e2e2b9c390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a44eefa-0fef-404e-a4b9-1f2d75418f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b463b1b2-df32-4403-a1cf-fcf9d045bf62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "348383e2-9540-460f-ab3a-b28c39431322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4616fbf1-6172-40ef-a29b-453e4882db85",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0951a4-942a-4fcf-8b13-340f3ea95ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4c2a84-1ab4-4562-8480-69ebbb987c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b7df33-7c41-48d0-b595-aa114c65ddf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "331e84fb-32f8-4695-a63f-926584626ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f661c3d0-0d82-415a-b122-12ec868a31c5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbb87e7-6ddd-4f28-9fec-4ea8c091804a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bcb1712-7fb7-4d76-99ae-a4ae8bef10cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8455ef95-4546-4f8e-b38a-e959bb1d5306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5db5f3a6-cc8e-4835-9a91-1d2f9f36a732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091a45e1-948d-4602-8663-3aed1a501bd1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a979f1a-6e09-4962-b660-2484121d0f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b750d5-bb18-4a6d-951e-8bd396f0a2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166d5ad1-4ab6-42cf-9dca-32d89d2a6f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "99ac1ccd-c11c-4abb-a92b-fafd50e09745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdedd54-8d4c-40d7-9cd5-fe494f9564a4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389ffb1c-a481-4cfd-ab33-6d564e3a523d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ca8297-b4ad-4db7-adc3-407f88b7f3b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f5a38e-fab9-42d0-a2b9-9a5eedec21a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "784d30c8-d03b-4d44-a460-22060c16b0e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b1f21c-aaff-4a61-bd93-ae5e059c6d07",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ff6406-59fb-49fd-9c97-7d545c7e8abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335287df-e74b-483b-996e-c89681c7f694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ebcb62-8067-4ea0-9a2f-40db9ce11a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42ffbd01-1cd7-4532-a783-fb08a192f5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4b0166-4fa0-4499-ad21-0ee689099a0b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85c714a-4f77-46fc-af92-b22a2be83e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc172079-c797-4279-b59e-b0af4eaa1226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf19437-5ec0-4aa6-91bc-5dcf677daccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34fd3276-b63c-4f22-be16-4904433ea1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055f7061-39e0-4a20-aaf6-670e64065da2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad8000f-8af9-43d1-a576-88416ee2b464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a21c42-be07-42ed-8255-7815608331cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58844249-3c9e-4837-91b0-c70bc232dc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26ef281c-3ae7-4067-bcab-c4519852f8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40d3523-ca02-44b6-bbfc-fb82e0fe4723",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a5f961-f53a-4dcc-87b3-e304aefab82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca228a0-a43f-4453-9749-165b5e525eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99aaa39-9fe5-441f-9c9f-8e2ceaee2f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05147936-eeff-4ac1-b298-adecb4dac632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bd9ae3-3d77-43af-9ccd-5e5ad0f23662",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa165ec6-bc64-46b0-b473-8ffa93c57a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab115a1-87f1-43cf-92e2-cd9282f1d467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a0b156-04e9-4aae-871e-7bb256fd3b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "192f0687-0ede-44a1-ac29-b7fb5dd9abde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a557a4ba-bd1b-44e7-bc6c-556b2513a230",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539079ed-7868-422d-8bf5-03ddd8948cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d2c36b-2c3b-4b11-8089-fa7d8905a674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ee3ab6-62d0-450b-8e6f-937b68e86a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd4615d-a1ec-47e1-af34-26d08407d86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd20c175-c184-45ed-9a97-3a3f2a8fd02a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6a4028-8657-4578-8c1e-f1748cfa881c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a778a1-5d22-4d09-ac75-6b29de5c8171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081db9b0-0974-4e64-b592-7a8a51734511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5066445-8c44-4f1b-a83b-ad1e82455c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0824bad9-c72a-4c91-9cfa-3d3e1dd035e6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955df1ba-d726-460c-8c86-967cf357663e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead31900-ac71-4997-9b69-7a70b436729b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf1d56e-cf54-450b-9dde-33b8d6b345fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3aa463d-4bb4-400f-a525-eb75e8a67b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672388a2-3984-4c29-9530-24366cef796c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50fe41d-4fe2-4416-adc0-61d50702290a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8b4e3b-deac-4632-afc9-ce9a985d1b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c9b4fd-3fe6-4ff3-87c0-7f924325d053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb67969-2cc6-4cd3-885e-a7f564102294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d22f9e-be38-4165-852e-b15ede971800",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0064b53a-cbc5-41a4-989e-7710226f024e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27abe04c-b2fb-46e8-a18b-17850b2a7c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38257bd-0b98-4b69-9f11-229163a2b80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b626b53e-6bfd-49ca-893d-ab12f3a74bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44b6772-2d14-4258-b2ff-078b30964037",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac98f13c-4e40-4c5f-9e5a-5f6f59a74463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20873be0-356c-49dd-b7c7-73dc09f6db76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e977ac-952b-4479-b3aa-e564a47ecb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c5468b-d302-47fe-8a48-cc600aeb665b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d303b9-582b-4c02-b5e1-2991c3b17a7c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b83cb8-de21-40be-8cf0-d876eceb98e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435a24db-b9f7-43ed-b8ee-752841238736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1db7564-d429-4e8d-b8e0-bc9115ace5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5f22123a-5307-485d-8eef-8f85a62c4e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d905cf67-3a6f-41f3-915b-d9152a2cef78",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d40809-a0f2-4192-a46b-44a2b7744274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568b7e49-9097-4b1e-899a-1244f96cbdf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6477fce6-e231-4077-8ca8-c67361ba73f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb2a84f-aa3d-45c7-97a5-a132089aac19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50a40c0-2ea1-414c-86f3-18df16f50d47",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ec35d6-a79e-4ac3-9c15-3596bb71de18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d324fc5-29bc-4a99-8a37-f68f6a91618f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b139ecd-3202-4e7a-9280-b993d2fa92d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa79858-613b-423b-9970-62d46719c146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5625759b-efee-4ff5-a127-ff820d1278e4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edb4c12-bb11-4ff1-a82a-e662f7ca03b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090550f1-0cf4-4e3e-ab2b-9ec2fc8d0bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e0ae88-c163-434f-bf40-67eb702411dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa13c6a3-5eb2-4a12-bf1d-94870e3cb8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967ee10c-0fc6-4931-8d6b-ad18cddf7fa8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4d2920-7cbb-4d58-afac-11a0fcefa276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f369493b-109e-4487-9695-0928dc139aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9ed21b-03ed-4c3d-b14b-c015328ffcff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "921db9be-5439-407f-868c-47bdbd4027e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac0ac23-347c-40bf-959a-6512324de342",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1b53c8-28c4-4cd3-a1b1-c93f31231c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2269e9-3c8a-4c02-99b0-ccf08beb9480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5462d70-2b15-4c02-84e7-ff4f767be6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a33319a8-543d-436e-a370-5a5c60a9e64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9cf9d1a-b1a4-49b6-85ee-4be2296d962a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d3d6dd-5417-4f82-84ac-0ce6fa1ed83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247c72f8-a44c-4e5d-bd02-12b02481e29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22b67fd-fd84-46b9-b1dd-7185cc968981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2be2ac82-7d82-4f8a-8159-fb8072409cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a209615f-9e8b-4f37-86d8-729e48172a62",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3aa695-e645-48dd-a2e1-a0e10eae0f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5793c314-b5b4-40a4-9077-73ef1552b3e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0b5e7f-b0c8-4d0f-a744-dafde45aa928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "94c82a0e-5251-4133-b4ae-7abef3cb5a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18d514f-7bce-40cb-ae45-dcac7eaacb37",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0631c027-c23e-41e4-ab1b-210901a98d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04652942-436c-429a-b30b-46fe81b189cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f04f26-fd50-4c67-ba3f-39de0bacf78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de5d7098-60b2-489f-b1de-fd01561d9f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566d4c0d-c165-4208-8271-9521cab1d5bb",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db1de10-22f1-4f73-8ffe-ac57670d4d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ee74b6-a449-4fb4-a490-956ee1ed2bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be02342-1068-46cb-927a-d2a5181f884b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a56fe9e-2046-46bb-acae-6d59bcac70af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3498cd5d-e0a5-49fb-8018-f0a268b97b44",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecc7b1c-0098-41e7-99e2-d24d91cfc567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7754a5-92d1-4a78-902c-83d716346c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c56ef9-c920-41c5-9dba-6311bf6d88aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cec5547f-e43e-4a8b-9f5e-3e02a85a2eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71262f1-86b1-46bb-a998-55654d1b12ef",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc34f92f-a243-4fc4-b533-1f40de77e4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a0879b-7404-4ce0-9aca-46004f80dfdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5761a81c-eb0d-4c5d-9e1e-34e2b8965e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af860b5c-dfd5-4df6-a329-fe97c2a69085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21065bd-9562-4abf-bb57-b3781c1c83bd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5b4ce6-5aa1-4f3f-88b7-2f7fac23943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3e00e9-e9e3-4d26-a4e2-7f0483e0c942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba856bd4-31ed-431c-a46f-769cbe16d58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4347cb93-91f9-460e-ad07-ec8fd685e78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f0a668-d504-48a2-aadf-997ac7d1e610",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74428e5b-5bdf-4f10-8b79-b48481d4637c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4570c49c-5e55-4f77-9681-54cc485933c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632761a6-1d22-4604-8db1-f69750785b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f97352ae-7905-413e-8884-d17c202ebfbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6650148-5290-4e45-bb3f-0233918ad7f5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33248a2b-16e0-48b5-965b-3dc249adca26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc475e17-5317-4ea2-9fe4-c3d90307f21f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe5fd05-356e-4c51-a381-2ddd6be0a75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39c0355b-fc07-4ac3-8987-6ad9001ae52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53afd97-27f8-4587-b788-849682ddc4cb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc674d17-4e01-4388-86e7-fabe6b01775a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb569dc5-60cb-49e5-b167-6ed6fab07177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8505658d-d7ff-4282-8b1c-5608a0023441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "647e4175-345a-427b-a898-546b7fd5ac5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4626c3-e503-45e1-9d3f-a8e8c40e1dbd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a00a93c-2930-4bb1-a4af-8676b5a72869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a984067e-e509-4bd9-b8e6-8f095c0e9302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b4d752-d4c5-4772-91f1-ce57f3b7c2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38292252-ee3f-4220-a8e3-965dfad8a430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effb2055-ebe0-45b3-8836-ed2087c4d323",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf3a9ba-9336-47a0-9f75-cfd3b14f5acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85abd3f1-67e0-49be-80c4-230c823b7e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ab7fce-1b09-4498-86f0-9b90e32eefa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f21400e-8d06-4d91-a106-e744793164b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5747978c-4a1f-40ed-b395-c28e7d964394",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbd7bfa-76b8-4134-9a5b-56e91cdb9577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f26de32-3486-42c8-92ca-81fdc47b01b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1626c5c-d93d-4c91-b084-954d44286ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36c0922d-7833-43c7-8766-383c27016ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb77d38c-07fe-4923-a0d2-ae34dedaed2b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2916176a-36dd-4393-a516-97434c81da44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de51d1f8-0577-4cb1-8778-35dc6e6e0b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea84f1ac-8bcc-4f2d-a876-7f13b5949d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d424102-983f-4437-8b82-775e7074dc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b63b305-2de5-4d0d-a57b-1dc09e1fe537",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cd37c0-eaa7-4278-8a15-78e15a596cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726b0b23-a4b4-4dc0-ba84-b9dae99b6ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6a709f-1078-45dd-a21e-3ad6e311a26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb1b918-8661-4f17-841c-84a5fc790257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332df978-001f-4460-ac06-ef5b75d25eed",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67d3cd9-9f20-4f52-9a3c-1bccee4a3daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12287e97-0172-44ed-a37e-cc45075face9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97de6b9b-d40c-4dba-a1d0-75ef48aa1533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73bfac13-4725-49b8-86e8-3fda890a40a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535c1033-7b8a-46e4-b095-efd1c002b533",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabf098c-8ed8-40f7-af72-49ded00d73e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35afc02f-a3db-4806-89fb-9103ee3f0610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4a06d3-3e3f-49c7-a72e-481956dc2955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4079a0b-0517-436e-9ea7-bb1366ef4c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f302fcdf-df0a-4989-895f-d3f91c834b47",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f7f470-3769-47b6-91cd-0c5384ba6fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56318667-55b8-486c-bdc2-d23dfba7ce86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d07ddc-8b76-48a5-9dac-0855b7f56c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32c9b3b1-2d78-4427-9d58-198c68b06f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851bc02e-3cb9-4438-b9d9-290206c5c9e6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e252b0f-69d8-43f6-a673-d87295ebc0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654f93a9-8d14-4cb0-97e9-f6ba0dce1b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2415683b-d9b7-4898-82a6-252a2e2a2273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d3df7a-f4f6-4c10-a680-6af5013a8a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f710ae-d218-47c0-9414-6cbbf012e889",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa52b2c3-2740-4cff-b054-6de63ce32bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38623d8d-0006-4641-b1f2-5c9cef8b7111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ce7550-7568-45b7-ae2e-65f10aa967aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e39f4f67-1d94-4833-85d8-31e451abe548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29cb987-10f3-40d8-a52e-e312a76027bf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41840e8c-a5bf-41bd-80fa-ab61e3239469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59212eff-1896-4fa6-adb7-1a6e73aa32bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa60db6-7873-43aa-9a4c-c3753adc0ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4496881b-2159-4a59-bdfe-41f536681e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342b866f-d5de-4721-8b86-7ec8ad1d37f5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385654d6-cf78-4e63-9025-958014d4e49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7517fed1-dddc-4e54-8695-82e037f4ea15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3437ef60-5787-4cb5-8e5c-ae554f5b62f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "094d7923-1818-487b-937b-2908fab85443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382aaf25-cb08-4694-a348-06b85e9d1ac5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e22489f-3f93-4cad-96b6-6cdbcf8c229f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90231842-a7af-4d7e-8dd8-2a12c310144c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56848e33-6392-408b-9c06-6e499b921fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6012f3b3-689a-4cd5-b9a8-e498a5f7cb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3221c8e4-566d-4f46-bba7-8b8332bc2a06",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01e9be5-ef28-4ea4-acdf-6437a26b4979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76faef11-2357-4d67-843d-8bc3ca842331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd6718d-0515-4fd4-9f8c-5be912ce5214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "850b2e27-0897-4184-85df-c7128e52ed5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69ba7f1-973e-43ba-b636-ad9f5d07ff75",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85083672-ba69-4be9-86df-a69f44b79699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e0a17b-f46c-4417-ad0d-cc38b89ddf52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4ebec6-5a28-457d-96e1-6b073d9d09a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ad6990-2feb-4faa-b3ef-d654c7843931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037bcf36-7f6e-41f4-9294-71940023aa44",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2886fef-0e76-461b-8a1c-1d63d4d24eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe51878-53f6-444d-98f2-20693646a9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ab92e5-f683-4677-8f0a-3a2bf13b0f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f40470b9-f715-47c6-a2dd-c24da418db68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d767f24f-a2a4-4cd3-8c07-a2806bc5c46e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c36f8a4-f6d1-4d0b-a8e4-49d131477282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4eafbb1-075e-4206-b861-64dc37f541a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4058500b-36d9-48a7-bc62-7991e896f246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c17d654-3358-42bc-abb7-b88163493b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3beafa-0eb6-4c48-9e18-8272f0cb02ec",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6284e53a-1c29-492c-b7b0-bd3f5f65c024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c4319a-cddf-4a42-9812-c69e1ea6a939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787979a4-fe2e-4d92-9a60-451ce5164fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b1fbc6-2782-44af-a13f-a8e9976610b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5fae3d-92c3-4148-af11-b2f8c8ccd9c5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d87ba80-80a5-4bc2-8837-1a5bc6aa4f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67309dfd-0612-4504-bdc4-1f5bdb6563d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6d3ca8-6323-46ae-8000-d729e819d260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "601c0d4d-e3ff-414f-b2e4-6d5f0c0a7c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e5fd01-92d6-401c-a338-fdf444b42630",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614474fc-6195-4871-8e47-20cb81861823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4463a641-d2d7-4ff6-8f4f-f30383caf983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e054e4-51c2-4ffe-9b56-05dc9483b075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c879edd-e0f8-4941-bac6-1383e0f22408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d573506d-0e7b-4775-9045-2328c338770b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd123e34-cb7a-4ad4-9f6b-0a934f32350e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5b0dd9c0-53e6-4b8d-ab2c-5d2cffa95d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e5732e-afca-4740-8603-f2068396d68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc9f1455-858b-4dfe-94ac-4a86be846d1f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00184c03-fa95-4fb1-b90d-0c157f122ff3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aadf4734-bb8e-449b-b8c7-e1e8bc9d529c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ac7abb-9138-47d5-81b3-95b316e47094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccb0150e-bf94-4916-8709-468f7cf9b780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7280dbe9-25f7-408c-bd11-480daae8b4f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9086daf3-060e-4758-b00c-6bc26de87a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047c1aa8-e207-4de7-a42f-0eed92dcc43b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a85021d-f565-4fee-aa6e-462d25bbb416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "460b9683-7278-4069-bb2f-440947379ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533e2461-4a08-4aa2-b85a-4e4e148e5437",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f056f83b-8323-46ad-8409-02bc565f20b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f3478cf-5eac-413a-87ef-85ff3d409757",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c255af0-b581-4240-a4a1-e3c61770339a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9aba4278-9728-4e35-92ec-a2fca92a2343",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e75c5ff-dea6-4305-bac0-4b9ee0462311"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "409555d2-ec01-4409-bb8b-1a61bb6653be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98c29b0e-6c03-460e-b54e-8bfeadfad538"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aed596f3-cbd6-4d08-ad7f-b1c8b997d61a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd260913-da10-4935-a5a8-118f4fafb1f0"
                }
              }
            ]
          },
          {
            "id": "354dfbec-dd13-4b3f-9312-e75ad595c781",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6c491dd2-7389-428c-af08-99209a9cfd9c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebd82f89-e15c-4962-a30d-63b44c6507c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3fcc44a9-c209-49cd-839d-92b4838fb8a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8012054-1ffd-439a-8694-909e5250c8db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fb4615f1-823e-4342-85c4-c7d0a2366d6e"
                    }
                  }
                ]
              },
              {
                "id": "2d499e2d-67d5-4efa-828d-130ad893322e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "799130af-53d3-4564-9859-60461072ac88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c1b23a3-ce44-42d1-a948-76e990907f19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04f0bb1c-8a27-4958-8e03-49c2651b1bd4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "67f676bb-8b13-4b03-a0c5-d3dba6ab8377"
                    }
                  }
                ]
              },
              {
                "id": "abe8e7dd-b4c2-4fcd-83cc-65cb57547bb3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5566bb0d-df8c-40bf-a3d8-43efedeb19ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c15efa06-5f4a-4957-ae29-08bee6f864de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01165ca2-addc-401b-af38-6ff333dd4c21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d205df75-0608-4cb9-8150-d2de6c914bf9"
                    }
                  }
                ]
              },
              {
                "id": "54f00f38-0918-46df-a9ec-056fa89a147a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33d19ba3-eb54-49fa-a9da-54c1bb37905d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1af725e-eefa-4e15-8eee-4cf0e73d9d7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d5f4928-3818-4c5a-bf96-85389124e7bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "89fb240f-c36c-4282-b79e-0d3efcdf5705"
                    }
                  }
                ]
              },
              {
                "id": "7d079e84-24b9-49bf-82ad-21814f8d25bb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "834ebf57-968a-474e-82e0-709b9da17dec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc3f2230-5680-4c98-aa37-68338f516db7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aded4602-a40f-47df-9cee-0f32dfb329bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1b706fca-4ed7-4267-8294-f4c9d0a89921"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c9b182b2-a837-462a-98c2-7e69b5556d06",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea16afbc-4ae9-43d5-8d92-440161928782"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e2617a3-a970-4aca-881f-be55839f0883",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "365da11a-176e-4159-9bfb-c764d139c8bb"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "744cf99a-ac15-4a01-b16d-22f2df1b0223",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "487b4418-31ca-4c80-a125-8dceec0f051b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0d19049-c2da-4f6b-8c71-6e199590e526",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d99cbf23-4b16-44a8-aec0-81bab47c2d74"
            }
          }
        ]
      },
      {
        "id": "8b25efce-0b2d-4ba6-9e9a-79d0311d936a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "48a04db6-53aa-4d12-95d9-790ee7314703",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c828901-6c73-4806-ad50-3b0735fc80c0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e919874d-3a29-4f12-9a94-da18a5f9d6ea",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae37138b-5c5e-4675-905e-8eed29a1f83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bcd2b6-c368-4f5a-a09a-271b7c18d9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61298752-5c7e-4e66-b533-c385b9ff1d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5890c213-5eb8-4dd1-9de5-b07854b2a8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22383346-57aa-4fee-accf-af020b747f62",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730e90f3-fd7e-4891-8fb9-d89e74f810d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2b2a95-1a25-4c0d-b783-2c9fd1c14eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec5b29f-2eb2-47a6-a4ce-7fd3bc300dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d32a23-ae20-4608-bd08-ec9b0ef29b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6276c850-1d71-4434-bff1-30a205ca793c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b5733a-08d0-4cfc-860e-57bf54273f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf35f681-f274-4409-86e6-3377510f83c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b15428-deaf-4d32-88dc-e4b76095f24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "270bea4e-ed9c-4295-a3e4-f9d37ae87ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba723df-91f7-45ab-acef-93019478c2f6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356d7ee4-342d-478c-a91d-24ae05cab93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b96826-006b-43d9-b786-51a77f03ccfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c689874-7abf-4f0a-ba04-23df56883179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3908b63e-75f1-456b-9ebc-df96ad0fbc0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567ca0f0-60f1-4f2d-be85-3effe90a2a95",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864f766f-7559-446e-97cf-883c0aaf9ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64680738-ba84-41dd-bf64-c654631ba5e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b1719c-24b7-485b-9cba-3b9287b41cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4894cb54-95ab-4ca9-b561-8ef3be6af0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b31a99-dbbb-476a-8f52-a8270e352690",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a8ab78-9c5f-4a1f-8ebd-c98034bb18f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044ed0ef-c19a-49f1-a904-149921aac129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fcf37c-20bc-4258-9804-9c311307dddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62173e92-9d36-4e0c-b074-16475dc2327e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adeecf9e-b792-4f8c-a509-4e874579e4a4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890bb5d6-3186-4bea-a399-74c58787fac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b15b66-825f-4dd0-8034-ea4d7099dfc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a815472-50ff-4860-bfd2-792ccc6f8c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "739e2815-7b13-4386-bda4-e4ce8dd2aa7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d9ef66-054b-4fd1-8f49-979bc735e006",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1d232f-87e4-4707-819d-b57d2e160e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d6a0bc-e199-4a21-b299-cb761e09bf33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7ba7bd-7abb-4a6d-9e2e-0f105b373594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5130333a-f726-4453-94d0-e6fd2c4484d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b6b537-3a8e-4cc8-8c3b-3206abf2be6e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d3383e-a18f-40b7-8aca-826160df4752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53fccba-452b-4538-bb88-c871d14e24f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113a6e86-95f4-42e5-af00-a934cc862a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f192ef22-ff1c-4322-ab29-cf13b886e0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f385ff-055d-4a5c-b590-7f26ba6e9c3e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108635aa-6df9-44c4-a0dc-d0c3a9c0d31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e516f10a-11a1-4010-8cff-da3b5b9c5203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2dc875-288c-4bba-a885-52dbc8f56b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0654f4-51b8-4bdf-b4a3-39b1aea07515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353d4a86-b8a2-4476-a62a-e68d14ec5bcf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae34092a-0f96-492e-9917-ed975e274257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8952a61e-8394-47d1-8529-9b1b1096b880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5cb3e2-0887-4804-b69d-ebbebaeaae99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "56219a70-93ec-45b4-8c95-74f555b44862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f835d25-15d2-4017-9b97-1b0b686adb99",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9ad45e-118e-48b0-be89-3ba0594c80d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e140012-da39-47b7-b491-e79b38e4294a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2caef1-50d9-45fa-9f61-420b89de1d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c6ec20-20c4-450b-aff8-41245b422438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71aadd36-8de7-470b-88e7-698f69b63c80",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c16b4c-2f91-48d2-b53e-5ba8e034ab1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8448b4-30bb-42ed-a693-aada14c07aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e37087e-3b7a-42cd-8711-63a967219454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e44e90e-5269-4efd-945d-d4f06ee89411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76da81fb-9f6b-4d0e-bb74-a070958ffea9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79adf9ae-bb84-4b4c-b19a-34897e23d740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37adb8e-2f3e-4022-9c09-fa4659aa456b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2ffe71-cc11-4c32-8e55-66924f991db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d04aef1b-10c5-42d7-805f-7acafe8898c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff0eedb-d3b2-43d7-9a71-2357e1d3d3ad",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5f471e-c828-485a-8d54-a4be78fdc9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a980e6-e9cd-4695-861e-e563c0f58b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de15a02d-61b9-484d-a768-c205490ca75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "04d50f6f-5b50-474b-9125-512a2ee87528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a561e0-f231-4892-b839-2c50035cf0e6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bc444f-ce5d-4a06-a142-29de916d4a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748c8558-7fc5-43c7-8926-596795c0d937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ed3ff8-53fe-419a-ae89-baea443c4652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e9605c-f9a3-4e76-a4e1-0e52299874f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0cfa11-a866-4dbb-8998-067c391935fc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c240020-e7bd-4d45-a9a4-ac643692e977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7549c23-caaa-4795-9868-7dca7f6cf9c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc90506f-9688-4ee3-bb42-5cfa230bf004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6806236-6716-442e-9599-2c0d667b6032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bd3415-9a22-44ca-8160-fd9316d7112b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9710c5-8244-4f75-8565-467ab562a439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec4bce6-430f-4f65-85f1-1d027257c230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb46deff-75f2-4427-ba97-8e1121b5a042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6908048d-3cda-47cf-80df-5a990486ce6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4de514-51e7-4de7-9875-1d4bfebbe85d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acad8e12-f78d-4716-8bad-35ea07f247a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1daa1b7-89a7-4234-bf05-0c81ae9e4642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b04ef69-fb83-4ec6-ab3e-6e3dd0dd5385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53632756-a5e4-4900-a032-b3083f703de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc2c4ab-95ef-450b-9b61-399478d68773",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3e659f-5a4d-457a-b8b4-7fcff3795adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc7f782-df9e-42e7-803e-164f72c15f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c533b5b-7e88-4769-ae3f-1b09f9b9ac96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd954730-062d-46d8-8034-e2600c8d27ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2dc4b9-d713-4430-a426-fe1cee88fa09",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71777e33-0943-42ba-9f20-85dbd48f1c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15f3561a-ec73-40cf-852b-1f1aac72fbe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b52c6b-ec12-47b8-9a63-2fe02404c019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6896cb6e-ced7-419c-a12f-34b376007bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f212b08-6bf3-443c-a9fe-71c571b3298a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac5c80f-90fc-48ae-974b-f2c07be0ef90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048db4fb-59b3-4d8c-9ae0-4b27d87d6d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54d178c-e6c5-494b-8066-49337235e01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b47c9752-f340-47a4-80ee-29b7a3960f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937ef42d-13d3-41eb-9b7e-6e199a61c217",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac561322-74ef-4e43-a8cc-37a91bb71826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7425963d-4c4f-4ccc-99de-ba50bfcd2d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22ed232-1241-4583-af3c-8d4a12ca71a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bebc9c7d-ba03-4b60-abb4-f3073401a383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1f6db9-a6fe-462c-ac0f-eb85c3ae18fb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6423459-7c99-45e7-a3f9-6ad0ce7273bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b571d1c-7f97-4051-bf03-e8a2cd6beaae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9c57e3-4f22-4a2e-9bb4-cbc77babc893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f86a5ba-ae2a-42ea-81f9-29f97463128b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60aa5d76-aa9d-4d7e-b5f6-04884387bfac",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d59a5b-7862-4d69-818d-57dba7d34e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f41883-4d83-4079-9375-78ca215ef1c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab65145-e54f-4143-9c6a-aac1aadbd9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a408477b-54ef-45e5-8955-e33aa5922c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589afe8e-0360-450c-a9a4-9b82c0327171",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79cb720-3018-440c-924a-1e2bca72af5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03112a82-fd5e-4264-a73f-e2810e75e51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22051190-4f1a-44e7-9365-035f6a7665a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05a5efe4-b493-4657-b96a-a28481310153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37759d5e-6512-4341-ad0b-2ccd8b13742a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b85560e-87dc-4c36-8dd9-8302844a89b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de23934-333d-480f-b038-417cc6fec055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a964ae5-576e-4628-ad93-03dd3b603807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01ced061-52b7-44e4-af53-312508deb17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69e49a2-e7dc-4067-849a-b776f02bc7f2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0c170f-853f-4e02-bf6e-989d5c3db57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417a537a-2858-4ccd-be2b-6efc7ffdbb6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854b54b3-b728-45b8-b915-dbddf7109709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fe54f8-76a2-48d0-848f-c94293ed71c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be2425a-7dfe-41bc-a4ca-5ef3ce0db4bf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f161b3d6-9e5d-4349-90d3-b2f153eae752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eaa6f12-3c70-40f8-9002-efed976ef622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8cdfdf-572d-48d4-b372-9b5b79830f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f973a239-51bb-48d8-8949-bee1c7918ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abef4d10-111f-4fa7-846f-3389f6c5fbf2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a11242c-9af3-4ca2-904a-09af840fb03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95c89f8-4c85-4aed-88fd-0d70470d4b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b48d0cd-52fa-4614-b11b-39d4a64dab5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0667d19b-f78b-45af-993f-9f654c8553ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add0b17e-2b9e-4b66-8232-aaf21a91442c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cb1327-5ba2-4a0e-b026-f75d745d94ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09031f53-d6e8-4086-8fa4-599c49ad5d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dada3c0f-a746-4a35-ae4c-005956acd181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cac77db5-9028-4908-8798-7ad510c9654b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2949a72-63f8-4b2a-a5d9-d5c80a99b254",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33d9be0-475b-4e1b-b73f-2995ceb572d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3705de60-f825-47e5-a0c9-05f921bd0ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a5c528-02e8-4f97-a41f-fa67b4d973ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "810d48db-7779-4b08-888e-f3c237407d23"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0db0dc49-b184-4806-80d8-dde117d854f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8117325e-f448-49c7-a64b-0cb7ebe4172b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d04960-c209-4faa-b8b9-703ea295e6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd251a8c-4e85-43c3-952d-eee9fa72c9f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb12c93b-1da5-4f91-a3eb-2b60bdefe3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0e36520-856b-4cac-9850-4b39c3bf3e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775108f2-cbc2-4df9-8882-c3bbc041a399",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd768e44-bdde-4d74-a557-ef45f7b6e62f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2e745d97-86de-435a-8d6c-a8df0611763b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01fce44-850d-4213-ba75-d454d8c6acab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7161a635-941a-47f3-b973-5e2f7d7e7e22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af1b2e73-1165-4844-b3de-ea01f7e20c43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "999198c7-328d-4d08-8172-0844320a8bbe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53e7f912-65d3-46fe-8ee6-6712c3f9c226",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03b8f5ff-3f90-4249-b405-08f025cc8f16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8c80636-7edf-4e67-81b2-6254bf6b4350",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c3aa2db6-224a-4389-b6c9-cc3ebe4054f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22d55b33-3d0f-4816-bb4e-b9a942c44544",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8cce41fd-2214-42df-901f-43556280a1cc"
            }
          }
        ]
      },
      {
        "id": "77f351b6-bf52-4782-9fa7-a8fc7d70f9fc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9ee7ff59-6154-45ef-984a-33aeac0d0e9c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2002dd0-4399-47f1-b665-d658c7579706",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f2479183-0948-4631-adf3-657958b52a1b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce09b86a-2cb3-4581-9578-aa7839c79ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2832a5-d57f-40cb-970d-8663c6f5b235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb205ae-c0b0-422e-ad10-e29ed9b23b35",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125d3434-df14-4e40-bf8d-dbececad2bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f75ae5-84fc-43a1-adc5-d7830e420c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea0b2a5-0cc0-412d-af09-37cc4286ef2e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264f14b6-65e3-4647-a808-115acfd17e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85610872-58a6-4659-88d5-c8eb86bddcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340f17c0-1489-4954-aacf-d12f1b03d3a0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc04acc9-8a4d-4ae2-b319-7a167f21ff9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bbaf820-0d42-41a4-b8d4-4f7ad8bacb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3980046d-a3b1-4a50-9d04-bf74847911eb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0e9a85-53b8-4948-805e-36bdbbf76abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffafbf22-17c1-48dc-8f91-d644f3afd39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512cd256-7f1b-44c6-93a4-601f0039a809",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5fa087-9abf-4a6c-a55b-486a3f85ee85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4bd5293-90a7-4b09-b1d0-8d5cc5b7f67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01c39bf-8a11-4f77-bfa9-8231aca22751",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e3c5e7-60b1-4aa6-b8ed-d0f44d8ac652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaafb16c-dca7-4a0d-91ca-c415a02c5713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511bea84-80a3-42f0-949b-ded462da3d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfda4b9-7e18-4bb4-9d81-d724e653682b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40c48b2-a6be-44fe-95d2-8ed5d2c65ab7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f349f5f0-b6d8-4f29-a78a-7f3798a5af64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b1535ab-96bc-4d24-9bb0-cc8df71a710c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97dcfdc3-d970-4ac8-8a6a-517bf2f56e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4bf0662-9795-450b-ab73-d4051188336d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f1892e-6ed3-4a58-a4b2-0c355d25c474",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefcfb9a-c598-4a1a-9bb0-2d24d4adc303",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04af14e0-b3a1-4256-903c-ba64b47543e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af30e529-8f7f-4e82-9084-b669e4777fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8197aa-2d70-4358-9a0a-c7ca8990b6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7cd67e9-1524-4634-8c44-d65b008e981f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f13e958-dd09-4ebc-842a-85f492020c97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83e563f5-f9ed-4dc0-a78d-6037e688ebd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7543f208-7028-4548-95db-c2cee51808df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e940ac11-6082-4893-ab0c-e0d385e024be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad811f73-6226-4a5a-ac60-99819bb0a6bc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f71aa06-385d-45b8-acbd-2d149d771afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f933866-c2d3-46dc-922f-6b7833fa6031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0132dc-75b7-4d10-a255-051cf84f6077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97677f39-09af-409b-bb36-ce2db8eb9ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66873005-73c1-4925-b59d-472cacb59fc0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c67e87-7d6c-45bf-9b89-70707987b8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719a0130-8539-4f8b-9daa-3af1dede03c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e0f193-6bc9-4212-86ec-0b55a8981fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e20911-d5ba-4227-b2c2-3683086cf662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6f5a68-930f-477b-9138-4142e96a4a0e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038d22ea-86cb-4c23-a864-e44a813b1ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1b1c858-84d0-4330-9d83-718005a14f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd51066e-f641-4525-bafb-64e5985476b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab9dbc2b-9a2f-4c42-82af-2d491254622e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61416fd5-241a-4def-a1c8-c194d6549b7e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04ce014-dd55-4c32-bd22-38f3aa8e04b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2216343-094d-4a25-85c0-af5b8a81201f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0868899-a9dd-42c3-a485-d5cac38dccae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6419dd02-0e44-4008-b00e-6df89bf24cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25bf45b-f5f0-4ebc-8dcc-e9b4f5889467",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3374b41e-8b52-41ca-af91-b1bc20d22573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d921a4b7-64ae-4515-91fb-1d21cbdb6dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "819c785d-b764-4a0e-a888-3f89371811ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4827ee73-2927-4f28-93b1-6e0265e4d316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b6ff90-5dc4-43d6-a84b-c4c7aecb5b4b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d091ca68-335d-449a-948b-af03c8ca7e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b64faf-eb25-42a2-8d99-cfa5f453ce23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f01d479-6fd6-4f0a-b4a1-f1bddea83428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec761e6-34a4-4a1c-b098-63b4ccf1217f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100df382-fba8-4cb5-be9c-ec30063ef03d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dc2cb0-b721-4e22-8355-5604b092521d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d03d81-4c9c-4932-b479-49cbaeaca2fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a4aad8-84f9-4513-b98f-41d4d840beb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee7d776-22d0-4757-aeec-4cd46b7aed7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a31410b-0adf-4ebb-a017-72535f7c9f50",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fe07cf-19ec-43c5-93a1-782d50ce8a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa3604b-60ed-47d2-a3a9-f76ee8be5c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187a2840-d5cb-49f2-856b-3d280f9b5e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cc7e67-2ac4-4161-911e-7e202fd6773f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00cda30-0497-4156-8abe-814edeae3375",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf63e94-adbb-41c8-abf9-4492d45791ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59541475-e8f4-4ae9-bf7c-46f24a46e0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f2f16f-7078-4823-bf6e-2e68ae69d65e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac97e32-69c0-4c6c-9655-8ecd9edb8e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6411a8eb-177d-4333-ae03-8ff48aae0500",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3927a6-20ad-48fe-89ce-0f84fb8bfa47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72dfdb21-1194-468d-886d-461e9f89a91b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebacb2c-fc94-4205-a832-6609732481a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e53b097-bc42-42b4-a35c-da6f766d69a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f62772-bf6c-4752-993a-22b57afd0b65",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8436e80-8137-43a8-a90d-e16d31d5f2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c33bfb-9597-4dd1-b8d4-0a0e26027373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e9e5b5-9e7e-48f4-970a-24788bb4fc7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86869140-4f1b-450c-b68f-da78d1538388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f416865-ea96-4271-8333-e3075eb77d0c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c722a68a-d75e-4d12-abed-6e2537c654f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5b1efe-fabb-475a-be5e-61a808f5ab35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3880d246-d2c6-4f92-87d0-61dbc686ce43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32026d11-1e50-4fcf-88b4-447531e862d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a7ab9e-9a93-492b-bce4-3b92ef5b6e58",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15b4383-288b-4982-9879-59bec6011798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4dc7ae-a03f-4976-a322-3c9b9bc61609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c7745b-1ebe-495d-8b0c-ed537be561e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78065d6d-3e1c-488d-abf2-0d299f96c680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaf9c20-98f5-4241-9d86-055c399a4fbc",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ef7214-8adc-4934-9659-910f17a48116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c75f854f-4f30-43b5-8891-bbbb4e4a1785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf62946-45cc-4778-a7d2-ed6326de1c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f0d26e0-67ff-4638-b4ed-0971f3d92de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3569f2f4-22b3-48cc-b577-55bfe21dc118",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5bfad7-1a3c-4861-a4d6-52df922bba6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be6ddb1f-6867-4285-8fa8-c54c1560df0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7795bb18-d583-48e2-9e78-be88cb0c8fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023ee84f-e0ce-422e-8d06-de49a68c9678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db51a8a-a617-4ef2-ba22-79e67342e929",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6db1db-b225-4851-8aa1-2cfae8b816f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1e784b3-d1c7-4a3d-a1af-02909c86abb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57db7444-fb70-44f2-aa5a-84b1040a1c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e300fe5c-8292-4563-8b05-cd930e0b28ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dffddb-bd2d-4f95-9057-b85e5ab8d742",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c301553-c99d-4563-8684-ef3f0b49366c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cb02998-bcc4-4bea-8148-2a99842ebbfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06c37ab-cbeb-457a-bf42-c934cd62c1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "532e4fed-29d4-4765-9b8a-4d2cf8946cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cff29d-bb61-40a8-a165-02d2f46fe7c0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9b943f-bd74-4b99-b804-9ff182437fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a055e3a1-50ad-42cc-94a0-217810b2e4b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e28d6ec-8bd0-4bc8-90af-bebb9fc33a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b864ec8-6477-46f0-8bf0-372f6eec5b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2b5792-bcf5-482e-907c-7d6c64dfb089",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf578baf-bef1-41be-91ac-d37ddbbd4794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc0c337-12c5-4707-8fef-628d78a12aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dad176-5d9d-4cfd-a6e6-a138372b7a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ebcaad3-7b6c-4d7b-8085-2aa0eb1e7528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7c4004-1da7-48f2-b270-33581516b51e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628a5d3a-cf99-4519-b33d-edda9202676f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caab10c7-480d-401a-8b72-0e25d68a8a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b21b9b9-5cad-4616-9179-c20a0a67154c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece92deb-874a-4f3c-aabd-eee19bbb4667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f81b1f-ecca-4604-87be-9df13b01a424",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab306d93-fd2b-46b7-beba-8b6fa4cd9d10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e05b7d0-2ae6-46a1-8f75-781511ad9073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba9d8ed-f80b-42d0-8d64-a842a9df93d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21cdb27c-cabf-4829-a348-c4cc50aeccf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d00fa1-803d-4873-ad25-425fd45bbbce",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850396c0-6063-463e-a291-0163a59acb50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de4993d-2db7-4852-86e9-254115db7a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a975c2-2366-4931-9178-f122106db7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe8ba8d-cf93-4b85-ba29-55bb63f68a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21ec566-b430-47cd-8cf2-a2150ae67d3b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca74133a-9f45-4417-b1d1-6bb50f9b7e14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fabff444-574f-4a19-83a5-02331eac5712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f71da6-368a-4eaa-bc9b-fb73c1e33c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24dbb0bd-a803-428e-bc46-30f899bdf859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b29fb5-9e53-41c8-8b2d-1de70f272a0c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9366b069-790e-4416-aeb5-cb46ee4b5e36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccab74fd-cf47-40c3-9e65-5ba543a1b802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea5eb0d-80f5-4fa8-b6d9-e6ca79f12139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc95510-4b35-4aa5-85c9-762c6df1710a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b44d3e1-273d-4ab7-b823-b64b3a3fd82e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121f32c9-9ad3-44f0-91ee-95ba8ee93b6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f3eca2a-0a01-460f-b665-97a884e897a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edd1ff4-757d-4d9b-9115-fb823ac5167a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e19ec7-3839-4cd6-9128-0a1058f65178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae652b1-d993-448b-93c3-0d2074b50327",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df0ade9-52f2-443a-b3ff-2e9618d317d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf1db73-2cf4-4a55-8f65-7ab0020eed10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b1c814-b5a9-44ea-bd04-ade2f24e3e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2e4764-fb54-4cb6-ba91-7553fadd3c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0906c2d-01ab-4ad3-a26a-b293f2b35d20",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b01ae06-886f-4381-a9ce-6083e426fd60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f527887-b681-441c-b891-c599b3a42eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6545aa7b-84f9-4828-8ce8-927a20a09a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668108df-442c-42ee-9ecb-4a66243152e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56805bb0-c4fc-4a33-8e21-67a55b99f7a8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f491ce-0b16-459c-bd24-96fc5b616e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fb90f9-79e7-4224-b46b-21bd13b17ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4b5b66-36c6-49d3-93ed-4d369dec4d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c8ffb6-ec64-4c1e-9e74-2361cf503cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279ac8fc-b6b8-436e-ad87-fb8d069199ba",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b39b05e-581c-443a-954a-3f724e7c7e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710633a9-e4fd-4b36-99bd-db8d9862d42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e3e8cc-2395-4b61-ac21-83584e857fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d25d54-cbfc-49ef-b329-21cea7a3a56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4c2182-d783-429f-90a1-21b4e590b23e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6482423c-3f76-4612-bb36-6227eeac11b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490cd570-675b-4126-987d-970a766f7cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01ba462-2fd8-49a8-93da-be271cfedb15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b709e2ee-b100-46fc-97c6-afa676e71379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5827283-70af-4642-a2e6-5f5e6a7de496",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2dae05-f117-4c2e-b330-dc484f3bee50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebe09d7-3c49-4823-9468-26c52286c3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c6ede3-b678-4f28-85e5-7140cf4d9312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc10e912-f984-4e33-90c0-eafd66ff3328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447c951a-c672-4cb8-a07c-b0afdb1928a4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c2ade9-8dd7-4d04-91b9-3bdc2ffb5e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b160a2b-8abe-4676-be68-787d1400088e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2232a9-7313-4185-b1f3-4fe1c550e97d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c0aae9-580f-4998-b827-998f78f02313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdfd40d-42bd-41a7-8039-edc90a1e4893",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b1bbba-5f41-4723-8fec-295b10559668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0765eb-c773-422e-8a43-90e1f8920cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d309224-01d5-47d7-ba33-e94f10078df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a50f2b4-b251-41a2-9d31-ac9b227f4503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f9ef28-1651-4f3a-a8ce-ffbdcc29f32e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e95f9f-be1e-4dde-956e-558216b3120e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efda056b-9b40-4bb3-8c45-934419ee4e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f9920d-9fff-4543-a606-a3b99e10d89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f071b74-0f42-41fe-85c1-61ba1f18c9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c471843c-291b-496a-b8b9-815acbae1d67",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c598a19-6958-42e1-a476-0bdacb3c66b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6275eb-2ac2-442f-a3e9-26de635bdff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a02840-f940-4b32-bec6-dd24b821fe5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245ca727-fb1e-4e66-8ead-711eebe2f92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5947d131-596d-460f-ab43-8238bd1d2d41",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0eba732-0dae-47cc-bef8-c396cf17cfa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afeb1a91-201b-47fe-b2d3-6d30cf744f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a08f70-867c-4a16-a3bd-b176443addb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac2d1ba-437a-461c-a1c8-37ddce6ac809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72701b9-b35e-4085-8d26-55c157fac25d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d70fb9-3e1e-4789-9a73-1ae7a65ee46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3acb64d0-cf62-4f2e-8a5f-3cf71a7be4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1268427d-ddc5-4710-ad1b-3e0ddf8ae77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae69e11-9024-42f7-853f-8e0e948f1f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c66933a-abd2-4ab1-bd04-e54060374676",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70ed2fc-967d-4ea1-aaaa-f235409f9e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a332955-4930-4eee-b34d-52031c63464f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37df512c-9165-4dbe-bd86-36fe2f009232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870a5600-c24c-4411-85b9-72e5216fd1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ea6be1-b077-4c45-b8da-589abea94fdd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8894504e-8514-44de-baa0-dcdf66fb78f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4ed5cc-88c8-46e8-afc2-87bdb91f928d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c746ff47-c5bd-4e7f-ab79-75eff71fc919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508b3323-8cb9-41e8-85b2-ebf00443b76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80267882-f1ef-4295-9435-85f8352e54a1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e473992-6dd9-4201-8ab8-a1ca41b508e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6159fe9d-b924-42da-ada0-7b9c62152a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587c607c-e05d-44c4-99d7-461c5e81a67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c71598-09ed-414f-9ebd-eeeec18e45ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a410e35c-b81f-4579-b5e4-463327e6ca21",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d416199b-c855-471d-92d5-aa5640143b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97a9d54-d4ab-412c-8bb9-8d9ed01e5dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "378c0727-8676-4229-999c-69b93997359b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "339c644d-459e-4244-8925-2d58c4dd57c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9ce9fe-9c99-48a7-9529-619295be6bb5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb09381e-eb74-4b5a-b9c6-238612a95316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5f3565-f0d0-4bed-88f3-a0f4651eb092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7937cdbd-1fc1-4908-a7c7-51fe75667867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9821b2c-f734-4d8e-8187-6c35b43ca000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb99792-5593-4bea-876b-f92cfb9eef89",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0730f873-f278-4797-9814-529af9465f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b1e0e7-e43a-4923-a19c-cf9affac0c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cefcdc1-3430-40f5-94f4-dd669702a80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e49e8a-64e8-4408-923c-1a5feb940fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05861223-238c-42df-8486-fb0b562d1fa7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c5e849-e964-45de-836c-f04d2523e272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074edf95-1c28-4edf-867f-379b7f66afc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41d32d4-3f89-4955-8b5a-6db2aa14a7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4574bdd1-d2cd-4fa8-8c48-6cbc71a59dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb8477a-701d-4056-a681-410571beff7d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2523a12f-6f43-4e1b-9d7b-6725ef9737e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48ef297-7a52-4f78-814f-9fa1186900ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01937b4f-d284-40a6-bd0f-be28325c8de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b6157b-c129-47d1-9b9b-4f94428ab1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dac340-b560-4f85-b986-65412df3b0e9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a97314c-4f5b-4c5d-810e-bc88db554673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd36714-7886-47cb-ad1f-fb2e80d303a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af14ffea-1445-4329-a321-75b00eb01e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff19c19-011a-4489-be12-4f15a210b1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9e326e-1328-490d-b7bf-b521e4f8961f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ae17af-d240-4848-be6d-be3b6999604d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2d931d-dd5a-4cc4-980f-165b89e26b36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f352ad9-2d81-4b6e-be1c-576fb71a4de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b64efef-dbc9-4dec-9cad-1ef02b839ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814fb226-d853-41ff-88ca-b4981a37b037",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec3de79-874c-4b88-a2d8-e6ae0e3c26e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652cef44-ba51-4552-832d-42d3183fc7ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc8596e-bdf5-454b-a293-bd8704e6c3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f85bb28-31ef-49fa-b8a7-91a13ce038df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f8ffca-f4df-4f4d-b775-7e1d641e30dd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c0238e-ba4c-4827-bf11-6b00b7774103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc6dd0a-2544-4267-a81e-b60f2af57aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc8fee4-7adf-4a85-8dd2-d18b7928ee7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec356d2-49c6-4ec2-948b-381c1bd23e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba0cc36-c61c-4090-9d1f-438a53f47953",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bf49c5-d88d-45ac-957d-a798293c5604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e23053-71e2-4aa3-8f2a-ea0b98407d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058d6206-a772-43a5-802a-a3f0007b733e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27472cf2-91eb-4481-ba29-c4bd10d75e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66017696-cd55-434d-983d-5d4161a35a6c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674ee21f-c1e6-4e24-a9c6-d18b517d467e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3771bd20-f84e-48f3-bdcd-e77036606511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e585822-b01e-4041-9c53-5b7a78c9420e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4041c580-ae6f-403c-8923-4450820ffdf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc42771-d50f-4317-8acf-abb52b687332",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb68211-0e96-42db-9a71-4b131696e721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82c4a73-6751-497a-83d4-6ca6ba7360d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc33c3ac-025a-4290-b543-8f582c489e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e78371-ea0a-4dc8-950a-36c1bf9d3e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77e5366-0128-4b4d-9264-b0b27df41d8e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8f7325-6cae-41a0-985a-2c6f413d4128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8a5467-1bb0-49d5-baa3-c5f1b1db79ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eea90da-fd0f-4f97-b1ba-6c7c4e9aa350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ff68fc-ac5e-4897-a28a-2ea3e7e3b1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448de10c-9544-4564-99b6-4490a3b22515",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bf98d3-d355-4016-83f5-2d11be7b5c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63426a8e-5c97-4583-b6fa-242e9eefde9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce94eba-1416-403b-80f3-f94a49318fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94796d63-7aeb-4cc3-89da-441e5a650d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fd37ff-fde7-450e-97f5-aacc3dbf7484",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01aea6af-e4d1-4e67-89c3-ab97ade8929f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b47c90b4-bbc7-44c9-8808-d8524af39fd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1415685c-894e-4026-b8d0-ddab187f9417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bdb3e8-afa8-47f1-b27c-1af63f306ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49ccd8e-8c2c-41cf-9193-a11b7b19334a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccedc6d0-0ad4-4788-b8aa-6d2569da3804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2c410cd-8948-4e67-83f1-14f93af2a569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7f5174-4115-4bd3-96e5-f63ea276aebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32eb86c2-6035-4549-9a09-e494783287e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d18340-0da6-40da-b17f-615f60f96130",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce96aac1-08a8-460c-a12f-72b884c19089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baaf1dc9-d4c6-4966-9974-75ee809fbfbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81cec96-2d11-48f8-b323-1d74a8ef6fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66df285f-ee96-454f-8e50-447fd7f5942e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796b30a3-396c-41d7-ad1d-d4b55a106007",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d87b20-20c0-4603-b0e6-4700d749349a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f9a1c27-42be-4e8d-877b-4bdac86f2dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5284cb44-83b4-4579-b455-3f638cfb3057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62be0cf3-6c7f-49f6-ba89-077eecad6f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd1265c-68f5-4758-929d-1103b706ae74",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f9d3ca-d830-425b-84e8-86610859abc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a60eef-1c5a-4d2f-9a87-e8a03f7d6de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709e48f4-9907-4a02-9348-b727e22705ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4928fd-1020-4570-b668-e443588bfedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27791f70-f74a-461a-80f7-0963238de210",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4946b3b5-8860-4d34-921f-b84934a096e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cdf0356-0664-42b5-9cfa-257a47019a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2da420c-45b2-4002-9458-ddf0a049bfb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c2f488-2a3e-4e22-88ed-57639a24243e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc70c73-1c66-40ec-bf8c-b581ea9091fb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1beac1a-833f-416c-b136-8d16339afe94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b0061be-c2f6-4197-ad25-6b04026da49d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ed50ef-3427-4110-8062-a77a66fd9fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ad0d92-fb27-4b2f-9bf4-c23f66834c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a106d0a9-937d-4c26-9e5a-e9499549e17e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec7ab3f-e47b-4d5c-8d58-495ca1a08880",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b6a949b-36e8-4501-bcdc-7550b689af4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11971aea-5ba5-4532-9395-64e2a9a574e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6729343d-d7a6-466a-b8ed-d44eb11cb329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a16d79b-cb47-4d35-aca4-b9f0b4a00f27",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683cad0d-539d-4334-99e4-5703f89c7d2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "217081f0-3982-4274-aeda-ce943403a08b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "620be587-f9ae-4347-b2af-546d6f0ec57e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed856b46-bbd6-45d9-872b-c7312e270aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f04519-10c4-428f-a476-94de9c1392f5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186b41fb-c8ac-4b1a-94a6-5300a19537b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "447b8321-e10e-40ac-ac1a-314de9f7e880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12e87ac-a47a-43fb-b371-f3c753857005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0694e5f-16cf-4be6-8607-68699bf0d05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18a784a-a7ec-4580-93a3-7a4863d65690",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60945dd1-400a-477a-a093-d7b0d1562edd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d54b8cd0-d612-458f-a11d-c85fdf260c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5357cbd1-6be3-49b1-9dfc-0ff47b04c7c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478ab10c-b64b-4c18-ae9c-43cf5a87736f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0faf80e9-d861-4bbf-bc4a-dfb8437995da",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecce3c70-c384-4e09-977c-aff995da006b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c38f3c4-1383-4a49-a0d0-f87171857fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e207486c-0066-43da-b216-03950e073853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6747ad2e-0903-4bc0-8dd1-e7cb5a17f42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33580005-57f3-4607-9c9e-4f1f51df789b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d3e35e-33ce-418e-b76a-80abd6009d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc20e000-53d9-4a55-b427-2fa94000c528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45d9d8e-5460-4d0d-9cf0-55680a248510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8776dbd2-5319-4cec-b7f3-337aba48f4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c044e8-b187-4e45-8477-a95b402a895a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d065a02-049d-4801-a4cb-63eee80a376b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9301a570-b182-4618-be8e-a47046359948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad4ec5e-4676-4ed7-965e-d3a56e3d3c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c073a617-b27a-4f05-92f1-6d66da60a000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edd7ecc-7496-4564-a2b2-f11926cbfde2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e394f9-d912-4ee1-b94e-48b154237e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86bf9649-bca0-4ac5-a420-7af1ba10c5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec82528f-128d-4774-afeb-6776a2a49670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8683b1-5650-4afc-a002-32c1f42c4f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed229d29-7401-4e7c-a6d7-2967a1b8aab1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ac448b-669c-4176-a359-e154dcbeb805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "764f111b-f0bb-4ec1-aae1-e2bfa4aff300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5da4f1-b63a-4fe7-ab23-f5db4e4f991a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de32fb97-af20-4f3e-8e4f-04e5d4cdcc83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1bb1db-de99-4454-98b3-138643044f2a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb0855f-63a1-4afa-aeee-5613082c853b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b185e77-cb6c-423b-afc9-3c74b32a9cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dd0f45-b35d-49f8-a721-1f09a33b74be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdff11b8-d9c7-477f-b203-deb723777472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7492e440-13e1-44f0-b58a-6893e16a06e8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8070055d-4bba-470c-9941-d2fce3629efb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13254636-bf14-40cd-ba97-57f05eca275b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d00dca1-f42c-4cfd-acd6-4cb002695192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fa3994-6d43-4d71-bb8c-527ef2f3e35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71855918-a0e1-42cd-b59d-dbb2be179535",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b4f0a5-45b4-451e-a93c-be2569388b9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5176aab5-a9c4-4594-a640-194667b2da2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2683fc-79a1-4f7d-9f6a-8bd598ae3884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bb3ed6-1d48-4e89-ad8c-1abd227ebc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fa3c28-46b5-4b03-a097-7555e8a1f81d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7960b33e-acb1-4e14-86d2-8e588e30f07a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "459f92b5-0c3e-4bc3-a325-b4bc7aa5d99b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a12c99-1b28-44f9-a20c-9670a148779c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b4493a-77d4-4e1e-b489-583074235545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e245f0-35f0-4773-b52f-76aa6830ec56",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7211f6f-c7f6-4f90-a99d-78e2d3a9d741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "376583e2-171f-44a2-8d67-8f602ba8b40b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8a988c-9240-4cb4-b178-a12c297714ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4c59c4-07cd-4db3-b3c8-8e9d4a433cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddab5dbf-64b6-409e-a900-0d8af0862855",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003a6e36-4634-454f-a07b-cdb8579c0166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2f631b4-a83e-4a96-85e9-bad3668e92a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8001448e-ea26-4bb4-88dc-6f1ccbcf0b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93862fda-2f78-4a2f-ac19-c74ece297575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec0980c-9d1d-453b-af78-0ba2d36c5029",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01960c81-b981-43ad-9c70-f3127ca2ea35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92305492-9256-4583-880e-f6fefcabe412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db92975-28f1-4f05-b9cf-2762c8a47fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba24eaa9-7f2a-4fca-9f5f-0413586ab9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fe75d2-eece-4cf6-aaae-e9c30150f222",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e162a24-b3f3-4479-972e-144fa7a740f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "352043ae-1545-4d51-9bee-61100d3fdada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "696f1b1d-62c0-4136-b056-0ab488493a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932fd037-912e-4ac3-b213-6450c59f757e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd0d0ef-5710-4819-bb21-138a389d4870",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f5d4d4-1621-47ae-b05d-1ee9c2059128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c94e4c3f-ea30-405f-8679-ea366c66579f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5b9324-5dc5-49c6-b585-3614482f3d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ce9f7b-ca9b-4860-b525-1ff91e1aa67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617ca732-9ef0-46b5-9122-eff29bc55120",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06805b5-bfc8-4701-88e4-fe31571056a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e7e9df6-c8c1-4279-b285-e3c8b57f3512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49d38b0-43d0-41a2-b30b-9ca64ea3e7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe513df-86a5-4534-a61c-9898f7e92e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce31194b-ddda-4cee-88a9-388001d5accc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909d5846-9505-4818-abcf-ea1724b02bf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83ffb411-80d7-45c7-8592-91796cc3d2de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ee4441-180b-4e1f-9062-6c92102d0324",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a10f36e-6c79-425f-b9ee-fbce241e3b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38744b5e-6077-4230-8006-f752cb8243d1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5cb5b8-1035-4e14-a91f-187771686c51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57200a66-6acf-45b9-b60e-5f0cd2880e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525020f8-d942-452a-b828-9342ec2eb199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91bc0f1-d8c4-4ed2-811f-ec42d0213a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5d4fe4-18ad-49c2-b47c-e09e7760a4a4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716d8aba-b124-419e-a2ee-813272b0416a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7a38229-317b-414d-80db-8fdb89f2874f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb4d7ce-4c03-4b80-bbc5-977468126aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ab7433-41d7-45ef-b55d-d5f38b655544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871c405e-dc68-408a-8c9c-0c83317a4b65",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7400fc06-8b51-42b3-8a5f-191245f5ed4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1624dac-3852-400b-b43f-f1979fb6521a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f0a0cd-ae3a-429e-a0f8-a2d360a86c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73fda14-f7a5-44d0-8ec7-28df911b0590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b68075b-bc23-4ac0-bbc9-097b202bfe72",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36d8a5a-81ce-40f9-8172-3c9ddc5e389e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af85444e-5afb-4dd3-b6a5-b14f68acdd7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179f8cf9-edf0-4b86-93d5-aa907bb51c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44bcf6d5-9759-4879-87dd-2e1ebef944fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfd1c92-2578-4bfb-bf43-a110e6dcfd95",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c9f024-080e-42dc-8287-c07551d04449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82073a82-784c-4def-a14e-d2d0b9f1236a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc779b86-8412-4c7c-95e0-d38d1e72c409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a7f87e-a289-4960-801f-f805f381107e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d2aaa5-4d52-4c7a-b6a9-8fdbd2ca0b5f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81d6953-6979-4131-8dfd-5f1c91876144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7505153b-be35-45f4-b624-b95012b755d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0468f24b-131c-4ae0-9e23-ba4393ed9b8b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffab7c04-c2de-4615-8849-2de04d7998a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a280b8f-af28-40d6-adb5-114f5b90c5fb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aead93b-e6dc-4a2a-a238-f36fc74525bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c09d62c2-ae79-4a39-a11a-0d588ed848a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f96f10-8b67-400e-947c-1c1064531a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b25aa1-e379-4ea2-94aa-9850cbe1266a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94c5f9e3-004b-4c3c-a903-8eee11aa3116",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cd0cdf4-f8b8-4a99-9a0a-4601e4d167ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1bdd129-9b30-4ce2-9376-59e42b0a8363",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ccb1b3ae-1ed9-46a0-afca-6d0debb98194"
                    }
                  }
                ]
              },
              {
                "id": "6cc90b5f-a467-43e2-9648-b679c018c0b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d19ea9b-96f0-46c0-b27f-e3775cd99407",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9d117b-699f-447a-bb26-c912f7b0da31",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3e3624a7-d89c-44a9-bdd9-c7f0cff0411f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e53223-0926-4fdb-bbbe-454a43c7b9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6b2ff83-3956-46c1-9ade-213b7ec1120a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3312cab-2eb9-49b6-87bb-38eca89fcb78",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae03cdd9-76bd-4100-b38b-2725da32df3d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3416f2ba-b571-4adb-bbc7-9306599b5d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df432a98-0a29-403a-9d8f-c0d82f23061e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "914f5112-ad34-422e-9258-e3ec21aeb591"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cdbb52b-59b6-4626-b52b-42e07365f789",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11783cf8-4e09-4a16-aca2-46f1865e7f3b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1dd73d6-12ce-4546-b00e-eacab15ebf70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "567489e9-1543-4d15-ac2b-34514e7e8f81"
                    }
                  }
                ]
              },
              {
                "id": "5e09338f-819c-443c-94b9-fefed4252149",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "242d492b-cfce-4657-9726-b2d9467112f1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db97eb78-4cff-45cc-ab9a-b05796bf34a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b13ca3c8-a4af-418f-ade9-c3516f3f08d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89dda8fd-6ad2-4f4c-b6b8-0d0aa1900347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc41282-423a-44af-bf72-6d14e6ad36e8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eb499af3-d489-4242-a5f0-a1e79725a0fb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa9ed684-6773-44f4-a346-18154ec840bc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3927182c-ef12-46ac-b4f4-5e9fe47ef70c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f4a79194-0dbe-45ad-95f9-db173d7a56ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36cefb71-78c6-46f8-9139-54b536cc4751",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38b87b3d-d7e2-4eed-86b5-9896b028f7ff"
                    }
                  }
                ]
              },
              {
                "id": "c802877f-31b9-4fad-bc5a-b225cfc57831",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53bf17d7-3db5-4d84-b79f-a4a9b47db042",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "31b95d50-92da-4349-9c85-62d15d2b3ff5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bada8907-dd87-46ba-8ace-a939e06d0676",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d042efd2-df7d-4ae8-91e9-6d2f2b8a7333"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c29b423a-64ce-4854-a772-42967c9acca4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7bddd624-c2b8-46cc-af63-0ca1015d5c9b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "211174ab-1d51-4dd5-b196-9dcbd751485e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a97ab02-234b-41ab-ab75-496c3bf2e2cd"
            }
          }
        ]
      },
      {
        "id": "67c1722c-44ac-4e81-b82a-6dae569280cd",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f5809d8e-09ae-43cc-b635-0c12fb7e9fa8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cca66988-2e65-4c23-9978-e93de1333fc0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d90d90a-0ba9-498a-bcf3-87a4a00cd6cf",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a5f813-83f5-4592-bf2c-c30536f3ae56",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7d0c8c06-1b2c-45f4-9728-6d1007673967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f429a22-3386-46f0-a02a-da42853e8a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e89965dd-b893-48a5-81cc-4ccd081e0f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d028af2-9806-407f-aaae-2a12866d0493",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd0be74-7792-4b59-b325-ddcb9565b730",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d99a592a-1b73-4e3b-956a-5d90c37be28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1e7e50-4a28-412c-bfb0-f1d2810639c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf66f17f-808a-42c8-b40f-58b5cbd6cb43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b12540c3-d2fe-4e76-93bd-480e84823071",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f98fab5d-1e9f-424e-a24e-a2db70c379d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "365c4fdd-eeee-4a72-8119-e6b648d5b22d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75abc876-5e93-4625-a37b-055a0c79dede"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cc30ca5-9ebe-4805-8d73-274643cf86cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4d792f10-6446-4bea-bbe6-34cd4e446807"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c04c4ce4-fe42-4b18-b2db-2b6e5f72c213",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff1256f7-7b2c-4034-82ec-90405eaa1f5b"
            }
          }
        ]
      },
      {
        "id": "55c7fc13-c51f-443b-8649-ed5a326f5bba",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7fbf4fad-ec38-484a-9d38-799a8437fb3f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "332a21ba-944f-4e86-8d89-81487d6b38b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38064217-45c3-46dc-b307-ec619094eb8a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a05c33-2541-476a-9dfe-9d5935fa3f8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "62e5f70d-5726-42fc-bc11-6f1c39096ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfb9762-ee3c-4b62-be9a-60512b465eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "428c9fdf-d04e-4620-9b55-076a8958994f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360c3584-25be-4464-83ac-28895595bddc",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55ea24e-86b4-4919-ae87-b9c8c9bf447a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ce4ae09c-7648-4d07-8d28-bcc13403e282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef5d9bc-ab0f-4c95-8ab9-7100e38bf1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54086a1f-1a96-43f0-8e8f-f320cd8fd3b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5312e89-3322-4c4d-9e01-cfe6655eb970",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63a63a0f-7e1c-4b32-a327-4e76049bd418"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd41d680-ebdd-4c9f-8826-e7dcfda35eaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00926509-eb8f-4c58-9ce8-d6f4326f244c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8a26bb0-7cf9-4efe-8e46-5905045856d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f3ff4fd3-a9d4-4898-8b98-048fc0dc209a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0349f777-914f-4f4e-9572-9273345442ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cf51b2f-14e9-49da-8148-0d4079b16ff4"
            }
          }
        ]
      },
      {
        "id": "a77a380e-63bb-47be-89e3-0d45637027e2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "58b72ffa-7c9d-4301-bef1-595cff2c831f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8dd7ed3-101e-4e67-b2b2-07414de9b64b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "719af34f-c872-4348-98bc-d922f4bd0d62",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcdfff64-f60d-4852-91dc-e4a562e890aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "42f4d540-8a95-45ca-a5f9-197b7ba38e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956ae589-a475-403e-8b45-29c16db734a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7fa2adf-ffdb-4a11-9600-c63b94c496c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e49104-f91a-4f0a-8a50-9767c547bba0",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e0b910-ea99-49cb-9ce3-cbc39b8e9ff2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "edf06105-de0f-48dc-9747-994f19973bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4885b6f3-e3c5-45b1-80f0-c585ba2eac75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bcf65b7-2930-4b17-83a7-10217a1b6ac9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a86a631-0982-46e0-a58a-ca6434462bbf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce424154-3c99-4ef8-83d6-d9e6617ee225"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b305195-e33c-4110-ab80-1df53ea5c624",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92671190-b682-48d4-810b-ef01a9c83df0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d122fd4-8eca-4ac4-a217-02ff6329cf36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "24776b9a-437c-46c5-b1b6-705e17a7e659"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27260f50-ea9b-4b91-821c-b9c8e4288c35",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e28fbc9e-34ff-40cc-982f-2d21d1637313"
            }
          }
        ]
      },
      {
        "id": "69340723-e55c-48ce-8592-50d9dfc4ba3a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "204452fa-48de-487f-a421-9553874245fc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c22924e9-54b4-4939-97d6-6d9095ec93fb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1d7e2678-335d-4e27-b09d-a1a3da7bfd77",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e93cb7ba-6e51-49c3-8e02-50f99fbfb1a9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee0a0afc-f3f0-49be-ba7d-159c30d5645f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 115.65267175572518,
      "responseMin": 15,
      "responseMax": 982,
      "responseSd": 176.2769268384543,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672619884253,
      "completed": 1672619926348
    },
    "executions": [
      {
        "id": "01d44fc4-4ab0-4f4b-b86d-fac12f8e8485",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "aee2d345-efac-4b95-820a-d0c7bb3577d7",
          "httpRequestId": "a841f891-3bea-423e-bbdf-729622faabef"
        },
        "item": {
          "id": "01d44fc4-4ab0-4f4b-b86d-fac12f8e8485",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f59872eb-e465-40e2-a0d4-9672ae52b783",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 0
        }
      },
      {
        "id": "01598aba-66fa-47b6-97d7-e2f90d95de63",
        "cursor": {
          "ref": "224e76a1-7b89-4600-a69a-1c789b7eadc5",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "93a203c1-5d65-4c95-8276-b90e9405a26f"
        },
        "item": {
          "id": "01598aba-66fa-47b6-97d7-e2f90d95de63",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "916e3ae5-4fa0-4882-898d-5756288f1fc3",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "5d8ed437-f635-4732-abc2-f5473ee0f108",
        "cursor": {
          "ref": "5df625ed-d628-4b42-9c6b-d587100c74fa",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "08ebc76f-c5ba-485e-9cb8-cc46105b18e6"
        },
        "item": {
          "id": "5d8ed437-f635-4732-abc2-f5473ee0f108",
          "name": "did_json"
        },
        "response": {
          "id": "b5910d70-7789-4aa2-ace4-cb05b9aca785",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e700069-4120-4ad5-9f4c-8e5f924be16d",
        "cursor": {
          "ref": "45095bbc-4008-427e-b4cf-6e7f3018d3eb",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "28db4b5f-3775-44e2-b961-f51dbc8efaed"
        },
        "item": {
          "id": "2e700069-4120-4ad5-9f4c-8e5f924be16d",
          "name": "did:invalid"
        },
        "response": {
          "id": "e73e243b-f014-4109-a571-869a72ce2685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e700069-4120-4ad5-9f4c-8e5f924be16d",
        "cursor": {
          "ref": "45095bbc-4008-427e-b4cf-6e7f3018d3eb",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "28db4b5f-3775-44e2-b961-f51dbc8efaed"
        },
        "item": {
          "id": "2e700069-4120-4ad5-9f4c-8e5f924be16d",
          "name": "did:invalid"
        },
        "response": {
          "id": "e73e243b-f014-4109-a571-869a72ce2685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8d991c-691e-4064-9e75-45fac59fee04",
        "cursor": {
          "ref": "f9e8812b-f5ab-44ca-86b9-bb2a268e0906",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "46b974c4-a459-4362-b500-a8244efcc572"
        },
        "item": {
          "id": "1e8d991c-691e-4064-9e75-45fac59fee04",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a114c7fb-b41a-486d-a25a-e7148c21722c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fcc28b-add6-44c6-9c86-a3a42f5a29ab",
        "cursor": {
          "ref": "560a087a-7e75-47ce-be52-f6cd5bb385d7",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9c9c2172-74bc-4c91-b0a7-a10ab5a345a3"
        },
        "item": {
          "id": "20fcc28b-add6-44c6-9c86-a3a42f5a29ab",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0e4c42b2-03f1-4166-92b5-43a95ba904ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c340a38f-2d0d-4098-b9d2-a275e5296387",
        "cursor": {
          "ref": "6ece5df8-cb3f-40f2-8c18-3da00aa8efdb",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0694888e-5847-4701-aca5-8902acf9f83b"
        },
        "item": {
          "id": "c340a38f-2d0d-4098-b9d2-a275e5296387",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "843b72cd-fb55-4818-b316-3e51f762292f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4133a0b4-ee36-4b01-b40f-bd746b041a00",
        "cursor": {
          "ref": "0e234f64-5e9b-4e34-9eb3-1dba173f5e94",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f217c33f-d296-4294-87d8-355d6deaf979"
        },
        "item": {
          "id": "4133a0b4-ee36-4b01-b40f-bd746b041a00",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "67317ad4-c37c-474a-8d42-d034fc891949",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4133a0b4-ee36-4b01-b40f-bd746b041a00",
        "cursor": {
          "ref": "0e234f64-5e9b-4e34-9eb3-1dba173f5e94",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f217c33f-d296-4294-87d8-355d6deaf979"
        },
        "item": {
          "id": "4133a0b4-ee36-4b01-b40f-bd746b041a00",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "67317ad4-c37c-474a-8d42-d034fc891949",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57638c17-d3af-4c14-a782-1a07b3e8cc40",
        "cursor": {
          "ref": "b7651ec2-100f-4e3b-8a2b-bd9ad3fa236a",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5745765e-24d8-4a1a-8503-6f596030988e"
        },
        "item": {
          "id": "57638c17-d3af-4c14-a782-1a07b3e8cc40",
          "name": "identifiers"
        },
        "response": {
          "id": "bfc8c155-0407-4d47-a83c-e3206e1042fd",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70af825f-1714-4bfc-8998-70caa192887b",
        "cursor": {
          "ref": "cbe9c3a5-c5d9-451a-8c8c-77728997f81b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7fe9d43b-5c1c-436e-8dc8-039924721299"
        },
        "item": {
          "id": "70af825f-1714-4bfc-8998-70caa192887b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "766fb2c7-c87e-4972-8425-8bbe5f47a1a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70af825f-1714-4bfc-8998-70caa192887b",
        "cursor": {
          "ref": "cbe9c3a5-c5d9-451a-8c8c-77728997f81b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7fe9d43b-5c1c-436e-8dc8-039924721299"
        },
        "item": {
          "id": "70af825f-1714-4bfc-8998-70caa192887b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "766fb2c7-c87e-4972-8425-8bbe5f47a1a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a56ebf-90e7-4a93-b9a6-2c23e404ce32",
        "cursor": {
          "ref": "8e242d99-d1c4-4d52-93a2-0b446c5cb57d",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b06e8960-db4f-4aa2-9839-1d4321a87156"
        },
        "item": {
          "id": "44a56ebf-90e7-4a93-b9a6-2c23e404ce32",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b65b7560-f7a3-45e0-8956-5da531a21656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a1f35f-2e12-4397-a09e-862873c0d841",
        "cursor": {
          "ref": "fb5ac981-fb57-4c41-94f1-a0d25caf8aae",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0af57df4-8fde-44b0-bbd4-410ccea2f876"
        },
        "item": {
          "id": "64a1f35f-2e12-4397-a09e-862873c0d841",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "f75baa40-c2ba-44aa-a590-681c2d6cbae3",
          "status": "Created",
          "code": 201,
          "responseTime": 788,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "40b5a0d7-dd67-4d57-8add-de07ce7f6d3f",
        "cursor": {
          "ref": "9b306760-e152-4af6-834f-6340b0ac164b",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9ac27f65-0862-470f-a5b6-114a9f14a970"
        },
        "item": {
          "id": "40b5a0d7-dd67-4d57-8add-de07ce7f6d3f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "30230ebd-4115-45a7-9136-93eae5da5026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb6e7d1-d8b5-4e8e-a079-4285f7bc896f",
        "cursor": {
          "ref": "76a2ec3a-b1cb-478f-9c01-24e379031e1e",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f4d478bd-3753-426e-9ac1-4f7daeed4a44"
        },
        "item": {
          "id": "5fb6e7d1-d8b5-4e8e-a079-4285f7bc896f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "72827e6f-6752-4427-b9e2-8e791e56c32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d29bb7-cd8c-413f-a4d8-c63b30f2cd95",
        "cursor": {
          "ref": "510ccdaf-b4af-4e01-82f7-7568c1bd8697",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "dd18163f-9335-4a8b-8cb1-ac55e41274ad"
        },
        "item": {
          "id": "94d29bb7-cd8c-413f-a4d8-c63b30f2cd95",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8235f7ab-516a-4f2b-97db-9c2febfe45dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ad8324-67f9-49e3-a71a-365899c48b7f",
        "cursor": {
          "ref": "71753711-2ab5-410d-99dc-726e75bb7a19",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "05a9eef6-02a1-406f-ae47-c0ef059db9d7"
        },
        "item": {
          "id": "e7ad8324-67f9-49e3-a71a-365899c48b7f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "06f08765-dd1c-4ad5-888f-be7c8216cf4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f02c23-ac5a-4255-ad0a-767e365c5bec",
        "cursor": {
          "ref": "c8a92ca2-5a74-4ecd-832d-c8be5025cf42",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0667ae3a-8ca6-419a-a96c-c940d6a37cf4"
        },
        "item": {
          "id": "16f02c23-ac5a-4255-ad0a-767e365c5bec",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4f23b836-54c4-4de9-89c4-47ad73c509be",
          "status": "Created",
          "code": 201,
          "responseTime": 532,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "0527f7f2-e0b4-48e7-80e9-f145abf750c4",
        "cursor": {
          "ref": "a3db3c42-18d5-4238-80e1-c96a4e667947",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "525e9bed-254b-4a63-921b-ce77cb8d8eef"
        },
        "item": {
          "id": "0527f7f2-e0b4-48e7-80e9-f145abf750c4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "504b2038-ed27-4fb7-896e-57052f856114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb85a018-fc5e-4c0f-adcb-a2a803f096fe",
        "cursor": {
          "ref": "3ae58548-f366-4e1e-b176-8a9d4fdb752f",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "77fa99b0-b61f-41b6-a1b1-59babb9b7c7f"
        },
        "item": {
          "id": "fb85a018-fc5e-4c0f-adcb-a2a803f096fe",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b2e09a52-51d5-4087-b512-6e243f0da527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7e23fc-2845-4d0b-9f5f-533676d7cf6c",
        "cursor": {
          "ref": "5ffc598e-ea90-46e9-9e62-fca1606f5322",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "04c7dd1c-6bd3-4180-bc5f-b215f504c846"
        },
        "item": {
          "id": "6d7e23fc-2845-4d0b-9f5f-533676d7cf6c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "56855f99-e3db-424b-8c1a-1f5dee04344e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2ac720-a203-4e1a-adba-9242e42761ce",
        "cursor": {
          "ref": "d4ec2356-7578-47b1-b952-5b0482f66872",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e181758d-b0c4-4748-9768-000061e6febe"
        },
        "item": {
          "id": "9a2ac720-a203-4e1a-adba-9242e42761ce",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0c846b35-1653-4433-8feb-89e9612be74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01929f19-1a77-41d7-aff8-743ac8bb5c17",
        "cursor": {
          "ref": "c1a8a131-0921-4128-b70b-ed624e67af63",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3bdc4a3a-92eb-45d2-9fa7-65e0b96e9dd1"
        },
        "item": {
          "id": "01929f19-1a77-41d7-aff8-743ac8bb5c17",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4f5af6cd-fe56-44ae-a068-e384c9cc3d05",
          "status": "Created",
          "code": 201,
          "responseTime": 648,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "68ca7486-2031-4bb7-83f0-9ebfb9668659",
        "cursor": {
          "ref": "6b2bd974-0371-4af0-bd4f-d94219366442",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8e883e7a-4687-4a2a-854a-f63d0b17b04d"
        },
        "item": {
          "id": "68ca7486-2031-4bb7-83f0-9ebfb9668659",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "86a3dfa3-a59d-4271-8c30-134ab58746a2",
          "status": "Created",
          "code": 201,
          "responseTime": 982,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "7fb9ce3e-26ec-4ff3-8d93-4d004ca5bb87",
        "cursor": {
          "ref": "be0c2260-c917-4edd-8618-6ac9d1af4d60",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d9be22a0-b88a-42f4-9a37-7ff8221e1f79"
        },
        "item": {
          "id": "7fb9ce3e-26ec-4ff3-8d93-4d004ca5bb87",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "08c191c3-2b73-484c-a6bd-1ad39dbe1c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1333bd9a-2e2d-4d12-8918-ec72206899ee",
        "cursor": {
          "ref": "624a1b4f-3921-45e9-86db-7ccfc87474b2",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5d2e24c5-7951-40c5-8352-68337bde7444"
        },
        "item": {
          "id": "1333bd9a-2e2d-4d12-8918-ec72206899ee",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5de99e22-2202-4e8e-9bc2-4275abe7313f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff7afea-a66f-43d9-9e65-0bf73b2da854",
        "cursor": {
          "ref": "7343ac97-006c-412f-9847-49bfb7ef5f0c",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6ac271ca-5238-4fb8-840c-c566c1d51394"
        },
        "item": {
          "id": "8ff7afea-a66f-43d9-9e65-0bf73b2da854",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3bcbd1bb-8860-42ea-bda3-3ebf2fa59a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c793b9-87fe-4d1a-a601-6525bbd34842",
        "cursor": {
          "ref": "3c747a4f-fe89-4be6-980b-38ede0d254da",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8af2136f-ed65-4b45-8424-a1254f7e2bd6"
        },
        "item": {
          "id": "05c793b9-87fe-4d1a-a601-6525bbd34842",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c5fa1886-2795-417c-93bd-2ef30fb79f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4281323a-269e-45f4-aec1-0d6144aa3eb5",
        "cursor": {
          "ref": "d5201cff-01cb-40a1-8b7c-8b5348e48245",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d8fd725b-87d8-42ee-b487-ff5c8c362e1d"
        },
        "item": {
          "id": "4281323a-269e-45f4-aec1-0d6144aa3eb5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "24a5d0df-5703-4575-b8e4-4e4d8c811f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794c6128-b367-4fcd-bdbf-f052ddeb6e24",
        "cursor": {
          "ref": "844dd2c5-63f7-436b-8038-bef16c182c31",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "89fb3c3b-9ebd-4974-9799-c943edd87493"
        },
        "item": {
          "id": "794c6128-b367-4fcd-bdbf-f052ddeb6e24",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4692ed7a-cade-4315-9215-ef6163edcae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2241d1a-62af-4848-a951-b821e5d3f14d",
        "cursor": {
          "ref": "e6ad173e-d21c-4e69-b7c5-6cefce8a78a8",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "62043214-c9a5-426a-8332-e41efcf46005"
        },
        "item": {
          "id": "b2241d1a-62af-4848-a951-b821e5d3f14d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "68ad6232-3c30-40e1-acad-ca5b1a446fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee00e002-acf5-44c2-bbc9-e463c2003a6d",
        "cursor": {
          "ref": "9e93a511-75d4-457b-85b2-178394ab6375",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7212fb27-f9a6-43dc-a786-6ce9c88eba8d"
        },
        "item": {
          "id": "ee00e002-acf5-44c2-bbc9-e463c2003a6d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5e43dde5-038e-47b8-a6d9-4dcec494e279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d815bc3f-8561-4268-9ea8-6f5227e184f5",
        "cursor": {
          "ref": "2e36031e-663c-4300-bba9-670c5db164b0",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "efc78fa3-bda3-4f14-860c-3f5cc2afde3c"
        },
        "item": {
          "id": "d815bc3f-8561-4268-9ea8-6f5227e184f5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "840d6384-bbdd-4d88-a568-0b45fec10797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98c1031-a6c0-4fed-96f0-0e5fa663b920",
        "cursor": {
          "ref": "c71e24f5-feb1-4dda-8145-bd229eefc776",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "206f00ab-90da-45bd-a1e1-c77e53327e06"
        },
        "item": {
          "id": "e98c1031-a6c0-4fed-96f0-0e5fa663b920",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "44fba6ae-420c-4d22-b95e-657f4bb60b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19de6e9f-b9b7-41a4-84d6-565ff6669ec1",
        "cursor": {
          "ref": "f3403ca3-a8f1-4243-afcf-acb43a6a6478",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "699562ad-b51d-41d6-a130-f7f4a1e5e641"
        },
        "item": {
          "id": "19de6e9f-b9b7-41a4-84d6-565ff6669ec1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3eaa1247-f52d-4841-986b-b57688d24f06",
          "status": "Created",
          "code": 201,
          "responseTime": 729,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "cf293919-5285-406c-b728-0547ca743cd7",
        "cursor": {
          "ref": "8a5c2bd4-713a-419d-a1c1-e871cc38ea46",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8a5e4e4e-2987-4fa0-a882-4e71ab05738b"
        },
        "item": {
          "id": "cf293919-5285-406c-b728-0547ca743cd7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1185beeb-69f2-4713-92af-ed29c3495c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991aa152-83b5-4212-8311-a6c0a3dfeb33",
        "cursor": {
          "ref": "d44cd045-fd21-4dc1-952f-21bae81379bf",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0dcb2ef7-b26c-43f4-803c-3237c65c01ee"
        },
        "item": {
          "id": "991aa152-83b5-4212-8311-a6c0a3dfeb33",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "88998cb6-cebd-4fb9-93e1-bd368b630dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5229f224-f335-424b-aa7c-5a450d871fb8",
        "cursor": {
          "ref": "286356c6-016a-4b0e-b327-ef3ac99a0aad",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "06ba99c4-5c7a-4251-9695-b31333bc2634"
        },
        "item": {
          "id": "5229f224-f335-424b-aa7c-5a450d871fb8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3546e1ab-3b05-40ee-817e-8deab48c0e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18010e2-bf1e-4ca5-adbc-b056bf8a79a1",
        "cursor": {
          "ref": "56f7a1e4-85dd-4b89-bc8d-cb456ad67548",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4a3dc0fb-6e8f-45c3-8558-6ba3e42703cd"
        },
        "item": {
          "id": "a18010e2-bf1e-4ca5-adbc-b056bf8a79a1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f7650a87-bb63-4ed8-9366-cb89003a3f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b06fec6-8ba6-45b6-aa72-4b9bcb55b7b3",
        "cursor": {
          "ref": "a31b4705-cb0e-45d8-9c39-8443090be48c",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a2f2e5a0-9c60-41c2-9f9b-0166d8a4ba19"
        },
        "item": {
          "id": "3b06fec6-8ba6-45b6-aa72-4b9bcb55b7b3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "04b8f41b-8e70-4f6a-8e94-1d7fb7c71fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f994876-2c2b-495e-91c8-9d86db02674c",
        "cursor": {
          "ref": "f9db7f78-9ac7-437f-994e-702b9f262368",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "82fd9d21-a7af-49ef-91a4-a5fd79c37dc9"
        },
        "item": {
          "id": "0f994876-2c2b-495e-91c8-9d86db02674c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "655790d5-5770-4984-a496-59e76e89d4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c17c7b8-b71c-4957-ae7f-f8c21ee5f7ad",
        "cursor": {
          "ref": "8c38beaf-3653-4674-ae00-52cc2a96935a",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e59e0e45-51d3-48bd-8b1a-c1ab92b0fede"
        },
        "item": {
          "id": "4c17c7b8-b71c-4957-ae7f-f8c21ee5f7ad",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6baa71b1-2d62-4631-ab0c-e714b8a4077f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e0edb3-9f63-411f-ae7f-02be6e808d6e",
        "cursor": {
          "ref": "7f572996-3b32-471a-8b0c-fc5dfcb89b00",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8b6f9582-84f3-4fe5-8bf1-0abcd3261b7c"
        },
        "item": {
          "id": "41e0edb3-9f63-411f-ae7f-02be6e808d6e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e93f6346-3017-4054-8c9d-975584f31010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb62d70-5a0d-4b5e-86b1-9c09acf10d98",
        "cursor": {
          "ref": "68965f79-05a6-49ec-a477-4dbed052348d",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a018fd3b-eee2-4ae9-bbac-0569e62e6ff8"
        },
        "item": {
          "id": "ddb62d70-5a0d-4b5e-86b1-9c09acf10d98",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "79ab1542-8714-4296-9f46-0564fdfcb63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e75393-b7a5-4e0a-a668-1e0d47e1dbe4",
        "cursor": {
          "ref": "1d4685c0-e722-4443-b59b-b9f0f629b8cb",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0185f5cf-0976-41d3-8a41-1530c90584d2"
        },
        "item": {
          "id": "65e75393-b7a5-4e0a-a668-1e0d47e1dbe4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a814c857-93c7-4c2c-9e3f-cfdc37e3d2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df34460d-8891-4e3c-826e-8092793f385d",
        "cursor": {
          "ref": "b8a3c3b6-20d1-47e4-8d8d-5a0e8705c3e5",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "edd2b8a0-5e8c-48ff-abe8-c7430aa56ecc"
        },
        "item": {
          "id": "df34460d-8891-4e3c-826e-8092793f385d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0e3a2a3b-0e0a-4dc9-82ee-6cda3defc3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06296a6c-c1be-4993-9d9d-d4acd15e99b1",
        "cursor": {
          "ref": "0a9ac7d1-db1e-469e-ab51-554106dc6f53",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "148191a2-91de-470a-b3e6-c08e2a4d4619"
        },
        "item": {
          "id": "06296a6c-c1be-4993-9d9d-d4acd15e99b1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4ed9691b-115f-485d-bdd4-e05687961aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019fb205-2ed4-4676-8b2c-0d33cb4da868",
        "cursor": {
          "ref": "698f70b4-4a3b-4eb0-bc4b-c4f43f2b750c",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4ff21153-f962-4ac3-ae09-1a7c8e6e08e5"
        },
        "item": {
          "id": "019fb205-2ed4-4676-8b2c-0d33cb4da868",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "330e9836-50dc-4b3e-988a-100feebaabb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 368,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "de16caeb-aa66-4c45-9b25-4458db0b29e5",
        "cursor": {
          "ref": "9aae0378-f227-4d2b-8eb9-88fc516b88b6",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ee23f431-f7f6-49b2-9930-73dedd721b2e"
        },
        "item": {
          "id": "de16caeb-aa66-4c45-9b25-4458db0b29e5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a1fae37c-97a6-474d-9a41-fadf34e28f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae45fe6d-0366-4150-a370-778aafe95232",
        "cursor": {
          "ref": "03ba22eb-e037-4889-b80e-2ebcea2e46f2",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dabd4b90-a2f4-435e-ab7c-e9ae4ab1d157"
        },
        "item": {
          "id": "ae45fe6d-0366-4150-a370-778aafe95232",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e99f961f-7193-4697-9046-ac3e522cd176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d62b33-480e-4dea-8ab3-6b4571a99834",
        "cursor": {
          "ref": "899fa8c6-aa3f-426d-b430-fc340aad9789",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7ee8018a-f799-47fa-a93d-49dccd110449"
        },
        "item": {
          "id": "e8d62b33-480e-4dea-8ab3-6b4571a99834",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5fd5a2f8-a842-4c77-8a16-a437c00591d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137f8bb0-5a17-48a3-bb60-3317e856f1b6",
        "cursor": {
          "ref": "05e8c9fa-d0dc-4860-afdd-2b603bbcd637",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8c489439-05ad-4411-9a97-2d6e4dd1964a"
        },
        "item": {
          "id": "137f8bb0-5a17-48a3-bb60-3317e856f1b6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f59d7a84-fda2-40f0-944f-d1f8c31ba33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4616fbf1-6172-40ef-a29b-453e4882db85",
        "cursor": {
          "ref": "bac2d624-cb54-444a-bebf-66e33ffaaa35",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cfbde889-98b8-4dc1-a397-f1f5e62f7562"
        },
        "item": {
          "id": "4616fbf1-6172-40ef-a29b-453e4882db85",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "958405f6-9620-4b60-b0ef-29f521bd17d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f661c3d0-0d82-415a-b122-12ec868a31c5",
        "cursor": {
          "ref": "f84278d2-113d-4dca-bc24-7773612108c6",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f8a2be00-ff59-45e2-b0c8-ab6bd545cdc7"
        },
        "item": {
          "id": "f661c3d0-0d82-415a-b122-12ec868a31c5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "941c5c48-1082-45d5-bddc-c53d22d7679f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091a45e1-948d-4602-8663-3aed1a501bd1",
        "cursor": {
          "ref": "5407a536-5367-4c54-b4ff-17e5faa56e7b",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "af1c1b49-8705-4545-b656-dfc79589d8d2"
        },
        "item": {
          "id": "091a45e1-948d-4602-8663-3aed1a501bd1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6384b14f-197e-4215-aafa-d8885397e389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 350,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "4fdedd54-8d4c-40d7-9cd5-fe494f9564a4",
        "cursor": {
          "ref": "ec02b5c6-1b4c-4d3f-860b-ed430fd07408",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6faee2ea-b53d-4969-b615-30e5bb59e886"
        },
        "item": {
          "id": "4fdedd54-8d4c-40d7-9cd5-fe494f9564a4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "45707be0-b23b-4e49-a1bc-5bd59d6eeb1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b1f21c-aaff-4a61-bd93-ae5e059c6d07",
        "cursor": {
          "ref": "9d7b41aa-feb6-4156-9c39-95992a69a31a",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "46630164-60a3-4e9e-8329-fcb212d2ea44"
        },
        "item": {
          "id": "39b1f21c-aaff-4a61-bd93-ae5e059c6d07",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "dc269198-6264-4014-8553-06943bac99aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4b0166-4fa0-4499-ad21-0ee689099a0b",
        "cursor": {
          "ref": "641ab0d2-b738-4db4-a5ad-694b187e94cd",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e42f8561-67d4-40a3-8141-b73c437f537d"
        },
        "item": {
          "id": "eb4b0166-4fa0-4499-ad21-0ee689099a0b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ef8b1ab1-ce33-4202-8edf-7de42b410ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055f7061-39e0-4a20-aaf6-670e64065da2",
        "cursor": {
          "ref": "9799e3a7-03d9-43d1-a2ee-1a64af3c5f96",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "87a20422-53f7-4208-ae1e-b60e70cd5f9b"
        },
        "item": {
          "id": "055f7061-39e0-4a20-aaf6-670e64065da2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4804e2ee-1fb3-4edd-aaf9-c78a0ced5ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40d3523-ca02-44b6-bbfc-fb82e0fe4723",
        "cursor": {
          "ref": "1102d23a-6395-4e40-ae96-358009fcd2b2",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "29e46f9b-0869-4107-9338-79f988ef1e9b"
        },
        "item": {
          "id": "d40d3523-ca02-44b6-bbfc-fb82e0fe4723",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c298bee3-77e7-4a6d-b5b3-a26dd49f67cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bd9ae3-3d77-43af-9ccd-5e5ad0f23662",
        "cursor": {
          "ref": "ee0b9534-2ce0-48ed-9663-a5687371f087",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4d8b5321-7253-4d07-b45c-850002c20a34"
        },
        "item": {
          "id": "c9bd9ae3-3d77-43af-9ccd-5e5ad0f23662",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b5c201a6-136f-4042-b8ee-aa67aa3ac68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a557a4ba-bd1b-44e7-bc6c-556b2513a230",
        "cursor": {
          "ref": "7aaa1301-9f97-402e-9407-e5056ba5ad48",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e6013f61-11d5-4a5a-9c20-f38a2bcf6e0e"
        },
        "item": {
          "id": "a557a4ba-bd1b-44e7-bc6c-556b2513a230",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "46f75db8-3589-4a42-9738-6b7e0d4a5327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd20c175-c184-45ed-9a97-3a3f2a8fd02a",
        "cursor": {
          "ref": "89a5eee2-387f-4258-871c-f9dae879c8aa",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "de293561-d971-4d26-bde8-da204368ce54"
        },
        "item": {
          "id": "bd20c175-c184-45ed-9a97-3a3f2a8fd02a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "deb0fcef-e7ef-42e9-ab2e-3c78a9194e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0824bad9-c72a-4c91-9cfa-3d3e1dd035e6",
        "cursor": {
          "ref": "172a363e-355f-4b78-b282-3b075958a6b2",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e6696239-5709-4858-8c8f-da073cc80173"
        },
        "item": {
          "id": "0824bad9-c72a-4c91-9cfa-3d3e1dd035e6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3605771f-daa5-429e-80ef-ca3f2e12fd2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672388a2-3984-4c29-9530-24366cef796c",
        "cursor": {
          "ref": "5103dfba-bbc1-4d35-ac36-108f47a4f0f3",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3ae63743-9347-4797-a236-99446be775e3"
        },
        "item": {
          "id": "672388a2-3984-4c29-9530-24366cef796c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7875f559-82b0-4900-9c7b-9ff094678a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d22f9e-be38-4165-852e-b15ede971800",
        "cursor": {
          "ref": "ccb0ecd2-4fb2-4686-a399-7107057a83e5",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "72498703-2175-4c8d-af19-d5685846f4b7"
        },
        "item": {
          "id": "18d22f9e-be38-4165-852e-b15ede971800",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bcda1002-7449-44c0-a95c-a5abf520f521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44b6772-2d14-4258-b2ff-078b30964037",
        "cursor": {
          "ref": "0d75d0d5-af93-461b-95c3-26982b5e0363",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a1271c13-ff64-4693-823e-ff8731c20541"
        },
        "item": {
          "id": "d44b6772-2d14-4258-b2ff-078b30964037",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b583740a-ae71-48fd-bc44-72b281cc8ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d303b9-582b-4c02-b5e1-2991c3b17a7c",
        "cursor": {
          "ref": "92df9b26-eaee-4b11-aa6a-82008398af15",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f99eb255-73b1-4678-a355-97e9471c616e"
        },
        "item": {
          "id": "c6d303b9-582b-4c02-b5e1-2991c3b17a7c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6afea122-f18e-4cbe-92f0-55b71d07876a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d905cf67-3a6f-41f3-915b-d9152a2cef78",
        "cursor": {
          "ref": "d02cf940-e785-4a76-88e8-7bd2ea403def",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ad112c9e-f1a2-442c-b364-bcb60ae57455"
        },
        "item": {
          "id": "d905cf67-3a6f-41f3-915b-d9152a2cef78",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0427b573-a626-4fef-84a2-ddc0f46f06a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50a40c0-2ea1-414c-86f3-18df16f50d47",
        "cursor": {
          "ref": "ab288e2b-8b94-4d85-acca-782f6dd221a0",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ea184fd5-e4ee-4903-971f-b2518654eff9"
        },
        "item": {
          "id": "b50a40c0-2ea1-414c-86f3-18df16f50d47",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1168e00c-c93e-4428-b21c-5922fc974d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5625759b-efee-4ff5-a127-ff820d1278e4",
        "cursor": {
          "ref": "34ff38ee-944c-440e-93ca-f1f46ae31913",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2a4ee1b4-8f26-4a1f-b636-4b612212f334"
        },
        "item": {
          "id": "5625759b-efee-4ff5-a127-ff820d1278e4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3716c5ce-0b21-4891-b8d4-beb96b721419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967ee10c-0fc6-4931-8d6b-ad18cddf7fa8",
        "cursor": {
          "ref": "aca55e0a-799c-4c5d-a2c9-de264c63759c",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "117ac7c4-2b4a-423e-bfb4-8a2884226508"
        },
        "item": {
          "id": "967ee10c-0fc6-4931-8d6b-ad18cddf7fa8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "53153ae0-c134-459a-b9ad-332fdeab24c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac0ac23-347c-40bf-959a-6512324de342",
        "cursor": {
          "ref": "fbe63de8-217e-49f0-be15-3b085c0cb865",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9c7edc2a-e257-4c95-900a-639e69f7ebbf"
        },
        "item": {
          "id": "8ac0ac23-347c-40bf-959a-6512324de342",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7a2ad827-9fde-476a-8349-0cbe7ebcedcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9cf9d1a-b1a4-49b6-85ee-4be2296d962a",
        "cursor": {
          "ref": "87515dfb-aefa-48a6-864a-d81c2e8a9f32",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f670b5e3-ddf1-4daf-9b54-d6cd53bf98c1"
        },
        "item": {
          "id": "f9cf9d1a-b1a4-49b6-85ee-4be2296d962a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "10ff2209-01f1-46d9-a0b7-d674e0c6178a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a209615f-9e8b-4f37-86d8-729e48172a62",
        "cursor": {
          "ref": "5eb48fea-a90c-4b1d-b5e9-7baca06d4db1",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "72463a5a-2228-4efb-816a-9c581474911a"
        },
        "item": {
          "id": "a209615f-9e8b-4f37-86d8-729e48172a62",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ae4fd55e-e78c-4927-8bc1-12ca2014e474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18d514f-7bce-40cb-ae45-dcac7eaacb37",
        "cursor": {
          "ref": "d7d48e92-808b-4f57-88cf-fc0463e734d0",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2fc8d229-5a64-43dc-96ac-4a0075045cef"
        },
        "item": {
          "id": "b18d514f-7bce-40cb-ae45-dcac7eaacb37",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3552b08b-33d8-44b8-95f3-e80a3bc428d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566d4c0d-c165-4208-8271-9521cab1d5bb",
        "cursor": {
          "ref": "1c48ece0-ed03-4dfe-8593-1e4a978f761d",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e3cb2a24-7b4c-474c-b6e9-1af79e90cdcf"
        },
        "item": {
          "id": "566d4c0d-c165-4208-8271-9521cab1d5bb",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "29c61e94-9997-44b4-929f-488752f80b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3498cd5d-e0a5-49fb-8018-f0a268b97b44",
        "cursor": {
          "ref": "7344f40a-163f-4ba2-b537-dd5de96c7259",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "27b12147-9c19-4f2f-9e84-3b31ccca2de8"
        },
        "item": {
          "id": "3498cd5d-e0a5-49fb-8018-f0a268b97b44",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b21f6a7e-48c6-4890-9853-5d753e7c3af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71262f1-86b1-46bb-a998-55654d1b12ef",
        "cursor": {
          "ref": "96b5776a-09f1-46a0-bd0b-169ac70384e9",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "017c4443-0ef7-45b5-bf64-e070350e7249"
        },
        "item": {
          "id": "c71262f1-86b1-46bb-a998-55654d1b12ef",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6b92e3d7-45de-4cb0-8f0f-3311ac773c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21065bd-9562-4abf-bb57-b3781c1c83bd",
        "cursor": {
          "ref": "be8b44a7-c2aa-4941-b95e-59554ff38a6a",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7e691e3e-b359-4eba-9570-fe54a22f6031"
        },
        "item": {
          "id": "c21065bd-9562-4abf-bb57-b3781c1c83bd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4fb8b07f-2b1b-44c9-a78e-e10c60440288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f0a668-d504-48a2-aadf-997ac7d1e610",
        "cursor": {
          "ref": "5611b5c1-13d3-4e81-859d-fe23d0b38351",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4680ca01-88e8-4cc0-9900-d32bd4e9c51d"
        },
        "item": {
          "id": "31f0a668-d504-48a2-aadf-997ac7d1e610",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d232d686-f963-4741-952c-8956deab215e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6650148-5290-4e45-bb3f-0233918ad7f5",
        "cursor": {
          "ref": "56dbf139-fe42-4b9d-8683-7d825936ccb4",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6398fb5b-4bfe-4f5e-a09e-0de3e1acda00"
        },
        "item": {
          "id": "e6650148-5290-4e45-bb3f-0233918ad7f5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "cb2101f3-f213-43d9-9e81-8148fc05d290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53afd97-27f8-4587-b788-849682ddc4cb",
        "cursor": {
          "ref": "07e3abe5-d43d-4ecd-ad61-51f410ca666b",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6e2182c6-5fdf-4c48-8990-9489c12cbee4"
        },
        "item": {
          "id": "a53afd97-27f8-4587-b788-849682ddc4cb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2255200c-08db-4c91-9391-ae8fd390359d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4626c3-e503-45e1-9d3f-a8e8c40e1dbd",
        "cursor": {
          "ref": "da7ba74b-dc7b-4d7f-b9aa-373ec6c93b84",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0fd54bb8-bb45-4e8a-80a7-b005dcddf71f"
        },
        "item": {
          "id": "8d4626c3-e503-45e1-9d3f-a8e8c40e1dbd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "af5d907d-a87d-4603-a3cb-fa2c7c0b464d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effb2055-ebe0-45b3-8836-ed2087c4d323",
        "cursor": {
          "ref": "df83a3e9-c9e6-40da-99ee-d731228d5296",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f37968ff-1083-4329-8af6-f17f704f0538"
        },
        "item": {
          "id": "effb2055-ebe0-45b3-8836-ed2087c4d323",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2b1abc35-6538-4031-9d68-d80fc53855ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5747978c-4a1f-40ed-b395-c28e7d964394",
        "cursor": {
          "ref": "eaeedf2a-eda7-4e54-a601-faa4f2c21332",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6b09c017-be69-43ca-94fe-fe59e5ebaf63"
        },
        "item": {
          "id": "5747978c-4a1f-40ed-b395-c28e7d964394",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f8ac1764-852e-45eb-a547-a3ee8e4c8b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 368,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb77d38c-07fe-4923-a0d2-ae34dedaed2b",
        "cursor": {
          "ref": "b105661a-e556-4a6c-88c5-f0c686b1a618",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "007392ae-57b1-49e9-8023-6f5cdf458c7e"
        },
        "item": {
          "id": "bb77d38c-07fe-4923-a0d2-ae34dedaed2b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6cae2680-6610-437d-9d72-421d80236b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b63b305-2de5-4d0d-a57b-1dc09e1fe537",
        "cursor": {
          "ref": "6cd0294c-99ad-4841-ae3a-a300289ca0c9",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a21425ae-5deb-4156-8717-f430401295e9"
        },
        "item": {
          "id": "7b63b305-2de5-4d0d-a57b-1dc09e1fe537",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f5ace822-9af7-4f59-b066-469d7b7c07f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332df978-001f-4460-ac06-ef5b75d25eed",
        "cursor": {
          "ref": "4c04bbf9-49fc-46f7-af0f-90d173a8f97c",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "99c68faf-f245-484c-a796-77bbf8c600e4"
        },
        "item": {
          "id": "332df978-001f-4460-ac06-ef5b75d25eed",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9edb0c0c-1e31-47ec-8cf0-7e8cefe39f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535c1033-7b8a-46e4-b095-efd1c002b533",
        "cursor": {
          "ref": "24a9fa20-7ffb-4d32-884f-ca5b27000cdd",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5af1c824-5225-4785-82cc-a305337d0183"
        },
        "item": {
          "id": "535c1033-7b8a-46e4-b095-efd1c002b533",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "780c9ddb-87a7-4dae-a437-29365976d4c8",
          "status": "Created",
          "code": 201,
          "responseTime": 682,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "f302fcdf-df0a-4989-895f-d3f91c834b47",
        "cursor": {
          "ref": "01a1f612-d292-4b70-87c8-8383e3950998",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "54294497-e962-417b-9d97-57d118c385ce"
        },
        "item": {
          "id": "f302fcdf-df0a-4989-895f-d3f91c834b47",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3d4eecb7-97ff-4316-a129-13f12adfdcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851bc02e-3cb9-4438-b9d9-290206c5c9e6",
        "cursor": {
          "ref": "9d72a40d-f06b-4bfb-b007-4b3b078c04a1",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bc11d4ed-219f-469c-83ad-25b846fcbad7"
        },
        "item": {
          "id": "851bc02e-3cb9-4438-b9d9-290206c5c9e6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9a0df631-cd1c-4311-9eaf-635fa3eabf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f710ae-d218-47c0-9414-6cbbf012e889",
        "cursor": {
          "ref": "0edcbee2-e212-4faa-ba8d-8e119a62f2fd",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "24934695-e879-4192-8705-e4a79f3ab949"
        },
        "item": {
          "id": "25f710ae-d218-47c0-9414-6cbbf012e889",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "827634f8-98e2-4c28-b38a-24f8e94c0570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29cb987-10f3-40d8-a52e-e312a76027bf",
        "cursor": {
          "ref": "b96c4fcc-640d-43b3-b89b-17f9aa5c4724",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9d84bfd6-db60-4a35-8d32-a210165c36c4"
        },
        "item": {
          "id": "b29cb987-10f3-40d8-a52e-e312a76027bf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4439b6d4-d775-4129-a3df-f3900e8a00eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342b866f-d5de-4721-8b86-7ec8ad1d37f5",
        "cursor": {
          "ref": "6be69c42-fae7-48b8-a434-72a6cd558b7e",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cf4ebf76-00fd-4b35-a9b7-dc2da3d30390"
        },
        "item": {
          "id": "342b866f-d5de-4721-8b86-7ec8ad1d37f5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d5adc938-133c-483e-9834-d92094ebb839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382aaf25-cb08-4694-a348-06b85e9d1ac5",
        "cursor": {
          "ref": "3a522d4c-a880-49d7-bf38-267046e622d2",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ad074df5-1e77-4129-a7f1-50525bb766ad"
        },
        "item": {
          "id": "382aaf25-cb08-4694-a348-06b85e9d1ac5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4f1a1da3-cdb3-446f-9719-c2aad6fb7a8b",
          "status": "Created",
          "code": 201,
          "responseTime": 679,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "3221c8e4-566d-4f46-bba7-8b8332bc2a06",
        "cursor": {
          "ref": "48438a4e-d79c-4a6d-ba73-17a4ff9fdf7b",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c6410a73-d4cc-43a7-a7e6-6ab66b9e3859"
        },
        "item": {
          "id": "3221c8e4-566d-4f46-bba7-8b8332bc2a06",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9978341d-dfaa-4256-87d9-0eca185e5758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69ba7f1-973e-43ba-b636-ad9f5d07ff75",
        "cursor": {
          "ref": "d7fabc59-74c1-46ef-9ca5-9ea9e8ca1e23",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d4a2367e-55c0-4bbc-a297-9b08c56df438"
        },
        "item": {
          "id": "a69ba7f1-973e-43ba-b636-ad9f5d07ff75",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e248933f-bdae-4c41-94b7-17e34dba8a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037bcf36-7f6e-41f4-9294-71940023aa44",
        "cursor": {
          "ref": "b64262cf-4634-45c0-8cdd-607014475ee2",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "66bca3c6-44ca-486b-9539-6fb7a58558b2"
        },
        "item": {
          "id": "037bcf36-7f6e-41f4-9294-71940023aa44",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "15802c14-09ab-40f0-a791-f17d0b2bd571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d767f24f-a2a4-4cd3-8c07-a2806bc5c46e",
        "cursor": {
          "ref": "c3ae55fa-4814-4a5a-8aa4-bb8d2034d1ca",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "32024ddb-2d92-437b-aa04-e46bbe582052"
        },
        "item": {
          "id": "d767f24f-a2a4-4cd3-8c07-a2806bc5c46e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "87390094-952f-4150-b2de-fbd7234ace0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3beafa-0eb6-4c48-9e18-8272f0cb02ec",
        "cursor": {
          "ref": "2a37e6ab-4247-4de7-a430-7c4abfecb4ff",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5ad066a0-47dd-4fb6-8f1f-22509dfe07bd"
        },
        "item": {
          "id": "1d3beafa-0eb6-4c48-9e18-8272f0cb02ec",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "619c6e6b-5253-47f0-88c7-55c10b343719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5fae3d-92c3-4148-af11-b2f8c8ccd9c5",
        "cursor": {
          "ref": "29ad7b76-0417-43de-bcb4-5fdb19928ab8",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0e0a7ba0-f5f9-4bbc-bd2b-6edcd40171df"
        },
        "item": {
          "id": "5d5fae3d-92c3-4148-af11-b2f8c8ccd9c5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cb1cc1b4-8848-4f0a-b5dd-1691408e29d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e5fd01-92d6-401c-a338-fdf444b42630",
        "cursor": {
          "ref": "fe08aeb1-ccb2-4b51-b7e1-e1dc7fdb75d4",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "95f54842-f6c0-4644-b4af-b3ae2f3719c1"
        },
        "item": {
          "id": "20e5fd01-92d6-401c-a338-fdf444b42630",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cd0ebc23-d55c-444f-bfe9-78c49ea80c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d573506d-0e7b-4775-9045-2328c338770b",
        "cursor": {
          "ref": "27f064c2-14ef-4d6a-83c0-5866c74fb134",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fdbb37b6-d305-4691-8993-42ac3bbbef15"
        },
        "item": {
          "id": "d573506d-0e7b-4775-9045-2328c338770b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bc8441bc-b5a1-4dc5-8190-b57b675047ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aadf4734-bb8e-449b-b8c7-e1e8bc9d529c",
        "cursor": {
          "ref": "81b837b1-4ce0-4667-950c-9db8231ea8e1",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "670f4c5f-a0a6-4114-a594-a29496939bd2"
        },
        "item": {
          "id": "aadf4734-bb8e-449b-b8c7-e1e8bc9d529c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "30594318-fc10-48e3-b87e-265245a58101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "047c1aa8-e207-4de7-a42f-0eed92dcc43b",
        "cursor": {
          "ref": "02c66c39-56dd-4837-9f6b-ebfb02402ca7",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d82055a4-1548-4067-902b-87a1cac4aee1"
        },
        "item": {
          "id": "047c1aa8-e207-4de7-a42f-0eed92dcc43b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "26a63d4b-4004-427b-93aa-2fcd5d5e4b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "6c491dd2-7389-428c-af08-99209a9cfd9c",
        "cursor": {
          "ref": "4727b2d6-b393-4d60-91e0-c66b30866584",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a06e04a7-abc7-4464-93db-1b77ea9a1665"
        },
        "item": {
          "id": "6c491dd2-7389-428c-af08-99209a9cfd9c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "262b7030-5d21-4cb0-b5ba-69b3f6104a09",
          "status": "Created",
          "code": 201,
          "responseTime": 699,
          "responseSize": 719
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d499e2d-67d5-4efa-828d-130ad893322e",
        "cursor": {
          "ref": "b8b9502e-3bb1-4cbd-8ee0-875eb55d43ab",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dab0497a-dbfa-437c-a190-c601f488f861"
        },
        "item": {
          "id": "2d499e2d-67d5-4efa-828d-130ad893322e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "001ebbe9-311e-4cdf-acca-3938dfecbf99",
          "status": "Created",
          "code": 201,
          "responseTime": 697,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe8e7dd-b4c2-4fcd-83cc-65cb57547bb3",
        "cursor": {
          "ref": "20d07964-9ec0-4a18-89d0-8684005c10aa",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "45c48cdd-9348-4369-a67a-d8f6f9eb4f75"
        },
        "item": {
          "id": "abe8e7dd-b4c2-4fcd-83cc-65cb57547bb3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ae0d29bc-9240-4e76-955e-bbf497527ea9",
          "status": "Created",
          "code": 201,
          "responseTime": 650,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f00f38-0918-46df-a9ec-056fa89a147a",
        "cursor": {
          "ref": "633948eb-2a4f-4487-8f77-d39d7926650b",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cb76c29a-dcba-492b-be85-3cdf38fc56cb"
        },
        "item": {
          "id": "54f00f38-0918-46df-a9ec-056fa89a147a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1f05415a-faaa-403d-aecd-fc25240aabbb",
          "status": "Created",
          "code": 201,
          "responseTime": 678,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d079e84-24b9-49bf-82ad-21814f8d25bb",
        "cursor": {
          "ref": "85126f8d-310a-4fe5-90d9-100b0e68bfdd",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a66e36c1-2ea4-42d9-ac5d-4bb67181526b"
        },
        "item": {
          "id": "7d079e84-24b9-49bf-82ad-21814f8d25bb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "184c3321-2826-4d74-a725-5225be74b2c8",
          "status": "Created",
          "code": 201,
          "responseTime": 679,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "e919874d-3a29-4f12-9a94-da18a5f9d6ea",
        "cursor": {
          "ref": "65664d47-b90b-4963-a3dd-1f6d813cc13d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "56cac6c2-6c5a-45dd-8c25-fa1c526a8b4e"
        },
        "item": {
          "id": "e919874d-3a29-4f12-9a94-da18a5f9d6ea",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3ca92f85-0230-42c0-8f4e-677bf6c2f095",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e919874d-3a29-4f12-9a94-da18a5f9d6ea",
        "cursor": {
          "ref": "65664d47-b90b-4963-a3dd-1f6d813cc13d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "56cac6c2-6c5a-45dd-8c25-fa1c526a8b4e"
        },
        "item": {
          "id": "e919874d-3a29-4f12-9a94-da18a5f9d6ea",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3ca92f85-0230-42c0-8f4e-677bf6c2f095",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "22383346-57aa-4fee-accf-af020b747f62",
        "cursor": {
          "ref": "be7b0fba-58ff-4ad8-b93b-6179ddf620fb",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b26e9812-fcb7-4339-a06b-0d276f41fa78"
        },
        "item": {
          "id": "22383346-57aa-4fee-accf-af020b747f62",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c92b6165-860a-42e5-badb-d002dfce5d51",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "6276c850-1d71-4434-bff1-30a205ca793c",
        "cursor": {
          "ref": "96aa6cad-ca0c-47f5-9f18-df6448f85396",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b1189b9a-b600-4c0c-abff-41df755c7acb"
        },
        "item": {
          "id": "6276c850-1d71-4434-bff1-30a205ca793c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7c43dc80-a1b8-48b4-966f-abee9834f47a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "cba723df-91f7-45ab-acef-93019478c2f6",
        "cursor": {
          "ref": "3a3291d8-5d3d-40e1-abcb-4c05ed35df11",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "92c9ea0e-c2c7-4d69-8756-fcbb7077e411"
        },
        "item": {
          "id": "cba723df-91f7-45ab-acef-93019478c2f6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "376f304d-19f4-46c9-bf53-319582157cf2",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "567ca0f0-60f1-4f2d-be85-3effe90a2a95",
        "cursor": {
          "ref": "907717cc-dacd-4e9a-9fab-79edb47ccb9a",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "81b85a43-8bab-41b5-9ddb-00e36e11d723"
        },
        "item": {
          "id": "567ca0f0-60f1-4f2d-be85-3effe90a2a95",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5a452975-6f44-402f-8712-dd7799026049",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "26b31a99-dbbb-476a-8f52-a8270e352690",
        "cursor": {
          "ref": "84ec5892-63d8-4460-bc85-027640ee2b65",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ceb73fab-1fad-4661-b407-70c565cdfae6"
        },
        "item": {
          "id": "26b31a99-dbbb-476a-8f52-a8270e352690",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bb126c2f-0cb0-41a7-b4e3-8a53783e846b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "adeecf9e-b792-4f8c-a509-4e874579e4a4",
        "cursor": {
          "ref": "b27527b4-e17d-4348-b3db-742554d60590",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "474bdba6-b18e-4379-9734-862ac3a5960d"
        },
        "item": {
          "id": "adeecf9e-b792-4f8c-a509-4e874579e4a4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "94dfceee-55e0-410e-ab4b-646e4f41b71d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "99d9ef66-054b-4fd1-8f49-979bc735e006",
        "cursor": {
          "ref": "f8eaf55e-471a-48fe-bb59-1c114b272242",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "41e72b05-553f-48e5-aade-8e29e485b5ee"
        },
        "item": {
          "id": "99d9ef66-054b-4fd1-8f49-979bc735e006",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "91504fe0-af57-43b2-b4b0-47512afe2ed8",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "a5b6b537-3a8e-4cc8-8c3b-3206abf2be6e",
        "cursor": {
          "ref": "c2c72e87-e0ad-4540-9fd2-259a50162230",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "02211418-b754-427f-b042-b30d6048576c"
        },
        "item": {
          "id": "a5b6b537-3a8e-4cc8-8c3b-3206abf2be6e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f6318d17-a08d-430e-9674-5bf2fd65047c",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "51f385ff-055d-4a5c-b590-7f26ba6e9c3e",
        "cursor": {
          "ref": "75bfeb7b-c053-4251-ba9b-5fde21becea3",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9b5f7705-2094-4644-bd83-6f93f0f79fe3"
        },
        "item": {
          "id": "51f385ff-055d-4a5c-b590-7f26ba6e9c3e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4084253c-aa7d-4d94-a0c7-a945e2d56587",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "353d4a86-b8a2-4476-a62a-e68d14ec5bcf",
        "cursor": {
          "ref": "966a675f-01b6-411b-8770-edfa3705b1cf",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a0d00a1c-67fa-4fa9-ac9f-891c4a1afafc"
        },
        "item": {
          "id": "353d4a86-b8a2-4476-a62a-e68d14ec5bcf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "57faf429-1270-46e5-a38c-39a259d4ce53",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6f835d25-15d2-4017-9b97-1b0b686adb99",
        "cursor": {
          "ref": "d0b2d9cd-534a-47b6-a90a-659f398c753b",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6246c229-8d50-4f07-9b33-5e99f6bb47bd"
        },
        "item": {
          "id": "6f835d25-15d2-4017-9b97-1b0b686adb99",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d7b63614-69d7-469b-9321-e19469c9f132",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "71aadd36-8de7-470b-88e7-698f69b63c80",
        "cursor": {
          "ref": "1dee3e1a-6f75-4486-b3f1-39931210ea99",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6f9e9cf9-c50d-4311-b28a-b83cc0e14a38"
        },
        "item": {
          "id": "71aadd36-8de7-470b-88e7-698f69b63c80",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8368d7da-65f4-4347-8084-5de8784f0fba",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "76da81fb-9f6b-4d0e-bb74-a070958ffea9",
        "cursor": {
          "ref": "1803e7cc-7491-464d-90d7-312c39d74045",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "191c7de3-bec0-41bf-9e8b-66108eeb880e"
        },
        "item": {
          "id": "76da81fb-9f6b-4d0e-bb74-a070958ffea9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "362314f5-a710-4dfb-99f5-3ce43f23376f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "1ff0eedb-d3b2-43d7-9a71-2357e1d3d3ad",
        "cursor": {
          "ref": "f2a83a26-eb71-46db-a927-04715781dafc",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "01ce68f0-6e9d-4bd7-b235-f1cead03de74"
        },
        "item": {
          "id": "1ff0eedb-d3b2-43d7-9a71-2357e1d3d3ad",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "16ad28ec-019d-4e4a-ba7f-532a09bf6fd4",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "77a561e0-f231-4892-b839-2c50035cf0e6",
        "cursor": {
          "ref": "4562bada-0c4b-4db1-b380-73cc4e2d24bd",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b3c6dc57-fa29-4595-b76b-6e5bc827f5a0"
        },
        "item": {
          "id": "77a561e0-f231-4892-b839-2c50035cf0e6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1cdc7e09-08e5-4592-9325-f76471246854",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "ab0cfa11-a866-4dbb-8998-067c391935fc",
        "cursor": {
          "ref": "a3c9d3e9-d46a-413c-a626-884b16517317",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b9075dc1-f481-4e2a-b572-40d419db2d06"
        },
        "item": {
          "id": "ab0cfa11-a866-4dbb-8998-067c391935fc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "705ff5b5-3287-420b-a5f1-eaf65c579c05",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "85bd3415-9a22-44ca-8160-fd9316d7112b",
        "cursor": {
          "ref": "eebbb76f-7b3e-49b7-85fe-6a3e836eff9c",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4bec46b1-1049-4d27-8931-2b6771bfd198"
        },
        "item": {
          "id": "85bd3415-9a22-44ca-8160-fd9316d7112b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d02014b5-6137-4153-8e17-7f43033dc730",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7e4de514-51e7-4de7-9875-1d4bfebbe85d",
        "cursor": {
          "ref": "bcb4425f-f1c6-481d-bd6f-f9ed72abcdcb",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "866c0df4-b635-4741-8db0-64ce46cd5dc8"
        },
        "item": {
          "id": "7e4de514-51e7-4de7-9875-1d4bfebbe85d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ad785815-b412-4f7f-b4f3-8666e6aa9c6a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "0cc2c4ab-95ef-450b-9b61-399478d68773",
        "cursor": {
          "ref": "5848bcc9-0d21-4a7c-971d-91986bb8c4f1",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ae6ff7fb-c8c2-4668-bc47-5d8368cd92fe"
        },
        "item": {
          "id": "0cc2c4ab-95ef-450b-9b61-399478d68773",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fe1a52da-bd11-4c2d-b652-2b7f0230068f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "8b2dc4b9-d713-4430-a426-fe1cee88fa09",
        "cursor": {
          "ref": "178683d2-0a10-4291-ae3f-e6e91f8cc710",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6d5eb0c8-5e0d-4156-9858-cefd93fbdfdd"
        },
        "item": {
          "id": "8b2dc4b9-d713-4430-a426-fe1cee88fa09",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "68bb7825-a643-4214-aa1d-679f95fb2a86",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "2f212b08-6bf3-443c-a9fe-71c571b3298a",
        "cursor": {
          "ref": "4de5c03a-1e4f-4dc3-803e-a5df62409562",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "45b76483-f737-4c0c-8f57-f64ec0d62e5b"
        },
        "item": {
          "id": "2f212b08-6bf3-443c-a9fe-71c571b3298a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "92315f5f-d913-4633-a5d2-a6388e96c290",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "937ef42d-13d3-41eb-9b7e-6e199a61c217",
        "cursor": {
          "ref": "e683dddd-d9c2-4243-8ed5-582754cd3d48",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4b2a0d9c-03fa-474d-b82b-e3d7026f476d"
        },
        "item": {
          "id": "937ef42d-13d3-41eb-9b7e-6e199a61c217",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a4725d4f-6ee8-4456-be09-73e286924732",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "5c1f6db9-a6fe-462c-ac0f-eb85c3ae18fb",
        "cursor": {
          "ref": "3d49810e-ec42-41ae-93cc-c5d12ffa2a8c",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "12eef9dc-c731-4128-ae9a-be9daff4498d"
        },
        "item": {
          "id": "5c1f6db9-a6fe-462c-ac0f-eb85c3ae18fb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "db6978e9-0e07-495a-93b4-c13bedcd7900",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "60aa5d76-aa9d-4d7e-b5f6-04884387bfac",
        "cursor": {
          "ref": "f0eebe6b-e061-4fe4-9683-aa56eb87f4a4",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5f29b4ae-6fab-4e35-b951-e94654591d74"
        },
        "item": {
          "id": "60aa5d76-aa9d-4d7e-b5f6-04884387bfac",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c8187271-e698-4ac2-baa4-67d79331f3dc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "589afe8e-0360-450c-a9a4-9b82c0327171",
        "cursor": {
          "ref": "1f89df09-df07-498c-8f66-b3a0ca1a4fe7",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ce9329d4-d204-4bac-bdfe-27d72464961e"
        },
        "item": {
          "id": "589afe8e-0360-450c-a9a4-9b82c0327171",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "142f2ffb-67af-4090-91f5-1dcc99ddb378",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "37759d5e-6512-4341-ad0b-2ccd8b13742a",
        "cursor": {
          "ref": "bfdd2bb4-a3d1-4ab2-a90d-95cd0ef1c364",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "dfd8fe97-b9b4-4df7-8294-9c3666b3e681"
        },
        "item": {
          "id": "37759d5e-6512-4341-ad0b-2ccd8b13742a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5082fa0d-8be9-4d8e-ac7b-b679a97e9eb0",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "a69e49a2-e7dc-4067-849a-b776f02bc7f2",
        "cursor": {
          "ref": "f05d3392-2878-4398-ac10-1234884ac1fc",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9b94d1f4-299a-4ba8-bf27-6b9242810014"
        },
        "item": {
          "id": "a69e49a2-e7dc-4067-849a-b776f02bc7f2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f3910787-596b-4aa3-8c96-1e0c8f167419",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "9be2425a-7dfe-41bc-a4ca-5ef3ce0db4bf",
        "cursor": {
          "ref": "8ae31267-bb60-4c54-8cc4-228a19698163",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bffa1b7d-6bec-49ef-ab05-0bd65d5dfb60"
        },
        "item": {
          "id": "9be2425a-7dfe-41bc-a4ca-5ef3ce0db4bf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cc6ec143-2fde-429e-8150-ecaa5b89f5f7",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "abef4d10-111f-4fa7-846f-3389f6c5fbf2",
        "cursor": {
          "ref": "b2dee6e8-9e32-4b67-8e8a-f0a038fb9e33",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "21d6c121-1487-47ff-8786-e5391430a944"
        },
        "item": {
          "id": "abef4d10-111f-4fa7-846f-3389f6c5fbf2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8da68ff2-fa04-4c09-862f-af87bf5b91b5",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "add0b17e-2b9e-4b66-8232-aaf21a91442c",
        "cursor": {
          "ref": "bff7ff14-219d-47ac-9e8f-664e28b49260",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "14a1196e-6da7-4edc-9998-d744091cc902"
        },
        "item": {
          "id": "add0b17e-2b9e-4b66-8232-aaf21a91442c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "71ad4e5a-85a7-4462-aed3-e880e98fc50b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b2949a72-63f8-4b2a-a5d9-d5c80a99b254",
        "cursor": {
          "ref": "2b978975-69b7-4d67-a264-138944f03d00",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9e96b212-3804-44c2-be84-332777eba2c5"
        },
        "item": {
          "id": "b2949a72-63f8-4b2a-a5d9-d5c80a99b254",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "79399d8b-29c4-4356-97ec-777203791d4a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "8117325e-f448-49c7-a64b-0cb7ebe4172b",
        "cursor": {
          "ref": "8749df11-744e-48c6-a8f4-a46ab0e46ac1",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "13b40b3c-f568-42b6-85bb-b28258953028"
        },
        "item": {
          "id": "8117325e-f448-49c7-a64b-0cb7ebe4172b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9e3a6f9f-59f2-4122-b337-1b0dddb8e337",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775108f2-cbc2-4df9-8882-c3bbc041a399",
        "cursor": {
          "ref": "1f261792-8a54-4c3f-805f-b07313fab9a3",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dafd4b96-03ff-4d46-bd16-5e536ee91b5c"
        },
        "item": {
          "id": "775108f2-cbc2-4df9-8882-c3bbc041a399",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "22ae7d9e-46a6-41c4-9cb9-dafd9b0b2b21",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2479183-0948-4631-adf3-657958b52a1b",
        "cursor": {
          "ref": "41c53b68-526d-4811-9915-a33c1b0c1dd8",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "20697d8f-f547-4deb-a80a-b6b1e0608598"
        },
        "item": {
          "id": "f2479183-0948-4631-adf3-657958b52a1b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "840ad090-8ad9-41c4-a1f4-af5bd43fb905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2479183-0948-4631-adf3-657958b52a1b",
        "cursor": {
          "ref": "41c53b68-526d-4811-9915-a33c1b0c1dd8",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "20697d8f-f547-4deb-a80a-b6b1e0608598"
        },
        "item": {
          "id": "f2479183-0948-4631-adf3-657958b52a1b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "840ad090-8ad9-41c4-a1f4-af5bd43fb905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb205ae-c0b0-422e-ad10-e29ed9b23b35",
        "cursor": {
          "ref": "04c3a9d1-93c3-49b2-9cbd-cfc4aceeb6e9",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2eca8894-a567-4b85-bcab-2d8190b647df"
        },
        "item": {
          "id": "1bb205ae-c0b0-422e-ad10-e29ed9b23b35",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e114635b-8a25-4e9c-b609-ed4fcb4999bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea0b2a5-0cc0-412d-af09-37cc4286ef2e",
        "cursor": {
          "ref": "382cb8bf-665f-4058-b290-5569d165d224",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2a4d4c34-d28a-4614-8913-a9887919bfb2"
        },
        "item": {
          "id": "3ea0b2a5-0cc0-412d-af09-37cc4286ef2e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9aca3dde-7a63-4cf3-926e-d2943cae21fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340f17c0-1489-4954-aacf-d12f1b03d3a0",
        "cursor": {
          "ref": "7f08c0da-92b3-4b25-96ac-1adb17dc8f9e",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6c32e462-b2a9-4c11-a112-f83069ce2825"
        },
        "item": {
          "id": "340f17c0-1489-4954-aacf-d12f1b03d3a0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ca0cc0ba-0c4a-4ca4-8aa9-1fb6301836b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3980046d-a3b1-4a50-9d04-bf74847911eb",
        "cursor": {
          "ref": "27bd7ec8-10cd-4e0e-b7b2-7d054b151431",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "697db7d5-52c3-4a56-9f6e-7991d98e0034"
        },
        "item": {
          "id": "3980046d-a3b1-4a50-9d04-bf74847911eb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "15aac054-f7e3-4e2b-9505-ea285f3d9050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512cd256-7f1b-44c6-93a4-601f0039a809",
        "cursor": {
          "ref": "6fd28767-6e3e-4a2b-887d-ace14c78a91a",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "64dbc08c-3152-4f13-a507-0dd91a629beb"
        },
        "item": {
          "id": "512cd256-7f1b-44c6-93a4-601f0039a809",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4ec38f3a-3a11-4992-a824-88fb57dbd3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01c39bf-8a11-4f77-bfa9-8231aca22751",
        "cursor": {
          "ref": "41db8c46-e5ba-4c9f-9734-e954aa721569",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "80572c24-3efe-4e2d-8083-771cb52a8417"
        },
        "item": {
          "id": "c01c39bf-8a11-4f77-bfa9-8231aca22751",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c4ceb919-9ddb-4410-9b1b-ed94ab15b01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40c48b2-a6be-44fe-95d2-8ed5d2c65ab7",
        "cursor": {
          "ref": "91b96224-03ec-4235-8353-e68c4195f20d",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e721c17d-621c-4b8f-9165-65343811530e"
        },
        "item": {
          "id": "e40c48b2-a6be-44fe-95d2-8ed5d2c65ab7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "489dce31-f8b3-442b-8d2f-7c940eeefb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f1892e-6ed3-4a58-a4b2-0c355d25c474",
        "cursor": {
          "ref": "ae24e036-827e-46cc-916d-44e781657ce2",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7cc530b3-80a4-4ba5-87ca-d1c3518fff82"
        },
        "item": {
          "id": "32f1892e-6ed3-4a58-a4b2-0c355d25c474",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d2e5dc4f-2b6b-4b42-a53a-8db26949f81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7cd67e9-1524-4634-8c44-d65b008e981f",
        "cursor": {
          "ref": "8be8342e-b3b7-4446-99b8-a666c3c31762",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c73d7c59-5085-40b3-b614-f0e83dfec46e"
        },
        "item": {
          "id": "b7cd67e9-1524-4634-8c44-d65b008e981f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1bc9c02a-fb68-492b-83d7-d07b011cdc8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad811f73-6226-4a5a-ac60-99819bb0a6bc",
        "cursor": {
          "ref": "4f6f98ea-d4c1-46ab-948f-ca6b288260ef",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "509bbf53-4be1-424e-a88f-d318b9a36b2c"
        },
        "item": {
          "id": "ad811f73-6226-4a5a-ac60-99819bb0a6bc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6987c01f-6ab1-42ea-b5e2-1837b873bc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66873005-73c1-4925-b59d-472cacb59fc0",
        "cursor": {
          "ref": "b0f67d12-e79a-46b6-9a79-515b6e12a806",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f9e4bb48-bad2-475d-9d2d-26f129a463ac"
        },
        "item": {
          "id": "66873005-73c1-4925-b59d-472cacb59fc0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "108dc4f0-8968-401f-9f28-529266f6b14d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6f5a68-930f-477b-9138-4142e96a4a0e",
        "cursor": {
          "ref": "33178281-33dc-441a-a083-f9da9e6f3129",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b394b040-7bc6-48cd-9e82-ce9682264f03"
        },
        "item": {
          "id": "8e6f5a68-930f-477b-9138-4142e96a4a0e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "75dcfbf0-89b3-4cc4-9e78-5d462f337e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61416fd5-241a-4def-a1c8-c194d6549b7e",
        "cursor": {
          "ref": "e37e916d-11d3-4ed7-972c-92bafee996b0",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6891b421-3c79-4d5a-8e66-1c07484769e1"
        },
        "item": {
          "id": "61416fd5-241a-4def-a1c8-c194d6549b7e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d1648cb2-0f51-4f9d-9041-b0fedc176f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25bf45b-f5f0-4ebc-8dcc-e9b4f5889467",
        "cursor": {
          "ref": "b70b5eb2-b1a1-4526-b170-973839f4c828",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "314360c3-a4d3-40a0-a1e9-b85786dae1e7"
        },
        "item": {
          "id": "e25bf45b-f5f0-4ebc-8dcc-e9b4f5889467",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c9e047d0-fa31-482e-a1e6-7b61d0bf008f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b6ff90-5dc4-43d6-a84b-c4c7aecb5b4b",
        "cursor": {
          "ref": "470de54e-c297-4ceb-aec1-ae8d07ed9cf2",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c83260ae-8ca5-488a-9f98-88460d3a284b"
        },
        "item": {
          "id": "c6b6ff90-5dc4-43d6-a84b-c4c7aecb5b4b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1bcdeade-9d6a-47b6-9985-a547d72b94d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100df382-fba8-4cb5-be9c-ec30063ef03d",
        "cursor": {
          "ref": "4e140e4a-366c-4949-a849-fa7ec3351073",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "77e8e87e-e352-4242-8685-ad54d978e3d4"
        },
        "item": {
          "id": "100df382-fba8-4cb5-be9c-ec30063ef03d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "16e83a95-52d5-49d1-ba6e-82774b25880b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a31410b-0adf-4ebb-a017-72535f7c9f50",
        "cursor": {
          "ref": "807cace8-4ad8-444a-b36b-2b8a05df6ed6",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "80615f7d-34a1-4acb-a45f-a9a755a6712a"
        },
        "item": {
          "id": "3a31410b-0adf-4ebb-a017-72535f7c9f50",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "4fd96bb6-973e-4799-930c-1ebbc7582bb4",
          "status": "OK",
          "code": 200,
          "responseTime": 678,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "e00cda30-0497-4156-8abe-814edeae3375",
        "cursor": {
          "ref": "d9e8db31-5c62-4b4e-951b-ef03792d26a0",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5762701b-fb45-47b7-ab5f-836784cd0f2f"
        },
        "item": {
          "id": "e00cda30-0497-4156-8abe-814edeae3375",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "84104603-5d85-4208-bbe9-18aa3e392289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6411a8eb-177d-4333-ae03-8ff48aae0500",
        "cursor": {
          "ref": "e31c219b-ab02-478d-b36f-5fcff2e912e0",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ee257234-46c2-4948-b1b2-39601fa01ff4"
        },
        "item": {
          "id": "6411a8eb-177d-4333-ae03-8ff48aae0500",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a68c14e3-f93e-493d-a7d7-a5b783b283fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f62772-bf6c-4752-993a-22b57afd0b65",
        "cursor": {
          "ref": "dbf62f2a-4ef3-40ab-af6e-3cbac0f6a6b1",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "565e3a84-c00a-4def-9fda-2e046e1ca6a4"
        },
        "item": {
          "id": "09f62772-bf6c-4752-993a-22b57afd0b65",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "977b0feb-1646-4393-9f7a-696dfdcda785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f416865-ea96-4271-8333-e3075eb77d0c",
        "cursor": {
          "ref": "f703d674-65e2-4b68-8d8b-0e7155c66c49",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f3417fb5-67bc-4abb-bc26-b257a6a8e13c"
        },
        "item": {
          "id": "4f416865-ea96-4271-8333-e3075eb77d0c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4dbaba0b-a381-4c3c-b96f-6635544965d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a7ab9e-9a93-492b-bce4-3b92ef5b6e58",
        "cursor": {
          "ref": "b7a195a7-d613-4b20-b6ef-b1332a8a1932",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dfafd677-5435-4f49-b8e3-3642e3368c31"
        },
        "item": {
          "id": "92a7ab9e-9a93-492b-bce4-3b92ef5b6e58",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "53307ab8-b4b0-4fd7-a5ec-a1667e21cd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdaf9c20-98f5-4241-9d86-055c399a4fbc",
        "cursor": {
          "ref": "35579d9e-fd17-400b-979b-76847bd17331",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3831e7dc-4f82-4463-a4fb-32950efd8d2a"
        },
        "item": {
          "id": "bdaf9c20-98f5-4241-9d86-055c399a4fbc",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f46bdbbe-6f18-4ef4-abe7-12879f7d6752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3569f2f4-22b3-48cc-b577-55bfe21dc118",
        "cursor": {
          "ref": "3413d918-0469-4cc5-ad00-5855115e7b19",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b9d17c3b-a311-4487-8c4a-99115151c412"
        },
        "item": {
          "id": "3569f2f4-22b3-48cc-b577-55bfe21dc118",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7d93c170-ff08-44e6-9f1e-739384137417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db51a8a-a617-4ef2-ba22-79e67342e929",
        "cursor": {
          "ref": "6998af9f-1c1f-4040-9fef-bda15559cc85",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8084e277-4727-4801-9c9c-b12f7119e100"
        },
        "item": {
          "id": "4db51a8a-a617-4ef2-ba22-79e67342e929",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9a7a2bfa-b65e-4dc4-9952-92e7c4f291d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51dffddb-bd2d-4f95-9057-b85e5ab8d742",
        "cursor": {
          "ref": "6e529a59-5166-4b57-a82e-c6d535bb4a6f",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1529465e-67d1-4b3a-acb9-39dcae2030a5"
        },
        "item": {
          "id": "51dffddb-bd2d-4f95-9057-b85e5ab8d742",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "85997521-38aa-4683-926e-a0738555e3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cff29d-bb61-40a8-a165-02d2f46fe7c0",
        "cursor": {
          "ref": "7cf226fd-cbba-4f8b-bebf-534314c99185",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "28f7863f-127e-463f-a7b6-fcc96b884663"
        },
        "item": {
          "id": "30cff29d-bb61-40a8-a165-02d2f46fe7c0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8e0f62d9-3d73-4500-8f5a-82c602ef79f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2b5792-bcf5-482e-907c-7d6c64dfb089",
        "cursor": {
          "ref": "c91a546b-0491-4d8b-b865-b7ad933fbf0d",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3c101022-532e-48d6-a10b-0902b1bfc055"
        },
        "item": {
          "id": "4d2b5792-bcf5-482e-907c-7d6c64dfb089",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9ba1fc15-04f7-4316-9e03-3eda7e8303aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7c4004-1da7-48f2-b270-33581516b51e",
        "cursor": {
          "ref": "ab39fdbc-2621-4c7e-9b3d-03d36b238c95",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b258905c-471d-4f28-a8cc-1575a579e2d6"
        },
        "item": {
          "id": "3e7c4004-1da7-48f2-b270-33581516b51e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "20214ced-36a6-452e-a85a-e80b98e49153",
          "status": "OK",
          "code": 200,
          "responseTime": 259,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e8f81b1f-ecca-4604-87be-9df13b01a424",
        "cursor": {
          "ref": "cb5177bb-5386-4eac-a9df-8ebd6272c177",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e1e70543-0d64-4323-9a14-e9e6f6abf282"
        },
        "item": {
          "id": "e8f81b1f-ecca-4604-87be-9df13b01a424",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7fe423d5-f785-4c4b-8305-9f02d02c10b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d00fa1-803d-4873-ad25-425fd45bbbce",
        "cursor": {
          "ref": "b54216d6-2f41-4d17-8d26-bc53fd74b76e",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6f58b506-3180-44b6-a590-a97aaeac2122"
        },
        "item": {
          "id": "e1d00fa1-803d-4873-ad25-425fd45bbbce",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d0f357bf-47b1-4474-b5b2-9254f4d9edb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21ec566-b430-47cd-8cf2-a2150ae67d3b",
        "cursor": {
          "ref": "e23ff327-6aa4-4134-8a7e-3299adb30c93",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "185a08de-d351-4f8a-a212-93744a72ab64"
        },
        "item": {
          "id": "c21ec566-b430-47cd-8cf2-a2150ae67d3b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "57d6f30d-93b0-4045-8114-a4346ae6b359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b29fb5-9e53-41c8-8b2d-1de70f272a0c",
        "cursor": {
          "ref": "5b600026-a7d8-4ac9-91b5-74d478271ba7",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dc87b330-2b14-433f-877e-4e4c2dab061d"
        },
        "item": {
          "id": "b1b29fb5-9e53-41c8-8b2d-1de70f272a0c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8cf37a52-ad4f-44ea-9896-48d8e2800264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b44d3e1-273d-4ab7-b823-b64b3a3fd82e",
        "cursor": {
          "ref": "bc3fd10a-da1b-407b-a43b-9f09b29a98cd",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "efd1853a-475d-467c-ae2b-f98284e70ed5"
        },
        "item": {
          "id": "5b44d3e1-273d-4ab7-b823-b64b3a3fd82e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8ac5fa69-1890-42a5-96dd-6a5c85540ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae652b1-d993-448b-93c3-0d2074b50327",
        "cursor": {
          "ref": "943da1ea-0607-49bb-9d09-c2135705392a",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "afe752e1-f64d-46eb-a10e-d2feb7514b6d"
        },
        "item": {
          "id": "7ae652b1-d993-448b-93c3-0d2074b50327",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "619ca3de-e362-44b3-80c9-77f026893375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0906c2d-01ab-4ad3-a26a-b293f2b35d20",
        "cursor": {
          "ref": "7d35b549-ecdb-4f36-838a-9a9b3843a910",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9fc931cb-15d4-4d8a-86c0-e53e2cd91103"
        },
        "item": {
          "id": "e0906c2d-01ab-4ad3-a26a-b293f2b35d20",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "143d2c32-48ce-4227-ba0b-de82aa070f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56805bb0-c4fc-4a33-8e21-67a55b99f7a8",
        "cursor": {
          "ref": "1bd4ba03-f2f5-4030-8d0b-fc87edefe482",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "41be30aa-1004-4ee0-8a64-d476a0bb3ff6"
        },
        "item": {
          "id": "56805bb0-c4fc-4a33-8e21-67a55b99f7a8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "439d5556-cfba-4242-a391-ca35ecf82623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 373,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279ac8fc-b6b8-436e-ad87-fb8d069199ba",
        "cursor": {
          "ref": "a2c777c3-d5ca-4750-ae11-f1f924db6c4c",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3b11d597-55d9-403d-9a6a-919fbece1444"
        },
        "item": {
          "id": "279ac8fc-b6b8-436e-ad87-fb8d069199ba",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8cad05ff-dc7c-4b99-afae-5acf3cb0d888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4c2182-d783-429f-90a1-21b4e590b23e",
        "cursor": {
          "ref": "1e4c865f-39ca-4d74-818c-c93541c8a1b2",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4ba793d9-6054-4cef-abd4-88bd81a9ead3"
        },
        "item": {
          "id": "ce4c2182-d783-429f-90a1-21b4e590b23e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a7154084-3780-4c72-be89-b56ac40e95df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5827283-70af-4642-a2e6-5f5e6a7de496",
        "cursor": {
          "ref": "c44acfcc-73b7-4dc8-94dc-51989c03681c",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d8e9f8aa-9442-48c4-a6d9-beef30f8f56b"
        },
        "item": {
          "id": "f5827283-70af-4642-a2e6-5f5e6a7de496",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "54616bab-5d04-4621-991a-5a15e5bbcc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447c951a-c672-4cb8-a07c-b0afdb1928a4",
        "cursor": {
          "ref": "77c835d0-e6fc-4320-9488-b69657dd281e",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "046401a4-bc9d-43d9-8967-679b0dab700f"
        },
        "item": {
          "id": "447c951a-c672-4cb8-a07c-b0afdb1928a4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bf60994c-ded5-4880-b450-880c75b6a4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdfd40d-42bd-41a7-8039-edc90a1e4893",
        "cursor": {
          "ref": "fb0d9b20-0bd6-4a47-acaf-e95a05f3ffa6",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "923eaade-b299-4c7a-8df1-d6ed73220951"
        },
        "item": {
          "id": "7cdfd40d-42bd-41a7-8039-edc90a1e4893",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6ea6bd79-1e24-4dc4-b92c-d47b8c779cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f9ef28-1651-4f3a-a8ce-ffbdcc29f32e",
        "cursor": {
          "ref": "1fedee35-9935-4903-8a33-413bc5192b41",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "eed2af4e-b957-40fc-8314-e804a504ae27"
        },
        "item": {
          "id": "39f9ef28-1651-4f3a-a8ce-ffbdcc29f32e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2c8f01e1-c897-4f88-bafa-cbe50b57a2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c471843c-291b-496a-b8b9-815acbae1d67",
        "cursor": {
          "ref": "ba7ca9cd-df6d-453d-ab71-8f86f646e711",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a7bfe0d9-7c74-4e98-9c30-c774b165d61d"
        },
        "item": {
          "id": "c471843c-291b-496a-b8b9-815acbae1d67",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5925a998-a03d-4b92-97be-6eddd694ffb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5947d131-596d-460f-ab43-8238bd1d2d41",
        "cursor": {
          "ref": "d03ad043-3888-43da-81dc-66b01684c7a7",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f8408856-922d-4729-a4b7-bf469202b5a5"
        },
        "item": {
          "id": "5947d131-596d-460f-ab43-8238bd1d2d41",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d4cbce4e-2160-4e92-bede-1e7ff5e2c468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72701b9-b35e-4085-8d26-55c157fac25d",
        "cursor": {
          "ref": "673f6cf1-031a-4128-b509-a9a1cccf6458",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e18271ee-9dce-4a06-8c6d-4e44a4a7774b"
        },
        "item": {
          "id": "a72701b9-b35e-4085-8d26-55c157fac25d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "844e315d-4d6b-415e-b350-ed9ecc9def22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c66933a-abd2-4ab1-bd04-e54060374676",
        "cursor": {
          "ref": "83e63a18-f7a2-4cd1-bb8c-64436f9b9d69",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "84f220d7-ddd5-4567-b885-dc28810dd0ad"
        },
        "item": {
          "id": "2c66933a-abd2-4ab1-bd04-e54060374676",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0a776c03-e670-4a3a-b886-10d738c8a306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 367,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ea6be1-b077-4c45-b8da-589abea94fdd",
        "cursor": {
          "ref": "ec9e80d1-709c-46ae-b2df-d7944829c8f7",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "64fe7b63-3df6-4565-a07e-b156ee2b3f76"
        },
        "item": {
          "id": "49ea6be1-b077-4c45-b8da-589abea94fdd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8b765e5f-84bb-4103-b176-8c720337d6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 366,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80267882-f1ef-4295-9435-85f8352e54a1",
        "cursor": {
          "ref": "9386b225-74b8-4dc8-8961-465f6f571316",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "afbd2a87-932a-4fc8-b707-b424b997a8b3"
        },
        "item": {
          "id": "80267882-f1ef-4295-9435-85f8352e54a1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8f87d012-d824-4ff5-9040-b53ff89b44e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a410e35c-b81f-4579-b5e4-463327e6ca21",
        "cursor": {
          "ref": "03caf168-73ab-48e5-a0be-3acdeab4ddf4",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5646de72-8148-437d-9c17-543cbbb2398b"
        },
        "item": {
          "id": "a410e35c-b81f-4579-b5e4-463327e6ca21",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "00a4cec0-ac93-456a-b434-bb4773663059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9ce9fe-9c99-48a7-9529-619295be6bb5",
        "cursor": {
          "ref": "35208c10-8dcd-49ee-8424-f146f18fea52",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ae8d4537-6edd-4ce1-ac0a-6ab9c0e6a9c6"
        },
        "item": {
          "id": "8a9ce9fe-9c99-48a7-9529-619295be6bb5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c5a1d165-baa8-466c-80b2-6b6254d292d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb99792-5593-4bea-876b-f92cfb9eef89",
        "cursor": {
          "ref": "0d7b5a6c-4aad-4ea7-9964-24db70921cae",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "21c061da-ac6c-4013-8f13-125584197fe7"
        },
        "item": {
          "id": "8bb99792-5593-4bea-876b-f92cfb9eef89",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "79776a24-e85f-4ceb-8d3b-e5530d0d1ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05861223-238c-42df-8486-fb0b562d1fa7",
        "cursor": {
          "ref": "6e92cb11-458f-46b6-8f2d-dce30168f8e1",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bc1974aa-6314-40e1-a61f-229ddf0ec58a"
        },
        "item": {
          "id": "05861223-238c-42df-8486-fb0b562d1fa7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "de238874-c4dc-42b4-860f-01f0d32338ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb8477a-701d-4056-a681-410571beff7d",
        "cursor": {
          "ref": "a04699a7-3e60-45a9-8744-8440cbbd98c3",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "886a8064-11ab-4ebb-ae79-88539f421caa"
        },
        "item": {
          "id": "adb8477a-701d-4056-a681-410571beff7d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "56c8b24c-a183-46ef-907e-1aed58c81f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dac340-b560-4f85-b986-65412df3b0e9",
        "cursor": {
          "ref": "581cf9c8-010a-4c34-96dc-9f81f9745326",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0918b5aa-176f-4c41-bbcf-94c09a4c421d"
        },
        "item": {
          "id": "87dac340-b560-4f85-b986-65412df3b0e9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0ff740a4-33d5-4e01-a1e1-a898367bc239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9e326e-1328-490d-b7bf-b521e4f8961f",
        "cursor": {
          "ref": "34206665-0789-40f3-85e9-90e9cee061ed",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b6d1f402-f4a8-4bf8-b8fa-908f6fa1bee4"
        },
        "item": {
          "id": "3d9e326e-1328-490d-b7bf-b521e4f8961f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4ad92629-50b2-40b0-8bb4-73b585409548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814fb226-d853-41ff-88ca-b4981a37b037",
        "cursor": {
          "ref": "27512718-a13b-45a5-b12d-c81e4bf59545",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ab734757-2423-4fec-b36d-8e3b203620b1"
        },
        "item": {
          "id": "814fb226-d853-41ff-88ca-b4981a37b037",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "77f50e05-829d-4e77-ad5c-0ae76e14b843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f8ffca-f4df-4f4d-b775-7e1d641e30dd",
        "cursor": {
          "ref": "8c5eda42-d1e2-45f7-9b21-24973e2461e2",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b967bff6-1dd8-4c32-9128-426209c7ff8d"
        },
        "item": {
          "id": "73f8ffca-f4df-4f4d-b775-7e1d641e30dd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4ecf044c-fa2f-4ec9-a73a-7b3bd3f44c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 454,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba0cc36-c61c-4090-9d1f-438a53f47953",
        "cursor": {
          "ref": "83fec3c7-dac9-4179-951c-6d993d8a1880",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e22eb72c-0408-4a4e-ab12-fbde3cc8d235"
        },
        "item": {
          "id": "6ba0cc36-c61c-4090-9d1f-438a53f47953",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ea593dd0-4ae3-4b17-8b5f-400e79f343fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66017696-cd55-434d-983d-5d4161a35a6c",
        "cursor": {
          "ref": "48ae01f4-f5eb-40e8-9353-26f1142915e6",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0dc8234a-8c1b-477a-8c5e-08293a7c6a99"
        },
        "item": {
          "id": "66017696-cd55-434d-983d-5d4161a35a6c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "93a67d8a-9ef8-47e5-afb8-85916adce88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc42771-d50f-4317-8acf-abb52b687332",
        "cursor": {
          "ref": "8bec3dd9-925c-4549-92f1-43d305d578ce",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9ba1ed06-a894-4ed5-950d-d187c49fb14e"
        },
        "item": {
          "id": "bbc42771-d50f-4317-8acf-abb52b687332",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "27b1900a-8c1e-4e8e-812f-0fe7069d263a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77e5366-0128-4b4d-9264-b0b27df41d8e",
        "cursor": {
          "ref": "677baca1-7d6a-41eb-ad80-0c730626f460",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "cee666bd-a59e-4a22-9839-02ea0bcb52bd"
        },
        "item": {
          "id": "c77e5366-0128-4b4d-9264-b0b27df41d8e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4f25c037-cbbe-4e3f-89bd-03e1389dab97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448de10c-9544-4564-99b6-4490a3b22515",
        "cursor": {
          "ref": "5fb8a863-e622-45a2-b6ed-252d66aa03ba",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c4c794fa-dc6b-4628-a85a-22849d57d1ed"
        },
        "item": {
          "id": "448de10c-9544-4564-99b6-4490a3b22515",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "11504df7-7880-4028-b9a8-437102f29f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fd37ff-fde7-450e-97f5-aacc3dbf7484",
        "cursor": {
          "ref": "81684a41-ec91-49f5-ac45-3a25f906cdfa",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7236dbd8-35d9-4295-9bf2-b5daefc0c4b4"
        },
        "item": {
          "id": "27fd37ff-fde7-450e-97f5-aacc3dbf7484",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cadf92f0-125a-4a25-b4a5-4930412e425b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49ccd8e-8c2c-41cf-9193-a11b7b19334a",
        "cursor": {
          "ref": "16712fcb-f494-4eb3-8153-cdab7ff24ca4",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f147c60b-3f9b-4096-87fe-928852a79fd5"
        },
        "item": {
          "id": "f49ccd8e-8c2c-41cf-9193-a11b7b19334a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "64527af2-fcc3-4b92-8f2a-aa48486bb136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d18340-0da6-40da-b17f-615f60f96130",
        "cursor": {
          "ref": "b3288c71-e444-4549-8bc0-13f2199cd85d",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "322a5755-ba41-4617-a097-3d8594029790"
        },
        "item": {
          "id": "09d18340-0da6-40da-b17f-615f60f96130",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "80fb7a25-038b-4d01-ad45-e42fb2f69b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796b30a3-396c-41d7-ad1d-d4b55a106007",
        "cursor": {
          "ref": "2a0e1620-1cef-4254-8e10-625b38909f8f",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "58e3bb2d-df8c-47d4-9d94-c8fe0a26e3f6"
        },
        "item": {
          "id": "796b30a3-396c-41d7-ad1d-d4b55a106007",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0e24a252-2f05-4839-9c8e-dd1508845c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd1265c-68f5-4758-929d-1103b706ae74",
        "cursor": {
          "ref": "fa286c3f-5168-44e6-8d57-a68f851b052e",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "efd6b1b4-adb4-4804-9b74-93461d214153"
        },
        "item": {
          "id": "4dd1265c-68f5-4758-929d-1103b706ae74",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "dde1a5cf-0cf6-42f8-a255-26f555adc48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27791f70-f74a-461a-80f7-0963238de210",
        "cursor": {
          "ref": "509e5600-92bc-4257-91a3-0ef21980f411",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f1886649-9621-4e3d-9685-512bdfa03c79"
        },
        "item": {
          "id": "27791f70-f74a-461a-80f7-0963238de210",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6146c43d-259b-43eb-b075-11a416ad6e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc70c73-1c66-40ec-bf8c-b581ea9091fb",
        "cursor": {
          "ref": "5cfeb67c-5889-468d-ae7c-cf3266f1658f",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "86224ee3-465a-4abd-9403-4141bb8ed1cf"
        },
        "item": {
          "id": "acc70c73-1c66-40ec-bf8c-b581ea9091fb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b3272f16-7928-4863-a3a5-c135e218d0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a106d0a9-937d-4c26-9e5a-e9499549e17e",
        "cursor": {
          "ref": "53349e64-7cd3-4a20-b819-bbeeac898cd1",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "33e53fe1-5b2d-48d7-b493-17ba1fe3ebab"
        },
        "item": {
          "id": "a106d0a9-937d-4c26-9e5a-e9499549e17e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c9884681-0fe8-4e43-9aef-95aedfb100d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a16d79b-cb47-4d35-aca4-b9f0b4a00f27",
        "cursor": {
          "ref": "c7b03c5e-fd3f-425d-97c9-96efeec5fbef",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f5054f8f-611d-48dd-b9fd-5e68496e0493"
        },
        "item": {
          "id": "5a16d79b-cb47-4d35-aca4-b9f0b4a00f27",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "58e5f92d-188c-41cc-b649-210878d761c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f04519-10c4-428f-a476-94de9c1392f5",
        "cursor": {
          "ref": "4584ead8-aef4-489c-9933-bbf34078906c",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "01d0dab7-73f0-4832-bf45-d63f6b3b09ef"
        },
        "item": {
          "id": "16f04519-10c4-428f-a476-94de9c1392f5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3eef3a2c-92fc-4892-a972-deb186918340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18a784a-a7ec-4580-93a3-7a4863d65690",
        "cursor": {
          "ref": "21abc6e7-8d89-4bcc-b22a-e6284f010b26",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2f149bce-33d6-459b-b7f2-81c8b13b85e0"
        },
        "item": {
          "id": "c18a784a-a7ec-4580-93a3-7a4863d65690",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bdfc0ac5-be36-45d1-b52a-080e4711211d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0faf80e9-d861-4bbf-bc4a-dfb8437995da",
        "cursor": {
          "ref": "1f5bf7bb-7cc6-4c06-9e41-c94a065cfff8",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3f310070-7cde-4b69-b5b5-ea6f5669e22a"
        },
        "item": {
          "id": "0faf80e9-d861-4bbf-bc4a-dfb8437995da",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "84889101-7376-41e2-9254-df31a3cc13a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33580005-57f3-4607-9c9e-4f1f51df789b",
        "cursor": {
          "ref": "531f359b-9c77-43ba-82d7-8b2b7c3daa64",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "10ce45a9-6eaa-48e4-b2bd-013a36c179bf"
        },
        "item": {
          "id": "33580005-57f3-4607-9c9e-4f1f51df789b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0f45dc69-fc09-4eca-8649-cf5d4c64c699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c044e8-b187-4e45-8477-a95b402a895a",
        "cursor": {
          "ref": "72a5f26b-3909-44d9-ab4b-d6263117c65c",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "52cb3cbd-c488-41e2-8ab0-f645e5258709"
        },
        "item": {
          "id": "82c044e8-b187-4e45-8477-a95b402a895a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "573a959a-5ae0-4529-b439-4f18d34aca29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6edd7ecc-7496-4564-a2b2-f11926cbfde2",
        "cursor": {
          "ref": "4cb37c36-16c1-4f12-bca1-f43e36bf1b15",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "84aaeab6-cccd-44e2-afce-08f1bd884d8d"
        },
        "item": {
          "id": "6edd7ecc-7496-4564-a2b2-f11926cbfde2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "710554e8-4b70-4a56-91b6-7a5b9d9d1f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed229d29-7401-4e7c-a6d7-2967a1b8aab1",
        "cursor": {
          "ref": "d0e0074b-dbec-4ad9-84ed-7cae251ef836",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e45a95e2-571c-47cf-8a41-4a0b8ebea519"
        },
        "item": {
          "id": "ed229d29-7401-4e7c-a6d7-2967a1b8aab1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2caa6beb-6077-415f-9a60-ec1120a57406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1bb1db-de99-4454-98b3-138643044f2a",
        "cursor": {
          "ref": "0dba12e9-e580-43bf-90c5-e79f1c066447",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c9a63dad-7fa6-4de7-92d2-02bf23e1d5b4"
        },
        "item": {
          "id": "4d1bb1db-de99-4454-98b3-138643044f2a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0a606bec-b150-4901-bd1e-b5099ddfa686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7492e440-13e1-44f0-b58a-6893e16a06e8",
        "cursor": {
          "ref": "73355b20-53fc-49be-a96a-424a3be3bb6b",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c4f33129-c82c-432d-b398-f45d043b10a8"
        },
        "item": {
          "id": "7492e440-13e1-44f0-b58a-6893e16a06e8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "478ef45c-3cb6-46c5-9e78-35331b13bbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71855918-a0e1-42cd-b59d-dbb2be179535",
        "cursor": {
          "ref": "c94b5adc-8d8e-4c79-bbed-cdee023653c3",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3fff2edb-add6-4b36-b41a-dfcd48c62b9c"
        },
        "item": {
          "id": "71855918-a0e1-42cd-b59d-dbb2be179535",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "61a05c19-d8a3-4478-b904-d668905c11ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32fa3c28-46b5-4b03-a097-7555e8a1f81d",
        "cursor": {
          "ref": "7d003917-3e56-4cee-b46e-2288dd1876cc",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6f72377f-c6ba-4cf2-ab8f-5459ac0b0da6"
        },
        "item": {
          "id": "32fa3c28-46b5-4b03-a097-7555e8a1f81d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "68101cf8-a149-4e79-a00f-7ffcde2d9cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e245f0-35f0-4773-b52f-76aa6830ec56",
        "cursor": {
          "ref": "bc4cea48-8774-4ff3-949d-7bf9f55ae4b8",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7543db60-fbfb-4f9a-a647-0411739e02af"
        },
        "item": {
          "id": "f0e245f0-35f0-4773-b52f-76aa6830ec56",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dacbb8c6-3d34-41ec-bf4e-d4d133f0c99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddab5dbf-64b6-409e-a900-0d8af0862855",
        "cursor": {
          "ref": "a4664578-f0d1-43ac-b138-743c0232a15a",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0aa45c25-b70b-49cb-8851-80e071e0e788"
        },
        "item": {
          "id": "ddab5dbf-64b6-409e-a900-0d8af0862855",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3d8eb8a2-cf63-4f41-8da6-56bf35f5c992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec0980c-9d1d-453b-af78-0ba2d36c5029",
        "cursor": {
          "ref": "457fa8e5-f63f-441c-8cba-66a3d63c2d11",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b9af9bf8-066d-4d9e-81ee-a264d764406b"
        },
        "item": {
          "id": "bec0980c-9d1d-453b-af78-0ba2d36c5029",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7b7d715c-08a8-4b33-8683-f053276e034d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fe75d2-eece-4cf6-aaae-e9c30150f222",
        "cursor": {
          "ref": "246c9473-e7f9-4931-8ef5-08dee9bfef44",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d9be46cf-ebae-4fce-b95b-0c39c5eb1dce"
        },
        "item": {
          "id": "f3fe75d2-eece-4cf6-aaae-e9c30150f222",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "08dd2aa1-3465-448a-bd90-833280ba5a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd0d0ef-5710-4819-bb21-138a389d4870",
        "cursor": {
          "ref": "1da7d17a-903d-4df9-9d09-a902a9af85cc",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "13e6ded3-2730-488c-ae04-e43b9445dd3e"
        },
        "item": {
          "id": "abd0d0ef-5710-4819-bb21-138a389d4870",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "68bfe397-b871-47e4-86ae-d0cd901c4f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617ca732-9ef0-46b5-9122-eff29bc55120",
        "cursor": {
          "ref": "058a53fc-73c0-45d0-8643-c18b6ae0d982",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2965f9df-79af-4cff-99a4-81c597e304da"
        },
        "item": {
          "id": "617ca732-9ef0-46b5-9122-eff29bc55120",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f3e745bc-a276-49cc-9fc3-76cfa0ed8ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce31194b-ddda-4cee-88a9-388001d5accc",
        "cursor": {
          "ref": "e379f27d-eb6b-44c5-8561-656b5e411b38",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6c2c7594-2a9c-4772-999b-67526d80753c"
        },
        "item": {
          "id": "ce31194b-ddda-4cee-88a9-388001d5accc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f0c7e9ce-1eb2-4b76-ad1e-9a5788716d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38744b5e-6077-4230-8006-f752cb8243d1",
        "cursor": {
          "ref": "bc1fdf43-3125-4fce-a627-24cd5823bbc2",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "21652b97-69f7-4620-8bc9-3de2da93c0c5"
        },
        "item": {
          "id": "38744b5e-6077-4230-8006-f752cb8243d1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9c48f431-abe5-4e6d-92ac-9b3efebba6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5d4fe4-18ad-49c2-b47c-e09e7760a4a4",
        "cursor": {
          "ref": "0b712a30-8d6e-42df-99a5-d6f8677431ad",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "632636c7-9750-4f4f-a148-b6b93997e091"
        },
        "item": {
          "id": "2c5d4fe4-18ad-49c2-b47c-e09e7760a4a4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d1e7d247-0da3-4ecc-a7a3-f29702a329a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871c405e-dc68-408a-8c9c-0c83317a4b65",
        "cursor": {
          "ref": "a2c49c34-cf17-46f3-99d3-35b2f3d193ba",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1ce2ae21-903b-4314-90ea-528259019cb7"
        },
        "item": {
          "id": "871c405e-dc68-408a-8c9c-0c83317a4b65",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "acfd080b-ebf2-4679-8ef3-89b5f487dac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b68075b-bc23-4ac0-bbc9-097b202bfe72",
        "cursor": {
          "ref": "d7691827-085e-46b6-a5b8-9ea9533ba9a8",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "392dd222-7ef0-40f7-9992-1ca962ce7493"
        },
        "item": {
          "id": "9b68075b-bc23-4ac0-bbc9-097b202bfe72",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0ed0d07b-4082-4085-8286-86b7e83de643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfd1c92-2578-4bfb-bf43-a110e6dcfd95",
        "cursor": {
          "ref": "f9f4136f-9d19-409b-8c91-41f65be654bb",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "10ac0973-7c55-4e95-bde9-568f578049d7"
        },
        "item": {
          "id": "0dfd1c92-2578-4bfb-bf43-a110e6dcfd95",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "85085a43-a3bb-4552-9498-f7202a43fed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d2aaa5-4d52-4c7a-b6a9-8fdbd2ca0b5f",
        "cursor": {
          "ref": "591062b4-91f6-4210-82cd-17aff1437212",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b24d8685-fad9-47f6-a832-49257f2fac11"
        },
        "item": {
          "id": "91d2aaa5-4d52-4c7a-b6a9-8fdbd2ca0b5f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "94842ba0-4885-47b9-a88e-92e50fb46fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a280b8f-af28-40d6-adb5-114f5b90c5fb",
        "cursor": {
          "ref": "73afbc47-8737-4d5e-a662-cca93a4febce",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a9a6d275-fca7-467f-871e-1a99067de4ba"
        },
        "item": {
          "id": "3a280b8f-af28-40d6-adb5-114f5b90c5fb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "24a7de1f-e7c0-4089-88ab-62ba56e90862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d19ea9b-96f0-46c0-b27f-e3775cd99407",
        "cursor": {
          "ref": "34dbbc13-cc7e-4f9c-9b8b-1e1f14e30a1b",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cd5b88b4-bf30-48bd-be75-0d69cd90782e"
        },
        "item": {
          "id": "1d19ea9b-96f0-46c0-b27f-e3775cd99407",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8f6a10af-066f-42c4-939b-cf463c06ddf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3312cab-2eb9-49b6-87bb-38eca89fcb78",
        "cursor": {
          "ref": "a05e875d-83b1-43c4-81ca-66a04776951b",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5efc1489-0864-4240-9d6a-9d43b26d5b10"
        },
        "item": {
          "id": "c3312cab-2eb9-49b6-87bb-38eca89fcb78",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b296c3fb-768a-4a20-ab59-eb9bd66e1e1e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242d492b-cfce-4657-9726-b2d9467112f1",
        "cursor": {
          "ref": "4b923408-a9df-4984-b294-4f912369991c",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "df71d734-bc36-446c-b8b6-3e2110cd35cc"
        },
        "item": {
          "id": "242d492b-cfce-4657-9726-b2d9467112f1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5e021dc0-5675-49f9-bba0-fda2b26feb07",
          "status": "OK",
          "code": 200,
          "responseTime": 270,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9ed684-6773-44f4-a346-18154ec840bc",
        "cursor": {
          "ref": "8f33bf13-fe04-443a-82dc-d4b9f32338fd",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5dcc593d-3412-4571-bb1a-1280555cbfbd"
        },
        "item": {
          "id": "aa9ed684-6773-44f4-a346-18154ec840bc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cecc4ce2-1410-465c-82db-00d5d3fbf7cc",
          "status": "OK",
          "code": 200,
          "responseTime": 657,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c802877f-31b9-4fad-bc5a-b225cfc57831",
        "cursor": {
          "ref": "1566d82a-6fb0-4656-a9ba-27968507cbed",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e1b86118-9fe1-4d5b-b19a-a43b1fb93350"
        },
        "item": {
          "id": "c802877f-31b9-4fad-bc5a-b225cfc57831",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "257b7a6f-23c9-4eed-b770-636188b32bfe",
          "status": "OK",
          "code": 200,
          "responseTime": 621,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d90d90a-0ba9-498a-bcf3-87a4a00cd6cf",
        "cursor": {
          "ref": "1d5a13eb-c41f-46d1-9f40-514eb5fe1691",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ab2f9fc7-3ea6-4457-ac0d-8aa01b2804ca"
        },
        "item": {
          "id": "0d90d90a-0ba9-498a-bcf3-87a4a00cd6cf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "623d6d6c-e7cc-4927-afb3-e65965ba1466",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d90d90a-0ba9-498a-bcf3-87a4a00cd6cf",
        "cursor": {
          "ref": "1d5a13eb-c41f-46d1-9f40-514eb5fe1691",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ab2f9fc7-3ea6-4457-ac0d-8aa01b2804ca"
        },
        "item": {
          "id": "0d90d90a-0ba9-498a-bcf3-87a4a00cd6cf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "623d6d6c-e7cc-4927-afb3-e65965ba1466",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d90d90a-0ba9-498a-bcf3-87a4a00cd6cf",
        "cursor": {
          "ref": "1d5a13eb-c41f-46d1-9f40-514eb5fe1691",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ab2f9fc7-3ea6-4457-ac0d-8aa01b2804ca"
        },
        "item": {
          "id": "0d90d90a-0ba9-498a-bcf3-87a4a00cd6cf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "623d6d6c-e7cc-4927-afb3-e65965ba1466",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d028af2-9806-407f-aaae-2a12866d0493",
        "cursor": {
          "ref": "86b005f1-62b1-47bc-8e67-bd07502fd7e8",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3b361058-cddf-4ced-aa1a-41dad77d0e7d"
        },
        "item": {
          "id": "3d028af2-9806-407f-aaae-2a12866d0493",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2598f94d-4f67-4af3-8433-4814dd00f6b2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38064217-45c3-46dc-b307-ec619094eb8a",
        "cursor": {
          "ref": "9a3be07c-3c1a-46a2-8850-b34052443e7d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7913cc4a-5e07-4527-be79-7340f4c1bfc5"
        },
        "item": {
          "id": "38064217-45c3-46dc-b307-ec619094eb8a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9ac3c214-b6a3-4f47-9332-b84786fca084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "38064217-45c3-46dc-b307-ec619094eb8a",
        "cursor": {
          "ref": "9a3be07c-3c1a-46a2-8850-b34052443e7d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7913cc4a-5e07-4527-be79-7340f4c1bfc5"
        },
        "item": {
          "id": "38064217-45c3-46dc-b307-ec619094eb8a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9ac3c214-b6a3-4f47-9332-b84786fca084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "360c3584-25be-4464-83ac-28895595bddc",
        "cursor": {
          "ref": "aa86941d-ebae-4d26-8973-fbf3184b14ae",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "07e20529-9af5-4652-9162-6ccb02b7e2a9"
        },
        "item": {
          "id": "360c3584-25be-4464-83ac-28895595bddc",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "5167a0e5-c1ef-4fe8-aeed-5e95d6b04a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "719af34f-c872-4348-98bc-d922f4bd0d62",
        "cursor": {
          "ref": "813a2e4b-bc18-433f-b052-d940335b9b12",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ea663cfa-83c9-4e8b-89c5-002b986a7f2e"
        },
        "item": {
          "id": "719af34f-c872-4348-98bc-d922f4bd0d62",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5756a8ad-186a-4d1f-8ca4-96df8bc64e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "719af34f-c872-4348-98bc-d922f4bd0d62",
        "cursor": {
          "ref": "813a2e4b-bc18-433f-b052-d940335b9b12",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ea663cfa-83c9-4e8b-89c5-002b986a7f2e"
        },
        "item": {
          "id": "719af34f-c872-4348-98bc-d922f4bd0d62",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5756a8ad-186a-4d1f-8ca4-96df8bc64e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "59e49104-f91a-4f0a-8a50-9767c547bba0",
        "cursor": {
          "ref": "ef791d62-881b-46d7-b1ce-a8d47e5128c1",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2d8ae8c8-83c9-44b8-a715-30c8b07d9f90"
        },
        "item": {
          "id": "59e49104-f91a-4f0a-8a50-9767c547bba0",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6e710063-9cbd-4a31-ae10-84445c41f9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}