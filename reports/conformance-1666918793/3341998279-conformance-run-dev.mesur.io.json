{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "614da26f-4b5b-4feb-8831-89279e8d1e47",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f93c84a2-0299-4be8-843b-15b8543beaff",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a8766f0-afb2-41ac-b805-8c2727c62b6c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b4fb8f80-214e-40f8-9520-d317ca3c56fa"
                }
              }
            ]
          },
          {
            "id": "f558ffcf-1264-44ba-80f7-213c9fa42b15",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d74eff6b-c09e-48c8-b69a-f0f8a63ee304",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d29aabc1-a1d0-46f1-8b80-7762143c5942"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d9ab72a7-1e9f-4eb2-9ff6-e3914ce10784",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f5928c37-4291-44cf-9f9e-f506500ad463",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7dced691-072f-4646-a39e-3847bdf196f9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5667f015-c723-4a94-a4d4-23240d03ec12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1901a215-d37e-4c5f-ad63-ff7e8dda48ae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90535252-71f6-44e0-a026-7d3d74961ea1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39a43837-90ff-4bc8-b482-9b3b5ff1c75d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f8003ba5-81b3-4613-8656-616aa4c61271",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc02d0a7-1e4a-47f6-8be7-a4c49b6e16de"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac659685-bde8-4053-ad1c-a37fc0e2f2e1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "84553a0b-8bb4-45c4-af81-5c6a6dd203c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d4cc57b-25a5-439c-b5a8-a5b6dd9f839e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93d8393b-3087-456b-8c69-c40559378b57"
            }
          }
        ]
      },
      {
        "id": "14a8604a-ea00-440e-9758-94dc95d5c4b4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aff309d1-a1b3-44eb-bda4-a95ba5bd7289",
            "name": "Negative Testing",
            "item": [
              {
                "id": "092fc637-3c86-4fa8-9746-1f5626f05418",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "94da2612-2632-472c-9f9b-d57982a62539",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b275ba0-703d-4b84-ad45-c44baf7fa923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "beb35f75-e15b-47d6-bfc5-3c808db6400a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a718e215-592e-46d3-9c36-621a696a8f73",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9747835-e608-402a-9c5e-9a031723eb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7d35f58-0768-4ef1-ba68-ac70fc00273e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8da5968-57a9-49cd-95fd-04ca04f6e379",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ef0592-f561-4031-a4b8-4180041f4b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c01c705f-9151-4013-aa03-57a362dc8dc5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "863894e2-60c9-4afd-af7b-7ea44250a4c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc2a4d2d-afca-4f60-8407-1f4c337aa7a3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d158d4b1-b761-44a3-b107-550040455225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f51eec3f-43b7-4763-89af-c41bdee648e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc63949-5b4d-4629-8099-131d51d87a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a30aab87-2dfc-45c3-a549-d41eeffff59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df65a985-9747-497f-8f51-e10d76b09ab4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5c7b04-fdd7-42dc-bcc8-163883fb39b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3cef3ff-f355-4d13-9eb5-d3f1da0a45a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453d8655-9d85-401a-897e-e24c2a9aa4b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7ede270e-769b-4f2b-a973-59341f146dd9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4fdd9bf7-97f7-493c-bb81-519a739c71d5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d4463b36-f66f-4d59-afaf-c7fd7f6f97f9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "434c1178-3845-4c5f-a5a1-a8aeb3a8c72d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4f9e8368-018c-4f6a-b01d-a1d985cfe17b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c7b1b87-c3fc-475c-aead-6272ae948471",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "37c3a820-d18c-4762-bbba-a33839c7cf3a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d36b076-910a-4078-874c-ed57a4f3ed0d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c137be52-02af-4f7b-9cd7-8a15723cfacf"
            }
          }
        ]
      },
      {
        "id": "a4feba2e-a303-4c5a-906f-90b0f63f24ba",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5175bc08-6286-43cc-bdcd-67c0e428974d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "983f102e-3be0-417a-9546-bd7016f17354",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7a44e613-c87a-4e86-860d-5bed2dd31559",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620370f9-bced-4adb-a4a7-3b9e698730a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8009ad0-fa90-4583-9548-9142c332a43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b681cc4-aa2f-4829-9747-ec5caa60d30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5662d6bf-980d-4346-aef3-0c6fb0ed8e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0131b2cd-fb18-4661-b9b4-a7c29b84d1a1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabbbcb5-198a-4638-aef2-211a9f849a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22ccae5-450a-4624-9406-2f319d988942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e27dbbe-ffb7-4b05-8f66-9cf06765bf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c270d651-cafd-4d27-bf3c-a85f70524b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b179734f-95e3-43dc-94da-dd54d47b8481",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede5fe6a-63eb-427a-9bea-e2de388a4220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e776d47-9521-45d5-88a7-b668f4cbde49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc55eac5-25c9-4ed5-aac9-21e1df7ee75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "645c5634-fdc8-4ffb-9d53-d5812dc9e31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84666bfa-aa4b-4536-b727-33412a68125e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8dbd62-252f-4e70-9a03-9605f622c106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac85889-172e-4754-9014-699f010832cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786ff73e-81ee-4a85-b827-c6d431111a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fa3a162-3769-47ea-862a-e0925a6ec826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c107ec8-ee93-49a7-89a2-8deaf832b731",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa4defe-da31-437c-88c6-78012067d59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c454de4c-073e-43a3-ac0f-bd45614a40c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee6f7d6-0625-4a4f-a950-36b7cddb5e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65585d45-5b1a-46b6-b5e8-e2112c18e3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b10b93d-8242-41ba-8b33-121477b0a048",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fbd26f-bb02-4cc4-9a63-152ce513dd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c539a1a-fdd1-4f0e-9bf6-e0cb6616bb3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3314b520-766f-4cb5-832b-973f9606f36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c00774c0-9a86-4dce-811a-f738c46b2fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee3ff62-8a9f-4052-8a2c-7898e6934263",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776b58ca-1ccb-486c-8c20-9b9047f9387e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0d944ac-0d35-4959-81af-ff63f9dd5b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b5bb41-bf57-4c7f-b6ea-dd6fa366e948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41905aa1-64bd-4bb3-83d7-c34372f07780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3a9263-7915-481c-90b6-add4336c7cab",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13187139-749c-4213-82bf-3437dea20061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65187ff7-9d1d-4e67-8ed3-45d9ffb7cebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a088818a-161a-48ac-a44e-06fadb04876c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ebf7e8e-f4d3-4776-8845-35b2f88b738f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696fed03-5c17-4a55-9e23-bf603b110ea6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b854884-b0f3-4782-a9a8-c4bdf89bb0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b72b127-e745-484f-a3ab-590dd2e71085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed07cde7-0e15-4b40-85c7-2fce79f8eacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c20f6f59-6412-4acc-bd1b-8380c7bf458f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ce5d7d-693f-4435-b6b6-c7d2558aabee",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc1cf10-d9e8-4291-af5f-30ef4fd0642b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e214aeba-109f-4437-b048-cc5cc1af4f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabd0a47-36bd-4be8-9f89-1081bc0558c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "348b7b5a-23a5-41a9-9a9f-793936cf8447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1af123-7f28-42fc-a491-d98b08dfbfc1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01305907-dada-4e9f-9668-b4e140a1c578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cee9275-3fd5-46f3-a9bc-74336a896d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca197c68-043b-4354-8350-99b34edb0c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05b56903-ec58-4479-8da7-1c099170b772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f11346-cb38-43e5-9cbb-1c475259127a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfa8cd7-85df-4da1-88b6-c8446d52f11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af72000-5f56-421b-9525-9a7a97467fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c685fd84-b977-438c-837a-ad7d9a6b463b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2eae10f6-9a21-4d14-83ed-232383fc4d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03936afc-eaa9-46b8-83c3-e2fb16a809b3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbac953-982e-4c16-8aed-dfde3c385958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee20216-b7d4-483f-ba61-50944c08e15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f0b683-02ca-4e46-9737-10381ac41b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ed066d7-af50-4c81-9b5f-cb5570c4ef61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508311cf-0f77-4d76-8ed7-55dee3622ac0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b41d25e-2ed7-47fe-ae65-4fa31304eea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7595aff-6b19-44aa-8930-66b1a2e420d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7682e6c-6c54-43f6-8fea-d0e9e72f1e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c2e9a04-ec29-43da-a300-c67f75ecef8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0944c76c-b88f-421e-983b-aaf6354ae58f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7161a8-d45c-4ae4-8f74-a088c2ad339f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50830cb7-f072-4ebd-abb6-a044a44179b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511b6454-2358-4765-900f-bc481d2a1dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d606438-dee0-4f31-81bf-4aa6a6c5691f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e300264e-db3d-43ee-be86-e7ad62f3263d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415a0992-1614-41b4-b96f-ec799bb93b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e1f1a1-d64f-418a-99ab-a391e13633a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ee66fd-bff2-4ea0-b2eb-ef81691ec9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a66d6822-c8d3-4319-b0b7-b5a97d5aa37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0a1bb6-d663-46cf-99ab-346435dd61ea",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3123ae-578f-4e1e-9bf2-96d7ad4a1f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9221cc-7869-4967-a801-364aedf745ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6e793d-c476-49dd-8a04-e45f92ecc5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed80155c-0790-4fbd-b3a7-bb51a5de969b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1ca1e7-d149-4cc3-aaf2-773103aec211",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6183bf7b-3e39-4b94-bd51-27e6c872266a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3325e713-03fc-4562-a8b3-9f594d34f8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ed5e02-901c-4041-b87f-a41ace811472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "50380725-b2ad-4751-8498-a18bfbb8a671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fabc97-2977-445e-bb4e-3462a9368136",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df61af54-afa9-4fb0-9308-4af4df995c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b70a896-a523-4185-9978-8cc70c3204d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2b9d3c-ac48-412f-83a0-d44655baa0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b91f2ec-d111-49b8-a65b-6056539adc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08f1b30-8cb4-4808-af86-71086445505f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6151794-c00e-4852-b2ae-f3b3ae552b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed6ee36-fbce-41ba-af9a-e95b11f0f7b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b82c77-34e7-4c90-a316-fd8c37be6451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b1c4cb2-b77e-45fd-8f06-75095fdcf07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f31e5f-7cf5-4359-84e0-4dbe6e66829b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac6ffc6-5c73-462f-ac31-ad88273fd107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc01e128-7cb8-4d31-ba01-81b53793389a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e28e35-0064-4e1b-a722-3fedbd767aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d565d8e7-c468-4dca-b86a-dee0d52c6884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bce168-f258-4ac1-9a1b-163847195418",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4686c56b-96f9-4fdf-8a4c-160dfbc4d126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266107ac-97d7-4262-a958-8a0f62a426bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10f24ca-b7dd-4393-ac31-4ecad2d56e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd95299-c58c-417b-944e-543513617fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52357b33-25e9-4161-b835-b2f32c19be4e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513614c1-226a-46de-af3b-cd8ce560d7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8edcbe2e-7b47-426a-8f8d-771fb0810665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64104caa-2b60-48f8-9d26-76ec4e377237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dab2fc23-5dd8-4304-8445-20b6727c3a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b17443-de5c-49cb-a13b-7ae703986548",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50a6059-8758-44c3-97e1-495798969226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1a43f3-b096-41ae-a604-d0c57b1be465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c93288-f7c7-48bf-96ba-930942a123e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "730735b5-bfb9-4c37-b59a-e07ba0438a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89866394-f1c5-4db7-b3fa-cb6305891f4e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ce314c-8eb5-4bb2-9d4e-5c74dd473b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d29c3a-00cb-448b-b289-85b0a8ac254f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca39ba9e-d35b-4d20-bba5-b383abf94201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c21652d5-c520-434f-b078-d5a183a59fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d788837-4a12-485f-9d87-c31d891320d3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21060d27-5e4d-45c3-bfe6-29919d4aace6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9804da68-2da1-45c7-8d57-c056f06f9a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6200a11a-4324-4ab0-8307-8d1784802836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67715a63-a158-454b-8639-a58dbeffa243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7b3f0c-9e16-42bc-bf36-1c1474276ec9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23515585-608d-4c9d-a126-0fff91c1ad07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59e7416-36c6-4655-a2e8-65da0dfb3f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2127bc54-f734-4904-a7b2-1e1c1c85e538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3489112-f99d-494a-94ea-e66ce6089f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f268a029-2273-4533-ade7-6d34a8cac43c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adbf645-507c-4dfa-b467-f58161c469bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd60b043-b617-404d-bd04-9ac369ae58e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4ff42f-5359-4643-99ca-16dbed25314f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9969fe2-55a8-475f-9320-6a121fb2dbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea57f449-8242-4c04-8dfb-c2e7e8352be6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916aabb9-81eb-4805-90b1-c0b9ec87418b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b7d0a5-0e3c-4c5d-84fe-efbf0afbda75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354e1b7e-a97b-4f49-8bd2-59863a112531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96de29a6-692a-4a02-9599-e90895291201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bda2555-6a6d-47f9-bd31-a5f0f1ec3a0a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16476d9f-1e57-4646-b5f1-3238f0998a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023001ec-1543-48b2-89b5-8ae7edaf3306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd486701-334e-4c32-9a4a-e708c0530bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e4f5d3-ab40-4ea2-80f6-9fe01084956e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a92cb7-eb4a-4eab-98ff-6bb19aac68f2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed053bb0-1b8d-4c01-9306-052064c63cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b70e939-752d-4ffe-bc63-757e69b4d574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7caebe-dc32-4978-9562-c70f6195aca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4194bb4b-84a9-45cf-b8d1-2fe305479c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802a36bb-a1ad-4d4d-9358-6ec50d41d185",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86af3e80-2d42-42bc-aec2-255d77034fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddf2f9b-49e4-4dec-83d9-26fdab71b9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c588eb-684a-4b82-8bda-42b5011e6633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea24878-dbe3-4703-a4c8-8fa8e6f97b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0cea11-9865-44ee-8bd4-1bbfcbd57b7f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5064753-68a1-49ce-a155-e8e2105f684d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7490e0c7-0fae-4ef7-82e7-6fbb6cd456f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86b6bfb-163b-447a-93e7-eaa1a7c88090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98c08cc5-f359-4565-8926-c653d8dbfeb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2043b7-b951-4c0a-a5b9-acb560cf31c2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd3a929-aa90-42cb-8224-7921bcbdb64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb7d63e-63da-415d-a301-b3359890673b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1494744c-7651-4ee1-a1e3-9b8ae5da168d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c453c9-b76f-4b7b-9c2f-d658bac019e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d039adf2-fc61-4650-94e4-8374f134ebd9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d7e921-39f4-4fa1-ac87-ef1d24731bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2a61b0-39fd-4ec1-a7b0-9620adb23ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e22bf7d-5890-4242-9056-710637a78653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e977eade-83cd-4776-97f5-c9fe613dde27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4260f094-a10b-41f4-b920-14d672f6084e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2b8876-28d0-47a5-8041-6342d7e44daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58c7a063-302f-418e-bfee-778562e9e68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3a936c-ae36-4844-b62f-cb45ba1e62e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f9b1e2-b2c7-4b39-8899-198c878767a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5941a64d-9f0a-46f5-9236-03f7cc2a31ad",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5030d614-6c12-44fc-866f-09789f84bab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7694c5a7-cf72-4796-af71-5c6f47d586d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0079f6-84ef-49e4-8477-0b074f8c0836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61bc2850-f267-464c-af67-13f60a42c1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71e3839-770b-4d24-a65b-618b8390326e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d85fd7-6aa2-4367-8ee6-cd8a40a8374e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d17eae-1a49-4540-a668-51953d29f672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6adb90-a761-4c12-8467-a04a12477e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "29a779bc-bd9c-40e7-8fab-2e4afc5abf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5a74da-460b-476e-99a4-9d12a9e8ddef",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dab2b9-5057-411c-9184-46e4801a967c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a392d60-d870-40cd-856e-3efe0d82eaa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0f62d2-e697-4bc0-9625-55f9d2a9569b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7bbaa2-09e7-4ef3-8db0-2d75915b9f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84133745-e6e5-4f4b-b27b-6a072cf9b849",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5e4cf9-2ec1-425d-ba8e-3cafd3bf6cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523d0b21-6d57-4638-8082-a4ab5034210d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c6f8f8-fcf7-4e72-98f1-0a8d16f75a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8702d73-e70f-4d48-ad4a-19d44657fee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec88cb4-190b-4ad8-b9c1-8f85affbf80c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e644c19-a346-471c-a1ee-db421a6fab40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a096ebe-6411-46e0-9540-a4a6dc75c6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f6ded2-fd43-4a89-9ed9-fcff62ae0d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1cfb0b4-2e40-49d4-96b1-9a18acacebf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2325997b-898a-4b09-93bc-fa19db86afc0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fdde79-db81-4edc-bc8a-7191a1937eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a56bf70-d835-48cf-b424-345d442682a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b25632-92b1-43da-a817-afde399c63bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd4c215-5374-496c-98e5-1100ea71cf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da062a09-0698-45ab-a09a-1479b3477fb6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d719941-a9c4-47fb-abd9-93ee5094d77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5421c8-28f3-4c8e-b9ad-209d68ede55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4536f7-127c-495d-9454-3e0cbb4e279e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b08bb05-e452-43ce-812a-772f18baa4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b784f1e-7af6-49ac-b14d-6daddf192ef4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ee90b3-fbb7-4e7b-99c0-82e3f2fb99b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ea7acf-4b25-4ff9-a2fb-5d374eeb6d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab52de5b-4942-413f-9376-79cfbdb5ca88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "111eaaf8-5858-441b-8d01-5c57dcc673a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1804554b-968e-4e9a-9667-62f2702fcb09",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc66c69-0912-42ea-8a07-dcef92ae67ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b99b34-c0f6-40b1-9c48-4e8c6740e4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8972791b-0bff-452d-b9e5-10e461e7c93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a7d758-3857-42fd-a2fa-01a223614b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0b91a3-32ea-4414-a6e1-3ecc3806bbaa",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e53cd88-c8e7-4b7b-be32-256c40429391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b589ab8-0da5-4283-aa55-178725ff5afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5b0d3c-0be7-4156-9f7a-b8077a1ca64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "294ae804-e26b-40da-b2c1-a4f0b1407639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edf991f-f84b-48bd-b65e-9c9080321c26",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95b59a8-d88a-4c60-9696-1797c7a972d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5515060-2cb0-4dbd-872a-8f69907563f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab2998b-117a-49de-b178-3b7d9a3bd858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28c18a57-e779-4f28-9626-1983f6c98241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f58069-4f40-4da9-9f30-01be0541c742",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73788c04-4cbb-45d6-92d0-88e3853283e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf78af79-6931-4e74-a3b7-de1e1254c6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c8d7e0-0916-4736-b944-d0331173934d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f55424c-445e-4030-99f9-d73e3d4cde06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110cc31f-ba71-465e-96b3-70bb45d28bf7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743e30b1-e5d9-42bb-982d-18cb877b8c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ff8d12-5304-410a-a120-bdb0f0ff8953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cd823d-9a3e-42c2-9362-e575742d0531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1353a81-0e6e-46ac-8dcb-1ea6fb2c94bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3c5627-79d8-432c-944f-3a2a7d1081d4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9946de6-4832-4765-bcce-cf293c9749e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68817a0a-0831-43ed-bece-795864527ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db0c387-fec9-48b8-b56c-2da76bfca5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39ae592d-9169-4fb0-bc54-6cb5b14abfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7a1741-fa22-4b58-a6bf-1ffcb0e5d5fa",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4e89df-76f2-4187-8ade-9da9269f3dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188dc680-0fea-44d4-8730-1415a9576471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d9f970-969c-4b34-92ce-9310aa5d6c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b32346c-92f3-4827-93b3-88d9ab0387ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3b703c-4df0-4566-8cf8-dcb2ccebf449",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab04c0ef-7de8-4373-90fd-0e2724c7a401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c947c3b-0f45-41da-a5e1-226ce3d50203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca55976-bb6e-4748-8ef7-f6a2a2e3d42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9def68-9117-4a4d-9307-0d325e59447d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1476fbb-d3c3-4af4-9a43-944c707c3434",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8853bee3-50fa-4726-8b80-621ae8ec1ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc76f00f-494f-40b4-8fa6-f8701b0a2090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb812b41-cee0-4c6a-abc2-a575349834a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e525dce7-59fe-4357-9919-a7b7a0391f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4e2dfd-bb9c-4019-9db1-c2cbd18a9b3e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9833df56-4448-48ff-8a0b-18058ce1c729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6acbcd18-0169-4640-b159-39a7a0cff198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13308b1c-899e-4fdc-8039-1c26e0def717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91ae4e55-a904-4f60-822f-ab62279d74e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71013002-27df-49cf-8256-b74098ceb6d8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88d0149-7454-4b16-9f20-0c803752487b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150800f2-6eb1-4c99-814e-7d6e4b7c652a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7cc03f2-dfd9-478c-8ba0-1059e3f10c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2700e345-7759-4f64-a279-3b6f5ee6f2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3fbcda-f8c0-4f5b-9257-834de524b971",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4efdc90-9e49-4776-adf4-39a08c6af7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acf9cee-3557-4ec4-9446-66c9b2d880a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e06b90-ae36-4a85-a703-3e12f32c69b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "255d395a-fa37-4bfa-ba56-7577ffd45add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67514dd-8073-4fc8-8fe8-9b4270761992",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0cd5ca-7d50-4ef7-adb2-fcb623d4e339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4450256-27ad-48d9-930b-9ed3792a27f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ff3769-a2e0-4601-bb07-67d3ce3b9d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc8a1a7-edd4-448e-abde-79b8acda8025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bfe1d8-0cdd-4773-847d-7c006617fcae",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8729190b-3e3a-4f01-9c60-ffdc96c4dd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8b8801-c71c-4c52-ab1c-47810a7e066e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07aec894-7f49-4f8c-9e35-77662726711a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6618867-489e-4ce8-8936-2fcef37ee38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfeacd83-d0e6-4f5f-b2dd-0f4fe0df9580",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ae0934-8410-497a-bb12-2754cbff1432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ccba0a-f206-4328-8fb2-fa85c63d63f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a075cd-559e-4872-a1ac-11ad10e48956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ceea40f3-5036-49d0-b8d5-9584096ff7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e2f5eb-e1d5-4865-b475-73bc3d65a4b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743de8e0-8800-45ed-a4de-5914737b26d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "922b8fc1-1041-4346-a674-087ea89623f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5602b2-e5e6-479f-a1df-913a5384bb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f40adf3-147b-40ee-8e3c-0cd5d92e321b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cd0fd6-4347-43df-917e-e348c1754a41",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736bb3e7-7a98-4351-a964-f812880d726a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568c9da5-9e00-4bc9-99c3-7b996f43db7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687c5133-250e-44ee-997e-3582c5706c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2f693f-e800-4827-b05a-f6ab03652a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bf5eb1-6a35-460c-bf5a-f60a5306dbdd",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a398c5-0c71-49c4-bd4e-380088c558f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60889782-312d-4ea1-9a7a-2d252f5f3bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4dd41f-c7e3-45f1-ab4e-a9901cda5046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce74b18-3343-4df9-a356-f9477d793690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34164db4-b1d4-4e56-9417-dae7e0d67bb4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778bdc57-ae15-4044-94c6-ec319d8d7f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd3a167-796a-474a-96be-dc0f392b67d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474d7c45-912b-4ca8-adbe-502ee17f7614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa66f76-cf05-4a88-8f75-64692420ef86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91481f8-ecf7-4633-a7d1-593edfc1ad1a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9652ef0-afbc-4e53-aa73-0221afe33ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3305f999-7627-4ad8-9f52-f9328483d564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44bc09b2-5cc7-4d72-9d89-61af2279277d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0b3879-f49e-4437-8b24-b84e6a76a66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8feb3d-1523-426d-9c4a-dba8fd57a49e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b112e5-a5ff-47f3-802e-90b8ce174569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a58c7b-0c83-41df-a80a-a2374ae0b8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56f6bc1-da3d-4ff2-bb60-f21442da74b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "409d236b-5234-4b47-aaf4-23d906eb7e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafecfd7-3319-4448-aeb8-4285f2905c8f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cac192e-8705-414d-882f-7b1ea63b2572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59f54d3-4722-4fc4-8720-baf98573f010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2f209d-81cf-40a0-b924-dc61af661e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62c18c2b-bed7-4fc5-bfd9-21df73e85384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661e8871-4139-4a0d-882e-99ae927dd697",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bd27aa-7d4c-4a03-9b9b-7b55d0f9c10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3fee0a-a96f-4c56-bbb9-0ab2e65d9c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8123dc0-5ce1-46b7-b51f-f4d448442782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ef66a2-b027-436b-b251-8d6e9ae5aeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282ef1b2-8c4b-438a-a7c7-a9a5b5cc020b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b72d5ac-744e-41ff-b21f-ee47e63f9fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cde9f96-667c-4231-a96d-ba68b511ab5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3ce414-679d-45bd-b8b0-dfdb3e6d3510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad24fe2-9174-4531-87ab-b3bed4926244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0929332e-9d52-4044-a77f-69a440d46a66",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d1ed43-d65a-4f10-9534-a421f1d76ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14642f8-10a8-4cb4-b9e5-d44d3cd98140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a5b608-6ffe-4e28-8394-15e4d78e3a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cc7772-6692-4b8c-b25c-382b7a74cee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72aa03ee-8e80-435f-99d6-36d9d3630a0b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee330678-09b5-4ccb-a39d-b44c99dd1c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d5240c-c43f-49db-a08b-fe0f0207f49f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d625eb3c-18a1-497b-ac73-92f66c73291f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0934f5a1-776d-4eac-8363-578c5528112f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a680d3dd-3699-459d-a6f0-1b9b96a8d652",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a9b9ef-c890-4feb-9882-313f8fc875ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6486f22a-d0f2-4edc-8184-5f2e878dc1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73c85cc-4088-4d02-babf-9d9029cbe142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b6f0b1-b25a-47a7-ac10-30564e3b3bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d9ce34-d9f0-4709-890e-c4e08db54013",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a82cdb7-75f1-493a-8462-4302689cf2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1901004a-4ecd-4afb-8496-71c2b6fa105c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c207270c-8612-4ec0-a16d-02bcdf10de4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08578bd9-4de1-498f-ab89-c3ccb80f1e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b393c32-6961-44b5-9156-ed800d49b7bb",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6145c99-3a11-4690-af01-8b37158e3fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde581c5-ef5b-4fc2-a6f1-5248e1a05c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e49890-0b92-43d2-b192-cf57c3b2cbc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41502537-7ea7-44d2-860d-481b2b88b190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efe5eb1-4412-4bee-bdea-6350f2ba4974",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9640a36a-7cc2-443f-9d0a-51faf40b80d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e982a2c-6860-4a3b-888e-168aa0ef3e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89481a97-7523-4551-8a79-7153381f4c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff5e8c8c-d566-48b3-9765-4b27aa3b4e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d80fe5-6ed9-4391-a959-78d99420d552",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64cf8113-ab70-44d1-b6a8-7558c4e5ec7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369b89ec-5edf-4904-85cc-d2bf62389e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a21fd9-f6bb-4192-a324-99ea4f92a441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0d96d6-a9e8-4a47-8717-fbd21380761c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8d3572-ec1a-405a-8681-6fe89bc016a3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721885fe-f836-4e66-911e-d6ffdcb729af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1114ea14-b91b-47ed-b0c6-3dc860953d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193caa52-ae33-4f17-995c-6f3f8472bc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "541a2beb-9440-45df-af63-78a043eed8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97d6aee-fe27-4d43-b9e1-eb813fe6e74a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdff3fab-c310-4005-bbd6-62084aab97e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eafd34b7-dc96-42d6-b502-64000b602538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4783c8a-cc60-4996-a1ca-a0c2b64c36d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06b0b087-63c4-4022-b8e7-3e1befac7673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bae1dbd-7942-4695-ab2b-fc676fb02285",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408318d8-e9fb-49f1-a5d5-a67239d1aa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00eb020c-dbfb-4891-9803-c0dcc20635bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e863c72-b0a4-43f2-b71d-e5e566d3143b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b81b85-1a19-4c21-99cd-267d774550d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5889c5-515f-4e1c-856f-a2538e7c85a2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caafae1a-428d-4e56-9c62-85e4b5c928b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d145577b-d509-4ab2-ae7f-37745bcdc312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa73f70-f81b-4375-9e31-369947866d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd66c61-b4b6-4ba2-8eca-f061c316d30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9dfebc-6ec8-477e-9fa0-0b9a7bb164c8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e060f05-9384-4e57-aba7-9b362092a25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed3e56f-ca3e-4c1d-8732-883a17f1704c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa36a19-86c0-4a70-ac5f-bc3ed6348b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42cb1b76-bba0-48dd-a798-433c59286e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66c241f-4ffd-42c3-b267-2c46c1d66d7a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47371c9b-8fa5-4f77-bce9-f09dea49521b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d673738e-f3c8-4eaf-b696-8414e4cc1b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885b2b72-ee83-40c1-a05f-a28adb548fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5afad8f-cf0b-4bb5-8036-d35ad9928156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8086d3-7fc6-43b3-81f3-743bdc940bf9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df02a68-815b-4e72-8e61-f054dd7480a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241aad6f-081e-4123-a691-a7101f1208d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a867a9-2df1-4d10-a2f4-51ba8339c067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c90910-316f-4d9f-b933-3c53f332659f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17ad9e3-0c89-4ecc-aa63-59edf84515c0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5912ea9-d524-4297-9491-e839d62a490b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26c1d41-bb8f-4340-82a5-b44ac6476e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805f1b2d-6a75-4623-8582-4305667f38c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6332edcd-aefa-4d19-b8d0-c799bc0f4b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4a21bf-4fca-4134-b949-9cf796977c5e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a101598d-5fea-4a29-9c26-af62598aba5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f356d4e8-9822-4f14-b44e-07e9a87957ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4d6573-bda1-4baf-8cbe-d6741aed1c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1cdda84-cd55-4b6c-8fd4-3307d1000550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c75b2a-96b2-4226-9e36-0b577af64c32",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029852b8-3a55-48e4-991e-68f8896f61a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc6db4d-3096-4142-a7e2-3df775deaa61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9671f313-9350-41be-b251-d0451a469c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e5cfa97-f5b7-4981-bd34-ab4e43f6cecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7fcc77-199b-4290-b4bd-e967f00e3008",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d5574c-78cb-42e1-93fa-6d6a21340958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d58aaa-6a0b-4af7-ad57-d229e55db362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188c0deb-78cb-4c57-9f7b-b15e15a7aacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b81d8358-0655-45de-8cd9-ed0a2b881586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1efff4-12a2-416a-945f-a7214fcffe0e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41879a9-c06a-4d5e-bd8e-65ab1572d00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549ebfbb-21f8-4f7a-a2a2-a2a69cba8ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fa066c-d82e-4977-b2f5-6210f48cf8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e125cef-82d1-46bd-83b0-1ac998a50d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb21eae-48dc-44ae-8851-9bdf9e3af7cb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886fb34d-607c-4cc6-bcf5-5c0f3969c4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8e4688-3c20-4bbc-ac7f-f2154a20e857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8368c500-05de-4c15-b65d-51e44188432f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d44d0aa-4451-48c5-bee0-78aa7066cc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc67b814-3181-4793-9f2f-6f7339996535",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9283294a-ac7d-417e-b45a-446f37345c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c10b6be-0376-44ad-9978-4ecfbc592349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfd3e10-2e87-45b0-a5e1-60d6d8c035d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3174cc55-c191-4c17-9fa8-eedb1891c279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83553f8a-0e88-42ce-9a83-932f8114fc06",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c285be9-6af5-41c4-ac06-c6990bf7a88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baeabab7-c7bf-463f-975a-d747ac685e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a414cab-46dd-48f4-8fdf-82c0a65519c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1fd8f9-d50f-4957-aae8-f97681a4d8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83339eb2-dfe9-488e-8c0c-d56026fc922c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140cc66c-7ab3-46cc-8264-1ceb3d110835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9961a35a-8d20-4730-83a4-42d102578d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e85e321-b051-4946-add8-d7059a172955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b472bafe-c26b-47ce-83fd-b945c7781d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4094db8-0eda-4091-8a37-e9c1f150e155",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9107f48-15d7-40a6-907a-70efd1847198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "05c76ac0-5743-42b9-874a-53192d68be46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da4be71-70ca-44fe-9346-2150c40496e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c00ac90-f4e8-4c4f-9ad9-b4017d12b1b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d95d1329-f4e0-48b8-b64c-672836922e9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "249abf6d-abdd-44ff-a065-4a08511fdcef",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e50880-35b2-49c8-90a9-bdbbc26c94f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8b2affb-5523-4a3f-9966-e20837bae9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbdcc31-f4fb-47d0-a037-698e2656cb88",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "24ebe891-a1d4-4e12-984a-fadfc91203c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4f810f-f1ea-4ae2-861a-cb1a5afc3a43",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce77306-89d8-4fd0-a670-9a9dc49814a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7a6c695-b06a-4296-be92-c5ed5ab470fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a553f00-65ac-46a2-92ae-4d9f377d27f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b716d758-087d-4ca9-8d4c-e84f0feaa2ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d51094a0-34cf-4f3a-9232-8b91a719f005",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09f0fd3a-e10e-46fc-9649-37eeaad6627a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "042699d2-d2e1-4aa9-9c81-4d1905ff2d70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f498409-6362-4a01-a6fb-08463c376d12"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4dcb9a70-ede6-4c0e-a75e-f06659b15d6e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2673758c-480e-4657-8050-bf041013c40c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0c500953-8ce2-46b8-96ad-62396f0d4e35",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0abbfd57-538a-47e6-b6a6-73d9090eb97a"
                }
              }
            ]
          },
          {
            "id": "1b1c9e3c-aec3-44cc-90a9-192d7d035d4a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1b488cd2-7314-4581-a9e5-bc00cbd07360",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edb6acee-9e84-42e4-918a-2326de0410e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1cb5d3f4-0091-4ba3-8b9d-a0b59d721365"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb87fc95-7f46-42d0-a94d-cca3ba55837c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "faf8b112-7955-40d7-9b92-3e6cfaf0007c"
                    }
                  }
                ]
              },
              {
                "id": "4dfff79b-1e20-4aab-885e-c2dd229b028c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "def235f4-ed6b-4458-8131-be2d8a05ad98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76f0fff0-f356-4886-b0c7-4068e5999510"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0e4bc2f-82db-4bd2-8787-941a63025dd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e8e35ffa-ca3f-41dd-83ac-c05a24776d1e"
                    }
                  }
                ]
              },
              {
                "id": "d7562d96-2177-4914-a235-617d4c3b399c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28982654-939d-45c8-95be-4be50fef9477",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c4c2692-9159-4ccc-82b4-f5a72a7c4cb4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33f5bdf4-8bf3-48d4-a954-8cc6793825c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "70c3969f-b25b-4a15-8b1a-29c23f8ceafa"
                    }
                  }
                ]
              },
              {
                "id": "9d47151a-8a50-47f3-a7e8-9d5818e358a9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bbb66c6-a3eb-4572-b825-8ec9fbb1c46b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "147f545f-450f-4271-bb28-7381acd46424"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2edd83e4-4ea1-4657-9977-fc05e7cb3e21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "52afdf7c-8c3a-46c1-9588-7ed62193fd2c"
                    }
                  }
                ]
              },
              {
                "id": "73ce6725-7169-41fb-af51-8a3adc235041",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b70e107-987f-4673-8522-598f2832a948",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1ce1820-26e5-434d-bf14-63dfee6a45bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63b274fd-70ed-4a0d-b517-63604476d0e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5324da43-c4b6-4346-a6b5-f7657b54d416"
                    }
                  }
                ]
              },
              {
                "id": "5662bdf5-f265-45a5-8cad-a6494e9c2412",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83cebb13-fc66-468e-98a4-333a6edd3fc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cfed1d38-bff1-4087-8040-ac998dcd45e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96f48579-be13-4786-9fd3-e96118e3452e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d55937d-a2e4-41c2-aeea-46d8fe9b7dcd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9f4c455-f2e0-4269-bee6-2648fd801cd3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "075a3aa2-445c-4da1-b985-c5f52b21f325"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "11a0b9e4-5d60-4953-bfff-c88a71449aae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b566d1dd-4aa6-4cc6-bd87-b33b20c5a196"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60aca585-db49-4b44-9942-11bfb0f7de73",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f805c69f-5f9a-4757-972f-46a3b6f6b3b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "228ebd0d-54eb-4905-9724-08e218311acb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "513aaccd-ebfc-4f31-89b9-31d461ce0e02"
            }
          }
        ]
      },
      {
        "id": "35566394-e81d-4dd1-b53e-f051b0a31119",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "98dc80da-5858-4e27-97f7-215fe4e87bac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "197d6edd-22e1-4a1d-a91a-51822c2ed093",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cb119958-41cd-4ec3-b260-299f34bf3dda",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804b261a-7158-4895-946e-a3f5b02ceebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03a6ec7-dee1-4104-8591-2b8790b4e7c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fc8139-854c-4b4a-951f-6a206e9f2244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb072fb-8b5a-45ec-b963-a9f362012be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcabdde3-7c52-4365-ab16-4e8cecd024fd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf46a44-2ae7-42aa-8c68-c3e204948a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921dccc2-c823-475f-a960-78811fcc2bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ebfe93-ecfa-450b-9ed8-59bd63a6eecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b989d64-c499-437c-b4ad-3d474ae19fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdd3647-a844-476b-9f37-9bfe30675a32",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9954ff-4ee8-4120-a174-ee60300c4339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a714f5d1-eb78-49fe-8c89-7a2156711966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed8158d-73a0-46e7-a960-456a61533a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3635a27a-2665-4cfc-a8a4-a744ea95cc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7384bf2b-58fe-410b-9770-bc4698b8a87d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cdd28a-7b8d-43e4-ae28-368b2d81b6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1350da43-beef-42a5-b742-61a0602bbd8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bb41a7-ecfe-4d82-9501-b6866497532f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04e042f7-9d17-4ddd-93b4-2736e77af09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a5bd8b-7acc-48f4-9805-a4f0643cf266",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3d9fad-ff57-4457-9320-469ea0274e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e018ab28-ce83-4844-9ab2-46d0b6cde8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20044185-d27f-4392-b5e7-1e600e789955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6405d8-5ceb-4f14-9181-130de042cb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a71d725-6bfe-4fdf-a798-0e59781921b5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f92f89-9c43-4dd5-abb6-af8588dc4968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc29e9c4-588c-412b-80eb-b72165af2fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c086800-3389-4360-90fa-b5c36043db0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92cb31a1-b09c-4229-8140-1c558438d6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c4f208-5ede-426c-84d4-efb947e5c244",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6755ef82-7c0e-4cb2-821a-98da7a38ebc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92ca2dc-cb1b-459e-8fd2-8515520b791b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6942db-565c-4bc1-9c26-7b2ba3b02309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3524454-dadd-42b7-ace7-42f02a1b6287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2863064-1374-4641-ac97-18fa77c50545",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1139437c-67a5-408c-89c9-50c2ca83e77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a985bf-3dbb-41c5-b51d-4005e01294d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4389bb-599f-4f4e-b710-90d3cc8b6003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd072a3-993f-4441-91db-67863bcd70af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea32e6f-2aa8-4099-b316-83be8c2c7cba",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292468bd-390d-40e0-b64b-6d817bc7d190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28afa026-11d3-4d0e-91d9-5b4e1209b36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc74a23e-998f-4de5-870e-40e8cadfdb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee330bd-6ec0-4673-a422-d037465156c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4fac9a-cc6c-486f-87f8-dcbdf92e657c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ea55d5-f144-4467-b6e5-02485bc9f100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe06d50e-b70e-469a-92bc-a9815390dacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845b3946-422a-43a9-9713-ea02a51be88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "399b091b-d42f-4cea-8ab9-ff95a56e9aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a786e83-af80-495e-9225-69590a4ebbe2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e985275-2821-4ded-9cf3-0ab167511fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b588b19e-6dfd-45c9-9f9f-a3524fccda88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc50379-f11e-4d96-99d3-97abdc858cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "227cbe63-6991-4da0-9272-c4e2dd814ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98e6fff-b783-458c-bf04-908e3ebbb10a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f939e74-ebaa-49c4-ad9c-80f9b543d302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d91d4c-1750-44ec-af81-7f3b41b11afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8d14f1-3698-48ad-95cd-95e6891af7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d35724ef-f061-45a3-9cad-41e1343fd1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8d23fa-1d02-49b1-84ca-24443520e8ac",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6000932f-0bd8-4847-9bf8-533b2e5671b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4ef303-6d72-4c38-aef0-27e89748c8e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78559ae4-6454-4412-8a2f-99558adc5aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "696edb93-b297-4d66-904e-984013c5e822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c6bcab-c96e-45c2-9b8c-8a8ff98093d8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af033a9-90da-4c7c-925e-55a85324bbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2476fff5-a452-45d2-a7e7-7f8f549c6a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bd8848-75ff-4cc3-9a29-7cbabb99e2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff56f68d-7e87-4d7a-a543-6c3202537cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d1dbf0-947a-44ea-be27-f2d341dfdeb6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e4e7f8-5cc0-4873-8c96-d2a0c7c02a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26e6ace-8837-4b00-a288-6e2ed5a1d4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa322a51-4600-400a-981c-2ff36fde86cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eae2295-c315-4686-bd9a-256a1704b2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d45d202-86bc-443d-b2b7-eba9c9ceaf6d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61457f2e-e941-466e-bf66-d3cf9f35c7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2231d50b-9b86-459b-8672-f85e10abb9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2c8648-62cd-446b-b112-3e5a36f0f842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cde913a6-41f2-45c8-ba44-05cedb93ccde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8cf3e7-b81a-4861-8c7a-68918eedba2b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceea36c6-6913-4099-9d58-66c5af93ffee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc2cdc5-4e72-4855-b239-67cee7febe3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b65525-3a34-4e78-97c2-6376dd565ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef26213-50e4-4887-a935-2f5b8e0f1a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a0c1c5-c9ee-4517-9ca9-074039bda3f4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34571117-59cb-4f7c-9e93-18c715b35491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1df1aec-2df5-4a9b-8dce-ea1e12e404cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cd8079-0963-4262-85e5-d48a9b384f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "781c8882-06e3-4a5e-8ca7-cb85a185a1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb01598-6fba-4f05-b50d-f495d1737fab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684889bf-9e3c-4347-91b1-2673150c2b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25aef4a7-03df-4aba-8802-2c8acdc9f280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed207a7-9547-42da-ae65-01142a104752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6df23818-a5f8-44f4-8098-893d00217834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a804b890-9b6e-4a87-8a95-1a0288c8a9d8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0736068-aa84-4b7d-ba18-41aa1dfdc550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f8e6df2-5698-4ce5-acea-ed7b3e262a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a31e78-a1a1-4e7f-a022-3202cd021e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47ba1d67-1c5e-4e7a-84cf-4441f8abbab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21fb60b-0516-49ff-85a7-f7f0a5c8d8ca",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c7ee2a-fffa-4ebb-9f43-b5f577a8bdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4ecd05-6d71-407e-9634-94ce7fc3c9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3934f2-d646-4190-b874-bb842260df86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13c0057c-c7d4-4b7f-a7f6-ccc3eed5fe20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05308a78-de62-4c62-b61e-836bb848f966",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b20089f-313d-49d5-8b4e-fa68c3b2bf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ef8362-f539-4d0d-833f-7addeb0957b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77f9e97-4689-4c54-aca9-67a042d48c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45cca70d-5427-4b4b-bf4f-296c11d22bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb49d925-7233-470f-9819-a0646ecaf3a4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eeb63bc-0498-426c-b689-35db8f4167c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54733351-d081-4201-ac44-808565058761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123455e7-8ac6-41cc-9cff-6ade1ff48b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7ab9aa8-34d6-4f9c-b3c8-641456655b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cebae9-2c6f-423e-93b3-fba18585db23",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbb4965-afd2-44d1-8ede-e2ea271b9574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3426e54-39fd-4e9f-8a22-86118e47c2fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448bccfd-5610-4f44-83c7-0b31125c65a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5338a48-2bde-4a6a-8c63-ff931e6bf097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ad3c65-c5cd-4ef8-85f3-5275772951b3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888986fb-5f5f-4128-8d20-22883abe2a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dfd9740-e632-442a-b2d0-e85f2c3657a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56399d85-f66e-4815-bd78-27fa88c0d4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "981ee334-9502-4752-bf5c-f2358f2e3184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbe011d-9451-4868-bbf0-94fffbcff8a6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd5438a-e181-4872-aa9c-c8f8d621fd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567a4db1-34a8-4ea4-a307-66891ecbdc2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf0f8c1-f0b8-42be-8239-132889ac09d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9641eb7b-aac3-4669-bba2-9c8a193482a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fe2b65-bbcf-4cfa-a8e5-e879131cfaec",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1290a0fc-cb8e-4926-8fcd-2bb7654995be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7e8a83-6d34-4879-99f3-b87bf4c01a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c25e859-f7c9-4b55-afc5-c7e095687bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53157823-916f-4ba6-b83e-62d180fe5411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36da65cd-159b-4c19-a7f1-04f3f3362740",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a046af0-bdef-4485-9d5d-3317e76d8fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd20ea3-7138-428d-9d5d-cd32e4aa10d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ba98ec-6e53-4d92-8214-93b9932aabbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7411e39d-a04d-48b4-a02c-546626aef842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b8e194-d733-4366-a4fa-702e5341d292",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c70152-3d06-4930-94ca-e7538e1a769d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2468408-f272-46bd-9164-907076feec88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18813c6-5175-42ac-afb8-b5afdfc81d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc92f98-7710-450e-925f-f47dcb751728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52ce6ee-72b1-4485-a0ae-cd66f53b8891",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc2f082-1dc1-4765-b238-47728519de4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379a4455-2c7f-4b7b-bee3-412254d6e6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8d9636-c03b-4ea4-9868-50e623974929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed0fb6b-5f74-4fd6-adfb-5902f18a1249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee899d8-0b85-4a90-a1c9-51bf438bcff3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d47e86f-c9c0-414a-9f7c-58df69085c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6bbcef-f878-43b7-b83a-dff7f05e3a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e89853f-d82a-4739-801d-ef99ea8e93cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b42bfdb-e7d7-4f1b-b6ff-b15ff464d777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582cd1de-6450-4dff-a04d-ab9aa6c6fb76",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd3ddf3-ec38-47a8-bc47-9d9312bfe4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e893e7-c710-417c-a306-67448f249640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a109b74b-9798-4b42-8eae-7d6c19eb90fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7183676-6300-4c53-b943-9a03320037d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "51f8e8d7-e694-44c6-aecd-180ec064b730",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14511777-3261-4a9c-9422-1ce29ac69de6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26806ad-de0f-4833-a5af-8e60b9c23e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80ee5c4-9095-4472-8b4b-4f312cdb517f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803cd545-2d59-4bc9-90ce-d5a87b3be331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "431f2076-f65a-4e73-b65f-3c44335dc0b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805168fd-ff83-4153-950a-10aa3cca7e23",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55540e2a-1828-4650-833d-4bc902fb4d0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "932e0228-0ed9-485b-8b14-c4ddd901d42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "292fd01c-6729-49f7-b259-8c599489c891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "445242dd-3af6-45cf-8188-2c514c75bca0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af546f87-4ec5-43cf-9b4f-ec325f7a5a39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68f65f5a-4118-466f-afc0-2030673c7fda"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7971b308-369d-4741-89f6-9e3404cfcfda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "892c0b01-49fb-4207-b497-773d05e72d4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39ae5487-f3a0-47b6-a328-0e34cbef735d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7aadc523-28c4-47a1-bfe8-b2b68c037408"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "579df4fe-f2c5-494e-87cd-8793b279792e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26bab754-3a48-4fd1-aca8-0309e477aa02"
            }
          }
        ]
      },
      {
        "id": "efc94551-bf57-407e-bef3-facba036b9e0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1e77145f-9f34-478a-bae9-5c2b5ae84567",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec1e8a2f-1b97-440c-bd26-31a2d2201671",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e7f528fc-d79d-46a4-b640-9f6ab619d54b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "185f05bd-7e81-4400-9c05-dbb34e4cbc03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af20d636-b7eb-4077-9a66-27178ee7298e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839ddbda-43f3-4252-b045-044209637e54",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de023a23-f76f-4ee2-a48f-a7785f7c3aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66564839-08d1-436f-8fc5-1a22a84943e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca9c900-bcc1-48e1-b5c8-e8e9c52252c4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0663561-ef7b-4c49-ac38-6db62db241fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b79224-3e57-4711-a18d-dcaddd51d848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fa653b-233a-4dcd-832d-54c37c9577c3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb50ddc6-0027-48a1-a8c2-67b55821ebce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6981b110-1ec2-4171-a150-22b8c9604544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacc8b44-4bf8-47d1-8666-b6cd45f69ffa",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f35419-c147-4be8-9210-54a1498c4996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4599c5-9845-40ef-83f1-c92392da66b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507b29d6-5125-45bf-9c88-93208ad42909",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468a92f2-30a5-4775-81aa-fe270e712af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22510a0b-4f56-4c51-8bca-81b74cd0deb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91054253-dc8e-4f18-a29e-09ee7f6ac2f6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350db29b-6642-4abd-8939-c93ee559f42c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851ab615-6772-42f3-b28d-0cdd915c773f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f1aaee-a557-4964-a72a-ef88362bafe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ed35e1-f0c7-499c-950e-8b1e533fa9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0048139d-2de7-4439-b93f-2aa78c3f924c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5841f593-e7e5-4ac9-a037-87c78c7af70c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a34c1e9-25df-46cc-b3ec-f32cd7a19f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3fa68ac-aba6-4937-b62c-976fd6ab8348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497f8a6e-eef7-4f6a-89d5-300777d9a79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c9de57-d763-4300-a2e4-5c4c906e3658",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78aa483-60fd-4bd5-8881-d72a635f04a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed53140-a581-42c7-8344-d353b670e33f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60da5139-c38b-4af8-aa44-73c80b6aa7b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b64bff4-1482-47a3-af94-6501dc199a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dec1f05-f957-433a-b72c-2d1c8cf13744",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867b3844-4ba9-4708-90f0-84299631845e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a80b5394-4233-49a0-8882-16e2fb21565e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f44b06-9024-445f-b841-f32096ccb94d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d7570d-407b-4039-a6e3-9815e520e853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee98351f-f8c9-4a1a-9dcb-40499f505329",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2482937b-dbd0-4d1b-9a57-50bdccd0a676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be192f5-d7fa-4977-bcca-143bb4792d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12171272-0de7-43e0-966d-11dbedf911f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e98faaf-842c-43d6-b18f-31587461e4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cf1eaf-0565-4404-bd6e-1e1212bb60ba",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c4ac87-4bd8-4007-9fcc-e003646a1c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8ab425-7e2b-4da6-bdcf-44159e6360e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00832328-1c40-46b3-8923-738f00de9332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a56544-abeb-4698-bfa1-ee93bdda3318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f954c50-d155-4904-9b3c-39f029283d85",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f5fd99-a49f-4970-8ca6-c927ddd435a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3562bbcb-2c98-4794-ac59-9a832e579c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fd4d89-239d-4e90-a4d7-4816c5930cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bad96cd-0f1d-4ac5-acd2-441528847a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892db561-73a8-47de-826a-449cdb04a7a7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc49b21e-3f55-4934-8bd3-7b37ac826f91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4711e646-0377-4d01-97ae-bd7f70b6b43c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deaca66-09db-4ccb-b8e3-aa86dad2fccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21df47c3-cbdc-4357-b560-0c488c513bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9f4b1f-5672-447d-b86e-df846a8b97e9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669bed85-bdd1-4f91-82a1-8b320287669c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab4bcfcd-9e26-4f08-bc3c-4d3d49d1d66f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd7aab0-821e-4346-94c4-1c2370c3d68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8eaf37a-c296-4725-9d67-b4b1dfc5bc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62eb59c5-0616-4c25-92a9-cea3256dccdb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9243e75f-f474-4d34-bb68-0d21f8f7cdec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24bd93df-aa42-4011-8360-57873c7a9e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba02ac4-55be-414d-bc05-2659e4303871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c258a32-1824-42e6-9bf6-e47199935025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ecede5-f239-40c2-8c21-524d7ffe1572",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3ccee7-f0c6-4a94-8b9f-5cd2920aec27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9426d4d6-7718-4f41-8a0f-e13db190c603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35d1f43-aa88-4fb9-88d9-2b9a65aeee3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b1d1ce-2dfd-4eff-a810-19cbc8a6b36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f61082-8c6f-4a23-a4f6-0bc8f1a1de30",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d51b638-adf9-46f2-aec4-eb75bee95505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7892e5ef-209e-4f28-a6cd-de608bcbb906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89bb7e9b-b0a2-43a9-8938-c95efdb3a705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edbb2b31-89a5-4edd-8b0f-c6abbe5c1d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9578552a-88a2-4447-9b83-92f13319091c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d576181b-5581-4a68-85ab-c9cbe25f9aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a05d6b-ea08-4cf4-bcfe-452846492840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a138cf8-202d-4ee8-a94e-365f4104b942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e87dc8e-78a6-4583-80d2-37aa914597b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1843d909-360b-4855-a536-969bd5c55a2d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720c9d9d-1ed6-4e3c-a462-58a3c239ac4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2011b6-014c-42b0-b74c-4008ad1af3ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c32e02-b923-44af-a605-c4eae1a3412f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8c988d-2a10-480d-8ec8-eca3609ffd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf674be-6987-490a-b8d6-a8cdf373999c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2230d618-6350-48e9-8681-3751d342f6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cfe1aa6-7210-47ee-9d3e-1c603e8e89ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cd2285-d772-4dc4-a4d5-ecf8a0b9dd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99026a7-53f6-4c8f-8cd0-fbc46c151e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07b9101-07b1-429e-812c-8901c5574d6a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1351a323-572c-481e-8de5-dcf21c92b081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f74b48f-6b79-4461-9fd1-bb63a864b961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443f1f19-b15f-4cc7-865b-26bfc044d72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd78bbd-c76e-4a65-8d92-35899f9f3f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2f8ec5-a144-4a60-b934-7de5bb4165ae",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a59e1a8-882d-4021-8bb4-a05208ea6e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3e82ca-fe9e-4b4b-b6ae-b12af989ba0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfb3bb8-d8a4-407f-aa0a-205a77fce8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8419510f-db3d-41c1-8550-5db54632e160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bde9c0-f9a9-4faf-b228-11bcd9952f47",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc423dc4-a9c8-447a-8aac-ea1bb72579b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6634c9d0-0158-4f28-b833-511036987bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ba5bb3-2834-409f-a26f-5700a934baf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71acacd5-90ae-424e-9543-71f5abeb659b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4781d794-31ab-425b-863d-49f1285694b4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4601075-e7d3-4e16-9052-6da2efda005c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18350ebc-fd5b-4457-9bcf-1c4335e2fd16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9237620e-a4ae-4034-80fb-d2a9eabb705b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b14176-bcf7-46a3-bcea-96c794e03265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da3a56c-7723-421a-b4fa-3985a3ff7b3f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3e98a0-6ec9-445f-bff4-8de2c15f9a60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "508c09cc-6056-4bb4-9356-9f9883430d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e02273-6f9c-4886-9096-6b66ba212b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feac63db-3e3e-4251-a836-b5bbffcdf96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c2d4df-25f3-4c11-be50-cd3c9d66f6f9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a4a279-3d20-4158-ab82-d2a0d5b3ce0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01019e45-d1af-4c83-88cc-63fa6038d93e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1500e4-84f1-4349-8467-fd43f71fc726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56027574-3105-4cdf-8668-428984ec2ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6a3d8d-d1f1-4f93-a055-078f16bc0747",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42190c1b-39e4-4316-96e6-8cbed590a50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6feb569-beed-41a7-946f-f061257fb300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4667edda-9228-41b6-bdf9-4e4442884079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c211d811-2a38-4d0d-9305-ce6517eac895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de1b5b2-bd42-4c7b-b18c-6acff788603c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046896ed-acb4-4f1c-afbc-3faca89eb453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991aee45-1fc3-4b15-b5e1-9b6919757676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5130f26-eafb-4cde-8965-0e2126d09a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc7deb1-600c-4775-8352-8f2065b94928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1847a385-4825-48bb-a5f5-8d6980a346aa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9ad983-317d-470e-841b-78465d889177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae2f638-f7ea-4000-bcc0-af8f6a756ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa0685c-33e2-44c6-aaf9-583e008f97ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a79d19cd-0b5f-45f2-9280-33eb4f95757f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea4f044-188c-450b-abfd-694211efee95",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c35879f-3702-4f91-a073-8e09cf9a83e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b950db64-a0cb-411d-a5f8-65c8cb4b75d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "667daaed-07a6-445a-8599-73938e39c7b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1121a5f0-3adb-473a-abc2-8afc419823b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7edb242d-a265-4eda-9691-9d34f56b46b2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2643d7fc-ad98-4118-a666-45cd517685b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53f88c0-adec-478e-af36-5e004bbd7672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724a3f1c-d4f3-4358-9d1e-8451a236e0d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79bae518-d545-4e0b-bb9b-2364f37c2ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4723795-4c93-46cb-b6f9-22db3e9f9048",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45fb54e-af7f-47d4-a475-57ea724c61d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e42e29cd-6800-45f6-8636-8b4a5148ec83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c49628-c1d9-4f22-9112-43640e8690c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a86264-222d-420d-ae90-ef650228b9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9468ff2c-c318-43b5-8126-cdad90136eb9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10eac8aa-97f0-4e75-b599-be29cdc930de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e9b0e09-cf83-4d21-90df-58405a80c9a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e81280-1981-484d-bf48-32dd2e52201d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21af7e1a-e061-4a71-880b-86acf961f685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2685c3d-5379-4407-ac74-c35476048d6c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58920be8-0307-4138-a425-9314f979beec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf937d16-07b1-4173-9ec4-719a900d17fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9227d4c-81b8-4d40-92f3-eb32dbd01604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "139a551e-0fb2-418e-8429-9fef4941daac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56be0dee-1dae-4f74-85e3-35d3f4c059a4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bc542a-7357-4a8c-8053-00ece2cf29f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "362f4f8f-b3c4-49e3-bd00-7896ae172642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd6ec80-cf42-4528-a69b-25fd51b9ed55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d792a4df-7e10-4b10-8b7e-8b2f9bfd1f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac33d3c-85c1-4532-b264-0f6c3bfc1405",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534ba1b8-8f5e-4f5b-9eb3-5280eedea72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3488541-7179-46ef-bf2b-793a42a15463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66be610-51db-46f1-a8bb-66f6754d072b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a195f6b9-dfb3-4d6e-a898-d84924ad2ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac9528f-bfef-41f0-ba91-2ae84b773d35",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f3387c-0386-4629-9a9e-715b8a4598ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78056681-cb9e-4541-bfa9-e778428ea312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7a293d-a13d-43fb-9672-32995f6e84c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d7388e-7b15-4eef-a958-1065c0e2ef8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59cee8f-4ba6-48b1-a257-8450fab35cb2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01165305-525a-42a0-841e-750154473d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab76a73f-2d5b-400e-81f6-9e1facf52b78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4abd3d-65e6-4a45-979d-331127c98c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b18e8b4-1a8e-4a2d-ab5c-e1e7ae5bae48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b054991-6f26-4cf7-907b-943d568e22ed",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23c412f-5543-4506-81a7-00e7939f5593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5c7286-f260-4da1-8efe-b29967fc0e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5080646-a5ad-43bc-b58c-a5f7f1d8846a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443996fd-e0b9-4612-9625-73185114bdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27aaffe4-9a4a-44cb-9328-5af673af03cf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6c6b50-d667-45f6-bc11-1427cf33440a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c681e4d-7ffa-4948-b55f-2885d4498716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b55d51e-36dc-494d-b6c2-2ca7f3ec573c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5decccc-4a43-4c32-a699-bbbbe24c53ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f529a59-59a3-4c7f-ae8a-649a7abc0ba9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efa64b0-06fd-47a1-bd4f-b816aa15129d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97434dff-ca7d-4dbe-84b2-a56a04876850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f776a52-0f0f-4322-bd89-68331a86f7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb8bdf2-1059-49ec-a06f-8e67bc5cffba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848ce30c-52c3-4841-88ff-eb8f76bd8977",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48211fc6-aca6-4435-b4b9-de1c230b6f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32face1-c069-475c-aba3-f1e680a5a862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c15d631-9453-49ee-8295-853276250e2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b587a291-76d8-45f1-87a5-58c16ec5151f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace7971a-0b5f-4b51-9595-8de90513bd6c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2638be-7c69-4a11-8285-929ae0743c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819be161-29b3-4b97-aac5-7eebf4e833b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6354fb-2448-4353-a401-12362bd30605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5517fd-31bd-4604-98bf-bf641165cec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a66f17-eb4c-436b-a2ec-f8909e342956",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c4eac4-10d5-43bb-a646-f078a9dcb2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e0675b-2e8d-4690-9ed9-e1cff13c22d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8221b5-c1dc-4f19-98d2-dbafa67f31fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560f647e-be92-45f3-b322-239f9cf0b6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04546a4f-552a-44a8-8663-f2ed2ff94512",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db7e8e0-eb57-4876-aec3-be55e8066c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9091d39-fd27-4c55-b3b3-3dcc93387962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae57e29-92a4-4915-ae2d-b15a60f9b0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4ad4dc-6091-4c0d-9584-b8c9f7b7ccf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44b2177-35aa-4b90-91f1-bf4d97bd8e85",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cf5c72-ea7e-4c01-a7e8-179df6cc4514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7e83e4-39f2-47c0-b4e6-2526f7cf9b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a20b663-61fc-497f-9977-e010979f722a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b3f21a-d124-4a5c-b621-d8cdac8fdf06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c8c9d6-91ff-458c-888f-c69f34c5098e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133bcbc4-e07d-404d-9f54-3afbf068e257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faeb7acf-b468-4e84-a209-412bd0bbb36e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9e3841-ff23-4528-9038-84977ec1c901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee986de-d159-4a11-b74a-1d67f4a6f64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dd4d60-08e3-4ddd-b988-e8a88333c834",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3456c0-d0a6-4c21-930b-1681c863e4e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50bc6ac-461b-4a14-9f80-eda84801450b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a3824e-8207-46fe-8529-2386a888e596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac6ce08-fc0d-43a3-8bb5-23d5bd84c13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c057784f-e4ac-43f1-a469-39616c8bdf87",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d83f54-b9f1-4903-906b-5856a4d229b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20972b98-d65e-4f0a-83cb-a5d755e80b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b3d1e1-7392-4b05-913d-18e602f437fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ac64c1-7827-4d29-9333-09aec2e929ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc0a56c-c16a-4b6e-86ca-c93914002398",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44af9c76-c8ba-4812-8f3f-fd6426f3a68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32bd10ce-f86c-4ec6-a8f0-556c94d1e944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f888c3e-af0f-4fd8-83d1-f04b39ff3e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315da8fc-f4cf-452c-a297-decd33228f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10be848b-7038-4af7-8129-749514a88026",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8926f4-230d-431e-8ad3-5149597662a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce587d1-7d58-48bc-ad9c-567df0021aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a05492f-d92a-429a-95c0-52739aa70a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39532e0-4ee7-49a5-a581-c4389d24ea0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdfb597-47ef-4e01-84f7-280034bc0665",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c0bc66-5544-4537-b7a3-aa38175e4c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afac341-f047-40b9-be97-b2c3b4519181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9aef1fa-b4d1-40b1-9c9a-fc1c52ea1f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2206ce7e-bde9-4c9b-8dba-dbae6e88007a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53776400-0200-48dc-ac88-c5307ae11767",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b99c94d-65b3-4891-a86b-bd84db9cab14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd9dfb0-4f2c-447b-8a02-a30cb8a6211b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9e496f-8ee5-444f-8157-f284bc58fa92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f733cde-bbe3-4572-9370-edf7f5ef4dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695c0418-e271-4c4b-b8ec-7f8275ae2842",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb62b73c-500b-4b9d-ac00-6365b51ec945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8f795f-cf96-42ff-ae91-d35157797065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af2afb1-7486-4231-b8b3-d0fc661ad82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f120f4-0307-421a-a312-dcfd67e98c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c371961-1347-48c5-af5e-ac2709eb098b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743b8a89-11e5-44b3-b044-343425ddd14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef365169-d84e-45cc-9df6-5e1287d82ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6b8372-4188-456e-a4df-9aab8af7f028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c70fc082-13e2-440e-bebf-43f073f050d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35aa38ac-563f-4de8-8e2b-557f68a5c4a7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720f991c-728e-4871-b93b-e548e7e38a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a008720-9948-4618-ad43-3426db98b77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a89e6e-2e09-4867-b029-bbec0c225e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4942aee8-13af-46cf-aba3-090fc286324a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad38e34-7257-40b8-8560-ce713ecd4f47",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb5d27d-bab9-4446-89c0-d217a39a5f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7296e071-4e65-47f2-941f-10d201f8cd49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a6abb9-0faf-46b7-8a4e-c6607c545615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9310982b-e038-49a0-a869-8f651ef47a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a54de7-a005-4d9b-ba25-aa33fd0b927e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc4dab9-30ef-4053-9934-883227515b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765e90df-8955-4016-99bf-d8ead770efb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14513dd-3868-44b0-b8b7-965118177e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83cfc5d-a1e1-4c4f-bf5b-eed7ded80295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e53638b-bdf9-4d57-933e-cb8c47e725ea",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c32eb2e-b077-46d5-8b10-86a1c6d84ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb8a3ee8-081b-4eae-a94b-5d46ad281788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6bdd03-f503-446a-b278-63ba7631a496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f86ec19c-80d0-4f51-8d4e-afc04dd94557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7341e80d-65d1-4605-a684-55a51535c242",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e94085-26ee-4370-a98b-b47cf394b01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4274e0c7-c85b-43d7-a989-e98cced3d29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0efd38-b511-4981-95d5-c4782f3f18f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728cab60-18d8-469c-a645-36f7b78252e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea92a78-cdfb-4207-ab2f-a1ac56f85736",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64186f1-b221-4c5d-9d04-b860a3903a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e9d6c3-00a9-4368-8207-918df01f1ec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d310041f-f614-47df-bb06-263ad861ac3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfea6e2-30bf-4c20-8cac-586cf12f47ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9c0b50-33aa-4323-b0d1-7196a7b5556c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2802b019-7d3f-447b-be5c-dca49b22065a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4fa7c87-74d8-42f3-9938-3a61e071e554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bf5424-dd04-4940-8dd7-4a0137f96787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d4cc66-8141-46f7-9b9f-e35685d9c099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09194f4-d85d-4fcd-8b20-949c6a46eaa5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97b54cd-d9a7-403e-a90a-9abecf8ba266",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc1d4404-c9af-42ec-a5d1-58239e3956c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3deced51-9ae5-4cf2-b9c1-1f68037dca31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f46f68-bde5-4955-a821-842c7683316f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0eefb2-76ae-458c-a1da-023eb50de3fd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c802f27b-0bdb-4964-8431-40e592fc599e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afa945f4-bc34-4e16-80b3-4309a35ab3de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8286fc35-30e2-4c30-9269-cd48077c996e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6465fbe5-ef07-43a9-ad8d-366ca3b9636c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b639d915-0af6-46dc-a189-434557446ed3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c07fcc-baf0-4509-8585-09fb927557d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f38fea9-9f1e-4f67-8dc0-7cb2e5a86d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ad7ec2-bccb-4412-8cd7-008cdf9863a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d9ebf0-a333-4018-954d-e659017c7149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b36ab4-6a79-4fcf-b044-56cdcf8d5ce5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0242a7d6-26da-459d-8696-1d7fa1b6191d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e4c8f1c-e5aa-4406-919e-695eb3c37009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15fac13-bdc8-440f-8775-ddfcd5ec6129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a90721-8597-404a-a509-85738b1fdeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e0ae04-ac65-4ad5-8dbe-872cf2d1a224",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab34ab5a-d6a0-4c37-aed9-b2350813b3e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c02b2d4c-b304-4127-82f6-5a1e77457236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d81700d-b1af-4361-b140-819db6d222fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1db6370-29d9-4e42-b608-cea4425ff7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5652573-f1f2-4713-b0aa-31d79f393acd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfdab38-790a-4e06-9f53-0d6840498d67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4e63551-7487-438b-9380-73f11c6d57d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b6a716-4ae9-4bcd-9883-25710ffa1ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f115d87b-833e-47f8-a23e-8e4ad519227b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2aec313-864b-4fc5-9e2d-a70316276669",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaad21f-00e5-4732-aae2-1bbd6891439e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b91278d-944d-4a6d-9a19-846119abb5b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d310d7d2-4e73-4828-b03c-bbc19929e352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38912b0-af40-45e2-8e23-eb23ea29550d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160a8f86-1a5d-4042-aebd-7aaeba8e61bd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d38e71-72bc-4eb7-b93f-ce81f811466d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bf1f8e7-3cc9-4470-801f-dee5d4afb037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fc18aa-6b6d-459a-9c9c-08f61e6362f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58eaec3e-12a9-45ca-baac-f33133ea0b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3994b1-85d9-457b-b9a1-93ee9371893b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3ed7b7-c144-4aa4-b6b9-cf4f8be5ad48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b304b02-caf8-4f6f-940c-01a5d1ba5605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e154d4f-1a3c-4213-9293-cc005cd0a2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a904d1-8fc0-4117-bd43-1b89fc76846e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cb948d-1355-48e4-8d33-bf79258e3c7a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b52322d-8878-4454-8bbb-6224595ec4ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5dc15db-d6e5-41a2-bdb2-27dc81c7b73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da113cde-9c3b-4528-8fe8-cadd1cb0788f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1c7744-abbd-45bb-931f-c1cf48109667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52c7a05-f8be-4807-8484-b45a08bb53de",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c6c35f-5b5e-4580-a5e1-2361bef9237c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da5c797a-5462-4d0f-b260-d21f7060c98a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5d5e65-c1b8-47ad-ba47-351c67345528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac652015-a698-47e0-b331-53c2ec998d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174eff10-b034-41e0-99eb-cb375d4b24a7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e28c6a1-6983-41a5-b5f9-5f9c8a39f76f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "447ee106-a2ab-4eef-a170-3cc6b7753bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ababca58-de5d-4fec-8782-1f4f572ff1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c2ac21-4aa5-481b-81d6-e049a20b56c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a41a2a-a810-44ac-9a9e-fbf7efaf856e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38762119-5679-4ac0-baea-42e9126b2871",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "705fee62-0e3c-4a92-bbcb-2891fb20f15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e878d980-cd59-4e6e-bc7b-4be5082f3717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd67be0-abce-4e2c-ba56-29cbae3ecbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f7ee65-3016-498c-b40c-d4120ef1ea7a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8df008d-10c3-4705-aa8c-27f7691d8512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5c7b1b5-fb6c-4fa3-bea6-12d269dc985b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "636559e6-ac65-418f-aceb-3f3a4e92ee7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b34667-7a34-48fb-a1f1-0d60c793151c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab35d3b3-1f56-4148-bf70-0c2278ace605",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b54ccb8-a56f-40ed-a945-d8e38d1b8c33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b360d89-9650-49fe-993e-89a29eb568c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c491dc9-39ab-42b8-9120-e4a6a186a1e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edaf0f34-7ef5-4640-94e2-a0ccf44c45ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222faecc-dd66-4f41-8c77-ebbafd758552",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abf0b5b-5c01-4313-83fe-c1a5edff5de3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bf993b6-ddf7-4528-866b-8659f08338b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e4235f-ec9b-4f7f-8c81-b61a26944304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8aee290-fa5e-48b7-8a13-3825cefe7b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86e8844-fabf-4af6-b41b-6eba2118a3dd",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2816c9e2-357d-427c-8e49-0adfa473ff2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34543a90-7b66-4318-abda-3ca8619531ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9c7104-755a-48f8-a46c-a41dd5c81e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3700004c-b862-43b0-a05c-535947fc24ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9479d445-2c8c-4693-b350-4d8a58717c55",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2854a1ac-5b15-4bd4-a34d-52815642f970",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7b3952a-0d55-42a3-b29e-107141ee2868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d521dba-feab-4b6c-b4d3-ef79601d04ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af320863-4c53-4a80-8b1f-dc5be1d2ee10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7055d27a-670f-4e27-90a2-98d3f60011b8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e720c658-a5c5-408f-874f-f731e458a78f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d655021-42bd-4318-a91c-9719d7226f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d70f119-dd24-4c6e-b2cd-768bf7d27431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5442e219-5cd7-4fba-bd63-ff22982c3116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b2a0e4-f311-47b7-baca-615c1820ddc9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4328b13-468e-4cf1-bf18-061882a07b5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9cc20c1-e1ce-4876-9078-590c53a3060d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bb5584-6312-49e8-a2d1-d1d186c42afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce43644-cc2a-448b-b371-1dee330e3d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc3fde8-8126-40f3-a05d-ff1e7b0893be",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0243f407-e357-4d16-ad1b-ae51cc2cc26b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff0ffdf9-15ef-4ecf-9290-3add3be9a4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1766a89c-e70b-4489-a5c0-724d920a1330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d225d5d-cb09-4722-b8d2-46d105da8a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17720e82-b2ff-44a9-938f-e1550308c82c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce36f36f-2e42-4a0f-ba1c-396d8432b187",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c928e2c-c684-45a0-aebc-79aa17ae9aa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe797dc6-9abb-4ac6-9555-e45ac77a38c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b09ce5-94a2-47f4-92d0-a38bc22e653c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98607b56-3b9e-49df-9217-d3e093243342",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb9703a-1f7c-4cec-ba83-af4a58fd3008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bec803b9-af56-427e-8094-84949b480782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a624e1a-e87f-4211-b0fb-c4e537521894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612428f0-c196-4d4e-9bb9-e55b0225e85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c69219-482e-4a30-a0a5-c67ad2d68a3d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f20130-b0dc-40cb-aede-7141f2b66558",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3b14eac-b927-4af3-90a7-884ad15e90d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e6c42d-8d13-4f62-a164-1d65e4a0b8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ccecf1-29d9-4b74-94b1-9bf496c95bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35f108d-9341-459f-a8f5-46a62a883c8f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a80106-2cb5-4289-b686-16d10bec9387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efcf54c1-0004-4cb2-8644-379809051717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24134aa8-5356-46ba-92d2-8ba9b41241e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768a5edd-8848-4606-bd3d-b825bc16d1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5f4a14-c256-4c54-b0b0-4571fe5bfdc0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8380b69c-b102-4d82-9c25-fea3a3e4e94a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26fa0dac-12ed-43c6-8382-7f31a0a89cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59e17c8-eac5-416e-ae80-a5f9166f0490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea7bf2c-dda0-4af7-9274-426083eb2955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604d3921-1a6e-4815-a709-000939f420f2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4d1ba0-6b71-4f20-8942-aa53a6f1b119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dde03640-e31d-4657-8b90-6ac9b9e79734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d43929-4a04-4ccd-8936-3172cbbd5643",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8340e6-7a4a-4c41-9442-e7947d15daf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef450ae5-ded8-4305-ac80-278563c834e6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d582e382-c085-4495-a8ce-fabdc40877ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "135b2e5d-700a-4c6d-ab6c-f99cee5ca01f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c90391d-c47a-4572-8192-02f10a135c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba348bc-50b8-4391-8aab-01928228822e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96452c85-be4c-4642-8187-b2d5f2eec50f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe7d73a-6c38-4469-83a0-bc6e1f80bdc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aab6faf-1583-45f6-9b28-935c6bf07e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d570d18-a5f3-48bd-abd8-9a5c23b30d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8d45a7-26d0-4992-a2dc-5d641eecdb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe57e809-f66b-471a-82d4-a367e3d693b6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafad915-569b-44aa-bab5-43d95d23b277",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c69a5ee-f543-4e01-9979-7cbbb74536a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930e50a2-9fd2-4f98-abd6-cf32e93142b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848064c9-51dc-4ee9-8914-995c629bf819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bfa6b8-4130-41c1-a2ad-2e57ae7dc040",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd2ce3c-c997-4098-8444-345315569df1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9e5a9ef-723d-4748-9773-58c3f3258d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3023c23a-c3c3-41e3-9274-82f58e1d86be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97845b12-88dc-4740-9cfb-53a33bc7d6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7b4780-a296-40e4-b722-41298e0616df",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a942338-4a7a-4970-8955-9380baa1e255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b257c289-3fd8-43ac-b004-e8d216340fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23387d37-ccc8-4f93-a89b-4e835870ff29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86938142-765f-49e6-a43e-74e79d27d0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870f7b3d-793a-460f-a952-e3f3aa15499f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bee3d22-cf3e-4a3a-975a-a0f530c5d44c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "670a3e5e-778d-4cab-bdb1-04ceeed093db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9946f2-1214-4aec-94c9-1ba4e92511bf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e090eed-b752-4b18-ad48-17b2896ab0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d6b21e-77e6-48d3-81ba-adc78889139b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e6f733-2dfd-482d-b42c-62f9731e2ed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8573b2b-4dad-4c10-b9a0-275402d96485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c565d7-f380-416e-bda4-cffd30253e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67835210-01b7-4ad5-8257-4ecdd5923e4e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87385877-52a2-4c86-8088-822f583fef53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16212ce9-3e29-4068-be81-69bc1cd954a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccdbb9a4-c194-42df-a4a5-439ade0b245f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7eb89cec-6fac-44bf-8b18-441b5d7c6645"
                    }
                  }
                ]
              },
              {
                "id": "e5607694-7cf6-40bd-9111-0f49981997cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11342e9e-f341-4c18-821a-f7561bc3fcfd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c9cf65-4dbd-4a05-a55c-8ecc6ae27980",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b98ecf96-1970-4c23-a6da-0f657cdb965b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b70e2c0-77cc-46bd-8064-cab9a89d0aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dca7cf43-1665-46b5-8359-3580b1b3c4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44aa7c5-9ff9-49ce-b753-415d19c0e726",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2034d9a-edb6-4922-ab8a-240f95bf6c07",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "71ea0ad8-4189-4dea-9c34-667e29fa8240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc838169-027f-456d-a060-c0ce947232bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5b63968-9dd0-4917-8738-83207330b14d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ea313cc-bf55-4674-9c74-02f6a06af5e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2414adcc-e515-4787-a151-69af4fa7e5be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "59f5ec6c-7346-4550-a691-69e8a21042f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "655b394c-d9b0-4b45-a22c-1aa49a2f1621"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "250804a1-d5c4-43b2-abef-451791f37f9f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6e764d8-f49b-4aaf-848b-2a2070d38d19",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2773c90a-7cd3-4e0a-b856-eeb7f32027c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cee74144-1775-4b61-910a-9de1d4c6aaba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f718a678-3142-44e6-a7fe-5b536ea442cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a71bb6f-2242-4139-945d-7edaf75e240b"
                    }
                  }
                ]
              },
              {
                "id": "1d9bf4b1-1628-45dc-96a4-4341f24dd652",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "557b961a-8f23-4fa7-8c26-e4f95054626a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc74388d-da6e-475f-8df9-976e56638b2d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e03c3152-8c9a-4646-bbb1-f61655566292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e16653a-f290-446e-90b2-37501f5626c9"
                    }
                  }
                ]
              },
              {
                "id": "f8be5a6d-c218-49bb-afc1-daf165428994",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86da8588-e813-46ab-9b68-1a55f918f6e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "daed2535-51a1-4589-a1c2-e1888da18f2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a35e7fb6-e76c-4824-96b9-ba3632c6a484",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "755b2333-6715-4e80-b5fe-ed9c003ce723"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ed21d6e-46c2-48cc-bb14-6a5e5d43b178",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "85694d94-b604-4e23-b074-a5dfaf614536"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68b1a737-3214-4cc3-a0cc-6722c181d157",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9649d693-484d-4bdb-bc86-d332bf7092b1"
            }
          }
        ]
      },
      {
        "id": "4489ad38-83de-4f8f-aa2f-05d2d6313562",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "25e5fcd5-bfaf-422a-b40f-7a79442fe119",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4dbe2cbb-ca31-4021-b439-6e645482591c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c6138ea-2642-4cc2-b6c8-2bb180d8d006",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfeead26-cee4-4c0d-86e1-acf288abaa57",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8b8de218-a85c-4e03-be92-0ca35ecac56c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a6f472-b7b9-4084-8b9f-b90c16ed8181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48881ef0-eb06-416f-bfc0-714eea31e7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5023e59-57f7-4c76-8000-f8b7eba89247",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb27ec1-4162-4058-9273-e7df91ea4627",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b91683b6-c7d2-4521-9297-9a488dc97e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d124bc-2f50-460f-a404-f191da8c800c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30aecca7-a71a-496b-99dc-ae2ab7326f27"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9419f6a2-e990-4b59-bd7b-4796d356917a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3addbe8-c18d-4f63-922a-877fc84a1129"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c329f912-6b7c-416e-a2f6-8e9fc2cfadd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73b71760-e953-459f-8cfa-3016c67f8f45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27ab1557-acca-412d-a030-8c622429d96a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e1f69c8b-125e-45f9-b315-ec367ec94dc8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7356d22b-ebf2-42c4-b12e-b1ffa7119d97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41dd2f45-c758-499f-ab3f-16126c74467b"
            }
          }
        ]
      },
      {
        "id": "88d67d73-3e72-415c-b38f-998301335b02",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a1a15306-5691-48d2-8ee8-273151f9d968",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e90c7b1-db23-44e9-b93f-07745ca93aa2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b2ac0fd-230c-48d4-b40a-575774074ee5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd806397-a1d8-4066-b5bb-060657479e3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cc29e6bd-f16c-4c2b-8d28-c29ca48a2a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d332c63d-5a5c-4a1c-a56e-336deeafe3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "668f635f-2478-463b-b114-59961435058f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7bb73e-b597-4494-9f29-d3ac20fc1eeb",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146283de-4634-47bc-ade5-4512c3573e0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2f11b661-82ca-418f-a88c-ea51f37cc307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30634914-e1bd-4477-ad48-8e161da8a97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d391b7cb-08d1-464b-b214-60be4262cc8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee9caa3c-a9f8-4e30-babd-e8b8d29aa822",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79cd5563-690f-4393-9c81-485a5e8ca0bc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c741a7cb-6ccd-4b95-9701-03757360349d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6ea4dc3-4a54-4869-a83c-fbc4684bf6bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e77fba0d-c0c3-410a-a56a-2b3ce4d12161",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f13d8057-76d0-4367-b353-c39765f3b643"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2702a8e8-cbb3-40f9-9eff-b539b5cc114b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2d45bdb-bb0d-490d-9be0-23ebd8089561"
            }
          }
        ]
      },
      {
        "id": "1f020e67-cf0e-4e99-8168-39e2a08f9664",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "48f8b01b-3f1b-452c-8890-8cce5b773089",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0efb881c-fb4a-45bb-ae2c-5a24cc81a3b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ccea381-8c54-41c9-83be-09379b0db56d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e050fd73-39c8-4044-a477-1e3903b2d63b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e91d2cbf-76dd-45ab-a676-511c6e1e6c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d551fe3-f310-4410-ab82-2abb13c4faca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e5f97b0-87dd-4619-83e8-cf91b07b7e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489986b6-273a-45a8-9a32-de8e15d40597",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf48653-0478-4ee1-9a44-d4407628d9d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "57deb062-a432-492c-9f33-80677ef711b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f878cf-1bf8-468f-b15f-ddf57aa1e76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bcaf51b-ee25-4f3c-b423-b26fe8e97ee1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43a5d169-693b-4309-b0f8-7d58dda67966",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db340a55-760e-41d5-8d52-6b74d4881ff7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fc213ea-0d27-4d7a-bbaf-163e9892ac7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32fd1840-dc44-4bc4-a7e8-95c1507b3f8e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09b982e6-195c-4221-9f0a-0d2ed135d75c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "85748f8c-044e-4167-9754-df3351aa294c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b54cd9f-f43d-4bbe-9b36-8f113fb5ea04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e3be4fc-5e2e-4224-be55-928d7a4e8c5a"
            }
          }
        ]
      },
      {
        "id": "a0bb9faf-ea8c-43cf-bb1b-b490a770c1c2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f9b86d0-8dcc-4212-888c-38fde2d82587",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08da878f-22f7-4747-84fc-d484ec19a87b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2179626d-a4b9-476b-95f6-ce6714e5ca24",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f1e7307-acfa-4eb4-ad2a-8ea0058b6ccd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fcbc8b82-dfaf-4822-a700-4ae00c4702a0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 257.58076923076936,
      "responseMin": 15,
      "responseMax": 2855,
      "responseSd": 422.83161452942755,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666918557822,
      "completed": 1666918637672
    },
    "executions": [
      {
        "id": "f93c84a2-0299-4be8-843b-15b8543beaff",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0a16e81f-5a22-4c1a-bf46-2362ff2b2725",
          "httpRequestId": "dbffbdc5-147e-495c-ad1d-2f8b946094ca"
        },
        "item": {
          "id": "f93c84a2-0299-4be8-843b-15b8543beaff",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c3815a8a-0a1d-4985-937f-790d99e5bdc2",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 0
        }
      },
      {
        "id": "f558ffcf-1264-44ba-80f7-213c9fa42b15",
        "cursor": {
          "ref": "dee0929c-deb5-45dc-994b-1ead6e756c24",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0309c4a5-f6e2-4aa4-a3a1-ccf7ab9d1579"
        },
        "item": {
          "id": "f558ffcf-1264-44ba-80f7-213c9fa42b15",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3260a722-4855-47e9-8a8b-5091f9bc2e19",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "7dced691-072f-4646-a39e-3847bdf196f9",
        "cursor": {
          "ref": "585d2151-2a1c-42cd-9a0e-81471712d91c",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1110bfbc-1534-4e10-8cdf-e11c2671c60b"
        },
        "item": {
          "id": "7dced691-072f-4646-a39e-3847bdf196f9",
          "name": "did_json"
        },
        "response": {
          "id": "d3eb6d49-7f84-41e8-881d-c7fab6a0ace9",
          "status": "OK",
          "code": 200,
          "responseTime": 591,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94da2612-2632-472c-9f9b-d57982a62539",
        "cursor": {
          "ref": "6f84aca4-d0d9-433f-9ca5-7464d1879fc8",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e358000a-5825-4bf7-bd3d-b10d76b7f439"
        },
        "item": {
          "id": "94da2612-2632-472c-9f9b-d57982a62539",
          "name": "did:invalid"
        },
        "response": {
          "id": "3d56f763-c6f3-4541-b7fa-a26b04e538dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94da2612-2632-472c-9f9b-d57982a62539",
        "cursor": {
          "ref": "6f84aca4-d0d9-433f-9ca5-7464d1879fc8",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e358000a-5825-4bf7-bd3d-b10d76b7f439"
        },
        "item": {
          "id": "94da2612-2632-472c-9f9b-d57982a62539",
          "name": "did:invalid"
        },
        "response": {
          "id": "3d56f763-c6f3-4541-b7fa-a26b04e538dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a718e215-592e-46d3-9c36-621a696a8f73",
        "cursor": {
          "ref": "e3c46982-359c-4aa3-9213-a3708d725aa0",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7fd74dc1-83f0-42af-8c57-5a55f651e25f"
        },
        "item": {
          "id": "a718e215-592e-46d3-9c36-621a696a8f73",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f7c71584-74c4-4c9f-85d2-2dcf35671cbb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 176,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8da5968-57a9-49cd-95fd-04ca04f6e379",
        "cursor": {
          "ref": "17103fc7-dd42-44bd-90b7-788d0f092386",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eae037f0-8017-4bbf-a189-807c7881a4cb"
        },
        "item": {
          "id": "d8da5968-57a9-49cd-95fd-04ca04f6e379",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a4ad3f82-2643-4b2c-929f-ddef7b2a77e0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2a4d2d-afca-4f60-8407-1f4c337aa7a3",
        "cursor": {
          "ref": "138f2492-1fc8-4207-a728-3f2f76155b0b",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "32439c43-44aa-4c68-ad6f-382e601b0614"
        },
        "item": {
          "id": "bc2a4d2d-afca-4f60-8407-1f4c337aa7a3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7061e2fd-c584-4334-a995-398df2984efb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df65a985-9747-497f-8f51-e10d76b09ab4",
        "cursor": {
          "ref": "700d54b6-e744-4562-981a-a626de658cd0",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "66c36e70-4d36-4b87-8632-100c8a8f9e61"
        },
        "item": {
          "id": "df65a985-9747-497f-8f51-e10d76b09ab4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b58c783c-9b3e-4a2c-a20d-73b2dc1377ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 270,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df65a985-9747-497f-8f51-e10d76b09ab4",
        "cursor": {
          "ref": "700d54b6-e744-4562-981a-a626de658cd0",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "66c36e70-4d36-4b87-8632-100c8a8f9e61"
        },
        "item": {
          "id": "df65a985-9747-497f-8f51-e10d76b09ab4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b58c783c-9b3e-4a2c-a20d-73b2dc1377ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 270,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4463b36-f66f-4d59-afaf-c7fd7f6f97f9",
        "cursor": {
          "ref": "48a3d473-7bfe-49d7-99e7-dbcd334eabab",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "45eda374-fe99-4201-ae26-9afba58b97ed"
        },
        "item": {
          "id": "d4463b36-f66f-4d59-afaf-c7fd7f6f97f9",
          "name": "identifiers"
        },
        "response": {
          "id": "5a4e1544-66f1-4625-bd62-79d056e04a0e",
          "status": "OK",
          "code": 200,
          "responseTime": 1715,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a44e613-c87a-4e86-860d-5bed2dd31559",
        "cursor": {
          "ref": "6f4c940f-7400-4db8-a458-9b457923c27e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "06dab9ba-d85d-4142-a5c4-a7f50b2762fa"
        },
        "item": {
          "id": "7a44e613-c87a-4e86-860d-5bed2dd31559",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4783df69-dab8-4cf9-b524-fc8ef4e8734f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a44e613-c87a-4e86-860d-5bed2dd31559",
        "cursor": {
          "ref": "6f4c940f-7400-4db8-a458-9b457923c27e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "06dab9ba-d85d-4142-a5c4-a7f50b2762fa"
        },
        "item": {
          "id": "7a44e613-c87a-4e86-860d-5bed2dd31559",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4783df69-dab8-4cf9-b524-fc8ef4e8734f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0131b2cd-fb18-4661-b9b4-a7c29b84d1a1",
        "cursor": {
          "ref": "46427186-b949-467e-8dca-4f98cb2b6537",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cfa6fdb1-8756-4a96-9b00-c1d30544b2c0"
        },
        "item": {
          "id": "0131b2cd-fb18-4661-b9b4-a7c29b84d1a1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "033f052f-fb08-443d-b88e-a382837c05c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b179734f-95e3-43dc-94da-dd54d47b8481",
        "cursor": {
          "ref": "69bdd8f5-a694-452d-b153-ed77dc3b681a",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "aee73433-8aed-4852-a715-88c408c4107d"
        },
        "item": {
          "id": "b179734f-95e3-43dc-94da-dd54d47b8481",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0de713ce-a9da-4fc4-903b-81906e14c3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84666bfa-aa4b-4536-b727-33412a68125e",
        "cursor": {
          "ref": "f2f4d459-d32b-49a4-beff-3d4bf454efca",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2625aed3-10fd-4e45-a534-a3f7b6cdb0be"
        },
        "item": {
          "id": "84666bfa-aa4b-4536-b727-33412a68125e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "83ebd5f2-5cb0-4088-9469-c8730489d1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c107ec8-ee93-49a7-89a2-8deaf832b731",
        "cursor": {
          "ref": "3934576f-d803-4877-96b9-323e239a9639",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "373c7ec1-047f-4f9a-b0f7-3ebbd079688a"
        },
        "item": {
          "id": "7c107ec8-ee93-49a7-89a2-8deaf832b731",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "344da82e-c423-4e17-8f24-9791fa15f1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b10b93d-8242-41ba-8b33-121477b0a048",
        "cursor": {
          "ref": "8e9ac6fd-4089-45ea-8586-cd421032f197",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "dcc2a2a7-c507-4d0d-b5ee-297c26d494bf"
        },
        "item": {
          "id": "5b10b93d-8242-41ba-8b33-121477b0a048",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "05574416-7e7c-41ea-b14f-1538b6f22677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee3ff62-8a9f-4052-8a2c-7898e6934263",
        "cursor": {
          "ref": "05f8cd7f-bdc4-47e2-a13c-a011f822ff25",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "da436702-b8eb-4582-9bb8-b07c70c267d9"
        },
        "item": {
          "id": "5ee3ff62-8a9f-4052-8a2c-7898e6934263",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f68ec6cd-508f-4a90-a602-b17c943a05ca",
          "status": "Created",
          "code": 201,
          "responseTime": 2444,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "7a3a9263-7915-481c-90b6-add4336c7cab",
        "cursor": {
          "ref": "b2244373-67e1-4e15-ab6f-9596222c5396",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9a90f331-6aa6-4e47-a745-ef038dc3b882"
        },
        "item": {
          "id": "7a3a9263-7915-481c-90b6-add4336c7cab",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f8920e39-2b61-4b76-b98a-a15b67c7bba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696fed03-5c17-4a55-9e23-bf603b110ea6",
        "cursor": {
          "ref": "bbcb106a-309a-4e2a-887e-3e4427e2df53",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "290af604-a2b2-4f83-82fd-7e5a4d941ba8"
        },
        "item": {
          "id": "696fed03-5c17-4a55-9e23-bf603b110ea6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f5a67bfb-e411-4c9c-917d-b7f4be941c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ce5d7d-693f-4435-b6b6-c7d2558aabee",
        "cursor": {
          "ref": "41288657-acef-4648-91b0-834744234c2f",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "003c0fcd-0202-4972-8b84-94deb315c3fe"
        },
        "item": {
          "id": "37ce5d7d-693f-4435-b6b6-c7d2558aabee",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e323833f-ea2c-46d6-a9eb-57d42b7a3558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1af123-7f28-42fc-a491-d98b08dfbfc1",
        "cursor": {
          "ref": "70c25b7e-4e14-4a30-94eb-f979c4f3649a",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e7abaabf-3056-4cbe-8777-ef9fd09677e5"
        },
        "item": {
          "id": "2c1af123-7f28-42fc-a491-d98b08dfbfc1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5e5b58cb-27d9-442b-a6ce-3190ef87bcc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f11346-cb38-43e5-9cbb-1c475259127a",
        "cursor": {
          "ref": "4f3880d6-288e-4d23-ba40-6faa9099e949",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e5995254-c331-4fe6-aca0-9269685b2107"
        },
        "item": {
          "id": "11f11346-cb38-43e5-9cbb-1c475259127a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b4717249-0f6c-4125-a824-3c421e0342db",
          "status": "Created",
          "code": 201,
          "responseTime": 2855,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "03936afc-eaa9-46b8-83c3-e2fb16a809b3",
        "cursor": {
          "ref": "2e38086f-3df7-473e-802f-3340e14b6de5",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f23dd096-60dd-43c4-984e-8575813ac466"
        },
        "item": {
          "id": "03936afc-eaa9-46b8-83c3-e2fb16a809b3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e68fff95-8125-4304-80af-fbaa007bdc08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508311cf-0f77-4d76-8ed7-55dee3622ac0",
        "cursor": {
          "ref": "b4aee48a-1c11-411d-aab9-d1b000768be2",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "476357c5-3a55-43ad-ae1f-28d7f7df665b"
        },
        "item": {
          "id": "508311cf-0f77-4d76-8ed7-55dee3622ac0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a6c1d14c-29c8-4ffc-b577-83858557cf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0944c76c-b88f-421e-983b-aaf6354ae58f",
        "cursor": {
          "ref": "9397a32a-e1df-4248-98ca-2e836e928dc3",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2dabd684-7588-4bcc-a4c3-2cd3c10f35a4"
        },
        "item": {
          "id": "0944c76c-b88f-421e-983b-aaf6354ae58f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9e758793-5ddf-48f0-b325-488e7cf737cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e300264e-db3d-43ee-be86-e7ad62f3263d",
        "cursor": {
          "ref": "32e86f3f-c239-4053-9ad6-b6a51320300a",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6f5e5653-6a32-4b80-b29f-91a53fd2f19d"
        },
        "item": {
          "id": "e300264e-db3d-43ee-be86-e7ad62f3263d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "83e18972-330f-46dc-9526-de58c615f451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0a1bb6-d663-46cf-99ab-346435dd61ea",
        "cursor": {
          "ref": "0eff860b-0d2a-4089-bf4b-9f7e1dc44fc3",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e964c788-8583-449e-a7f2-d8168e105d73"
        },
        "item": {
          "id": "7c0a1bb6-d663-46cf-99ab-346435dd61ea",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8893f712-3336-485f-8465-4ceb7ecfb5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1ca1e7-d149-4cc3-aaf2-773103aec211",
        "cursor": {
          "ref": "5abbda20-8d69-44c5-96fe-8cf5c84b5961",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b3f44cf2-d5dc-46c0-8384-3c0100e0feab"
        },
        "item": {
          "id": "0e1ca1e7-d149-4cc3-aaf2-773103aec211",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ea1b82af-1f9e-43db-ac6b-d5f2b3525c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fabc97-2977-445e-bb4e-3462a9368136",
        "cursor": {
          "ref": "cd43190c-1fd8-47f2-8ad0-1de3dc05491d",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "30d7ba8b-6dab-4c29-8e59-c303a2bf27af"
        },
        "item": {
          "id": "a3fabc97-2977-445e-bb4e-3462a9368136",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ddce2797-363b-4e11-9d41-4ae25c7710f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08f1b30-8cb4-4808-af86-71086445505f",
        "cursor": {
          "ref": "5338f96a-d65a-447e-b75c-4c657aa79704",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "456dabec-ea35-4b7f-8b7b-59b2b02e0c1a"
        },
        "item": {
          "id": "d08f1b30-8cb4-4808-af86-71086445505f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "955dcc5e-ebe1-4579-a337-88d9a6b94178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f31e5f-7cf5-4359-84e0-4dbe6e66829b",
        "cursor": {
          "ref": "c79f1f35-bdf7-4c8b-b5b2-2181a1eb6760",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d3567f7e-1375-40cf-913f-5b6bb24f294b"
        },
        "item": {
          "id": "c4f31e5f-7cf5-4359-84e0-4dbe6e66829b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e0f8ec89-fcfe-4fca-8620-9ba21e303b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bce168-f258-4ac1-9a1b-163847195418",
        "cursor": {
          "ref": "40f9f921-e26f-4980-ac3d-b565dd810015",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3d90572f-73be-4823-855e-881f92e163ee"
        },
        "item": {
          "id": "05bce168-f258-4ac1-9a1b-163847195418",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5dccc6d5-eb6c-4b45-993b-933c055a460a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52357b33-25e9-4161-b835-b2f32c19be4e",
        "cursor": {
          "ref": "3c2798aa-73f6-459a-b697-620f94619cff",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c7d649f9-c3d2-4cf4-b998-91ea5648ecae"
        },
        "item": {
          "id": "52357b33-25e9-4161-b835-b2f32c19be4e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4f8bfb3f-1188-40e8-b4ab-6c4a076a1311",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f4b17443-de5c-49cb-a13b-7ae703986548",
        "cursor": {
          "ref": "4f6377ae-58f1-4a6c-9b1d-7a4b7d251327",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ffa43e39-0877-4247-89c6-00b88a03a77e"
        },
        "item": {
          "id": "f4b17443-de5c-49cb-a13b-7ae703986548",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "80bbdcfa-26d1-4546-a654-11822f9b8c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89866394-f1c5-4db7-b3fa-cb6305891f4e",
        "cursor": {
          "ref": "b94a555f-255e-47a4-8ed9-03845a69105a",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "66856ad4-0f62-490f-a46a-5782406ee1ef"
        },
        "item": {
          "id": "89866394-f1c5-4db7-b3fa-cb6305891f4e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fe08fa25-f8a6-4fd3-b4d4-98337ad7239b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d788837-4a12-485f-9d87-c31d891320d3",
        "cursor": {
          "ref": "d6e7659b-801a-4ba5-bec3-3275a35466dc",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "656660ba-0cfb-4120-899e-b1820dcdc2b7"
        },
        "item": {
          "id": "4d788837-4a12-485f-9d87-c31d891320d3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5d87106c-f4b3-4cd0-bcf7-3b9f39b59b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7b3f0c-9e16-42bc-bf36-1c1474276ec9",
        "cursor": {
          "ref": "278a9bfd-3d1e-4d82-814d-372cd50c0a80",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8a2f42f2-aea4-4056-8eaf-54960f80baf4"
        },
        "item": {
          "id": "1e7b3f0c-9e16-42bc-bf36-1c1474276ec9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "125ae21b-483c-472a-9aeb-001fc583807d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f268a029-2273-4533-ade7-6d34a8cac43c",
        "cursor": {
          "ref": "ab430d4b-a4f0-43d5-b62d-b954f2cf6a60",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ff17ae5f-2e3c-49c6-b5e9-da088e616b36"
        },
        "item": {
          "id": "f268a029-2273-4533-ade7-6d34a8cac43c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c6017f22-22d8-4e05-b20a-21c065337d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea57f449-8242-4c04-8dfb-c2e7e8352be6",
        "cursor": {
          "ref": "670c66cc-bf0f-49d8-bca2-449229b0a797",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3c501117-7c16-436d-ad69-b2ce211d02e7"
        },
        "item": {
          "id": "ea57f449-8242-4c04-8dfb-c2e7e8352be6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f7103a17-2252-49f9-ab1e-9e01c9fc072d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bda2555-6a6d-47f9-bd31-a5f0f1ec3a0a",
        "cursor": {
          "ref": "c5856e22-e02a-4278-af86-a2aebc197a5b",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2fdf2f19-c8e9-48fe-9db5-4546c79ddcf5"
        },
        "item": {
          "id": "0bda2555-6a6d-47f9-bd31-a5f0f1ec3a0a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "46440fae-13e4-4c3f-8b5f-c27442f9cf47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a92cb7-eb4a-4eab-98ff-6bb19aac68f2",
        "cursor": {
          "ref": "2018a032-2559-4549-9c30-158aeec6b686",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dda276a3-f444-4cd4-96f9-d5aecea1b79e"
        },
        "item": {
          "id": "68a92cb7-eb4a-4eab-98ff-6bb19aac68f2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0541ce59-f02f-42b4-8d48-7d6239d32d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802a36bb-a1ad-4d4d-9358-6ec50d41d185",
        "cursor": {
          "ref": "9eb003d0-20f2-493e-8e56-1af2cbc142b4",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a1ff8136-d526-4d43-bb9d-9cdceb4d06cb"
        },
        "item": {
          "id": "802a36bb-a1ad-4d4d-9358-6ec50d41d185",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "67299235-522b-424a-a828-9bf8bfc7ea55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0cea11-9865-44ee-8bd4-1bbfcbd57b7f",
        "cursor": {
          "ref": "50064415-dfbe-4f62-bafb-a564657d5370",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5c246c5b-86f3-43d3-862f-bf0f6d487c57"
        },
        "item": {
          "id": "7d0cea11-9865-44ee-8bd4-1bbfcbd57b7f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "695f8ecc-de56-4dce-9239-8f6202e6dfe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2043b7-b951-4c0a-a5b9-acb560cf31c2",
        "cursor": {
          "ref": "cce34916-ead9-403a-9fef-f5c51a4cc0c2",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d29c0a37-d9d3-482e-972e-47617c82ab43"
        },
        "item": {
          "id": "9c2043b7-b951-4c0a-a5b9-acb560cf31c2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "24b895e3-3fb2-4082-9cb5-789f90fab4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d039adf2-fc61-4650-94e4-8374f134ebd9",
        "cursor": {
          "ref": "5523d9a5-d9d3-480e-9976-7f51f1c1dd17",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bfdee82a-ba71-438b-aa8c-a1ef10af5812"
        },
        "item": {
          "id": "d039adf2-fc61-4650-94e4-8374f134ebd9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c9025f6e-62cb-408e-9a37-39cffa0ff5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4260f094-a10b-41f4-b920-14d672f6084e",
        "cursor": {
          "ref": "0d9ad845-6e84-4760-b87f-90a5bb808663",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "11848f1e-9251-44d8-a810-ee6d8f141205"
        },
        "item": {
          "id": "4260f094-a10b-41f4-b920-14d672f6084e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "63a0cc5a-0abf-4926-ac42-bf808b435860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5941a64d-9f0a-46f5-9236-03f7cc2a31ad",
        "cursor": {
          "ref": "1b8072a3-4e80-43a3-9cf7-68f5ff7c2905",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "32d45dc3-5e19-4869-b1b0-dc810a254102"
        },
        "item": {
          "id": "5941a64d-9f0a-46f5-9236-03f7cc2a31ad",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1ee33e90-b8f7-4876-8620-d47d21569987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71e3839-770b-4d24-a65b-618b8390326e",
        "cursor": {
          "ref": "0936b6fe-3fbf-46e9-a6bd-c81e07bcde31",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a2a3b0ff-fdf5-4db2-a4d2-79010c5f9d96"
        },
        "item": {
          "id": "a71e3839-770b-4d24-a65b-618b8390326e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "613c46c7-67d9-4960-9799-8ca193f27bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5a74da-460b-476e-99a4-9d12a9e8ddef",
        "cursor": {
          "ref": "dc66abbb-b643-423a-8c3a-0a43bb7c61e0",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "00e1c2a2-bb89-43f4-a832-7aa6cd87448c"
        },
        "item": {
          "id": "9a5a74da-460b-476e-99a4-9d12a9e8ddef",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b7c0be8b-f1e2-4b1c-aabb-1155f9f679bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84133745-e6e5-4f4b-b27b-6a072cf9b849",
        "cursor": {
          "ref": "4290f5a9-fdc3-47c7-bfa7-130794aa7a7a",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5f96a876-2a59-4f7b-b403-8eb52d54a00f"
        },
        "item": {
          "id": "84133745-e6e5-4f4b-b27b-6a072cf9b849",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "df53f2f0-be08-4512-b42c-8987e95f82ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec88cb4-190b-4ad8-b9c1-8f85affbf80c",
        "cursor": {
          "ref": "900d8065-75a5-4a68-91f1-ad7c3218494b",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cdf184e1-eabf-45f8-9bbb-2ea53a282b8e"
        },
        "item": {
          "id": "0ec88cb4-190b-4ad8-b9c1-8f85affbf80c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a243d3a9-fab7-4fa3-adc9-09e1e8771638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2325997b-898a-4b09-93bc-fa19db86afc0",
        "cursor": {
          "ref": "447ef9a6-51b4-4992-ab6f-fa1bca04754b",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "77b517cd-8ed7-4f13-8b5c-5996fba3eb10"
        },
        "item": {
          "id": "2325997b-898a-4b09-93bc-fa19db86afc0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1d541dcd-eb9b-4e8b-8706-f5484d853168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da062a09-0698-45ab-a09a-1479b3477fb6",
        "cursor": {
          "ref": "71519d6c-45c9-470b-b9f1-d2a7695e51da",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3afd3f9a-7120-4432-be1b-88a810a0defc"
        },
        "item": {
          "id": "da062a09-0698-45ab-a09a-1479b3477fb6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ea4555e5-bebf-4b12-9d22-176236c04cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5b784f1e-7af6-49ac-b14d-6daddf192ef4",
        "cursor": {
          "ref": "cc9cca19-5f97-4ead-b0f7-7563280157c5",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ff1bdee2-4db4-455e-8aa4-c6d55bb5039d"
        },
        "item": {
          "id": "5b784f1e-7af6-49ac-b14d-6daddf192ef4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "31028237-f1de-42c5-88b7-b2ee7dac9836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1804554b-968e-4e9a-9667-62f2702fcb09",
        "cursor": {
          "ref": "07f50076-819e-430e-968b-e874b0ef9f0b",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8f9fa0d4-a7b2-46bc-b367-f613c365383c"
        },
        "item": {
          "id": "1804554b-968e-4e9a-9667-62f2702fcb09",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2019e27c-39ad-486c-a853-f6bd84d65372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0b91a3-32ea-4414-a6e1-3ecc3806bbaa",
        "cursor": {
          "ref": "f283d91a-aa82-4328-a105-e22d0d48ddf9",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9ce02737-9080-4ebe-ac3b-77b557ba5e27"
        },
        "item": {
          "id": "3c0b91a3-32ea-4414-a6e1-3ecc3806bbaa",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bb998ad4-5a50-4244-8e5a-97372883fbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edf991f-f84b-48bd-b65e-9c9080321c26",
        "cursor": {
          "ref": "8b73073d-703d-4744-95c8-7bab112a36c0",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e28ba99f-ccf4-47d0-97a3-eefb4a6cadf4"
        },
        "item": {
          "id": "3edf991f-f84b-48bd-b65e-9c9080321c26",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bec346cb-6acd-4b14-9242-c633c6507ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f58069-4f40-4da9-9f30-01be0541c742",
        "cursor": {
          "ref": "8463dc17-ce74-4284-8d95-828cf82bcd0b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "10c7a2d9-abde-40da-a5bf-c01fd758c65f"
        },
        "item": {
          "id": "73f58069-4f40-4da9-9f30-01be0541c742",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "137d4f4b-404b-482b-9870-5598ff3a57cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110cc31f-ba71-465e-96b3-70bb45d28bf7",
        "cursor": {
          "ref": "32ed55ae-d1e2-42a2-8d57-00c228687c78",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8e875935-8adb-495a-8027-4f4299861631"
        },
        "item": {
          "id": "110cc31f-ba71-465e-96b3-70bb45d28bf7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c22b9afa-da2b-407e-94f0-a705a752f8c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3c5627-79d8-432c-944f-3a2a7d1081d4",
        "cursor": {
          "ref": "f2d0b7d2-4662-401a-b0a9-d6fe1a7bb216",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9f1a8d0f-4e10-47b3-8d45-255e92061716"
        },
        "item": {
          "id": "bf3c5627-79d8-432c-944f-3a2a7d1081d4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "831817ce-93a3-4231-9ab0-813fbf26b30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7a1741-fa22-4b58-a6bf-1ffcb0e5d5fa",
        "cursor": {
          "ref": "f0096699-30d9-4407-bc4f-017acb23057d",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1178cd34-0182-4e32-b4e8-4c4c85de095e"
        },
        "item": {
          "id": "7a7a1741-fa22-4b58-a6bf-1ffcb0e5d5fa",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1b64c0fa-d9df-40cf-8720-a20d29c00bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3b703c-4df0-4566-8cf8-dcb2ccebf449",
        "cursor": {
          "ref": "538f049c-7708-4186-bf34-91a7d48c8d18",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "cbc28ab1-b6da-46c4-aa38-ed0a92650366"
        },
        "item": {
          "id": "2b3b703c-4df0-4566-8cf8-dcb2ccebf449",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2ffbffb7-188f-4a29-8baa-6d6d45b0f671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1476fbb-d3c3-4af4-9a43-944c707c3434",
        "cursor": {
          "ref": "9c6c265c-9124-4176-a84e-3617e5e31c4e",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c7702757-bbae-4ec5-8d2c-290cfe3c6529"
        },
        "item": {
          "id": "c1476fbb-d3c3-4af4-9a43-944c707c3434",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ea7671bf-92ea-4c25-8766-c10588582ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4e2dfd-bb9c-4019-9db1-c2cbd18a9b3e",
        "cursor": {
          "ref": "9ba1ea8c-111d-40a8-a0dc-5c079c3c5a15",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "933726c0-a037-4f16-801f-c5d89c16dff5"
        },
        "item": {
          "id": "9d4e2dfd-bb9c-4019-9db1-c2cbd18a9b3e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cbc30038-b589-48e9-bf7b-782e16580665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71013002-27df-49cf-8256-b74098ceb6d8",
        "cursor": {
          "ref": "7e53359f-9778-4d7f-a088-079703aeecec",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f07ef5d9-e644-4ccc-82b7-4f062eb25b0f"
        },
        "item": {
          "id": "71013002-27df-49cf-8256-b74098ceb6d8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d42ed7dc-5e40-48c0-95d0-74df269096f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3fbcda-f8c0-4f5b-9257-834de524b971",
        "cursor": {
          "ref": "34a3ba2d-c82b-4706-95aa-d1ea29a22baa",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cc4d0333-ec64-41e9-a6ec-f6fffe27c82e"
        },
        "item": {
          "id": "4a3fbcda-f8c0-4f5b-9257-834de524b971",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "99e073c2-acd4-455b-b7a8-a10324e8f99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67514dd-8073-4fc8-8fe8-9b4270761992",
        "cursor": {
          "ref": "1a09c038-b112-4322-a309-3e7762b703dc",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b08a1085-7ec2-44c6-885e-8c3796e02a91"
        },
        "item": {
          "id": "e67514dd-8073-4fc8-8fe8-9b4270761992",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f29b4dcf-a24d-42fb-8d2e-e532a60ceec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bfe1d8-0cdd-4773-847d-7c006617fcae",
        "cursor": {
          "ref": "f5153f1a-7119-4e4a-85f3-d8e3d11e5ee1",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3d9317ce-75de-47e7-b5c6-70ba85ab20b7"
        },
        "item": {
          "id": "35bfe1d8-0cdd-4773-847d-7c006617fcae",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5d857de6-7873-4337-80fc-30e1a809f431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfeacd83-d0e6-4f5f-b2dd-0f4fe0df9580",
        "cursor": {
          "ref": "eda0b507-e97d-4168-b5c8-9cff8cc05d0b",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a6ae7cfe-eab1-48f5-9472-f665d55709e0"
        },
        "item": {
          "id": "dfeacd83-d0e6-4f5f-b2dd-0f4fe0df9580",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b38ea810-9aa8-4291-823c-e5efbc050f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e2f5eb-e1d5-4865-b475-73bc3d65a4b0",
        "cursor": {
          "ref": "1d44f150-416f-47ba-84d6-aac2f8eb5525",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "44e456a8-5e89-4947-b31a-c9458421f19c"
        },
        "item": {
          "id": "66e2f5eb-e1d5-4865-b475-73bc3d65a4b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "60abf154-5cf7-47ec-a457-13fac4471277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1369,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78cd0fd6-4347-43df-917e-e348c1754a41",
        "cursor": {
          "ref": "65c8f80b-81f0-4f4c-b85e-fd41ebdf8d9c",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "70231014-dd65-408c-8cbc-656101632c98"
        },
        "item": {
          "id": "78cd0fd6-4347-43df-917e-e348c1754a41",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6e2ee3c2-6272-45e5-8b2d-9ba5606a476c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bf5eb1-6a35-460c-bf5a-f60a5306dbdd",
        "cursor": {
          "ref": "42fa23fd-dde7-41c2-8114-ddb8f8e6fc00",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "514743ea-c9ed-4a6e-ac16-c906b2579fc3"
        },
        "item": {
          "id": "92bf5eb1-6a35-460c-bf5a-f60a5306dbdd",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0dd96ecc-b92d-449c-8413-715ab472f1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34164db4-b1d4-4e56-9417-dae7e0d67bb4",
        "cursor": {
          "ref": "b7b5ecb5-01da-4412-a5cd-b0b710c7c668",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "72d5ea52-7add-442b-9fe4-e94abb111bf5"
        },
        "item": {
          "id": "34164db4-b1d4-4e56-9417-dae7e0d67bb4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "981e471c-d148-4b12-9803-2a81559e65cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91481f8-ecf7-4633-a7d1-593edfc1ad1a",
        "cursor": {
          "ref": "b081bb83-8f5a-494a-9f88-e215314821fc",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2db683c1-1573-4232-b1b0-2847ea59bada"
        },
        "item": {
          "id": "c91481f8-ecf7-4633-a7d1-593edfc1ad1a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "25647531-a821-4c23-8aa6-8033479050b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8feb3d-1523-426d-9c4a-dba8fd57a49e",
        "cursor": {
          "ref": "e117d6e0-278b-4b5c-989a-630ecde413fd",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e6378fe1-7a97-40f8-81fc-dccb7e87a3c6"
        },
        "item": {
          "id": "4b8feb3d-1523-426d-9c4a-dba8fd57a49e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bef81ab3-5a1e-41af-b228-cc8667441cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafecfd7-3319-4448-aeb8-4285f2905c8f",
        "cursor": {
          "ref": "f969d07d-9c05-41a7-9092-f1c31548d4bc",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b1696b11-3227-4aef-aedb-25fc26fd8f83"
        },
        "item": {
          "id": "eafecfd7-3319-4448-aeb8-4285f2905c8f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d4e2ffd2-bf1a-40c8-9bc0-c0d74c4d1379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661e8871-4139-4a0d-882e-99ae927dd697",
        "cursor": {
          "ref": "9130828f-4235-4f08-b3d0-3d69ad2538a5",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4b0125c7-f95d-417e-a2bf-823b5765c1b3"
        },
        "item": {
          "id": "661e8871-4139-4a0d-882e-99ae927dd697",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "66ebf064-aca4-4c54-88cb-be4495a92a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1075,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282ef1b2-8c4b-438a-a7c7-a9a5b5cc020b",
        "cursor": {
          "ref": "0e6bcf82-e0fc-483e-b0cd-d301e9870678",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c4d9edfd-686f-412f-920f-487a29ca8d2f"
        },
        "item": {
          "id": "282ef1b2-8c4b-438a-a7c7-a9a5b5cc020b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b27eb303-5c13-417f-8aba-ac194acf165e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0929332e-9d52-4044-a77f-69a440d46a66",
        "cursor": {
          "ref": "3f63adae-e88c-4227-b780-375db6d9079e",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "acf8a149-8cc0-4d75-b8ee-26148c522063"
        },
        "item": {
          "id": "0929332e-9d52-4044-a77f-69a440d46a66",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0c4ea052-a597-4cd8-a26c-5a99fe8108d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72aa03ee-8e80-435f-99d6-36d9d3630a0b",
        "cursor": {
          "ref": "2690e1a9-487f-449c-b3bc-2e17e1728687",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "49f679e0-4afa-47c7-90b7-87aed6f040e5"
        },
        "item": {
          "id": "72aa03ee-8e80-435f-99d6-36d9d3630a0b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e07f4f6d-a512-4d64-aec9-9a847e4af61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a680d3dd-3699-459d-a6f0-1b9b96a8d652",
        "cursor": {
          "ref": "47a4e474-ee1f-45e7-98b7-78cc0e2f30c6",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b1fa5071-7b4c-4037-996e-501f2b885d5b"
        },
        "item": {
          "id": "a680d3dd-3699-459d-a6f0-1b9b96a8d652",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b14830c7-d8e8-433d-a9ee-a406a69f7f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d9ce34-d9f0-4709-890e-c4e08db54013",
        "cursor": {
          "ref": "2dbdf5f7-253d-45b9-adbc-42ad4db7c436",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "aac60594-a339-4b53-9f7e-88aab7b543f5"
        },
        "item": {
          "id": "d3d9ce34-d9f0-4709-890e-c4e08db54013",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "014fb0df-ef99-45e6-a162-ad3e2c66afa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b393c32-6961-44b5-9156-ed800d49b7bb",
        "cursor": {
          "ref": "5b9e440c-a3d7-4f68-85b9-cb1fe0445192",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7bf9e171-66d0-4bc8-8e2d-61e2656971fd"
        },
        "item": {
          "id": "1b393c32-6961-44b5-9156-ed800d49b7bb",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "66e69511-5b5a-409d-9cce-52a47b2ec6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efe5eb1-4412-4bee-bdea-6350f2ba4974",
        "cursor": {
          "ref": "ef68db59-09da-4f27-855a-60ce711a1ab6",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7b7ba28f-b0af-4e08-896f-e1a9cb448073"
        },
        "item": {
          "id": "4efe5eb1-4412-4bee-bdea-6350f2ba4974",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "03809e20-4954-41c6-ac5a-3958ada613cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 666,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d80fe5-6ed9-4391-a959-78d99420d552",
        "cursor": {
          "ref": "6f3296f4-40c2-448b-a032-8ce0b6646e56",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "82bb0920-65a3-40f2-ac92-3a034f7b52c5"
        },
        "item": {
          "id": "c8d80fe5-6ed9-4391-a959-78d99420d552",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8ef64a15-0105-480d-b705-805d1a9f1af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8d3572-ec1a-405a-8681-6fe89bc016a3",
        "cursor": {
          "ref": "f9785cd2-478f-46d9-9cbc-1816c9481499",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0eb10000-d9d5-4b1f-acc2-09aa959e59da"
        },
        "item": {
          "id": "7f8d3572-ec1a-405a-8681-6fe89bc016a3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b7de6388-ac2b-46fc-a381-ffa18106276a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97d6aee-fe27-4d43-b9e1-eb813fe6e74a",
        "cursor": {
          "ref": "9995b6f0-1ab6-4492-97a6-e4a51187649e",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f5598c5b-8b08-4a8d-8157-cdcd6f63718f"
        },
        "item": {
          "id": "b97d6aee-fe27-4d43-b9e1-eb813fe6e74a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "42ae74f4-985b-4fd0-9289-3236a74ec73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bae1dbd-7942-4695-ab2b-fc676fb02285",
        "cursor": {
          "ref": "5c0a53b2-8c18-4f95-a08e-eddce31a8e4d",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8090218f-7bd1-4643-b132-126c0a2965ba"
        },
        "item": {
          "id": "1bae1dbd-7942-4695-ab2b-fc676fb02285",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9e055c93-f314-4b82-b611-60e8d008d86c",
          "status": "Created",
          "code": 201,
          "responseTime": 555,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "0e5889c5-515f-4e1c-856f-a2538e7c85a2",
        "cursor": {
          "ref": "938bcf9b-d656-45d6-81c2-411d408494d4",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "45f90e3f-a8b6-40c4-a16d-d24c8de5ae55"
        },
        "item": {
          "id": "0e5889c5-515f-4e1c-856f-a2538e7c85a2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0bc235fc-c7b6-47fa-bcf4-39e0ffaf3ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9dfebc-6ec8-477e-9fa0-0b9a7bb164c8",
        "cursor": {
          "ref": "d8a88ce4-e741-4cf5-a043-ac09c4f4da02",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "66af7dea-c3fb-4514-b8b1-bb5e9e58f34b"
        },
        "item": {
          "id": "7c9dfebc-6ec8-477e-9fa0-0b9a7bb164c8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "009102c9-f759-4e89-9a6c-8d6f12c76542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66c241f-4ffd-42c3-b267-2c46c1d66d7a",
        "cursor": {
          "ref": "c5e61fe6-b68e-4de5-99e5-b9aacfe6ae3b",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ff310ab5-a0b5-4f23-afed-ac4e60d5990d"
        },
        "item": {
          "id": "e66c241f-4ffd-42c3-b267-2c46c1d66d7a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c13e28f9-cbbd-476f-95fa-10064d48baf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8086d3-7fc6-43b3-81f3-743bdc940bf9",
        "cursor": {
          "ref": "da8c1a8b-68a6-43b0-9caa-ce091fc656d2",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f67133d4-6f93-4910-9055-55e268f1abe7"
        },
        "item": {
          "id": "cb8086d3-7fc6-43b3-81f3-743bdc940bf9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8aafdcc4-7f86-4ff1-a461-2de5934d172d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17ad9e3-0c89-4ecc-aa63-59edf84515c0",
        "cursor": {
          "ref": "b3e72f53-e38a-4f40-ba3d-93e0a619453b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9dcf2754-2d01-4c97-ad2f-182f9325d28f"
        },
        "item": {
          "id": "a17ad9e3-0c89-4ecc-aa63-59edf84515c0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "163617fb-7c4d-48c4-a8bb-1cc7944ca1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4a21bf-4fca-4134-b949-9cf796977c5e",
        "cursor": {
          "ref": "93e91586-858b-48fd-bfb4-8b7ab4a94a75",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c842c765-a7aa-4f9c-a2a7-fb75bbd04ec4"
        },
        "item": {
          "id": "3b4a21bf-4fca-4134-b949-9cf796977c5e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fc5d36a8-6404-4323-a472-c7e580ac92f6",
          "status": "Created",
          "code": 201,
          "responseTime": 505,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "39c75b2a-96b2-4226-9e36-0b577af64c32",
        "cursor": {
          "ref": "05c55542-303d-4c63-8581-aaa4c758ddb5",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "aa29f399-1282-4f12-b825-c61d2ce2eb9b"
        },
        "item": {
          "id": "39c75b2a-96b2-4226-9e36-0b577af64c32",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d4cf39bc-bfe4-4a90-b4cf-9cb665edb648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7fcc77-199b-4290-b4bd-e967f00e3008",
        "cursor": {
          "ref": "c6a871bc-42f2-4b87-a4cb-2803836a2251",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2dfb4ec8-d3c8-453b-b117-2a7448560572"
        },
        "item": {
          "id": "7b7fcc77-199b-4290-b4bd-e967f00e3008",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a4842d05-3cbf-4f17-a2b1-93fc284ccadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1efff4-12a2-416a-945f-a7214fcffe0e",
        "cursor": {
          "ref": "dbacbaa8-9c91-4339-a729-be6179dc4458",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "59882539-612a-4514-8190-9370b6ec462b"
        },
        "item": {
          "id": "1e1efff4-12a2-416a-945f-a7214fcffe0e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f4e53c59-e714-447e-aca6-d59d7d13bdcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb21eae-48dc-44ae-8851-9bdf9e3af7cb",
        "cursor": {
          "ref": "4b20ee08-89c9-47f0-8718-3ea591536258",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "36a69032-66a2-4c0c-8b7c-bfbee9d84157"
        },
        "item": {
          "id": "8fb21eae-48dc-44ae-8851-9bdf9e3af7cb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cd4df5dd-2175-4778-ad3a-50a0ca9982ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc67b814-3181-4793-9f2f-6f7339996535",
        "cursor": {
          "ref": "9207dce3-6b5f-444e-a4d5-711bbf4dd282",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "773e5e2a-122b-4d90-b1a0-b02ab22b5c56"
        },
        "item": {
          "id": "bc67b814-3181-4793-9f2f-6f7339996535",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6bbf8a82-52ce-4803-970e-111986ebce2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83553f8a-0e88-42ce-9a83-932f8114fc06",
        "cursor": {
          "ref": "8acc45bf-9458-475d-a135-e8e87ab093c3",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f6009b8f-93e4-49e7-9e5e-56c05e2618ec"
        },
        "item": {
          "id": "83553f8a-0e88-42ce-9a83-932f8114fc06",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc818006-7e6a-4445-bfd3-546c0860bcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83339eb2-dfe9-488e-8c0c-d56026fc922c",
        "cursor": {
          "ref": "5576fe24-6eb2-4360-a64a-d4a93679002c",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "487397ed-f834-4f54-9e6d-4cab55159f41"
        },
        "item": {
          "id": "83339eb2-dfe9-488e-8c0c-d56026fc922c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8d4af9ff-3084-43ce-926d-c974704cbab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4094db8-0eda-4091-8a37-e9c1f150e155",
        "cursor": {
          "ref": "7cfb7c8d-a369-4c4b-981a-fa37d6c58b20",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "144a25e2-d287-4b57-a39e-60dbe37495b7"
        },
        "item": {
          "id": "a4094db8-0eda-4091-8a37-e9c1f150e155",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "87986fac-82fe-4e1e-b53f-2cd8b50949b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249abf6d-abdd-44ff-a065-4a08511fdcef",
        "cursor": {
          "ref": "393b4301-faa6-4a6c-aa16-a9e298b7d1ed",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c7e66552-14a3-4d5c-8415-8fb322ac12fc"
        },
        "item": {
          "id": "249abf6d-abdd-44ff-a065-4a08511fdcef",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "17b0214e-adba-4b30-924c-ad3ab28da037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1d4f810f-f1ea-4ae2-861a-cb1a5afc3a43",
        "cursor": {
          "ref": "d71e6150-2b1e-42ec-badf-8e82f767b523",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9ea7e2d5-d7f7-4c82-8510-d1bb61ef0ddb"
        },
        "item": {
          "id": "1d4f810f-f1ea-4ae2-861a-cb1a5afc3a43",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0394c941-7172-4f78-8caf-df1d7d0b62e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "1b488cd2-7314-4581-a9e5-bc00cbd07360",
        "cursor": {
          "ref": "50fefb48-41c7-4397-b2bf-b64ab81bbeab",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "660d0b4a-f168-4fce-a83b-b94ab4847284"
        },
        "item": {
          "id": "1b488cd2-7314-4581-a9e5-bc00cbd07360",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bfedac93-3e08-4758-b406-9f22f296142f",
          "status": "Created",
          "code": 201,
          "responseTime": 1986,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfff79b-1e20-4aab-885e-c2dd229b028c",
        "cursor": {
          "ref": "b4b94655-7d61-43e0-b9f5-428e879bd440",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "53460663-9f8a-4782-8e9d-7583c1c9fcee"
        },
        "item": {
          "id": "4dfff79b-1e20-4aab-885e-c2dd229b028c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "469ef1a9-84b0-4e4a-a0b9-8f6827bfa33d",
          "status": "Created",
          "code": 201,
          "responseTime": 1079,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7562d96-2177-4914-a235-617d4c3b399c",
        "cursor": {
          "ref": "38e063d1-19af-49c6-ad33-2958f996f006",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6b6374a2-49a1-4c86-a437-82be2a8dae6e"
        },
        "item": {
          "id": "d7562d96-2177-4914-a235-617d4c3b399c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f5e671e2-c0cf-4964-9cd2-28b7b045954a",
          "status": "Created",
          "code": 201,
          "responseTime": 772,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d47151a-8a50-47f3-a7e8-9d5818e358a9",
        "cursor": {
          "ref": "81e880d9-d5ff-45af-be7f-d9875904027c",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "65411fdb-65da-4bb7-8ba6-2fc4c4697edc"
        },
        "item": {
          "id": "9d47151a-8a50-47f3-a7e8-9d5818e358a9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3b13aa53-5a2b-44da-ab41-9ed30f57bcf0",
          "status": "Created",
          "code": 201,
          "responseTime": 740,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ce6725-7169-41fb-af51-8a3adc235041",
        "cursor": {
          "ref": "499cfd84-18ea-4bad-a6d8-797f6a0c937e",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "584e269e-b5c5-49bb-8268-c01e9d0822c8"
        },
        "item": {
          "id": "73ce6725-7169-41fb-af51-8a3adc235041",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f3e3d44b-a2d8-45cb-b55c-c9dfda037c0d",
          "status": "Created",
          "code": 201,
          "responseTime": 1345,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "5662bdf5-f265-45a5-8cad-a6494e9c2412",
        "cursor": {
          "ref": "0e6f08a0-6cd7-409c-80fa-a5f021a19ee9",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5c5f66e6-3ea0-41f7-96da-aef92c8cec04"
        },
        "item": {
          "id": "5662bdf5-f265-45a5-8cad-a6494e9c2412",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f0ec6166-41a6-459f-aaae-8e57da2dd58f",
          "status": "Created",
          "code": 201,
          "responseTime": 1488,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb119958-41cd-4ec3-b260-299f34bf3dda",
        "cursor": {
          "ref": "d8ef8e45-67c9-4d83-899f-930cb77a73ea",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "44528301-37fc-41bf-acee-442beb845e09"
        },
        "item": {
          "id": "cb119958-41cd-4ec3-b260-299f34bf3dda",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ed51ae7e-35b5-477a-beef-30593ad7b064",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "cb119958-41cd-4ec3-b260-299f34bf3dda",
        "cursor": {
          "ref": "d8ef8e45-67c9-4d83-899f-930cb77a73ea",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "44528301-37fc-41bf-acee-442beb845e09"
        },
        "item": {
          "id": "cb119958-41cd-4ec3-b260-299f34bf3dda",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ed51ae7e-35b5-477a-beef-30593ad7b064",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "dcabdde3-7c52-4365-ab16-4e8cecd024fd",
        "cursor": {
          "ref": "71f2e323-7bfb-4a95-9a0e-654e51a3c9fb",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "846375a4-b68a-43b8-b793-1d918d54598d"
        },
        "item": {
          "id": "dcabdde3-7c52-4365-ab16-4e8cecd024fd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "412457f7-f7e4-440c-b450-132843bbb32d",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "3bdd3647-a844-476b-9f37-9bfe30675a32",
        "cursor": {
          "ref": "84f9b14e-593a-479c-86fe-929c0c615777",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "22cdeb40-a904-4993-abb5-00084d3a3b39"
        },
        "item": {
          "id": "3bdd3647-a844-476b-9f37-9bfe30675a32",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4fa9ff6c-cd80-4223-b3ec-52273f9733bd",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "7384bf2b-58fe-410b-9770-bc4698b8a87d",
        "cursor": {
          "ref": "7d279ca1-c52b-4528-932c-fc5823dac3ae",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f5e301b6-8bf3-4cfe-9e23-731c42e1c5ad"
        },
        "item": {
          "id": "7384bf2b-58fe-410b-9770-bc4698b8a87d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6816fc1d-aa05-44ea-8d62-32e937828449",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "92a5bd8b-7acc-48f4-9805-a4f0643cf266",
        "cursor": {
          "ref": "c2661b4b-871f-4fee-a1cf-6798dde5d4a3",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1fe3470d-511f-45a7-b8fd-7686f4f89f83"
        },
        "item": {
          "id": "92a5bd8b-7acc-48f4-9805-a4f0643cf266",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9e967388-9993-421d-8c86-bb4f69bef092",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "7a71d725-6bfe-4fdf-a798-0e59781921b5",
        "cursor": {
          "ref": "ce3fef96-f363-4d35-92b6-3e0c62d251d5",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1cba8f9e-c373-4364-968f-b08c48ddcb07"
        },
        "item": {
          "id": "7a71d725-6bfe-4fdf-a798-0e59781921b5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "709827c5-d756-4dce-9985-06e9b64cbe5b",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "75c4f208-5ede-426c-84d4-efb947e5c244",
        "cursor": {
          "ref": "6ff4b195-1120-4ba5-9875-f04e537f61e7",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d27e8709-d213-4790-b58b-2359e3d5d490"
        },
        "item": {
          "id": "75c4f208-5ede-426c-84d4-efb947e5c244",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9b91230f-6949-434e-bbb6-b20c3f39bb2c",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d2863064-1374-4641-ac97-18fa77c50545",
        "cursor": {
          "ref": "225ade75-f99f-4ed2-8575-765530526c6d",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "887a447a-1524-4e42-a825-b9d7392d78a6"
        },
        "item": {
          "id": "d2863064-1374-4641-ac97-18fa77c50545",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9d79d6ef-8ea6-4a23-b74b-d3c18c28ed5a",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "0ea32e6f-2aa8-4099-b316-83be8c2c7cba",
        "cursor": {
          "ref": "b4cd5365-5e20-4014-a89b-c55ca8482707",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "46970ea4-4aa0-460c-b19e-eef422e1bef8"
        },
        "item": {
          "id": "0ea32e6f-2aa8-4099-b316-83be8c2c7cba",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8982de35-9b00-49fe-8af7-07ef829d9cb1",
          "status": "OK",
          "code": 200,
          "responseTime": 383,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "6c4fac9a-cc6c-486f-87f8-dcbdf92e657c",
        "cursor": {
          "ref": "1cead55b-c7c7-4f48-97a7-cb4e0d9d9038",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "28c3d7b9-65e8-4ec0-aa12-ef137bf7cb2e"
        },
        "item": {
          "id": "6c4fac9a-cc6c-486f-87f8-dcbdf92e657c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c8f8c645-2559-44b3-83c5-9143160055a5",
          "status": "OK",
          "code": 200,
          "responseTime": 367,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4a786e83-af80-495e-9225-69590a4ebbe2",
        "cursor": {
          "ref": "d7854593-0052-4619-8a1e-dffeedbe34ea",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cfe9a4be-c7b2-4f1f-bc28-cc2e6a5545ab"
        },
        "item": {
          "id": "4a786e83-af80-495e-9225-69590a4ebbe2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8f414386-92c4-4493-a16d-069e218a3f28",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e98e6fff-b783-458c-bf04-908e3ebbb10a",
        "cursor": {
          "ref": "f833108d-7a6f-473f-b8aa-2394757742c9",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b611cdfe-ff03-48ff-ad0e-cf6a129110f3"
        },
        "item": {
          "id": "e98e6fff-b783-458c-bf04-908e3ebbb10a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "83f446f0-989c-4e4b-8c5b-3fc8ac2d80b2",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "4a8d23fa-1d02-49b1-84ca-24443520e8ac",
        "cursor": {
          "ref": "b13a9fd0-0121-4413-bb9e-c008f59af22d",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "58a40e6d-b740-4888-ae67-aab31866d83b"
        },
        "item": {
          "id": "4a8d23fa-1d02-49b1-84ca-24443520e8ac",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c0055fd8-4ef8-4bc0-9802-033f756cd53d",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "07c6bcab-c96e-45c2-9b8c-8a8ff98093d8",
        "cursor": {
          "ref": "a657664f-6d08-4a19-a113-d8261a968e4c",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "82f72242-ee37-456b-97df-bd559653e67f"
        },
        "item": {
          "id": "07c6bcab-c96e-45c2-9b8c-8a8ff98093d8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1c56772f-79e0-4722-a8e9-47293286f34d",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f4d1dbf0-947a-44ea-be27-f2d341dfdeb6",
        "cursor": {
          "ref": "5b111b9c-e740-46cd-99c8-db2465f54157",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0c042226-a57e-4264-ab8b-1f3621d60514"
        },
        "item": {
          "id": "f4d1dbf0-947a-44ea-be27-f2d341dfdeb6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e74bbe15-cbb4-4f3d-b0d2-db464701767d",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8d45d202-86bc-443d-b2b7-eba9c9ceaf6d",
        "cursor": {
          "ref": "c95db86d-62c5-4e8d-9025-0302363f9013",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "20a72601-e981-4fbb-b89b-cc876883aeb2"
        },
        "item": {
          "id": "8d45d202-86bc-443d-b2b7-eba9c9ceaf6d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b6246c68-e5d1-4394-8b78-fa9bba773895",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "bd8cf3e7-b81a-4861-8c7a-68918eedba2b",
        "cursor": {
          "ref": "82b90b28-d2f5-453a-b9e0-2697a99baec6",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "12376650-48d4-4bf4-b501-6de1c18865ec"
        },
        "item": {
          "id": "bd8cf3e7-b81a-4861-8c7a-68918eedba2b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "27020cef-c7d0-4825-acdf-1f52f509c0e7",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "57a0c1c5-c9ee-4517-9ca9-074039bda3f4",
        "cursor": {
          "ref": "35137f33-77fc-4dc2-9766-4b2681ba6ebf",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8391ab01-baa7-4e6f-ba45-a193ea3a97b8"
        },
        "item": {
          "id": "57a0c1c5-c9ee-4517-9ca9-074039bda3f4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cec0ed6d-551d-41a7-a61d-b31f238f9b66",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ccb01598-6fba-4f05-b50d-f495d1737fab",
        "cursor": {
          "ref": "6526846c-04d8-42f7-8d26-ad9e5132f03f",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7e96095a-6dd7-4f37-a85e-efa50c0d3a2e"
        },
        "item": {
          "id": "ccb01598-6fba-4f05-b50d-f495d1737fab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8f23243a-d333-4f93-9e67-9bbf9f47688a",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "a804b890-9b6e-4a87-8a95-1a0288c8a9d8",
        "cursor": {
          "ref": "d77d0ea3-888b-4e6f-8c79-51f9302571a7",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8ff38b81-e9c9-475d-a451-0f4e430b436f"
        },
        "item": {
          "id": "a804b890-9b6e-4a87-8a95-1a0288c8a9d8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c1a5dced-bbbf-4545-8551-a85c4c775681",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e21fb60b-0516-49ff-85a7-f7f0a5c8d8ca",
        "cursor": {
          "ref": "8ac41c50-0584-4b5f-8135-f23a7ad4f20f",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "77a8f686-fc12-443a-9686-180ee0ab6bc1"
        },
        "item": {
          "id": "e21fb60b-0516-49ff-85a7-f7f0a5c8d8ca",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9fff23c9-e928-4eeb-a910-6244fb4db907",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "05308a78-de62-4c62-b61e-836bb848f966",
        "cursor": {
          "ref": "4da1bd3c-8c7a-4511-a082-3516c1993f49",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f7cc97dc-cf86-43a3-8782-6044f278e729"
        },
        "item": {
          "id": "05308a78-de62-4c62-b61e-836bb848f966",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0c5de26e-9e6e-4cba-9e64-15c49b3181cd",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "cb49d925-7233-470f-9819-a0646ecaf3a4",
        "cursor": {
          "ref": "d13c01c3-95dc-4f64-9349-f41d192a4490",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7a683928-9d9c-4930-8201-286cd9788568"
        },
        "item": {
          "id": "cb49d925-7233-470f-9819-a0646ecaf3a4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fbd90abb-6a70-451b-a646-3ba39800a63d",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c6cebae9-2c6f-423e-93b3-fba18585db23",
        "cursor": {
          "ref": "26e072e1-1e08-41aa-8f9e-e1232c069971",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "973fc341-63ba-42fa-9141-0efd4f429607"
        },
        "item": {
          "id": "c6cebae9-2c6f-423e-93b3-fba18585db23",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ed2001b1-b69a-4fa7-a4b9-3de7b9de71d4",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "00ad3c65-c5cd-4ef8-85f3-5275772951b3",
        "cursor": {
          "ref": "476c64e9-c784-4da3-be8b-994cc94727fc",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4a130b20-dc5f-4dac-bf4f-47a39f39c65f"
        },
        "item": {
          "id": "00ad3c65-c5cd-4ef8-85f3-5275772951b3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "878b081f-adba-438f-9e38-903e93e8e02b",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0fbe011d-9451-4868-bbf0-94fffbcff8a6",
        "cursor": {
          "ref": "18298d66-011f-4414-a724-0c7d53366c17",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e2ee5231-4227-43c0-bd3e-93074e2b8f73"
        },
        "item": {
          "id": "0fbe011d-9451-4868-bbf0-94fffbcff8a6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "52857ed5-206b-44f6-b4a7-715742ee35f2",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "36fe2b65-bbcf-4cfa-a8e5-e879131cfaec",
        "cursor": {
          "ref": "fa49d770-b8ed-4395-9c0d-2a514d153a28",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6143befb-11aa-4311-86ea-bcbc9e73700a"
        },
        "item": {
          "id": "36fe2b65-bbcf-4cfa-a8e5-e879131cfaec",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "db5067ee-160c-4599-b110-8583f49e2785",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "36da65cd-159b-4c19-a7f1-04f3f3362740",
        "cursor": {
          "ref": "da2be767-a751-43ee-b2c8-322fe39a5cac",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7ce85256-0702-4789-86b9-785d79957b43"
        },
        "item": {
          "id": "36da65cd-159b-4c19-a7f1-04f3f3362740",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a0f806cc-57ef-4569-9490-fcfdf3ec5e6e",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "a7b8e194-d733-4366-a4fa-702e5341d292",
        "cursor": {
          "ref": "d9a53275-5c9e-4b09-bec7-51850c04f77b",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2a9a62f9-91e0-494b-88d7-7cd9ff28fab7"
        },
        "item": {
          "id": "a7b8e194-d733-4366-a4fa-702e5341d292",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f9ea9522-f399-4fed-9076-76fab348d557",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "f52ce6ee-72b1-4485-a0ae-cd66f53b8891",
        "cursor": {
          "ref": "7f4fcbcc-35be-4462-8506-8698295f9557",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "61f8fc91-3c4c-497b-b460-ecc3a82bd88e"
        },
        "item": {
          "id": "f52ce6ee-72b1-4485-a0ae-cd66f53b8891",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "eb0e107f-8154-4fe6-807e-68e028ea3e49",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "8ee899d8-0b85-4a90-a1c9-51bf438bcff3",
        "cursor": {
          "ref": "115c6bce-d055-4df3-8f4d-5935add94f98",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "55a84608-b3b9-42fa-8320-f8752ba85178"
        },
        "item": {
          "id": "8ee899d8-0b85-4a90-a1c9-51bf438bcff3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "811ae378-08c1-4b73-a63b-9b1c69af3cb0",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "582cd1de-6450-4dff-a04d-ab9aa6c6fb76",
        "cursor": {
          "ref": "1cd02cd9-87f2-460a-920c-3bd7584106ff",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6b5fb249-83e6-4e1b-b608-bb53f5815eeb"
        },
        "item": {
          "id": "582cd1de-6450-4dff-a04d-ab9aa6c6fb76",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d783dd37-482b-4359-b4ec-6e05ba596541",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "14511777-3261-4a9c-9422-1ce29ac69de6",
        "cursor": {
          "ref": "2a9fcb63-ae57-4839-8f1f-5f2a51b574aa",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "696fd442-b6ee-4488-b67c-352b34cac8ba"
        },
        "item": {
          "id": "14511777-3261-4a9c-9422-1ce29ac69de6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "96f8d93a-042d-4133-892c-24e07986dcbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805168fd-ff83-4153-950a-10aa3cca7e23",
        "cursor": {
          "ref": "b0e83c80-19b4-4cb8-adc0-62f9f381be37",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e6a5a1f8-cd65-4913-9e4a-d9c3638181a0"
        },
        "item": {
          "id": "805168fd-ff83-4153-950a-10aa3cca7e23",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1c7138d6-78d0-47cf-84a0-7decbce6ddfe",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 90,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f528fc-d79d-46a4-b640-9f6ab619d54b",
        "cursor": {
          "ref": "91402b74-3969-4f5b-954f-14715f91a735",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "057da9a0-7f2c-4693-8b85-9a9c0fc89bdd"
        },
        "item": {
          "id": "e7f528fc-d79d-46a4-b640-9f6ab619d54b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0fad8d1d-690c-4e65-8bcd-98a90bb3390b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f528fc-d79d-46a4-b640-9f6ab619d54b",
        "cursor": {
          "ref": "91402b74-3969-4f5b-954f-14715f91a735",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "057da9a0-7f2c-4693-8b85-9a9c0fc89bdd"
        },
        "item": {
          "id": "e7f528fc-d79d-46a4-b640-9f6ab619d54b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0fad8d1d-690c-4e65-8bcd-98a90bb3390b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839ddbda-43f3-4252-b045-044209637e54",
        "cursor": {
          "ref": "fc3a0f54-7507-49f0-8e93-8aa8d2ee4244",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bf775956-779d-4d7f-9f26-b739e8d7b09b"
        },
        "item": {
          "id": "839ddbda-43f3-4252-b045-044209637e54",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b1ac9c77-55d5-4632-9528-9009de90ace4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca9c900-bcc1-48e1-b5c8-e8e9c52252c4",
        "cursor": {
          "ref": "d312d340-a759-4a64-b5d7-59bde0741b6d",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4913c9f8-4d77-4486-aa61-1d9cc64bb343"
        },
        "item": {
          "id": "8ca9c900-bcc1-48e1-b5c8-e8e9c52252c4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "79379275-66df-4179-a8c6-6c0aa082abfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fa653b-233a-4dcd-832d-54c37c9577c3",
        "cursor": {
          "ref": "1fb9520f-5c6f-470f-a907-8d1aac91dd27",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "aaf7526a-ebc8-4ee5-bec9-77901ce403f5"
        },
        "item": {
          "id": "31fa653b-233a-4dcd-832d-54c37c9577c3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dd924029-9a9a-44a9-9888-6798f060dc8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacc8b44-4bf8-47d1-8666-b6cd45f69ffa",
        "cursor": {
          "ref": "8fab9b48-23bb-4299-88ea-2486fea79bfd",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e5c3f170-1593-404a-8953-93aa99f7fd9a"
        },
        "item": {
          "id": "cacc8b44-4bf8-47d1-8666-b6cd45f69ffa",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "33a679e2-5199-4e3f-8be3-6699a7689eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507b29d6-5125-45bf-9c88-93208ad42909",
        "cursor": {
          "ref": "086f07d5-9e01-4078-b0f1-dd79585d403b",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d9680add-7041-46b0-981c-378ecddfa4b4"
        },
        "item": {
          "id": "507b29d6-5125-45bf-9c88-93208ad42909",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0f4cb500-99c9-468d-b817-e611fea4f9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91054253-dc8e-4f18-a29e-09ee7f6ac2f6",
        "cursor": {
          "ref": "5bdc7544-17f1-47b9-9b83-2ef77df4a3d1",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e8205a25-4a1a-435e-a207-38e9f2b7733e"
        },
        "item": {
          "id": "91054253-dc8e-4f18-a29e-09ee7f6ac2f6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6ec44809-16c1-4a7a-a2ce-25848373cf84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 776,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0048139d-2de7-4439-b93f-2aa78c3f924c",
        "cursor": {
          "ref": "0d4dcb03-836f-4520-9774-6692aee5cc6e",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "dc37b23b-6ca6-4b73-acc6-7e151df523b7"
        },
        "item": {
          "id": "0048139d-2de7-4439-b93f-2aa78c3f924c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4d4f0294-b2b6-4baa-a626-4272403a6ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c9de57-d763-4300-a2e4-5c4c906e3658",
        "cursor": {
          "ref": "13a84736-c159-4770-b776-1c29496173b0",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "14216484-49be-44bc-8ab2-cf8b3be35154"
        },
        "item": {
          "id": "f5c9de57-d763-4300-a2e4-5c4c906e3658",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "80ece7b9-720e-44ed-a56c-df38efa8c97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dec1f05-f957-433a-b72c-2d1c8cf13744",
        "cursor": {
          "ref": "9bc3190e-07f9-4edd-9495-b31b1c0cc265",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0e5f0198-337f-479d-9b1a-6dcb5febd7b9"
        },
        "item": {
          "id": "5dec1f05-f957-433a-b72c-2d1c8cf13744",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ad847558-6983-4d39-b2a2-134718c7f918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 370,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee98351f-f8c9-4a1a-9dcb-40499f505329",
        "cursor": {
          "ref": "ae6dc379-553e-4b3f-a8b1-c5581e8813dc",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f8772afe-2ed7-40e8-90e1-0d8bb0c69f01"
        },
        "item": {
          "id": "ee98351f-f8c9-4a1a-9dcb-40499f505329",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c033bcb4-ef68-4d44-ab88-c9e824fd2e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cf1eaf-0565-4404-bd6e-1e1212bb60ba",
        "cursor": {
          "ref": "b46328e2-b7cf-4fff-9a1d-d5b016e57106",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "51514dd9-946a-45cb-85f0-61986d7cd581"
        },
        "item": {
          "id": "93cf1eaf-0565-4404-bd6e-1e1212bb60ba",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "15e670d9-be78-4124-89d7-1f5e970e2ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f954c50-d155-4904-9b3c-39f029283d85",
        "cursor": {
          "ref": "8556a3de-bad5-47dd-b5ee-251f89f9bebe",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9fe82b10-8ba5-4f21-a69c-6c2035de947d"
        },
        "item": {
          "id": "0f954c50-d155-4904-9b3c-39f029283d85",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "aa3d1f59-3154-4b2b-a912-7ecdde92402e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892db561-73a8-47de-826a-449cdb04a7a7",
        "cursor": {
          "ref": "d002adc6-51a5-4d8c-8d28-02b7aae75b2f",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9feb8f31-8aff-48eb-93e7-b58baa6694d1"
        },
        "item": {
          "id": "892db561-73a8-47de-826a-449cdb04a7a7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8d4c6277-f6df-42b2-bfa9-28ba6814d39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9f4b1f-5672-447d-b86e-df846a8b97e9",
        "cursor": {
          "ref": "979bad50-ef37-44c0-9371-8b21fcfa2518",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "926d5fdc-5e5c-40b4-82a6-968cfc8ab3a2"
        },
        "item": {
          "id": "dd9f4b1f-5672-447d-b86e-df846a8b97e9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "787696c2-5479-4550-a442-4175fc408d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62eb59c5-0616-4c25-92a9-cea3256dccdb",
        "cursor": {
          "ref": "525e1873-86c6-4f15-95a8-d28eff45d929",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fde2352b-e691-4f28-aae3-8a8ac5992a34"
        },
        "item": {
          "id": "62eb59c5-0616-4c25-92a9-cea3256dccdb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3310261a-7e78-4d7f-ba53-20d5f89483e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ecede5-f239-40c2-8c21-524d7ffe1572",
        "cursor": {
          "ref": "e2962a71-bb02-400a-9b82-d382af2d7601",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ae2f7b58-8944-4936-9dba-c150efa828bf"
        },
        "item": {
          "id": "51ecede5-f239-40c2-8c21-524d7ffe1572",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "05e9eed7-7dfd-479e-9474-aed3e384dab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f61082-8c6f-4a23-a4f6-0bc8f1a1de30",
        "cursor": {
          "ref": "fab37e2d-e108-4d35-8107-49363360444d",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d77d4d5b-1e64-44ec-8e3f-d2990654d645"
        },
        "item": {
          "id": "61f61082-8c6f-4a23-a4f6-0bc8f1a1de30",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d0ed7f9b-eda6-4973-a4dc-b81aca447300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 774,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9578552a-88a2-4447-9b83-92f13319091c",
        "cursor": {
          "ref": "89c699eb-b84d-4e36-9aed-71543458d94b",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c4fac55d-3c55-4224-afc3-75dcd1cf714e"
        },
        "item": {
          "id": "9578552a-88a2-4447-9b83-92f13319091c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "28c53610-fb43-4e7d-918b-6f88a3111306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 682,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1843d909-360b-4855-a536-969bd5c55a2d",
        "cursor": {
          "ref": "9c3d88aa-21ff-4203-a342-cc7cff990158",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "93fe8e97-3216-48b4-94ac-4cfa1caa6e37"
        },
        "item": {
          "id": "1843d909-360b-4855-a536-969bd5c55a2d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "caa219a0-4b30-4e05-8dcb-face3e5b23d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf674be-6987-490a-b8d6-a8cdf373999c",
        "cursor": {
          "ref": "4a7efa0b-648d-480a-b313-6e9b158739d6",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "da0a4352-c096-4408-afe1-7bfa7f0d9c4d"
        },
        "item": {
          "id": "daf674be-6987-490a-b8d6-a8cdf373999c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "91524f97-31c0-4df9-b9af-db6a220ef66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1509,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07b9101-07b1-429e-812c-8901c5574d6a",
        "cursor": {
          "ref": "b2bdc623-b6a1-4e0e-ab0c-0bf85dcd5e3e",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "dc0b4a7c-cb77-4d78-a1ce-688f566b6259"
        },
        "item": {
          "id": "b07b9101-07b1-429e-812c-8901c5574d6a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5e816362-bedf-4764-8954-90746db85c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2f8ec5-a144-4a60-b934-7de5bb4165ae",
        "cursor": {
          "ref": "23f8e4ba-b2b9-4c1e-beee-b3d50dae2a84",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2c41ccda-a2a2-43dd-9602-920e1aa613e8"
        },
        "item": {
          "id": "3e2f8ec5-a144-4a60-b934-7de5bb4165ae",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f3f6d268-c791-4998-9413-83a44b985bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 769,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bde9c0-f9a9-4faf-b228-11bcd9952f47",
        "cursor": {
          "ref": "5eaa9824-7e58-4670-aebb-b7b479dfdd08",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "474a4656-3c4c-4e2c-bbd8-f12a837a67c2"
        },
        "item": {
          "id": "35bde9c0-f9a9-4faf-b228-11bcd9952f47",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ccc6f2e8-b200-4b0b-894d-69fa6857fffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4781d794-31ab-425b-863d-49f1285694b4",
        "cursor": {
          "ref": "4ec716d7-a566-44f0-8217-044fff602f07",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1d391e7c-ae91-4bad-a8ec-af6195cbe7e3"
        },
        "item": {
          "id": "4781d794-31ab-425b-863d-49f1285694b4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7f1b6681-9b0e-42c7-ad39-5fe2961ee22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da3a56c-7723-421a-b4fa-3985a3ff7b3f",
        "cursor": {
          "ref": "220f89ae-5f48-4f20-beea-6e2f15652514",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "273ce65a-2248-4dac-96c7-eab3d7046851"
        },
        "item": {
          "id": "4da3a56c-7723-421a-b4fa-3985a3ff7b3f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4b86fe84-66c5-4e75-b593-1a0f37ad877b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c2d4df-25f3-4c11-be50-cd3c9d66f6f9",
        "cursor": {
          "ref": "4120d98b-6e30-4c8b-9687-3accd0b9b8fc",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0df72875-e794-4581-ab35-2454265188ee"
        },
        "item": {
          "id": "d4c2d4df-25f3-4c11-be50-cd3c9d66f6f9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "83a82c9d-7ffb-4ce6-a4fe-8b3f3e8616ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6a3d8d-d1f1-4f93-a055-078f16bc0747",
        "cursor": {
          "ref": "d76e62c4-97bf-4202-8135-bc452f3c856b",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fdaec193-68c5-412f-b239-a72cac07faf9"
        },
        "item": {
          "id": "7c6a3d8d-d1f1-4f93-a055-078f16bc0747",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fb75015b-01bd-41e4-8537-11cd4ac85bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de1b5b2-bd42-4c7b-b18c-6acff788603c",
        "cursor": {
          "ref": "f9792945-8885-42b5-bb5e-ccf114022981",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "805bba93-71d2-4506-99d4-81850f84b303"
        },
        "item": {
          "id": "2de1b5b2-bd42-4c7b-b18c-6acff788603c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "09a0177e-4429-4d71-a06d-0f5dd5c2c829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1847a385-4825-48bb-a5f5-8d6980a346aa",
        "cursor": {
          "ref": "2c6efa9d-ac46-4914-8e2d-132f724330b3",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4ca56cdc-92e5-4fb4-802d-06a0b6cded8f"
        },
        "item": {
          "id": "1847a385-4825-48bb-a5f5-8d6980a346aa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d8eb350a-2157-4412-af1b-3ab460125951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea4f044-188c-450b-abfd-694211efee95",
        "cursor": {
          "ref": "7387cbe8-f6a7-4f3c-af27-86a2329ebcc3",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9661557c-d05a-4014-a4ee-c3f40b36bbb0"
        },
        "item": {
          "id": "0ea4f044-188c-450b-abfd-694211efee95",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5edcca2c-0acc-4660-a14e-d4bbfe85bf58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edb242d-a265-4eda-9691-9d34f56b46b2",
        "cursor": {
          "ref": "6bc0cbb3-9ea3-4659-beab-b6b8bfd69a5f",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "15a96200-048d-43e2-a92a-e5504e7f1c7c"
        },
        "item": {
          "id": "7edb242d-a265-4eda-9691-9d34f56b46b2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f85e5b45-c3d5-4130-822e-7e739c9ff40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4723795-4c93-46cb-b6f9-22db3e9f9048",
        "cursor": {
          "ref": "831d29af-6760-46af-b0d4-6d33649b4137",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ff225165-826a-4544-9f68-cd46eaee77b3"
        },
        "item": {
          "id": "f4723795-4c93-46cb-b6f9-22db3e9f9048",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cca6da40-21f8-4259-9b9c-4a05007f03d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9468ff2c-c318-43b5-8126-cdad90136eb9",
        "cursor": {
          "ref": "29edebac-ae49-4382-8553-fee2d554d19c",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "79d1ce4e-e692-4f94-af11-de759b8274e2"
        },
        "item": {
          "id": "9468ff2c-c318-43b5-8126-cdad90136eb9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "248faab4-de6d-4911-9290-3f339521969e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2685c3d-5379-4407-ac74-c35476048d6c",
        "cursor": {
          "ref": "33a1a8d1-b01a-43b6-9829-e919b32a75a0",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c93e5caa-9f19-4079-9cf5-c75998215e5f"
        },
        "item": {
          "id": "d2685c3d-5379-4407-ac74-c35476048d6c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "64c9a8af-8592-4c4a-a4fe-ace1b4206406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56be0dee-1dae-4f74-85e3-35d3f4c059a4",
        "cursor": {
          "ref": "30f109f9-8e86-4a2b-aaf5-1b1a0b19af45",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "45473fa8-4290-441b-9e0f-97918e1915ec"
        },
        "item": {
          "id": "56be0dee-1dae-4f74-85e3-35d3f4c059a4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2d45cf8a-0aff-49bd-aaa4-ebb804e94038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac33d3c-85c1-4532-b264-0f6c3bfc1405",
        "cursor": {
          "ref": "bfb90202-ecee-4898-98ef-ca2d8fb22574",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "88344c96-8aeb-4c77-8a33-2d540d7ba333"
        },
        "item": {
          "id": "bac33d3c-85c1-4532-b264-0f6c3bfc1405",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6b53c46a-dd45-44b3-ad90-ddb0cee83d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac9528f-bfef-41f0-ba91-2ae84b773d35",
        "cursor": {
          "ref": "cd14d8a7-be7f-4b17-893b-fc5f3b4d589d",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8127b353-f0ba-4957-9f1b-0cfaa9bc46ec"
        },
        "item": {
          "id": "0ac9528f-bfef-41f0-ba91-2ae84b773d35",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a48aeff9-b25c-4701-a746-d7b9f2651be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59cee8f-4ba6-48b1-a257-8450fab35cb2",
        "cursor": {
          "ref": "f3c0f78d-8be9-4ae0-bd20-d9caa6695797",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ee79ebb8-4223-4f98-87ba-8ba6cb9e58e5"
        },
        "item": {
          "id": "a59cee8f-4ba6-48b1-a257-8450fab35cb2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3613e8aa-b70a-4c0a-abf1-3ceda2767cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b054991-6f26-4cf7-907b-943d568e22ed",
        "cursor": {
          "ref": "2286cf99-3dda-4c7b-8672-4f281b974740",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6b1db302-133a-41c8-8ac8-dc719a1384ae"
        },
        "item": {
          "id": "6b054991-6f26-4cf7-907b-943d568e22ed",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1be1c6c7-972a-4f0d-823b-1f591348d96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27aaffe4-9a4a-44cb-9328-5af673af03cf",
        "cursor": {
          "ref": "f1f4ef27-903f-4118-a6a7-4d91a3a77a8d",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e2e4d96a-c35c-4e40-83e7-74f8b47324eb"
        },
        "item": {
          "id": "27aaffe4-9a4a-44cb-9328-5af673af03cf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "feb5ae2d-57a2-4c6b-8ba2-6e56a9b9d8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 557,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f529a59-59a3-4c7f-ae8a-649a7abc0ba9",
        "cursor": {
          "ref": "f064c210-4f7e-4f9e-8a96-3143b60c2d56",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b082bbd8-957f-492c-a7fa-665466346f5b"
        },
        "item": {
          "id": "7f529a59-59a3-4c7f-ae8a-649a7abc0ba9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "24cc795f-7474-4cf7-a37c-29e6ff8304fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848ce30c-52c3-4841-88ff-eb8f76bd8977",
        "cursor": {
          "ref": "b740dfdd-6486-4404-9c53-51144366ebcd",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "858d8042-f5b0-45b3-a634-1517b4c56d20"
        },
        "item": {
          "id": "848ce30c-52c3-4841-88ff-eb8f76bd8977",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1c7cedc0-3a87-4bdd-b769-e63b4e10e007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1784,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace7971a-0b5f-4b51-9595-8de90513bd6c",
        "cursor": {
          "ref": "1a81a431-654e-4b7c-bb90-76adae4b375e",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b2d35620-b0c9-4d2c-a1d6-df1541bace7b"
        },
        "item": {
          "id": "ace7971a-0b5f-4b51-9595-8de90513bd6c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d8a06c5a-9470-4fc2-b5c2-5b460d8d20cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2161,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a66f17-eb4c-436b-a2ec-f8909e342956",
        "cursor": {
          "ref": "d6779f44-f483-4889-8675-576e51739b0a",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "138a1548-8da6-48c8-8866-2baf9367ddf0"
        },
        "item": {
          "id": "11a66f17-eb4c-436b-a2ec-f8909e342956",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fb735664-017d-4bc0-90f6-89f8c4b2eecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1349,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04546a4f-552a-44a8-8663-f2ed2ff94512",
        "cursor": {
          "ref": "3ca6605b-583b-42a4-a7bd-c7a38df7cbe9",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d4fd12e5-5fce-4c1f-b7b3-69338e632136"
        },
        "item": {
          "id": "04546a4f-552a-44a8-8663-f2ed2ff94512",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b0049e56-7f11-4217-b977-4749d5d24a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 517,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44b2177-35aa-4b90-91f1-bf4d97bd8e85",
        "cursor": {
          "ref": "22d4c63e-a300-4aeb-94ae-351fdf9638bc",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "90e74f64-c79f-42e7-8ad0-22e5c621af4e"
        },
        "item": {
          "id": "b44b2177-35aa-4b90-91f1-bf4d97bd8e85",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f17aff15-e7a4-4e0d-923d-04ed5063ff80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1429,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c8c9d6-91ff-458c-888f-c69f34c5098e",
        "cursor": {
          "ref": "fb8f9421-a275-4524-b40c-1bbb9e99fd1c",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8ff1feb4-cf03-455b-bbfa-ec757775d118"
        },
        "item": {
          "id": "91c8c9d6-91ff-458c-888f-c69f34c5098e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0c111f4f-ab7b-4e42-bb72-0a8452ea7c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51dd4d60-08e3-4ddd-b988-e8a88333c834",
        "cursor": {
          "ref": "7436a260-2a13-4349-a83b-02c20a648262",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "27557ddf-daa5-420c-b1ec-075929170c53"
        },
        "item": {
          "id": "51dd4d60-08e3-4ddd-b988-e8a88333c834",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b7f13f4e-bbde-4856-ba00-0f56e4f7a890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 566,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c057784f-e4ac-43f1-a469-39616c8bdf87",
        "cursor": {
          "ref": "22cd2468-4327-4957-a5af-8db67c83e17a",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "99381d9e-d92c-4127-9ae8-a964b1ce2415"
        },
        "item": {
          "id": "c057784f-e4ac-43f1-a469-39616c8bdf87",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2f77eefb-d6d5-4f2d-86fe-026e1626b03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 391,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc0a56c-c16a-4b6e-86ca-c93914002398",
        "cursor": {
          "ref": "9d29ab92-7560-430e-8c97-0ef00301089c",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9f0badb6-fb66-41b6-83be-ab93f90c7a7a"
        },
        "item": {
          "id": "edc0a56c-c16a-4b6e-86ca-c93914002398",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "791b64b1-6f6d-4521-8a2f-a7f29887974d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10be848b-7038-4af7-8129-749514a88026",
        "cursor": {
          "ref": "e8bdda38-45d3-4dad-a2c2-7bf534dba050",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "45eb33fb-1e22-4ed0-9a60-eddc4e5c27f1"
        },
        "item": {
          "id": "10be848b-7038-4af7-8129-749514a88026",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "861b9f28-4c70-4d47-a1e3-f503d2e3b781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdfb597-47ef-4e01-84f7-280034bc0665",
        "cursor": {
          "ref": "cf26bbd4-fe3a-41f4-92b9-bd81f244de2f",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "412bba15-d081-45fc-bdb9-b6e1083d8c72"
        },
        "item": {
          "id": "bbdfb597-47ef-4e01-84f7-280034bc0665",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e6ae489c-5783-4cfd-a8c0-2fe15b95a404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53776400-0200-48dc-ac88-c5307ae11767",
        "cursor": {
          "ref": "f3c61558-7c95-4362-a277-3b868a980a3a",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3507787f-11a5-4707-87c9-4ceac0e843b6"
        },
        "item": {
          "id": "53776400-0200-48dc-ac88-c5307ae11767",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "83bca343-8ef9-462b-b1f4-6af00d0b7e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695c0418-e271-4c4b-b8ec-7f8275ae2842",
        "cursor": {
          "ref": "287f3abf-f425-4e21-aecf-a8393be83e2d",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "92fb7138-d589-4208-b480-499e32a14cf2"
        },
        "item": {
          "id": "695c0418-e271-4c4b-b8ec-7f8275ae2842",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ed09abff-92d8-4e9a-8210-88755a5dd2cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c371961-1347-48c5-af5e-ac2709eb098b",
        "cursor": {
          "ref": "8110e4a9-ed56-4c61-b206-4706ee799868",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8a393e8d-103c-400f-9e82-dc62c818a67b"
        },
        "item": {
          "id": "2c371961-1347-48c5-af5e-ac2709eb098b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "04de7289-283d-42c3-a22f-172efc365ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35aa38ac-563f-4de8-8e2b-557f68a5c4a7",
        "cursor": {
          "ref": "9d1c80b9-ab02-4c37-a702-7437547cd817",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "952721eb-f221-4a21-b1f8-306b9e6a164e"
        },
        "item": {
          "id": "35aa38ac-563f-4de8-8e2b-557f68a5c4a7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d46ab766-39fc-4e4f-9871-170f40023c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 510,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad38e34-7257-40b8-8560-ce713ecd4f47",
        "cursor": {
          "ref": "6c454f3f-8fde-44b9-862e-bee7a7726dfe",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7cea6421-bb28-4886-94ee-73e5db8a7dab"
        },
        "item": {
          "id": "9ad38e34-7257-40b8-8560-ce713ecd4f47",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ab81ca97-741b-41c2-9654-e1836aa1a9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a54de7-a005-4d9b-ba25-aa33fd0b927e",
        "cursor": {
          "ref": "252e12a3-e666-4c84-95ff-9c7ebc42e40c",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "80305cd8-4dc0-491b-b371-3034eb11d7e0"
        },
        "item": {
          "id": "b6a54de7-a005-4d9b-ba25-aa33fd0b927e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2d28eadf-6fcd-4594-a163-77ae564ac9d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e53638b-bdf9-4d57-933e-cb8c47e725ea",
        "cursor": {
          "ref": "b2d2abf6-2eed-4811-9f68-390b60f3eba7",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "566da1aa-76f0-47d2-b97b-75a8b552d9ef"
        },
        "item": {
          "id": "1e53638b-bdf9-4d57-933e-cb8c47e725ea",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fa5aabfa-2cea-4356-a97c-e885b25487a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7341e80d-65d1-4605-a684-55a51535c242",
        "cursor": {
          "ref": "05329450-11b3-449f-a6d6-03b64d615338",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7fb2ef30-ff40-4533-8513-c980d27d521e"
        },
        "item": {
          "id": "7341e80d-65d1-4605-a684-55a51535c242",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "77a0f45f-aa39-4fea-93bd-9e9fc233067a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea92a78-cdfb-4207-ab2f-a1ac56f85736",
        "cursor": {
          "ref": "5925743d-cbac-4c4b-9179-f59c167dff29",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dc0dd7c2-3798-4b66-8b30-c817122d94a2"
        },
        "item": {
          "id": "4ea92a78-cdfb-4207-ab2f-a1ac56f85736",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b7b78c33-e940-4350-8478-22df3b9e76ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9c0b50-33aa-4323-b0d1-7196a7b5556c",
        "cursor": {
          "ref": "212a329e-b759-4e02-9d8d-007a33d65696",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ae4b1217-375c-4e34-9e7d-0291dce991eb"
        },
        "item": {
          "id": "4f9c0b50-33aa-4323-b0d1-7196a7b5556c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "123377a6-05df-4440-a7ca-f9d4eb8df2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09194f4-d85d-4fcd-8b20-949c6a46eaa5",
        "cursor": {
          "ref": "19dd530d-e8d8-4340-b24e-f96e6ee0b43e",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "99ffc307-a57a-4a8c-af7a-68abff819049"
        },
        "item": {
          "id": "f09194f4-d85d-4fcd-8b20-949c6a46eaa5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "15dbd8fa-e98e-48b1-afc3-dc98e9b5e5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 782,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0eefb2-76ae-458c-a1da-023eb50de3fd",
        "cursor": {
          "ref": "d4aa4843-955e-4773-94a5-dca83a91d14f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c1507da6-1018-4054-aa77-380f05d73886"
        },
        "item": {
          "id": "bb0eefb2-76ae-458c-a1da-023eb50de3fd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0b9d5c04-281d-4d02-98ac-616ee2365a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1046,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b639d915-0af6-46dc-a189-434557446ed3",
        "cursor": {
          "ref": "96e5c7ed-b104-47f5-97cf-e15ae1f4b12d",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6cdb5c8f-9111-4b00-bfad-4ee1cbbfad52"
        },
        "item": {
          "id": "b639d915-0af6-46dc-a189-434557446ed3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bee5095e-57d0-441f-8d75-3d69dc090da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b36ab4-6a79-4fcf-b044-56cdcf8d5ce5",
        "cursor": {
          "ref": "a9c00f0a-f210-4dd8-96ba-bd5e9b69cb6a",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d51c0617-3ba4-4bde-8de3-baf6a2d56898"
        },
        "item": {
          "id": "19b36ab4-6a79-4fcf-b044-56cdcf8d5ce5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7538b433-9882-4dc9-b41d-e7f729cf9e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e0ae04-ac65-4ad5-8dbe-872cf2d1a224",
        "cursor": {
          "ref": "c03257af-95f7-4d2f-adf4-bb663378e266",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "436a3775-bc7c-46f5-8169-d9f0cdbf2eda"
        },
        "item": {
          "id": "c3e0ae04-ac65-4ad5-8dbe-872cf2d1a224",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "db31a2e0-b2b9-4f5d-8810-3f4c496ba691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5652573-f1f2-4713-b0aa-31d79f393acd",
        "cursor": {
          "ref": "fb4e1f95-e575-4282-9130-b0cbe20d5da4",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8f990611-b467-4e34-9e4e-b5654e526efb"
        },
        "item": {
          "id": "e5652573-f1f2-4713-b0aa-31d79f393acd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "decf4e3e-003c-4585-bb34-393407f77717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2aec313-864b-4fc5-9e2d-a70316276669",
        "cursor": {
          "ref": "fffd762b-ba6a-40ce-9dcd-cc2a983d93a1",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "30e07262-fdfb-43d2-b82d-9817ab6dab5b"
        },
        "item": {
          "id": "c2aec313-864b-4fc5-9e2d-a70316276669",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "97fa62ae-b70a-4bc5-af26-1acf7944c23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160a8f86-1a5d-4042-aebd-7aaeba8e61bd",
        "cursor": {
          "ref": "4bf90fb6-6575-40bf-a764-78a015e9f791",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a6205983-6f25-4046-b704-9b064aeca595"
        },
        "item": {
          "id": "160a8f86-1a5d-4042-aebd-7aaeba8e61bd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b6e5f5a3-e050-45eb-907c-a57a143ddbaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3994b1-85d9-457b-b9a1-93ee9371893b",
        "cursor": {
          "ref": "e781a166-ba80-4d9d-afb8-185b69ae70c2",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b79d9517-1129-4e3a-9b86-197037137737"
        },
        "item": {
          "id": "cc3994b1-85d9-457b-b9a1-93ee9371893b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f18147ad-c274-48ea-9a84-0f42c9a2fc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cb948d-1355-48e4-8d33-bf79258e3c7a",
        "cursor": {
          "ref": "b861dc7c-3acf-422c-afbf-4d441be58a26",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7a2cf8ec-92da-46d3-931e-2e577ea048ca"
        },
        "item": {
          "id": "a9cb948d-1355-48e4-8d33-bf79258e3c7a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a6fdb32c-6f5f-4523-9e1e-17e30b119222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52c7a05-f8be-4807-8484-b45a08bb53de",
        "cursor": {
          "ref": "3c05524b-3c21-446b-add3-9b81078a5e29",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "758e1804-2cf6-44b5-97b6-dbbdc7fabf45"
        },
        "item": {
          "id": "f52c7a05-f8be-4807-8484-b45a08bb53de",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4ef2ff14-eaf9-4b1b-8c0e-eb62b0be2f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174eff10-b034-41e0-99eb-cb375d4b24a7",
        "cursor": {
          "ref": "fe025630-4964-48f7-9f82-acf236cee482",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7e237060-ffb1-4f1b-9c5f-334a6f45315f"
        },
        "item": {
          "id": "174eff10-b034-41e0-99eb-cb375d4b24a7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e28b769e-e459-4fb4-8c44-e525c2343391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a41a2a-a810-44ac-9a9e-fbf7efaf856e",
        "cursor": {
          "ref": "dc31ee67-53e7-411a-8433-8da23b2c4dda",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ecbc3288-5f4a-422a-ad60-60f664115f53"
        },
        "item": {
          "id": "45a41a2a-a810-44ac-9a9e-fbf7efaf856e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bc58bf70-66a1-4354-b8ea-b62ef000caa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f7ee65-3016-498c-b40c-d4120ef1ea7a",
        "cursor": {
          "ref": "55030276-e498-49be-ba7c-1c0891e95f34",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f5cc32a7-7655-4b8a-8da9-8b64c2744b7a"
        },
        "item": {
          "id": "68f7ee65-3016-498c-b40c-d4120ef1ea7a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ee0fad91-ca39-43a3-b6cb-01dbb4efebef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab35d3b3-1f56-4148-bf70-0c2278ace605",
        "cursor": {
          "ref": "950cfabf-8263-40b9-9156-ef7d80bbb098",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7ce0ca34-a9a0-42b4-878c-b696953e88d5"
        },
        "item": {
          "id": "ab35d3b3-1f56-4148-bf70-0c2278ace605",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "076ad731-3729-47f2-aa97-ff131f2624ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222faecc-dd66-4f41-8c77-ebbafd758552",
        "cursor": {
          "ref": "fd25ec4e-f530-46d9-8bd9-535742f0aede",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "678c7557-6737-41d9-acc5-deebac59003d"
        },
        "item": {
          "id": "222faecc-dd66-4f41-8c77-ebbafd758552",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "472e23be-dbfb-4a73-8590-3aee55050ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86e8844-fabf-4af6-b41b-6eba2118a3dd",
        "cursor": {
          "ref": "96f2fcb1-73a1-444f-b822-a344338f591e",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a987fa62-b44a-43ab-afa3-c967a50dca9f"
        },
        "item": {
          "id": "c86e8844-fabf-4af6-b41b-6eba2118a3dd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "df94edff-ec18-4a98-9d0b-cf77fca39834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9479d445-2c8c-4693-b350-4d8a58717c55",
        "cursor": {
          "ref": "970d78ee-aad3-4ac7-981d-eec1d8c8cb0c",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "49847cd1-fdcf-4f8c-9259-307c2ff72c7e"
        },
        "item": {
          "id": "9479d445-2c8c-4693-b350-4d8a58717c55",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c97560d3-7dd2-477c-8017-d43d91e5c944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7055d27a-670f-4e27-90a2-98d3f60011b8",
        "cursor": {
          "ref": "5dba57c1-0594-48cf-b54f-2eae8f3065f0",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b3a9d310-0ac9-4a49-9b59-42080c017a90"
        },
        "item": {
          "id": "7055d27a-670f-4e27-90a2-98d3f60011b8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7c3b28ce-b0ea-4634-b40b-b59950ae658a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b2a0e4-f311-47b7-baca-615c1820ddc9",
        "cursor": {
          "ref": "42caddd5-87f7-4d47-92bf-40983f0bc9df",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c916692f-4180-40a4-b1f8-8defe2359029"
        },
        "item": {
          "id": "47b2a0e4-f311-47b7-baca-615c1820ddc9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1fc5f611-b492-4a8e-b5ef-be09629239bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc3fde8-8126-40f3-a05d-ff1e7b0893be",
        "cursor": {
          "ref": "95575db1-92c2-4315-b688-6fe19d7567db",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "18092192-eddb-48d0-8329-3393aaf323f0"
        },
        "item": {
          "id": "7fc3fde8-8126-40f3-a05d-ff1e7b0893be",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "00f677ce-9ac2-4c35-8acf-ec291b177656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17720e82-b2ff-44a9-938f-e1550308c82c",
        "cursor": {
          "ref": "d515c37a-1f20-440d-b473-8645d14ba290",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1d4b7c5e-f27b-442e-8da0-94493caf16a8"
        },
        "item": {
          "id": "17720e82-b2ff-44a9-938f-e1550308c82c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ba4c08bb-3f2c-4486-9d1d-83ab557b54d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98607b56-3b9e-49df-9217-d3e093243342",
        "cursor": {
          "ref": "cca8df44-1e4e-4b4d-bd5c-16971e6d1948",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b7b4a664-a749-446c-a570-70caf09954a4"
        },
        "item": {
          "id": "98607b56-3b9e-49df-9217-d3e093243342",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e30b91e8-cbbb-400e-a373-06b944c9d26c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c69219-482e-4a30-a0a5-c67ad2d68a3d",
        "cursor": {
          "ref": "e1c755cd-5abb-4b19-8af4-dcaa3164e8e7",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6e02b9f7-5a8d-4db1-82e0-9468c9f23853"
        },
        "item": {
          "id": "15c69219-482e-4a30-a0a5-c67ad2d68a3d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "73d1f034-8059-4a65-a9ef-62fbe71b0876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35f108d-9341-459f-a8f5-46a62a883c8f",
        "cursor": {
          "ref": "fb588cdb-bc94-41bd-897a-aca0421ad2fe",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8f7c5c9d-878e-4d04-a775-4a1f8a6e35df"
        },
        "item": {
          "id": "e35f108d-9341-459f-a8f5-46a62a883c8f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e366467d-7d72-4389-a54d-87939d697295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5f4a14-c256-4c54-b0b0-4571fe5bfdc0",
        "cursor": {
          "ref": "71cc5051-1480-4ad9-b6e5-3e77e64a8b9b",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "846f1f05-2121-494b-b428-a710737830ef"
        },
        "item": {
          "id": "ab5f4a14-c256-4c54-b0b0-4571fe5bfdc0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bb977f48-7437-4e40-bf97-5d9d02f83895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604d3921-1a6e-4815-a709-000939f420f2",
        "cursor": {
          "ref": "c26c5444-a7d3-4a36-80ee-74a2780994b5",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9a17bf6d-938a-469b-b59b-883c79531c86"
        },
        "item": {
          "id": "604d3921-1a6e-4815-a709-000939f420f2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "742b7786-90c8-42f3-aac2-3521be101ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef450ae5-ded8-4305-ac80-278563c834e6",
        "cursor": {
          "ref": "41b60c6e-56f2-4e43-a9a7-077a671eaf14",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "26b75593-aea1-4ab2-b00a-dbae460cd986"
        },
        "item": {
          "id": "ef450ae5-ded8-4305-ac80-278563c834e6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8150e8bc-b8a2-461e-86c4-f4d1fe63d094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96452c85-be4c-4642-8187-b2d5f2eec50f",
        "cursor": {
          "ref": "906000f3-2c69-4be5-b894-8a6381b61950",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "91df535f-a01b-4690-86a6-c3022faa704d"
        },
        "item": {
          "id": "96452c85-be4c-4642-8187-b2d5f2eec50f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6f14545a-cfa4-49bb-a20c-9f5036e87231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe57e809-f66b-471a-82d4-a367e3d693b6",
        "cursor": {
          "ref": "ec005f52-a7b1-44a8-b2e9-72f56b1f7afb",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "58361bb5-8cf7-47b4-8166-43759ab34f69"
        },
        "item": {
          "id": "fe57e809-f66b-471a-82d4-a367e3d693b6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4c7cb339-0d11-4196-bc63-14b1e1243d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bfa6b8-4130-41c1-a2ad-2e57ae7dc040",
        "cursor": {
          "ref": "ea95a501-5a10-4088-b8a7-5c4973932a51",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a90d5a96-6755-4e40-ac56-97feaa76d488"
        },
        "item": {
          "id": "90bfa6b8-4130-41c1-a2ad-2e57ae7dc040",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8e43ba99-39d3-4b22-9387-751ff509b3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7b4780-a296-40e4-b722-41298e0616df",
        "cursor": {
          "ref": "3fcb8f65-902b-41e8-bd9b-40b17c47f705",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "17bae054-c838-4248-bcf9-14d4fd84f8b8"
        },
        "item": {
          "id": "fc7b4780-a296-40e4-b722-41298e0616df",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f2895645-ab33-4819-85f1-046bd24d6424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870f7b3d-793a-460f-a952-e3f3aa15499f",
        "cursor": {
          "ref": "2beacb9d-78dd-4cd1-9605-ad741c007a1d",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ae64da9f-3878-4282-923a-683f49e327a8"
        },
        "item": {
          "id": "870f7b3d-793a-460f-a952-e3f3aa15499f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "23b85fd9-3c69-42e8-bfd6-b106129e0c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d6b21e-77e6-48d3-81ba-adc78889139b",
        "cursor": {
          "ref": "4885c5af-081e-44b6-9504-aec7d874164b",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "95e9b5d2-c8d5-40c2-9c59-7e6da5c9d8df"
        },
        "item": {
          "id": "46d6b21e-77e6-48d3-81ba-adc78889139b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "86801fff-c75e-4d4d-9eb2-a2c4cd94ee30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 803,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11342e9e-f341-4c18-821a-f7561bc3fcfd",
        "cursor": {
          "ref": "01d8c628-039d-424e-8a3c-fcd148ba9a1b",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1be8b6f6-3b8b-400b-8942-a9eb0501cea1"
        },
        "item": {
          "id": "11342e9e-f341-4c18-821a-f7561bc3fcfd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "76d82db4-df8c-46cf-afc7-11b887bafaae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44aa7c5-9ff9-49ce-b753-415d19c0e726",
        "cursor": {
          "ref": "e7e3a23a-24a7-4863-a4e9-6eec6604f449",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7f0e8712-594b-407d-a238-ae4717b9eeaa"
        },
        "item": {
          "id": "e44aa7c5-9ff9-49ce-b753-415d19c0e726",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "629ca30c-bb19-401b-a3bd-3c78ebd19305",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 86,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e764d8-f49b-4aaf-848b-2a2070d38d19",
        "cursor": {
          "ref": "18114d99-393e-4329-9d63-772af9b8d0f0",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "66795292-a6f3-45ed-aef9-9f5217a28306"
        },
        "item": {
          "id": "b6e764d8-f49b-4aaf-848b-2a2070d38d19",
          "name": "credentials_verify"
        },
        "response": {
          "id": "94f83a9e-42f7-4b78-8b47-209e58947f9b",
          "status": "OK",
          "code": 200,
          "responseTime": 1148,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9bf4b1-1628-45dc-96a4-4341f24dd652",
        "cursor": {
          "ref": "28c14f2d-da21-46ec-a78d-ce7bf5522d81",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e1b2e584-f693-45a9-b880-dee413d042a2"
        },
        "item": {
          "id": "1d9bf4b1-1628-45dc-96a4-4341f24dd652",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "7cfb2730-01eb-4d9f-b321-e5d63b7ef636",
          "status": "OK",
          "code": 200,
          "responseTime": 501,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8be5a6d-c218-49bb-afc1-daf165428994",
        "cursor": {
          "ref": "8e7c4caa-1463-4d71-bc4b-d56efc1fe979",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2bd6e896-0036-42b7-9ecd-dc6de56ad4fb"
        },
        "item": {
          "id": "f8be5a6d-c218-49bb-afc1-daf165428994",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "283d0243-eb5e-4c58-a5cc-20fbd5b24eb5",
          "status": "OK",
          "code": 200,
          "responseTime": 522,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6138ea-2642-4cc2-b6c8-2bb180d8d006",
        "cursor": {
          "ref": "9afbef4e-cd89-4a6d-81c8-a9024be69cdf",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "36ebd2ca-bf96-4b35-a66b-603c72bc4d60"
        },
        "item": {
          "id": "4c6138ea-2642-4cc2-b6c8-2bb180d8d006",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "00c7c58a-5196-458e-a7b3-fe135acc487d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6138ea-2642-4cc2-b6c8-2bb180d8d006",
        "cursor": {
          "ref": "9afbef4e-cd89-4a6d-81c8-a9024be69cdf",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "36ebd2ca-bf96-4b35-a66b-603c72bc4d60"
        },
        "item": {
          "id": "4c6138ea-2642-4cc2-b6c8-2bb180d8d006",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "00c7c58a-5196-458e-a7b3-fe135acc487d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6138ea-2642-4cc2-b6c8-2bb180d8d006",
        "cursor": {
          "ref": "9afbef4e-cd89-4a6d-81c8-a9024be69cdf",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "36ebd2ca-bf96-4b35-a66b-603c72bc4d60"
        },
        "item": {
          "id": "4c6138ea-2642-4cc2-b6c8-2bb180d8d006",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "00c7c58a-5196-458e-a7b3-fe135acc487d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5023e59-57f7-4c76-8000-f8b7eba89247",
        "cursor": {
          "ref": "517514a6-eec2-4af0-8442-b3d151a2d4e6",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "cab608fe-a24a-4c61-aa80-f45d915d032e"
        },
        "item": {
          "id": "d5023e59-57f7-4c76-8000-f8b7eba89247",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9c9125b3-c32c-445f-a279-479450f867e9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2ac0fd-230c-48d4-b40a-575774074ee5",
        "cursor": {
          "ref": "7832cd20-73f4-43fd-9bd6-072a7e2c9c5e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "401f0a2a-9f80-422e-9af7-8f47b554e7ff"
        },
        "item": {
          "id": "5b2ac0fd-230c-48d4-b40a-575774074ee5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "187e4804-ebeb-4062-b05e-29bd2d4feee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5b2ac0fd-230c-48d4-b40a-575774074ee5",
        "cursor": {
          "ref": "7832cd20-73f4-43fd-9bd6-072a7e2c9c5e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "401f0a2a-9f80-422e-9af7-8f47b554e7ff"
        },
        "item": {
          "id": "5b2ac0fd-230c-48d4-b40a-575774074ee5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "187e4804-ebeb-4062-b05e-29bd2d4feee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6d7bb73e-b597-4494-9f29-d3ac20fc1eeb",
        "cursor": {
          "ref": "ffb24bfe-0143-4ae3-a830-6fc66d51c6d8",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5ee4f8f2-aee2-47f8-9d96-6e071947b75c"
        },
        "item": {
          "id": "6d7bb73e-b597-4494-9f29-d3ac20fc1eeb",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "67e41ffc-a80d-4b73-8d76-8ed077cf9e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0ccea381-8c54-41c9-83be-09379b0db56d",
        "cursor": {
          "ref": "ee5dfbb9-6f48-4673-9351-35e5c378249c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d6e3ee7b-c263-42ee-bf8a-84bc2995c3ec"
        },
        "item": {
          "id": "0ccea381-8c54-41c9-83be-09379b0db56d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4db7e8da-670c-4c7d-a5d3-42a278808b91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ccea381-8c54-41c9-83be-09379b0db56d",
        "cursor": {
          "ref": "ee5dfbb9-6f48-4673-9351-35e5c378249c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d6e3ee7b-c263-42ee-bf8a-84bc2995c3ec"
        },
        "item": {
          "id": "0ccea381-8c54-41c9-83be-09379b0db56d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4db7e8da-670c-4c7d-a5d3-42a278808b91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489986b6-273a-45a8-9a32-de8e15d40597",
        "cursor": {
          "ref": "7913d5ef-d4f8-4591-985d-cdf9bb20b194",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fb2c45a4-ae9b-4051-9757-f9dc47072979"
        },
        "item": {
          "id": "489986b6-273a-45a8-9a32-de8e15d40597",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f8f8a863-abb9-4b25-bfb4-c324dbf7b199",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}