{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "52e13c24-9f1b-454c-b560-8724bded5c7b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "24cc6544-39d3-41c4-971d-95b61b095026",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f05bcac-612b-4d90-be9f-612e8c04f448",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "02498e5e-dfc1-4986-8130-a6d064107087"
                }
              }
            ]
          },
          {
            "id": "8c98a2d7-ec63-41db-a2d9-e513ccb14313",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84df45ee-be19-4e03-9a25-9b8e82a1daee",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8d689bc8-bba5-4da2-9f5e-b88c64b7df20"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b5dcd72f-6756-4ac0-8753-9d4f7709406b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0635c056-62e5-4699-aa64-476b3caed223",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9718a79e-5db2-4093-9c7f-415152c72c21",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3e84b32-35b4-47e1-999e-602d588a48da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20b333a8-d5a0-40f7-8440-da8221b2d2eb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "115d41eb-8980-49c9-b214-a3c3166cc5a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc445530-00e5-4f59-b6c3-bbf405e4f873"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "67c1b9b7-5bc1-47d9-a786-250848c94c4d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ac1ab07-649e-4b8b-940d-ea6a0f100ed5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe9aa8ec-efec-4941-a1b9-66257e0cf871",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "322bd24b-6116-4ff1-823d-df13748b72c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a60769d-42fa-4eee-b877-0e2aace3c3c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cadac092-c925-43e3-a551-09d7378bc044"
            }
          }
        ]
      },
      {
        "id": "13d00444-5380-4b0a-bfba-d09a6fedd6d0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "76566850-b396-46e0-93e3-1c83f11922e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5bd21cd7-0319-4182-9fe6-1c333b94c04c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "37f9add7-6ab3-4ae8-87af-508a6c5e33cc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5907e5ca-36dc-4e1c-b16f-7b514a134864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7550858-01e2-4c12-abe0-bab2a7468175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026a5bec-c819-4b33-ac8d-151d1d5df24f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad9eca3-abfd-4959-912e-67ee54e66756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fe2701b-1166-4196-a986-65ab3225d22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd47d01f-90dd-4df5-9a06-e478fdb24411",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e643a4-925b-42b9-a513-9556ed0a0867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae9c9c71-6ca1-4e14-af81-949c9993a6f4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "603298a9-6f67-45b1-8a0d-b050092d172b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "088c07e2-15dc-41aa-922e-44c1b7d77521",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf282d95-5f6b-47d7-94d2-c6b2762ac852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce5fb849-277b-49bb-98c0-cde5b00e70ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28ce79b-ca89-45e4-9286-0235252cb290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc25487-85f8-4d83-ac2b-14c6caf97922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0938eb5-5d6c-46a5-bad9-8ad1a1a6d878",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135ac124-5099-4bc3-b53f-468a8f7dc286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c944e628-74c8-4989-b3cd-7721b7abf03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd66fc77-0374-457c-8c15-5901b40303b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "642c33d1-4623-48f0-97c3-f6d6b4cefd58"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0c630906-c888-4a36-806e-e685d6cbf7be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f31c89b-c1d4-454e-afb2-6305fe8db044",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "622e76c7-1c10-4df4-8b70-8da38a6353a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "75397a0a-99bd-4652-a13f-6d2a59bec72d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2592b877-e974-44f2-896a-d4f6a7779604",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "84464897-2342-45b5-b7c0-b4147f6d05aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "865b6074-d4d8-4a56-85d2-311eca120521",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df7e9664-9633-4fdd-85a8-18294aae3175"
            }
          }
        ]
      },
      {
        "id": "03d41ca5-c189-4d15-a950-b4d4253336f7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "222c0bd3-1205-405b-bc68-c9b172f0029b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "490c6b3f-cd2f-44aa-a553-2ee009463d62",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d3442c44-dea6-429a-83c0-54af1f294628",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8822d8ae-d8ac-4f22-8f4d-bc1da5e54413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39123bf9-d6d4-4534-a1bf-15ab26ee8164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7b0211-50a6-45ae-a0bf-e2535088877e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bdec728-d7b0-46ef-a6ba-b0f308ac13f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cfd949-bae4-443b-bfc8-cfc4f249ff4b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f97c563-ff71-419d-9f4b-2c345343b1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c159078-349a-4699-a8e1-699e507320cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7af908-95c8-4c2b-89db-211890b03a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e5d206e-d5cb-4552-adba-2da31edf0693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb7cacd-9440-4d27-861b-ff5b1623af84",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb044e2-3114-4887-8c7b-0aaf2c11041d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f1100f-e8c9-4847-8151-d255d422dd2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4310471e-7537-41a3-bc09-daeb0ab209c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18dff1dc-8f27-48b1-8b41-73abaae4a470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5288f2-3637-4d88-bf26-30e318f69d7b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f626edd-20d1-4774-8b14-6386a1dfed9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec25b7ef-0a33-46ce-8863-c119ce36c919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bda428b-902c-4bf1-88c4-6c0f6bac5994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f5de5e4-8c63-408a-a8ab-f9e3b48610d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0306d77-1aa3-496a-a2f1-63da71d9eef5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6ce7c9-9cfc-4c8a-a54e-bb3eca150c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2bbc41-7bdb-40fe-b687-b454ca07d936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e68539-cd33-4f90-b172-b1666501f6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d3cb48b-3d7b-4f89-8b52-64b46a9c1988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e788cfac-87d5-4e57-a0ca-c7f4e9bc6fba",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a851a9-6766-4a6b-9588-a4c762c45a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea732c2-17a7-4cd3-a135-560f4a22dda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2202ff9-0215-43dd-a111-3fc0d516d5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7067638f-f0d4-44f1-8fe8-365cee60af0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273a0c27-2537-47f1-8de1-79b3317f5a07",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8953612d-9aca-4f96-8355-639fa9f0611e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732f8d74-1fc7-414d-a406-4ab654b44af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe81d48-b5fe-4eb2-9f73-c08694e64acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7585f5f9-e40d-4c8c-b8ac-669d57d5fa17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f34e430-a944-4682-8397-219ff87d6749",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9775c72-bb5c-472c-bca0-6361541c05c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37904f1d-5ca0-4043-b136-fef7370acfc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fc82ab-979a-4bfa-8811-bf9c8f40be29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1c42263-39a2-4cd1-ad25-889e57f66f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2b9195-47be-48c3-a86f-f36850f2f02e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b66955a-4089-4a60-a8b8-a3ba8847a42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1afd8573-33e9-42c8-b63a-d154cc33aad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b91eb78-4afa-4492-945c-2a3ff34a990c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21a4a073-a310-4a38-a77d-20216c9dff6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cc7665-7b08-4715-8f38-0f0583c324b0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4299587e-530d-4ad6-9690-22adb6e0947d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de286f6-a78b-4db2-aa7b-5a1b667b4600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24e0877-7223-4444-88b7-78dd01e1bc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d6b203c-9533-4992-bec5-5b6f7061e942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84e9345-1086-49c1-8cb6-a360159a6e94",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb5523d-6c62-419e-b00d-c170d77b397a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e764f2b-a2e7-4b59-a23a-8445ab12b095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16750d2-3510-4e4b-ac61-b9d9b62d17fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c778a82-d636-4551-87b2-f64c7075197b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10926ad-73a4-4421-8b42-cd432145cb87",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd4e6e7-0906-43bf-9c58-17cbbb2bce99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5bbcff8-0cbc-4c33-ba17-2506bae44dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7cc7164-0749-411b-8fab-5647114aa7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "beee9fa0-f8b4-4d03-8753-2361f9a51d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5956135-bdac-4e5f-80b5-e64b616acac6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b6032d-14ea-4209-b366-0ce631e902b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5fbe777-a366-4052-b8d0-a357ab5df5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfe3cc8-a9c6-4b52-9be0-d9f44d001724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "431595c9-1e02-43b0-9a80-9d9a1eec4ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819d3076-8476-4ba8-be38-1681e0a89834",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdff2730-e762-4a06-83f2-7ce67bcc20ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6503d9d-1587-4e8b-ab76-73c34d27bd2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a78d31-1dea-4ec1-a115-c5a97f878d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "895528b6-8815-45c7-87cb-ed270becc47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ab4c29-7225-40ed-9bb3-b69ee7f3044a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed67c94-6a75-4d6a-b317-ace3cc1ed43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c38d6a8-3a5d-4463-9a5c-206a24d8bb46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40eb4f1c-4ae3-42af-ba48-cb6cc42587dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76143a51-1657-4f07-9452-0044f1e06910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015ea3bd-b205-499d-81c0-2e1744f58e73",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb98e79e-2221-40fb-acb6-3a1695dc6a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f126635f-c90a-4d8f-b33b-65d678bbe5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c99878f-8d96-4108-8375-abfd13b0ad3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7e6db8a-fb79-453c-a6ef-e3be0c7a8d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f33a584-0ae9-4f27-8a24-28fc46b0dc85",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e21b9e5-fe43-4e9d-a22e-19d4db6696b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f729e6d-3d04-44be-bfb9-bd078aac5a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b52a236-2b5e-4749-ab74-14b2b6009be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3772c61c-8a4d-42f2-9e77-abcef5b588d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56fb086-0cc4-4872-842b-5d3a3b89101f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5827bcfa-37ba-4451-b428-04ade5fdc25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d6d03e-2a44-4e12-86e8-b365a7d605eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf58bb3-6d8f-4143-be97-4278988bf9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0475208-2a78-4bbd-abd1-e6e51014a24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330ca93b-a045-475a-abbc-f5d7d6062add",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56690ac6-4e77-4655-915a-fb298e50c9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5bacda4-96c9-4a28-91d8-7b996db85543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f646f21c-a926-49aa-be59-07f9c5814768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "568cf0a5-2dec-4b5a-bafe-777b05dc0b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0942bbf6-883e-4178-bcfc-f3363ef48d90",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148dc119-2f29-4bef-b99e-21cbd2f363dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c689c324-1dc8-4464-b931-8990a41d323d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6faa2c1-2292-4abf-8824-efcf04736b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac6e040-7a76-4dfd-a1c4-29f4e2e4e832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b0dc14-126f-459c-8073-92c9084adac1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca287654-ca67-4f83-b5d5-e49b4518c3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec91c0a-6f1a-4323-9743-e31417cfefea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e4fb07-3add-4383-9421-3a24b88f2ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb58ff7-a915-4a0e-a2ca-1dbff122f621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e04fb5-e338-4312-bc67-46ced6d91fda",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d201bc1-77e6-4450-9b25-4452a31e54de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616bde09-b2db-4758-8030-d1f82557b3b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbb3448-547e-48b5-9b3a-ec72c98ed4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33044083-8c85-4dff-9533-be74ae4a89f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefcf43e-6f60-4b9c-bac5-bb75a683f59c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068cd30e-8201-4932-a528-17e8cfb4ee1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9f58be-e6c8-4272-aef6-d3c6cb5aa787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90330d8c-8350-49b4-8696-b2bcc752c900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3f46e8-774f-42f3-901f-e84a8014f457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8692edbb-398c-467a-b5ff-d39e7613a879",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576d2e9c-e15c-46c0-9b99-6d00ede81712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8dd2c7-67af-4ebf-9a8b-cc7bbfa19d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31350406-a18e-40b7-b34a-89e0eb950b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7f5331-6d27-4236-9e3c-10fd94ff0b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2712b225-33c8-48b8-bc6d-82cc33bc2591",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962f9a2b-8c57-42a8-af95-3736e51c825b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af80d5d-81fb-4f98-95d6-7e473fd8e09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af23088-d168-4fec-b80a-e3ee67837daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66b87738-e31f-434e-a610-03d87f8771b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11444693-fbb9-4075-8bef-1e54c43c5402",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3462b42-e826-448b-a252-5aa8cc1be5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5303986-5f34-454a-a877-c5860df540d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2d637b-f807-46bf-95d5-27d211a446b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "59ac6e41-c4f1-4e20-a9a4-7db246deb6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb210f13-1d98-45d8-98db-a714fd003764",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd006496-cabb-4469-8d8d-9fcb4d137611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b90a18-c50f-4eaa-8392-18162fbe5f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f564564-cc6b-42d1-9cdf-ef98051552e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "14f432bc-c53a-40ab-a4c6-8096c96ca687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa16b49a-1798-4864-a0c4-d5094ef0f5fb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ecc12e-b297-4ddb-a488-4802e6ba81a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd4c0c5-8374-4895-a080-7fcb204e6f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecf48e8-2311-46b7-a40a-a80b9b5cb22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3443cdad-3137-4277-a548-c336efbdd1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13114b2-829f-42c6-9d25-e838dc237712",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903b44ad-8dbb-4d61-8a4c-02631576a2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7804b8e7-ffed-49e5-94f2-157a2ec53b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc936b4-7d07-4b18-9cdf-3fe3f32c256a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c254e502-f615-463d-bb56-b147c09d8928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5409a47-99d2-4105-bbb1-bc8d95b56e0d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ea3e61-db3f-4707-b499-c6a8106ce0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b12e825-77e8-49e0-beba-f931f0dfde99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af305ed-8133-4c4c-884f-00079d681526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3e70df-9059-4bee-baa7-5e9b3ee04e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a53b49b-d5a3-4806-b656-0ba62adec048",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3857796d-a7e2-4f78-82f4-90fe6f4a48e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49340bdb-a19a-44f9-93fb-190905a2e890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7744a033-d33b-4bc6-8440-e36ffcc30d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bfe1ce-361b-4b55-94d8-4d9e121c57fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbe6e02-3f77-4103-8c3e-935d62d754c8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c85e2e-4a31-4cc7-82ec-691269812669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2bf2819-faef-4bb6-adcf-b7c6f293b1ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de390bc-82c3-4c60-8953-07ddafb4856c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5d20e3-5914-48bf-a581-665cc2196b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac47a00-d13c-4cac-9f28-ffc2107d9790",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a85e56d-3a1f-4bc9-839e-6ab503fb4b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a566d6-9d2c-43a0-b1bc-dd4f9001f6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfae903b-df2e-45ea-879c-2d509168288c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b83e0048-d9fa-49d5-83a6-c98c58e0aca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3a184b-156a-40b8-a1a6-572a7ca9df11",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118f5956-6bf6-4f33-8638-ef3c8d079994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fa719f-eb39-484b-ab0e-ae45c141558d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb32e7c-7974-46f7-948e-cdb7ad740920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7ff344-7a43-43bd-8968-dbe0548dba40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02bcea0-d514-47f5-894b-70dc9f0c919a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a3fa5d-b730-40be-981f-4614b6e1676c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7661cb-309e-40d9-bd23-34f586975413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc949b8a-5649-4bc7-91e7-ba01960600a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f26a0198-d3b1-4f95-a35b-80ef4b61db99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58755f3d-1d4f-47f2-9a3d-920558406b1b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432fc414-febb-4fbc-a660-579aee85452a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7634f04c-2b7c-4439-97bc-91b83b42f770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838ec48d-458c-4dd9-868e-ffcebfa5e8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae51309b-b9aa-4d8a-8c20-fa00efbe2a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b74c104-b253-408c-be1d-c688d5aad45e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a18925-fb6b-4eee-92d6-fb7e27814ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1015e1-0d0f-49d4-83cb-84ac217335a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f3fbb0-f27c-406a-9ca5-93cdcc7d997b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "15960416-43e3-4f3e-bae2-2c625d363366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdb9949-0159-4a98-bfa8-3012f2be0961",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d411a22-487d-4628-bb8b-d61284608cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e34c3efc-8641-4f64-a54c-d3775f840504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04224815-5dae-4730-bc43-9167bba21630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f575676-7aa9-46bc-addc-807e2a23a602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adbd085-a5dc-4b05-8796-208d5ecb7f8b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f5d151-c478-46e7-af96-f2422eadec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2324b486-6dc6-4e7b-a026-b5b6d1f5a963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59954ad4-c810-4725-8867-d704aff20ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd2d55a-f37f-43b9-9ad1-9f41d2a8e0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e05d22-9b43-47ad-9cea-50eb1ab4934d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8af554-8c50-4f38-a859-272a4b70ed9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773ecdd6-034d-4568-ade0-8815b370e0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0da775-2239-4b8d-a056-90fdcf461b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "22c30478-ee3f-42d8-a941-81303c8a1a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0801327a-65e3-4b02-8b69-07fb9dbe7ae8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b568172-f34e-4e0b-a8d9-a500cdfb8401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72340160-d8e7-4cce-a7ac-73dc731efc99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d48db47-9700-44d8-b0cf-a54a7e37239a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "62cf3c27-9215-4515-8cfe-a19b428caa16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae340aa-3023-42c0-827c-8fc377504b57",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe02bca0-50cc-40b8-81bc-1f0407d28beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd3f7a9-e85d-4ab3-b9f6-9e291e640a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badece75-b791-4463-8ebe-6ab03da0e4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b353efbc-fca5-465c-ad42-9688460b3aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8947adc5-4512-4bec-8670-7476042cff1e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9b5a6b-d4d6-4f7e-917e-263e4410673a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4928d24b-30df-47b4-825f-31c02599d3b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2b028d-c2c0-4c7d-b85d-7e2f29d03169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd80726-d436-47ae-875d-3d8beb035403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba45e86-394c-42d3-a260-7cfb1eac694b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb9c138-2384-4905-b1bc-c57d9eea4d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fcfab2-7d50-4683-9bdd-1be6eb38ff53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad5edac-0550-4dcf-ba7b-4fd26fc82341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb95dc2-3f03-4cf8-b6a6-e8bd0c3b6ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f431a7-4108-4ab0-9143-7e5e3b449693",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121e159a-e104-48b3-bd75-e6989e5f2af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a062a932-3140-4086-8b6d-5410b0918dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bce3b7-1980-409a-ba17-80390ad5bd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e87667-1e68-48b1-b2a6-7091482b2572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587287f6-5bc2-4111-a894-ac98be01bb47",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acb6dd9-8eda-486f-b9a6-ece4ac9af0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f250f905-1618-4a29-8c20-58fd077647b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa43457-5a69-48df-846c-98fd1bb7dd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee71bed-27b9-4613-8981-4a0d0fce49fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e8dae6-4e8e-4980-a399-6d4f04d8b246",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "762b827f-706f-471a-861a-57777ddaae26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d591846-c442-4c2d-b8d0-0dfd9919a1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca20671e-ec8d-4c77-ad5a-db4b6e05a250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2dff62f-d0d4-46a4-8e3a-98131331e3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c8ab58-afea-44fd-bf29-b4a5ddeefb2c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4aa052b-3c14-4193-af86-b2109106b5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3bd7c8-eaf9-4a55-9b32-887313c4552f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a799f2-7f4d-4967-bf2e-1a5aada1cba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d7d9ab-e716-4fa3-a15f-ef7f92780fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda58972-8cb7-40f7-aa38-7920d347ceed",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a34758-1ad6-444d-a443-4df25146ab5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45691424-5063-45ac-8e2d-d1d741484dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df52fe1f-a626-4a55-ae7b-b7420de989f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d71b4b1d-5c27-4d03-bc35-159ac486135c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f09817-1de8-4e92-84a5-0d5ed1eaa171",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f3b231-2104-40ed-b958-c504890c961e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fff6f7-7426-484b-9bfb-f334b477b3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f128e2f0-c276-4cf5-8260-b0213c56d54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca9c27f-fce2-49aa-aac6-673912fb284f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b55226-8739-4f80-b5dd-96abc75f814e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5dca38-53be-400a-8294-538e693c5209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98e07b6-769b-415e-b63d-4ac7ba99b30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab90cd21-7f81-4e8f-9e67-0606339b604e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1093b4f7-3353-4fd5-91a7-0d8aba4b0fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2bb77bb-b0f9-4489-89e2-dea5a6097501",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d7d71d-7eaf-4b6b-9772-bc4f9fa27aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7d7eab-7fc1-42e6-91de-20ed5380b66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f19cfe-758c-4285-b124-8c3112e86165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c01c776-7679-4c25-a108-980fb3344f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1838bcf9-8b2c-468e-8fbb-3b623caf183e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67405795-7c26-4532-9853-42d8ccbe4d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9575bcbe-e30e-4bde-8ce1-0883e503baee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdedc64-67d6-4095-8b99-a0dac7f4fa5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a10a697-756d-4c7f-b445-9e0600840d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8806757-b00c-4ca7-bb11-4cad041e3d1e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003eb085-4ed3-46a0-b5ed-4396f5f10e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "593063b6-34ff-4b16-afaf-9796e64848c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8bb294-b562-4b85-8ec2-1c3ae6d03aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87df275-9600-466e-a71e-61e4d2f66a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6241ee4a-b5f0-4bd6-b635-36d32ec2de61",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a389d6d-2cdb-4596-babc-994cabc91693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d56761-3472-48f7-9889-c670ada382c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eceb450-f067-4e8a-8edf-83a02ae1be29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4491bc-92c6-48ca-bdb2-6977c0742087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21274c37-0297-494d-bbef-be809ea60a4e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2376770f-6d2e-4822-b736-910decafb3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8da061-9ba1-4f33-ad34-4163e9bb385d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96173ad6-a6f4-46c1-98d6-fcb2b66f6fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf5c8722-ad11-4161-b435-51b467234c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106834ef-238a-4244-a35a-70b8b2eb558e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a4ee05-cb6e-4f13-a4a6-836d0c80e23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a2e3f9-02a9-435d-a506-99272af33822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d866690b-19b1-4f3e-b77c-b3490752e9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28df1ab5-bcaf-4676-88fb-020e0cae779e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b95546-3ed9-4f02-b377-e98f3553e7cb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80b0395-6341-4fd3-8dad-196bec73f905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcbb52f-4845-4bb9-a4c0-0473af79978d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d180432-fe7c-4d66-9c31-28f2cc521a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c0184401-67a4-4a47-88b6-0b84a1fc937f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1047c5c-6b27-40ca-aa47-1cc5972993d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d761c0-aa33-4cd6-b2fa-481d39cfb526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c13bfa-32c7-4bc4-b423-dc8e568b61bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86fb2ca-3538-4ee6-ad7e-2ec2b5e8d98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e42212f8-a6fb-4521-9567-6ac60725e814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920d48f5-759a-4742-ac36-2636ee256387",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430bb5e0-649b-4075-b438-56cfb1b77524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51300db-27dc-405a-85a3-67a36d09dc31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9382b32e-a9cb-4114-a0fb-0ca55272434e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb5ae67-b633-457b-af0e-b14b8db08fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0a57f6-1f1f-436d-a354-65208e19da69",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96553905-406d-4d7f-bdd9-01f03349e818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0f72cf-e952-41a5-bbdd-d764558e6eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a329241-f995-422c-aae9-e4cd4b4b4f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2494f321-4394-4dfa-8d1c-68ad5506616d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f51121-d848-4bc3-bd11-446333c3924d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc26bf7-06c1-4dec-bd0c-d52d3b4506da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56127891-d5d6-43e1-877e-d1e3ea56df60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f706d71-5126-41ab-ab42-f1eac26ec23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c889ed8-bb0a-4b61-b2b0-c0f70a697a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dde5506-e7a9-4c38-b29b-404bd47c0477",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b42784-bae8-4ab1-885d-0f96239d4a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad730a8b-4a82-462b-ab31-ad8439a5c868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6fd8c8-9354-4b25-b320-fc5f34e04f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e88c971-b63b-48be-9550-0bf6c8f362b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b050a1ba-c1df-44f3-bb9e-dda31b206867",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52cdd93-f3fc-453d-850d-81b201f0b411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c916d9-5e3b-43b4-87a3-30d6d061f28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abffe90c-05a2-4d77-adf4-9b0e389c8f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a50ccf7-0deb-467b-865e-c1c62462350c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcaa3ea-54ce-40a7-9375-582c1d1e83e2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89ce071-1576-4ab0-bb89-dea2d293d0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5669ab27-db3a-43fd-86a7-38d4dabd8944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28731af2-03e8-4c47-8b59-128487727b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9cfeefc-4f5b-4229-b43d-7f64879962e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1bfabc-c2f8-4d6b-9ecf-4a4e45ff84b4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3454de6e-f79f-4cf0-b7db-32cec4d1c04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dfede78-c155-4ce2-a9f0-7a00e03d44b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de6ea46-57ae-402a-81a7-6a05ba1e49d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38c9e53d-d2c8-4c16-906b-f8036266573d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777746d3-37cf-4b46-b1ea-61b2a6368f3d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668aa35c-e5b7-42ce-91a8-d94db58f10ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990af431-ba8a-43d1-87f7-d529abf27368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb50a64-b646-4e9f-a401-6cea7dcef47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de276908-761e-474c-a1e3-e22bfae641fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a56f496-8074-4127-b816-c65949ea8e62",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b111a6fc-85c0-48a4-8d30-c0a6f32b1e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b82a69-ae47-4106-bb8e-a87d0611867e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38627b48-bd98-44a0-9790-454e9892c0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ed56ca-97ef-470c-965d-9aacb437b866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4617cd-a666-4679-b074-57b2c3ee5ae0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52f3a9a-1804-43d0-9102-838f6bc66f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b2b715-168a-4b43-9e0d-fcdface1f10f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd12be7a-7f5f-4380-bc23-2ba6c3425d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd6afa8-079c-4347-bfe2-b52710f58e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac0d09c-b89d-4078-ae9e-36b511bb8065",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922ce7e5-8135-4b91-ae6b-f6c155e2e47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a0ea56-d023-43e2-9f40-694640e010e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69f0c77-e558-4ecf-98fd-f76e7a217dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "39111392-b110-44b7-8a40-8976cc0c3705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570ae630-f851-4c43-88ac-c5787f2f00e1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4337ca-ccdb-41b7-beea-77850dd78ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9a16e9-a0cd-4b89-8885-6dec087a0d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb69ab83-ee5b-4c0a-9b60-29fa28439e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4cf36ea-09c4-40c6-8863-fe5818f80e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02fa9ea-b19e-4aa4-b42e-ee74bf757ef0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4aae60-0031-49e9-9c59-8891aca3ae46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc74c2b-07e9-4e3b-889e-b1fde422b179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff23a366-38f1-457b-a07c-57c2f9fffd39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d396e28e-0643-4d2d-8073-172a8e07dc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bb0aa1-e065-420c-99ce-7cf8029b6997",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6499c1cd-76b9-4c4f-8e93-ebc3a5a3d90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23cce9ff-164b-451a-833b-dbd5bc5f5aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fd9683-4df9-489b-bcf6-962b57d09bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1ef091-634a-425f-b576-184d4ae5120e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e711b512-7854-4950-98fd-22056dc9f86d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecba15a9-b33f-45af-b381-15a4b3a48c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb4d5d5-96d2-406e-8d8e-a096d4e5fa58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da58f7f-fcee-4580-a969-82caa4c68881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9da88112-c85c-4eec-9274-ffb5eb6fc6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da74d4d4-6a75-4819-ba74-7b46aed4d340",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c1005b-a35f-47a8-8c5e-8bbd9c0b9b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a9d67c-80de-46d3-b4c1-90b6cc769219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24a26e5-4074-4f36-b986-473cc8aa0ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0299d8ce-8b8e-421c-8798-9ad3c7592e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca9a77a-b118-46bc-9eec-d3584404d973",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9146562-3b4c-45d3-b920-e2d56a191484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085577cf-9ae9-4074-808c-369ac26bb9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b80586f-fd00-408d-9695-23a229c27bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c38962b0-d66c-49b4-a79e-04a5466e6386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8368d0-4add-492c-a2d5-94611f007970",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c741b9-6942-44a4-be7e-0f2125247df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8475fa80-918c-4ffa-9d9b-3d1d4e66c6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c56028-9461-4c35-9066-80b5460da5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e5feff7-24e2-4219-88e3-8fd54b2c80c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68012d98-cc8f-4b99-a2f1-cdad54ad4398",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59c6c6d-c695-443d-a0bd-19362ec78bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a9ed7b-daee-46d5-9d1f-c9970036df3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da2042e-41d9-4762-8aba-235c7814eb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6a6c60-9804-4c4e-9949-51dbe6287fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115e112c-8a23-4367-8bdc-0809c8a04577",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7ecbb9-a4d9-48f8-a4b8-44bd608c7575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363ecc6c-23ad-4d79-84b6-40773bbf93e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30062f22-1f13-4500-8e67-f0d7596b1d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bce3607-86c8-4eaa-b7a4-49b127ab2f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a05bf8-1829-436f-9948-fd629a3abb62",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad719c3c-de5f-46ba-9003-81c860501af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07bb8be2-3e54-4541-9744-b61191bf09b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c82a728-cb77-4000-b80a-c6b5f909883e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6a9eb3-a7ba-4a23-b7c9-0c0204a78688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9416db2d-b5cf-4177-b534-8c5b3e9761a9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f54fb0-124d-4e9f-b98d-11d33cb3ca16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a9b353-184a-43e9-9750-1d4c4e435114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa602163-74cf-4e6b-ab74-ca5f68413eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b02c4ab1-b3bc-4d94-937c-003c36395535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d69d225-d7df-4071-9194-be0a6db6b920",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d54e87-17be-496c-ae79-0c9423179ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e35e7e2-bc13-4b80-b0b5-4e23f8e765cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd69c26-47aa-4568-8330-c095b5fc2478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7b82e2-f3d5-4b0a-97d8-09995ba83ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51304f3d-ca1a-41ad-b641-778a4dbb5bb1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a291c51-aabe-40ce-a398-a24a21d696b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a1bda1-eacc-4d44-9616-87be4fe8612b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e79459b-9068-48df-b1a8-0e2e3a87332d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "59b94e4e-9640-4111-af09-1a43b4b27ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1b8bb3-921d-479e-9477-44937f7f9c68",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07107b23-30af-441e-a93d-55aab7f63406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac894d4-950c-4efd-9b3b-9b7d57624f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df9616b-9caa-40eb-b0ea-a19aaaed5f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6f5f7c-cc8a-48f2-a84b-4f1a3895745e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba55cbd1-5081-4e28-9dd7-969366e5a788",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba67e80-5408-42f4-88ef-712a36e76a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e3fee6-9487-4aed-a645-155b994b1076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df12018-50e8-4c43-a9d9-4d7cf8a14b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba0b947-d742-4389-a40a-c5f8190d17a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1655c0d-3d1f-4776-84f2-3e9a2391ad6c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edea7ef8-fda2-4587-ae3e-21e1d6637c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f178d8-d55e-4048-b9b9-cbd94642b07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada93cf2-ca21-475e-add3-7d389ba09156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c3c48c0-8aba-46b8-8566-181448513f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd21f117-92c1-4e0b-bdcb-c4c974c2a9db",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230d68f8-77e1-479e-b852-bb791a059d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b36ca5-6b2b-45ba-a572-72cd61b47d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403fd230-068b-4ba7-95f6-8de9bf95adf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2182e730-20bc-4800-8def-923317b576f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0063dd26-9ed1-4d9d-a42e-0ac9a70421bb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4b56c7-1b41-460f-81b7-76dd41ce6a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ebc224-30af-43b2-9631-a7193532aa56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2d3bdf-c381-4b37-aba3-b91ca82e6ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28383fbc-15ef-4f6a-bcfa-7c037a28e281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8fd33c-d6f5-4e33-ba3a-437198bf6495",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e3e07c-c26a-4916-ad8d-7a6a21a90ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41c035d-f561-4635-bd13-fed308a7e3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e54845-65b6-494e-b9bf-a4fa5f3f51eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "979af3f7-7b2e-4596-95ed-d5d6545b7afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d70c4d-00ed-4aed-94d0-bb7521590745",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3fbaff-2f87-45fe-92e6-c8a2b5ab5f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571d44d8-0fa3-42a5-ad3a-64ffb048bde1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4761129-5ee4-4477-9046-053f2a1386b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "59a4c784-7fde-4664-958b-6887913498ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7674c0-99cf-4749-8bb9-b11f961200bf",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32cabfc-63be-4cd5-848f-7fcb0574db8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3864b381-7ce4-4201-8a9d-2d0081775fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb48966b-8d20-4084-9f84-478ecffeed67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aee8828a-f1be-46fc-92a4-97500f2f5219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bf2481-b097-4481-818b-38ae927cb605",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8232960-62ca-49f5-af31-ea527e2b7e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1576c25-0259-4a06-ad1c-87dc4f5cf70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cb42b0-64d3-4c92-aec5-d9d8ae869786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "43012440-7b6a-4eb8-b795-2a802462f58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a382b97-10cb-4925-8bd9-db86f6b9cbbb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49df3dd-65de-43b2-b442-c576293f548f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e81663-2856-40ec-abb1-d5629653705b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec206c6-a585-41a7-a931-2e1dd70707a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb83344-e1bf-42ad-895c-9eb0d9eea7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdb5799-bdfc-478f-94f9-ae84a89860b9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26bbdca8-2f2a-4aaa-9863-351b1ded10ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9dac1963-34a6-42e0-acb3-988eb873cda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9fb1a2-16b0-4aa2-8540-5950af06b73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7e08a4-29bc-4962-baa8-253d5ce930e1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4bd8aee2-7526-400c-abc4-69c1c501fa62",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "840ba31e-2e59-4ab4-9d33-c7853ed77def",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c418cf-d33d-48cd-91db-a218232eb482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "110c322d-859b-4c00-a4f9-ee2642cdb411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363a73b2-34f1-4774-8cba-2bca3af577f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "045c71da-df6f-48ac-914e-d405ea6c783e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d68977-88c5-4ade-be1f-c3b24b093ce4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b7c673-32fc-4070-a623-ed43faf253de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ff9bd93-200b-46f0-8639-50e01f2a9d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84402c92-b8b2-4c41-904b-79f2a4a04b58",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "89ba2089-7217-4895-b69a-db0af773a32e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89c2e1a1-2d02-424b-aa3d-8d83883c946d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "320f84e0-2fe9-480f-abf0-944373a04e70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "282b60d1-defb-4dda-8652-7d3b0f7be426",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93a81dcc-285e-4c5a-aabc-1f9b8432eef4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7cfea54-909f-47d0-852f-8b6ea1664472",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9371420-1d14-490e-a17c-d746d1a00a68"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e9c47321-5d8a-47d1-98a8-ad5237659270",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50b35be5-b7d5-4314-956a-02c423e81099"
                }
              }
            ]
          },
          {
            "id": "d8cac968-2844-4349-88fd-4a3338d7b000",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b15eb44d-db76-41bf-bca3-f7cfa2994d61",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3f528b2-3b37-4346-b2b8-5f1f610eeb87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e70d45cd-d6d4-4329-bd36-ef15ded0696f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb2161c7-8abc-416c-9ac5-ba3bb4212847",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "632b63fb-2f8d-4bee-a543-34df6fbcf8e8"
                    }
                  }
                ]
              },
              {
                "id": "08b2fde4-23b7-4a81-8560-7c0759383134",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25da2e9f-1626-4ae3-bf65-cb718c9f8f9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46b68db2-b28b-4111-bdf1-cf6a5f74fbed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58dc6134-9b8a-4c8b-90de-8cd2da09c774",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "357e6769-bfb0-46fe-8bb8-06b03552435a"
                    }
                  }
                ]
              },
              {
                "id": "9105b612-2f48-43e1-9f8a-572fc250321e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba47ec5a-1ad2-40bd-a464-ff07df96cdaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "096786f6-a246-443f-9559-1738988f20c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99357183-6fe3-42cc-aa51-bd74d928c4af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4dc5f5e1-53e6-4917-8b3c-66b206734e8d"
                    }
                  }
                ]
              },
              {
                "id": "d4961b3e-7a8e-407f-910b-43fe942cbdba",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "056f31ef-5aa2-4194-8062-f1589ee26056",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e07c5d83-35b8-467f-bc24-e53591888e33"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88867e64-9529-47ac-91ae-349ea9d503e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c0df2ebe-4af3-4902-bc90-cc088163c67b"
                    }
                  }
                ]
              },
              {
                "id": "83e17635-418b-4724-a1df-78f34a7a2204",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c68f387-dced-4925-91c7-e9a214918408",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca10121f-7944-4b1e-ae6b-790edcea948b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "358c6a17-3aab-4cc8-9941-f3430a9c7535",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fcfccd35-4469-4188-b4d2-373844245fac"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5394b9ff-00ac-46e7-b318-189a04fa0a1d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a48401dc-5386-4166-abfc-0d81a2b74338"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ba0ad66-f807-40a3-99c7-682cbf99a2e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9908b7ce-9722-418c-8366-64da116ee6a7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85a89301-cadc-4e5d-ac7b-2d91259a5ae5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2227521a-f26e-434c-8369-ec6c0d14128d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a79265a4-4170-4071-8d1a-0e2ff2b7fb45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76802c54-a250-4792-9653-e9059be85315"
            }
          }
        ]
      },
      {
        "id": "060df668-e0a5-4580-8c12-8fb184002f08",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c3092e42-ddb1-4eec-ab0e-aba475940db0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73c8e463-761b-426d-a37f-33b7cd8d61dc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "91ede80f-30b5-4d5f-ac73-b0b06014fc2c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb69cac-c78d-40b8-a860-762360fd88ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6330539-42e6-437e-bd9f-d8ee3a680a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc152bb-a4bc-437b-a733-de3b0203e541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9324c05-e6cf-4463-a684-578fd3b57721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d931d3e-5984-4416-b9d0-f7a7635b6698",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423e518e-d0d2-482c-870c-338f912e6358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2424caf0-5d9e-44b8-916e-a413c61de583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfd042b-ff06-48db-b980-691a6fcf44aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e6389e-18a0-4b61-9dd0-3e17c1abe2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec9b990-b546-45be-8856-79921aed53e8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf527c2-bdc3-46a8-9242-82f3602b2b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46303e18-a1dd-41ee-aa10-033194431f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d13a058-93a4-4828-9637-2ffb8d8965c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "369453ff-cdb9-41c1-ac06-29623e4dfda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142e5ee2-e102-406f-a5c9-5b67504f3da8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a75e13-f77d-40a1-ab10-9a6fb9e7195c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f3a744-ad08-4d0e-b0a3-a0782fe93990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2e75be-4943-4c18-8a89-38fd0c558a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94fd7933-b97f-4875-b284-30d31d99cb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7195f8e-7107-4bf2-b6a4-256a98b67fd9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa7c903-98c7-4bac-b0a8-12a15393c597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d42f42-5aec-476e-ba52-aed576f7eb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6758797-4863-44be-8f32-497312b928f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77dbcdda-1f01-43a0-bf61-85a819679e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e4ef09-7a3e-44e3-a64f-0691bff750ee",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a8ec75-13e1-41f4-92c6-4e80cbc2c4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e9b77c-facd-44e8-94d6-973591abda74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac14acb2-d6ea-4961-b535-6265f3ef367a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58820ede-9f99-4a7e-93e1-d33953ead5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa03d091-65a6-4916-a5b3-d8d950142127",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b63870a-1e94-4da5-a100-78f55c958ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464967f0-695e-4934-aabf-338d807d6cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b634e4c-2a01-4ca7-8760-800a327954ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0da6b4-cae5-4936-9cab-5e29f84b4233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c61fdf-3436-4175-bb2a-919e5e48cea8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f569a3fb-a412-4ec1-a88c-9429c0c93791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3651acdb-6254-4c0f-bfb6-915ebf8c74b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111550d5-fcef-46ca-a867-6b6214853dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37976a24-415f-4854-a660-d34761165800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed78aefe-dd82-443f-ad7e-46cea81b85c9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516d189e-ae74-4152-84ec-4da62e3b065e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20109776-bdbf-4c29-bbf5-b9154c733b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db28710e-eb59-410a-a1c5-3223455b4f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b10a340-917a-41d1-80cb-d82185ec5ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84904252-c081-4243-9f9a-a9bd64b22f89",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff60380-0406-42d6-a20d-669fa4fe27ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb8c50a-79ab-4ec5-ba6c-9c7034c83b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68085b2-562e-4278-a8f5-49ab9fcf27ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "711291bd-aa47-421e-b768-301b952c2b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c2752f-1a6f-460c-b7e7-d029ffaaa2e6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b982f39e-6109-4f00-8f7a-1eb458eae3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f9dd59-d6ce-4758-9c06-46609ec59ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d9b903-eaee-463d-9277-99098b919cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "97b653df-829a-4225-a8b3-a6962b645dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fa92ae-1902-4eb1-a4b2-3e214f8cea7a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a6348f-3016-43ef-bf52-3ff76c321e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9b1c96-eb2d-4000-b411-983983b90b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c05a53-9d82-4323-b95a-e2b366b6b1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b56125d8-b2bf-484a-8669-a82394151300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e724a6-1637-4295-8b64-76f8b631d2c1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff9368d-580f-4330-b348-d87062396e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7216d3dd-808b-476e-9aa8-965db01b322b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afefdb9-3d51-49c5-9958-f9da016ef230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2f243b-8558-410e-86fb-284df0b8d437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae528cce-71d4-4e4e-b1eb-18cf32d2689d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaa018a-9b40-482d-857a-3820ecab5d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c779bd79-2195-412a-ba77-f66193e9f091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f1f223-b3fe-484a-a86a-9295ed83bdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7aa4d8-b93e-4229-841b-a3ebd53a4b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40892e5-ef35-403a-b700-cb9d9e68a128",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45328539-25bb-4866-8015-9da3b446d61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11c57ba-2561-4f47-9b80-5419eb9fd864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733bb6fc-9670-468d-a5c1-247560be8909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a38bc8-ac72-43ce-a901-74c01ba31a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a82f8b9-8ae2-43bf-818b-1a05fb61aeaa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0bf677-75a5-45ed-a6a4-e7e1077e1a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d2e7aa-ea4f-42e3-baea-f4a9b0aacaae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c8a873-4c99-4646-ad1a-5b67afd82602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a33a9dd-a745-407b-83dd-2e1943eb85be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94450d80-6672-4461-98fa-0ec90d0d9f48",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdcc1eb-c723-4dec-b685-37e059abdae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab139c3-b827-4131-a76f-b7205ebcd112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d060c6-d83a-4491-a2c3-5f58877a8f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee64f44-1839-4193-bb64-eebe4a2f15e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dc3066-c403-4a7a-9172-cb524dcb88fd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286063a8-b10a-4cff-8796-ee0b7354561b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b8cb42-f6be-4426-8f21-5236800ceee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75130367-ff99-4dd8-b7cf-6a92f37f3038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "33116624-10f3-4354-9c88-4cc5872e020b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72eb1d69-a3c9-4387-9ef5-be8479ba0c23",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f46fbb-8e2e-4537-86ac-2d34e8a0a3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104bd713-f205-4631-b2e9-134eadd26121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaa818a-43eb-4549-99bc-08c0c9703d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d732f87d-f2b0-44db-9913-90a0560ded61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5773bf1e-7af3-48ba-a6ab-d7489804a1e6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4feb1494-0ae0-4da3-84d2-5678c49ccb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f44711d-f441-4c4b-8edc-7cce98a3cbfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f152649-89fd-487f-a544-764cab081a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3105fd68-d1a3-4564-bf4a-50935cc7ef4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df8cd06-ae28-4589-8765-511522d8ff2e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0285bb-283c-4e3f-a261-2340e984383f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2a5c9f-8d60-4f02-a981-5e7665a2120f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c2500f-fb4c-406f-9243-9d0411c8994a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55511993-235a-4bf7-9b10-a50d66d4a1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f513b16-baad-4c16-a9f8-4b8d707c6119",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638a1cce-2f4a-40aa-b79c-b47a4c975e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309341ff-909b-47d0-9692-5a5861c7d13c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0629b91-f9d4-4918-8c4e-9f89a6045333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80b55540-42a4-4175-9450-98e51e6c30eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc25066b-1b54-43d5-bafd-1d5b6c9472ca",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ced6a0f-1f15-46a7-a09c-36c732f62339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d347fd9-8a1b-4ee9-bffc-cff94d3b2220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16d2119-818c-401f-ad73-b565ae88a6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf45034-db2c-4da6-8e0d-f3822214ef06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4a4e43-43c5-4c1a-b379-4bfa2238f4c4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca58cad0-2481-466c-8421-fbcd9e4ff701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6632790f-b32b-4207-bc3f-2c9895ae6860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e2949f-dbbb-488e-a680-bec1932fabf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29277079-52f1-4b17-a71d-916874d0b6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6dd67b-577d-4309-81dd-d8bfbcc53c1b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f63fd5-93af-4175-90c6-aab7e72ca24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65dc0d99-519e-4df0-8f6f-fbe9c61c86a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37ce4d1-4de2-4059-aba3-0a95fcde2cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d80919-e5c6-40d2-9283-e43420872989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8267b1e-797a-499e-807e-fb585f1e0825",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28afb883-bc19-4277-9dc9-462648a92859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5edde3ed-2571-4f88-955f-048ae1973802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fa71d4-4f7c-4df6-934d-289197522fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abc2c27d-f1e3-4e0d-b25d-4e4d396bade3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed607b0-ad5f-463c-b3fc-b04888db7fa6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5b9e5e-9002-475e-a152-18b228804280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d6fa94-7efc-4582-b126-035b9663df24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897ff042-1f5c-4ae9-80d6-e89316235d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "871d68b2-5929-4f1f-bab3-f9d2b18f56fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7241ab1f-c55d-4ada-8597-f71bb34f71d0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dec995-6104-410b-a346-af544768a176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "992b747e-615d-473f-abf7-e0e375fce880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062d8fc5-1931-4269-a0be-3659fd71d050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "087827c5-081d-4a7a-a1c3-900101a62b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38acae6d-50b4-4461-be2d-a41ba1f2d78d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a3f83e-17ba-44db-847a-1660716a193b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf07e2ff-c293-422d-a183-d4f00ceb22d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbeb261-4520-4264-8adb-950bed989587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "826516a9-c04f-4d17-8cdf-198a230bc41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5419342-8a4a-4191-bd3d-e2ecc0af490d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79a4a92-c94d-4b7b-ac95-a1c5c2f9d658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a175e1-6a5b-4364-9077-c8f2f7779195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89afa31-37a6-42cc-a342-8029abdde134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d14abe4c-c5f6-4040-8ec2-85c885674128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf11cf6-a47d-4da0-908e-a7a608a4eb8f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3d15c5-49ca-4bc7-bbef-d88d8e25a408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0170f94d-1d51-4c5e-868c-1edae8ad9a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6112fca4-43fd-40ed-9211-6046983e2458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edd9cfa1-b96e-427a-ace1-746e443841fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c834ba-27a2-4750-b9ef-d153665087c5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abecf29e-5623-4c5a-b8bf-7a874bbe6352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02fa859d-cceb-4b4b-a5b7-776eeaba7db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cf68e2-4b43-4e4b-a3c9-da25d7df8d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99e2cf0d-b459-433c-b44a-200c27da2f38"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "14737e3e-4e81-437d-b0a3-8f6178da87b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de7ebf78-a259-4b87-8f92-f8cb96fd2790",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6736e6-91f4-420a-a29f-f363710d6046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88be3e5-b5fe-4b78-8a95-9b20fcb4a93d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f06e53-2717-4e40-9200-b7b3bacc30aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e6f4cf1-9726-4f9e-b889-d12fd85a4cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84e1b49-78bf-40d1-aa95-498d2f8de8f1",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3369facd-a38c-467e-80a1-a195de65efb5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "339ad1c6-e28a-4db0-a4d8-855997086edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4568bf2a-3381-4752-896f-7fdffe19b048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62ccbaf8-ae86-4de8-824e-d7da89dcc1e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d95b133-b0e8-48e3-b0fb-fca8a92bcbb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67600a7c-4081-446e-b415-dd3502ee4734"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "23c23c12-2bb6-44df-959f-12e0def0215e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57223877-7a6a-4079-b6bd-6804b3ce7781"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac69c835-4225-4f57-92e2-e8d8086c931a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4782d467-fdb6-460e-b554-493634062860"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0afcb39d-263b-4dc6-85ec-c7ae41007810",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e8288ac-16d1-47eb-bdf6-45fd33495c3d"
            }
          }
        ]
      },
      {
        "id": "f6d16479-5580-401a-a198-b407def75d8a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c8d5792f-1e5b-4e88-b69f-374f40914d50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24e8616c-f3f3-4590-9094-3c3154c2a263",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66f7cfed-8eec-4a21-987a-f0b1c6b9147a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b28a34b-25c2-421c-874c-e5517a92ddbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8582251d-e8e0-493d-8fa8-abfe6e4a05fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e96672-c010-4cc3-838d-27f8ccd9caad",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037c63f4-0b0e-495b-afda-02aa0fef50a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfbdf850-39c5-48b8-b7e1-1cc51b729397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe95d149-8f62-453e-8c7f-c521e7cec630",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8464e232-df40-44b1-8fd3-ed71dfe22eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51b2130-b3bc-48d2-87b0-fe0e027d555c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab11219-756b-4ab9-96b2-3552e79c7b50",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff86e854-a12d-4c20-bb30-8ab7552e7e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2cf6c7-6e0d-469a-9afa-d7aef5d9cfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d4e5b5-4d9b-41a6-be3d-8b1095b3adee",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec26cc1-ef75-431c-88fd-c4f8a693b7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782bc5ec-4845-47bf-8968-2d589fc44e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53046750-02bc-4fe0-be55-0890e07d9171",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560dd71f-ca82-4b95-96d9-4155ab3a026c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae0acfa-e43a-4417-8430-80ffbe2efa24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee61886-3fca-4631-948b-62633908943b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb064d45-3726-4d01-9d90-4ef32d6dcbf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae28d342-0988-4171-8a2f-c440b7cf365b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b5ade5-e2c9-44cd-b99d-69589e27d5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6871e21-5e0b-4491-b8d1-7ab3a61d86eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8b3294-91e7-4bf5-8a76-0319b29c8ebc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554efb3e-f240-463d-bf6e-245684202490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e61a8d9-7869-47e5-8bc4-13b1346e4d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f57d16c-c3ab-4a81-b96a-2f1271f6b8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179ab7f5-f4f4-4140-b8c3-076fb4377290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b6c3d6-ebdd-464a-bffe-3ac8637d724b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b7318d-61c5-478d-a18e-2e321ffeabca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "410319b4-01d4-43b0-82a5-b9a7d7802079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916d89c6-9e6a-491f-9264-8bb1f7dcf96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ca4dd5-7e36-458d-9833-3ed017b8a6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646aede7-b8b7-4fa9-879f-f40114dd075f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195c14c0-ccea-433d-b1c4-1ad432da35cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eea7a5b-69c6-45cb-8da3-099007c66623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb0fed9-4cf0-4e37-bc14-40474527470a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cbb91f-6639-4697-a3c2-253672011531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e872f3-6834-48e0-bcff-f2724a98ff6d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c9034b-b734-4db1-a278-e4999b4d68ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd191976-69c3-4e59-8375-63bed0fba98f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cbfc92-55e2-44cf-9820-461062365604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32445221-3763-4966-8f0d-dd8851059d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d663640-ac52-45e7-a9b9-7443c7f2f245",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de57560-6420-4d4f-bd5d-98993ba93969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a653871-e30c-4d6f-bed5-81b43f4718bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "717c77e4-4754-482d-a72a-ed3045aee41b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af082449-828d-4937-b73d-cde154b4b8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab010062-3bd7-4cdc-9d6b-65ccfc5cb952",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b408511-7a73-467b-bbae-259d2bf5b36c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2ac8fc0-fdd4-48ba-8392-3b52eb948f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ea323e-3698-494d-af98-d672d66f5d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe5df03-cddb-48fe-bc72-461d1cd0ecbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a7803b-3d16-48ae-8bbf-200a98f14c14",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d1fe9c-4853-41e3-8378-f3bf285707ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc332b9c-0f97-4679-8129-1c610b9f7b1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15eab433-66fc-4c48-92e7-fee4983a4044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3c3ec6-7660-400e-a98d-541f9000512c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0664c7-f027-42f7-bfa7-d3525a9ce6ed",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50173ef1-52b8-410f-ac2d-5471e7adf06d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b41eccc0-0881-42e6-bf47-0bc8e454f7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9044bb7f-76ef-4d3d-9001-2a9ccb92813a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f98f54c3-195d-4b21-b391-f5f1e75e7596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0872138-52ae-44a6-af7a-9a6d1a3933b7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9b7940-63e7-4a58-9b42-4b8400d087bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2318085-ca79-4f62-8f5b-c332aa5d2047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cad3dd-5a3c-41bf-816b-54b1daa6eda2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4686a631-0b2a-4e3f-971e-c991adbaf45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597522c5-f2e8-499e-8621-c6566e0b3318",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ff64eb-aab8-4cce-8058-a7ec53c099a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12fcd9d-bff1-4908-8d81-e9346ca0c139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deab1cf0-f389-4a40-9962-e29b065b0fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91bce87-fc07-4e83-b6a8-e6dbd5cae353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1694672-93d5-41a6-923b-478a375c92f5",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be87782-9663-4e26-90ef-8d7abf863dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daaac4f7-ff33-4154-b131-adf0003a34c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ade4eb-3098-4476-bcce-32aaf087d702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e0f714-80ac-4ead-ad2f-55be7edaa3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd67a24-5f84-4cb2-a24a-247afc08de96",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904c42cc-aba4-41b8-990b-643f6263320c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b0898a-6362-4ca0-bee4-441b7955b8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbe7e7a-4f94-481f-9e89-def31b21d003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1978df0-6625-4fe6-9258-d56fe4b7188e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a66d02-f11e-4dab-82b8-3ff112e4ef1b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14c8b48-17c1-4b73-bf79-f20723001daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2acacb8c-f0f4-4795-b7bc-938372de9ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d78be8b-8001-4547-9619-20b0154cdcf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42afb227-b4b8-4aa1-a878-05b603563085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bfb29e-8e8b-428e-951d-edd6d61519a4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5bca1f-158a-4694-b5b7-72fec95b276b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84dccda5-e0d7-444d-ae2e-9a5bbb25d4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebbfc7c-eb7f-4d19-8cd0-683fdbf5594b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6797d68b-d0fe-4fa2-a1a9-9ec06d763b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba60e977-19fe-4864-bf31-e8784cda94e7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3aaec4-0b7b-41fe-a268-f859c8f8ef92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71078eda-26ae-41aa-bd67-825a29f796ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a95233c-bf7b-43c5-a64f-890aa490e1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be178e9-0409-4d37-b37d-26ad95a34a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c479bd97-b2e4-4e91-841b-af4d696be265",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ee348c-a49e-49b8-b1fd-73a17712443b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b0798d-2a86-475a-aa4b-260be4dd6bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e00eb45-5b9c-4008-aa3c-ab6f45ed0802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30748b0b-8255-4e4a-a705-0969a53868f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac144ce0-70e4-4e9c-a87e-59d996f0a354",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed8ab49-c588-43b3-98b6-e52e68bdc2ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb3e4ad-5709-466a-8cfd-76ea1f214d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529f05b9-c1a7-43c5-a1ed-38105e5f7593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217a3f60-df2a-4f22-9686-5d8079a090cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd995d3-a739-4e99-af02-49edee771934",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce83e44c-466a-4514-9759-e128c8d77862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a03d36b-7dcc-423d-8d3a-3e02d4ecd3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d21d94-e01f-427c-a670-972021459484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5930a4cd-7248-4913-a8b2-e72606b5ae9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf8a0e5-7ed4-412c-933d-4a5f15ecbdf4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cc0ed8-f8ac-40f2-8368-b52d77ccc941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89eeebf8-6134-4d0d-bd29-197a05f6250f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cbcfef-c582-4205-a089-71a4f4b02ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c221cc-5649-4e69-ab23-6f94618b68ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece33cd8-6813-43cd-9cae-0761cd3ab196",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12b1b16-eef8-4249-8fa0-e339c4781cd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b51dce-e62d-435e-81cf-c2cadf4128c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "338f1c8d-3c52-4510-8170-36e25c5b2d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1b9112-a14d-4f3c-8a52-6bfed1136c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e60f6fb-6476-4439-b97f-ef80c94c9d0f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a67ded-892d-48f9-bc7e-89a7b176f3b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3236053b-e60d-4d51-a941-85b5a0377d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb8d54d-b6cb-4e63-8899-83e4dd102929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbe90f8-eac8-41f1-9a59-313c601121ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55d5e71-8dfa-4879-8e92-4a82138c84fa",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50872721-7ae4-4dbe-a9b6-474b535af4b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14544044-05f0-4991-af29-cb5188daf2fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01844c7-c76e-4d8b-aabf-e6fb8ac387ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc54493-9a7f-4e2a-b49c-a055b2b1e7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e6e257-f63a-46fd-a084-69a58cdfdc82",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b272bb1-9c74-4b2f-b21b-849b6c90dbbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c39a83e2-e5ee-46d6-a755-cb76f04e21ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d91ab2-1bc1-4c33-9888-aac488049e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ea628b-9336-4827-8e66-39321af28cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579205b4-c394-4fad-b5a7-d0b8239a5cad",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92eff01f-0b1f-4ec0-8b84-823867af3b81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09e58b4c-08a6-4fec-9f06-50eb865ee8d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d63edb3-81d8-43f7-a461-4e79944b7c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a19d24-f72b-4912-8a11-a6694a4b236d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc3cc18-67ff-442c-bb58-d659beeccd52",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24e386a-8738-404a-a389-ad31d9baead2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dcc4fee-b490-48e3-b7d7-9340213fd9eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81444f99-4830-4495-8da0-eed1e747e6fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767d3b1d-f7a8-44c5-8c6a-e437dc517cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12d1d81-84b6-4fd9-8769-9432e3701f40",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4d8c50-ed32-4328-a01b-23bdabd14e0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09275e89-019c-493f-a159-cd58cda8e892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5e7efd-ed6f-4913-8694-f16a0246ea8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b125241-bcd2-4a8e-999a-d75b03c8ba5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e734c110-5cae-47f4-854e-e9bef2f9b460",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c57f93-2e02-405d-bcd4-be9963b242da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "446a9a7f-88b4-4466-9209-fba99591a995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cc7253-284d-4485-8525-5ef23bb68b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0338fc51-199f-4a11-aa9a-ffff0802a46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3fc1c1-4ee6-44ab-8dc7-1859a112e31b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7daf8069-a2c1-4058-a74e-207d7139f50a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "377d524b-53f4-4389-b79e-b428cfe83218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574af4b0-1773-4646-8cb0-dee886a72315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b681a9-38e5-4485-962a-5d55f20eb6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d002271b-dbba-41b4-ab96-23ae153c38e4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31927bae-d7de-4867-b1ea-2b667521c531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf611da9-20d0-42d6-8868-12e9be486cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b4992c-4d80-4658-9945-41c1dec6f38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1899ee43-766c-4c7d-9021-b65ddd65241a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7934db7e-3978-46a8-b6fd-d0b0446fd581",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851c1f02-f0e2-4b46-9444-c0fefca68087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4916c98-a579-49e3-a211-024809fc4305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a951b7b-e83a-4898-828a-ea3a87bfa2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1317132d-7779-45ce-b682-b93fe1359e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ce070f-1b84-448e-8cd2-1c9dfede8bca",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c307cc87-124d-499a-a4ca-ed1c320b5e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f782c532-1352-4897-aeca-b917a928c585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b531bcd5-d570-4664-b47e-9ebdddbc5667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10d1e00-235e-4303-9c4d-5c72e050c34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06674ddb-7356-4efe-b835-1d530885ad58",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4750ddd-cb01-4320-b737-7d11916cbdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4997fae-7714-448c-826c-e162a7ea3d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc77ba6-a6a8-40cc-bf63-a00e517cab98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e3b768-441f-44da-8460-76399698c366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854be131-380d-4af0-9c10-cd7008712f94",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db28e01-8282-472a-ad18-957e0439238f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c1007b-9889-4a01-a4dd-023518101db2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "556eae48-6c6f-4cf9-95d6-01b13023df9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1484842c-872b-4954-9eec-0b7f965651be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873a1e34-eb0a-41d4-9a49-c0bfb5934078",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b459a28e-8ef4-440f-86c4-2c0065502cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17594d01-26ee-4a4a-8e43-59a721083953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d69a311-88db-4f56-bef7-d648c0dc8c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb692f4-66c7-459f-afb8-55d6f50df913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3803f45-c051-464f-8f85-be3fec6d5f58",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc62b71-8784-4f5f-99b0-7838cad6f189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1c0508-1e7b-4a1f-b055-b8d04a271cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13038b54-49c3-4d64-885a-031fe8888360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0513ef-efe2-4e52-afba-4f7afa29c08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310aa457-4dbd-4719-a7aa-84c9bb1cd9a0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012bea2b-5ec9-43fb-ad0d-9dbad5dc9025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e214d295-9b2c-4600-a309-b2bfe04ab160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19f848b-1093-4c1d-8317-9c3d9bf8818a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2c5559-68db-4208-a17d-9b0fefd7d6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b68f4f9-a1b1-4a68-85be-e65544861312",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1ab3b6-a2c6-407d-a5df-52b11978a5d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91edcec-87e6-4a5f-ab0c-c0e5a9f67c56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1d8952-1dfa-4883-822d-ba6c2ebfa078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e7b724-b281-4dbc-9f8f-35c2b247635d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6802ac-fd3b-4d60-be8a-b031f22fc118",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b866964-7243-4886-99d3-1f9f24c83eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f068f3a-8f5b-4bd3-90d9-8368385ef6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45da7f22-440d-406b-bf5c-57e53a313091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0036ccf-d3a5-4afd-9430-a7380bd598a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b563d1-34b3-42c9-9002-6a5102c13835",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61994e8f-3ee5-4cd2-92d2-d21b7ccd44a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be29ddcc-fcfd-4984-8d4c-f6185bd4c6f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50f1f8d-e237-43bd-b019-439e32a1ca01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f76a00-ddfd-4d07-b80d-a5a830e1590f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a952548-50f8-4abc-b4a7-9af3ed692ba0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acb4e07-7d6d-49a6-a2fb-901ba7a043ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396e7387-6933-4171-8b4c-491a630cfc36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "271159bb-624e-4ced-a12a-610c881f3dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59653629-b0c7-4313-9c69-8d9410b536ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e5edee-2c26-4d52-ad71-4bd3856e7194",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7479b35-d572-4a00-8513-91a4578ce182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf23ad1e-217b-4660-9688-c857752c3394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd43cbc-eb80-4c47-a3c5-331e0f49ca99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "642d6e4c-8250-49ec-b6c0-be8c50e7522d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebc9476-2cab-4e79-a2ad-5fe94357ac7f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be139f5a-19d8-41fa-8aa4-1959de94e767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acdeef11-ea21-4545-b474-d57575eecf99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23513877-0648-491e-963f-1e2cc9699171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37807f34-26f4-4dbb-970b-1fdb3e1e07dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174bc1cf-138a-4563-9f82-56d42ba42baf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc31dcc-4c96-4a87-905a-054645386f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09de2a49-144d-4467-a177-af48f463f531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871117fe-03d7-4981-b7d5-24c16f0a0f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80606c36-7136-4784-a539-53af31e46134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09922c5f-e318-4728-8ad6-3ea7bcd477b9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6375b7a-4bb5-406c-ba1e-bf71e876f68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d4ea32-2f7e-46a1-82e4-33ad83b9fc3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc90e40-b980-4e5e-a260-5d12f1976ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0809a55c-f648-4862-ad7b-5ca71cfbbfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de238ca3-3038-466c-8250-2ee603c83e73",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e841de-638c-40ea-b2f6-3e8691908892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e83e3c-4ef0-4ce9-9e54-3b7aa25ba469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaa18fe-cb78-41d2-b22e-af45976e7f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fe6d1c-dc03-44b4-b17f-56939aea6488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13df2889-f68b-4560-a7c5-ba7cca037343",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1968aa3d-092a-4874-b0ce-72744d74fa29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593d3e7c-752e-4473-8f93-de635cc796d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4e6497-fea7-4a0f-97c2-07c33e6ef6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d8328b-84a4-430c-b3ba-86912f0808fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a1d93b-7324-4318-adce-d4264f8c5778",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8624c66e-4e8b-4584-9d23-23f53192cc6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6e1b48-7433-4c62-9973-c1e501baf36c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9683842-ddb7-418d-84eb-7771c361453e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96331e35-d6c8-4030-b8de-2fce7eff69c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df159123-1634-4987-ae67-d0aba0163ecc",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb19d7ed-b655-497b-ac19-671e1f80b493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fcd7d57-271b-4aae-bae9-2f76361a51e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831a92f8-58eb-4fee-b65d-30884241655c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5781403b-4489-4efb-a6bc-9ca4dd0d8d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827c0f6c-626c-4388-96f2-b47b2da754ff",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c7accd-6e54-4687-9c33-c911c1ff2a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa18970-7227-4ebd-b1d6-e69bac6def76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1b3a77-fd54-4425-aa17-73a5e0102e38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e512e9-ab2c-4eb6-8ba8-9bea572f51bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5beb42-3e3c-44ef-a7d5-466979081dce",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46102ab-da9e-4fd3-a6f0-846588bc4239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efef6d3-f132-4822-8ef7-394fc254bc5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3127177-1651-4341-a9dc-5ff7bb5be46a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9981ea82-de59-4631-92f3-8907312512ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819e77a5-1adc-4a8f-b219-b55fa6e1234d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dad35e2-cc02-43b5-b6a9-2f7953434a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34379a02-8320-4868-837f-7956111b41a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a65ea2-b31d-4b78-bacd-ca01e360332f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54f34eb-47f9-4eb4-96df-61ecb1411b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8da3dd8-4741-4744-9078-9225af31d158",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9687703e-846f-4266-87c2-e109e51014d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89708044-6a90-480a-9a67-77d79ee4fcc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6543f0fc-585e-4ab8-a4f9-e75404d81d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56585ab8-2ba0-4bf7-a067-a10bac486e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82254865-4942-49b1-b8d2-97a5d2090f00",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73db1a9-08f5-4eee-885e-3c0d8b5c3d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5116219-b86c-4b94-9523-026172aef750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc60fb2-f548-4fa1-bcf3-4a9696064fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0105aa0a-d0df-41eb-be45-0a3be45dfb09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e755ccb0-1521-4650-8045-18fae9cf8e97",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f283876-8570-4851-96cf-e45b2e4277ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b8dfca-5ba9-434a-82db-d0a7a1c62f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff5f344-ed17-48f9-b8ce-afcd88a55a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ffa85ba-919d-4a2e-b429-5a29b75c7dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d708128-d6dd-479d-9af8-602a4ec71561",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9954aa-41aa-4455-8036-8cdfb0a2afc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0dc1b7-24ce-4b4d-9ec2-c3a2d605fea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5319ed-51b3-463b-8341-5aa24cff2673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d09a5c-9429-4d08-95cf-9c43d2e72c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9508f9-9eef-4fa8-814c-fca024f45c07",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56eff3ed-b046-4e7f-90fb-05c408c1e223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa657842-d0f3-421b-aa44-f4902258a56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a81a8ce-bc02-49cf-aeb8-24fcf0d9d69c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f97981-510e-4d69-b7b6-538578458405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410e942a-9d4d-4beb-88d3-c4dace7353b6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e87c319-3456-4a68-9a71-524faf53d4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa85188-48d6-4de2-92b9-a61eea256770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1380de06-4c0c-4dcc-a146-2b8dcdf6f42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b327d6b-2a67-4ff1-9346-09114ed1cd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2573397-aa68-4e66-a001-01090b18ce91",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c01527-0f13-43fe-9765-4eeab0c085b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a81cb3db-3bb9-4aad-b831-dcf63384f83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2351f09d-b35b-4288-8848-ad0de278c16c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1ca680-5f9f-4d0e-b616-44b5d98d5480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0025d53-ab9a-4468-818e-bc1f6e1af0f7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5baf043-0798-4514-8ea3-4c8f411bf916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35e29ab5-6c70-41e9-a2a5-c0497b8914f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ea524d-4e68-4442-9c0e-aa90b8e4cca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75cc587-68ff-4ce1-84b6-ef491107acdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5161e72-c179-4329-be5d-9da0ebdeeb2b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52af5ee0-ce12-45c4-92c9-9bd629e92852",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f261ce61-66b4-4910-a88b-091cf222b6ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0629e8-3784-46db-9db4-622a106d2a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6be6840-65ff-4fc6-9c7e-e29281c01bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c8abc9-8407-4a92-ae0f-af08b05a84f5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa231491-c902-4fee-8bb0-58c1cbfeff11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62da9d14-f63d-4d3e-8869-f1ae23187b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25d358f-c972-4bbe-8257-6f78b1c269d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12dec0a-941c-4b73-b7a8-a0e5dfc84096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57ac6dc-d08f-4aa3-bf4c-cef2e0f3a544",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6cdc23-c8f4-4171-a919-5f1a42d01731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56e2523-6b98-4108-bc47-8d6c4cf417ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb88199c-b730-4467-98b4-8f85f2dbfb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b066b72-dff7-4fe2-872a-0e5c589b5f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9553e27-ab57-4c6b-8cd4-1566781367a0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4616e61-7091-47f4-b9d3-ccaa63949d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28ed6297-48b3-400f-b447-84701a0ad0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bcbe31-1499-42c5-bb4e-7a14c9055432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e86c3ddb-238c-4a2d-817a-05a19bceb93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba7ab0c-81f1-4f66-8369-f9bc65258010",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b59a08-6a40-4dc5-ad36-f97d928893e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c17f83b-f56a-4e2b-a02c-86a2dd48da46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daa5e64-cb28-48b5-8b23-7bee584649ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88ffb7e-6fec-4c13-af55-54eb63f98898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d2e997-9be0-4c19-b728-c8985282c872",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f1f437-1c44-4def-9f49-78b7e8f8c979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c96052ef-7866-4534-8721-62c93021b93e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29770050-d9c2-407e-8775-597d4cbeb42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0038909-2941-400a-951b-c609a34b4e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d1e4c3-e86f-4bfa-97e2-8a5ea4c206df",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffe930b-d0a1-4b7a-b1bb-97500ecb2ea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6b593d4-f001-474f-8be8-ebb6814f0bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996cd586-9606-46fa-8c56-6b2a2dad66f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133ec135-41b3-41b3-8897-6b30a0aba10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd071acb-f452-42ce-8d46-50c601009b37",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f645311b-fe88-49a5-b7c9-b709368ddb80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de11911-2db3-4663-886a-65be0a27967c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "435ae47e-ada1-47df-921d-c942599beed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324ccba6-6b87-4073-9b58-0ffa6de478a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ad7db3-3eb8-4e2d-b0fc-1781c082d2c5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7645018f-53da-4ad3-b5f6-29f15ce013f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8710e216-5776-4879-8d25-85db69472042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a76e43-f49c-4193-a646-f01c3c3103c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "520a048b-339e-4da3-ad5c-49fa8a238409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3483a8ee-22fb-435b-b0eb-bf3312d403a9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777931e4-45a3-4534-9aee-d3e36f232829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "073d272e-650b-4ed6-8d47-9ffce49f7662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9865759e-1a77-417e-b41a-bacbda37a787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2248caed-765c-45bd-9f7c-def983b4dec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a22858-2739-4912-aae3-9f73f3d23c85",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80ce6b8-876c-4868-9b8b-621347e1b7c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b78911c-1f72-42c1-a231-849534243bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ac2ab6-6ebc-4be1-9dc9-bedf0087c70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111fa6c5-fe72-4104-9daf-6e531def7bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d325652c-63b1-4405-a3e8-e0005d6d5a8b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315c3b70-3568-4d47-90ea-e2b94dda8a9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cc2befb-5f01-4065-80ad-e3d6b44b811a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "896dcce2-e476-4873-b250-3a33de4c935d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0c3e3f-f22d-458f-a763-8ec8e977ba7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eeadf0-a44e-4b94-9791-b6b7fd968f6a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca50dfb3-576c-4537-b8c3-f0e289f6d2bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd36196f-ad5c-4b3b-b8dc-2684c6e364ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "866c7f21-0a72-4bb6-a994-49304c6f939e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470cd161-fe31-4531-a488-4a827559aefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55a4421-7a5c-4860-9a67-7e19b1a52030",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64257ff8-3a85-4f96-8e89-7395ffe88c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac87bac9-7a1a-44c7-a9f6-6e9e968037ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60d3c76-f968-4491-949a-70457a30eef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6200b9c5-adf4-496a-bb83-262bf4ef42fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5ecc24-6ea3-4a5e-9211-84f21c4b4869",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed8e8ee-f63d-4445-8829-5352a219e79d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd85a5ef-79cd-4c56-8f5f-09c5877cc9f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31fddc9-292c-4c72-aa2c-38148599c0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93fe572-267a-4c4d-b2b7-d40e78cd59be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2627d8c1-a2da-4e71-b27d-a818330a8ea2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99785b05-5764-4a71-8f72-6a753ee43e1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8184f2a7-5129-4548-b3b4-cd1af5814304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a5efc4-78e2-4180-9e12-b4b88d5c3771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c27656b5-bfba-4b88-9379-3d2d4630cda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7dd875c-4c62-4c34-b185-dec56d8cfd49",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d212ba-2928-4e80-9da2-8f1e1e6f108f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b107fc80-b6e5-4c9d-8961-ef39267dabb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b337793a-6dfb-4fd1-a3a7-1d86f24ef702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65d241e-03ee-40db-ba74-07d392e432be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f870738-2295-4fd1-81e4-6e2665f0314f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3672c3b4-d2f8-4d91-8232-6cbf476192f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aefd21c-68d5-4d83-b0e9-1b41d6e32953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5f1c57-4994-4aff-bac5-b2edd9185956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3c28f9-2186-45b7-a534-d530d49cd520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4739aeeb-2771-425c-b281-0a9c9148b099",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a5fdc0-b11f-453d-8519-b439ab5b92d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68a5bcb1-1248-4643-8386-77d57ba9e271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c07b99-8641-47a6-8db1-95e5ea6321cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30016ab2-a7c3-4db6-85e9-f1f96aad39e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66649dab-e2e2-47a0-b644-61608290e9d9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e889242b-f4dd-43e2-993c-afb406fd88e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd157890-9c66-48d9-8cef-64cdf01b0e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d587f94-8007-4d1c-90ad-97944fafb3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35528074-b900-486a-b2e6-0eb5ac7a27b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d5b1c5-982d-42f4-8530-4bd0719bb911",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ecf3279-1b96-42d9-9880-ec67e7198696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79c7e786-68c1-401e-877d-5d026290fec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39c5ed5-b758-4e83-b6d8-e0d22a1b4e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e0bfe2-8b9a-4597-a90f-d8c8d672f15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6abe81f-4f6a-43fa-bcaa-b2c9803a1ef7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d807db22-4e82-480a-afd9-e24ff202e11a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "755a98a7-258c-4748-9de0-f90cf5787dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc76dad8-090c-421c-b4cf-bc80c56832c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08191425-a095-4bf0-b092-5314d74cd7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436027cc-917d-497e-bc8b-1ef4d3cea36a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda1c755-a9ee-4575-98bd-cb64d4328739",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9990dc14-0614-48c9-8928-4e420cf3489f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cf73dc-81cb-4e7f-86cd-246913f3fb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56920df4-a442-469e-b7fc-835a659b1075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb32f2ed-bebb-4213-ab25-0bdad73b8668",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4b93bf-e4bd-410f-94b5-1815b6341e1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec57c76c-5c10-4b58-8641-1a73756ef2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f474e3b7-4620-41a9-a663-c584e80d5d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d15b7cf-fac1-451e-aeb8-82c3580ffd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fc9113-bfd8-4aae-94fa-3b88d886eb9a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601005cb-f13f-4fd2-8068-cd8ac0e461a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99337645-6c9c-4ae0-9b82-9f947645b73b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b5cfaf-2e28-4268-991a-0b44dd471b73",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddd9589-edf1-4c8b-abd8-e84de6374f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c37c8f-170c-405d-b10b-ad7302aef641",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7b4712-a85c-489a-adcf-91a385ecb65d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6f18c8d-dc4a-4e13-9d02-987655ee00fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4573657-1879-465d-9141-1b526e2d5a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418841c8-570c-46ee-b7f4-8d100139d100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73629630-5103-448d-a57d-b8de2edf2aed",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619190d0-1f52-4098-abeb-8882f584652d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e45588db-d82c-4335-bfd0-494c37c62144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4364862-c38d-40b8-833a-3372735229bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42411bd-0a97-4465-ba5b-f92d6cfb267b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e538e59-a128-446d-8c97-c88982992e89",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf76796-7dec-4a9b-ae39-5525004852fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3026d762-9499-4da3-a2b9-f529b2d01ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c846ca-ae38-4524-9ec0-130a842adea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6713848d-f7cf-4e70-9176-161e7f8f2142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9f63b2-7314-442e-89c6-231d4d1035e0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf72494-6d32-4879-8726-5a41cc15499c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a380fb1c-6c8f-4cc2-a7ef-fd242638aef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d77a2d-4cc8-4e58-aa3e-e1b6381cc2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e75b17d-f9e2-43fa-94f8-cf108b0fc506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f206dc-3b2b-4055-8cf7-ab448a7179d0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071fcda4-fa74-4014-bf34-94ee790d99be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f3a05a1-14e4-4f35-8b54-021cb4ef3b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f4bb79-a32c-440c-a9af-6304ebf5128d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f5bd84-65f0-4c1e-a9f5-2eb85810e0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e9df73-d165-4009-a536-4ba1bdf03571",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30938c00-72bb-415b-b4b0-2787f7f97cf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2142bcfa-cc22-4be8-8729-249d945075a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4cb7c6-9fd4-4334-89d0-7bdc77bb2b24",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8996103-e2dd-4e08-a4b6-fed201a78eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52282c55-21c0-493e-9f6c-53dbb13677b5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88b0f6e-8e7c-4207-ac06-853faaeeaadb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b419878b-3ae0-4293-94f3-aed5312bc344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ce54b3-e71c-4e95-985b-e3409dc272bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12340f4e-2925-4969-9b3d-466e8cc8306a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36d8fd71-2689-40d6-8ba8-25bf718f6d6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2b7b039-e391-4fc7-9b47-a21421433d51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5eafe003-038c-4938-b0d1-2cebebe0e555",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8e02748-99f0-496d-aa20-b7132159533b"
                    }
                  }
                ]
              },
              {
                "id": "14b3d3ad-30fe-4cc1-9a0f-53cc760d117e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40a910eb-c48d-4c59-96b9-682321c8140f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21472d17-2fd7-407f-aa9e-fb524087b8c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5a664c3b-8a10-44c5-a5a9-5eedb720837b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dbca6b-c08a-48e1-ad3b-1121c447c0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7f27a15-3b75-44d7-8dca-e981e6c4f7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde46d10-9d60-4cff-b619-badbe29de04f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210ca400-1584-4496-a32c-16bb5494a363",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "97302253-17ac-45db-ab52-1b6c3c3e035a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27a824c-eda5-4379-80eb-81f42bc17ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e600ed0e-958c-49ff-9f68-bb449cc8cf28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf914208-5d1e-4280-975c-7af12a790f66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbcf202f-2089-4c40-a384-015ca8e1f286"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c6b8215-7f62-4966-9622-89fa7ef9e778",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3ecea02-3a5b-4ab3-aaae-d5d12f792476"
                    }
                  }
                ]
              },
              {
                "id": "db356bfe-66f2-4b66-8b78-f214fe096f78",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2d918752-06e1-4f2e-bf6d-f5c928957a28",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ce8dda-a026-4e2d-ac3d-11ab7b7832e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3c9507c9-5a37-4903-a266-a42e9966164e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee24675-d432-4456-be60-3c482f4b134c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e7075e-a0de-411a-9562-2637c1bd4688"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8c992917-dfb3-4550-be3e-90c6bfaf5ffd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40325308-c6ea-4ec5-8fd4-90b3c1d33305",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7a72e62-2567-4014-a212-31d2acea634f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0741b81b-2afe-4d99-a86a-b13ca08de58b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2daae4ec-f0e5-4d71-9ed5-06054b87640c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9e97f70-208b-49c2-97bd-d31eabacee69"
                    }
                  }
                ]
              },
              {
                "id": "bc17294d-a3e3-444d-8e7b-e585f22d87ab",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e283049d-47ba-46ef-a2eb-580fd76a6dba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "352133aa-7929-4157-96e4-12f9d779a7d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15eb7aab-2e7a-4fc8-9ab7-fd640d0af469",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51bf8e0b-6a1c-4f1f-ba7f-8ab9a8b45481"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4564bfee-7a04-4530-8ebb-166220fdfa12",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2bc3735b-2e7b-4e65-b067-f7e1730787d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0ebe30f-6dea-4535-a81b-ffd2543fc845",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8855c692-a0f0-4131-ba95-55e9b033753d"
            }
          }
        ]
      },
      {
        "id": "ca483b74-2d42-46c0-a935-385dd4fab27b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "03d0907c-583e-42ac-8118-73d0013b4b3e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8561798-f35f-471f-a242-97d2ee3e4254",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "312a0d99-aeac-4ec2-884e-ca5c764f8a4d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e524a0c6-1c02-4942-a09c-9f0b4d9d63a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a2bd11a8-fe1e-476d-8a0a-1fff0c8f87ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7652a37-8dd9-4035-a1eb-5261e9c65bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba99dba9-2103-4a04-b831-61a10e78451e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7db490d-d68d-425c-bddc-c6e690503dbf",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49263d0-b260-4ff3-bfe1-e50e93e09ae7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d6a015b9-abce-43f4-9acb-12f68c0f7943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff93083-633b-47c5-bd66-989716431ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e173093-c921-4445-b109-73230204d74e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e0d1e46-10fa-4c80-b807-576e08d8f106",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21ba9b0d-9437-4d8e-855b-8b4f8afe255c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1cb1d1d-d5c6-4e5a-9b2a-22acc81f2482",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7ce3b31-d5b3-44a2-9b7b-9319c436d9d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c08e17f-13ce-4ac4-ad94-9023d5edd7ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a8e921d6-3d42-412d-aaeb-d7562d4fef5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0d94d81-da6c-47ee-a668-e244a85741ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f986c06-3af8-4f06-8a2d-058be5730614"
            }
          }
        ]
      },
      {
        "id": "5fb08f04-cf4b-4ffc-88b7-57c0f498a933",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e70d063b-15ad-4793-a715-edf2127992cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1226540-0a10-45ba-b8d3-d6b65161123c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0285bfc-1f2d-4609-b9b5-90b79e2923bf",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9d2078-0f39-4f82-8bfc-e391e1cc8c50",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8f5996fc-a8a3-4f4d-89e1-a61dd5c72474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fc882e-40ef-487e-9ea6-fd9e4b36dca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a64abd62-1a6e-4b94-a1a1-9aba57989deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73e18ff-f962-4abf-b51a-3311cc3e815e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b19595-43a4-40af-acf7-94878fc945d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "11c970ee-6464-45b3-9f02-df5bebcc799e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b9bb11-589c-4b30-8770-b3161e9931e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3ac1322-ceb1-4e30-a602-cfde28de24cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ec42b1c-5fc3-4508-b5a6-85fd43eabb99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1600aea6-fa4e-4b91-9385-9a44bda98159"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ad59580-d940-45af-bafc-0915e0c66708",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6963ad22-4152-43d8-bccb-8c3d3ec6b9b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9615f127-ddeb-49ad-bd85-43528c2b66de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c8c12c5e-50dd-4383-a5ba-20a231854e08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "851ae692-e400-493b-98e2-955483d7850d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8fa397f-5919-4558-923d-6a7a7c09fc41"
            }
          }
        ]
      },
      {
        "id": "68f9a3a0-4e16-47f5-adb6-43a04b817e33",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "67b5555a-4b2c-48ee-b5d8-49e1405e7a51",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03f7cd1d-5407-4509-8f9f-b8410dda9259",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b3a63cd-3ac5-4dcf-a0ec-c97be2173fa6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecc5d4a-89a1-43db-bfd9-50763a61bc97",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "80c6b8ef-a932-4798-b43e-960a6257d792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5904a9b2-bae1-4fe0-9c0a-745f1e2d8a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a53b0b63-e90c-45a7-8e50-531fb0be998c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b2f884-5186-4524-a43f-a7a18b9aff22",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9e6a33-8417-41da-9c9d-7bfc7063c235",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "255330dc-d08a-4500-847d-d08f4b36952e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5282f14a-be33-4ebb-b990-c60a2f9060d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb289f71-0acf-49e2-95a0-b7ac6dad584c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64f46652-a0e9-4cf5-9c7b-597ed026998e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f05c21c5-f6d2-4a61-bdf3-1ce57f39cb92"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06b04ebe-fed5-44d5-a38e-20ddcd81599c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58766f4d-6498-43f9-9bc6-dbe3524852e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e4d5012-81aa-48f6-9d15-1bb4efb89bb8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "847fe31d-9c13-49e8-830a-b7c40fbcbfcf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33c7050f-e66b-41ce-96e0-588bcff72a8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ec921a2-2ef4-4929-a5cb-ad4d521dbb38"
            }
          }
        ]
      },
      {
        "id": "5a8a093d-a13b-4f2f-94b1-fb1523d34194",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "326ea5f4-2e96-4490-81bf-d607c4253525",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8c85f80-b296-40cd-8c56-718f3472c499",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d0c05224-4218-4693-aa74-ebca71734db5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "745bf1f5-3318-4fec-8d09-36c76506c3d2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c8b2fac-5fad-4998-b9a9-7996dfa27544",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 143.5648854961831,
      "responseMin": 7,
      "responseMax": 1060,
      "responseSd": 170.54893856708964,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671669465967,
      "completed": 1671669517125
    },
    "executions": [
      {
        "id": "24cc6544-39d3-41c4-971d-95b61b095026",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "36612ad2-9595-46d0-ad8c-32b870f5868d",
          "httpRequestId": "489b6b06-0d15-4a3a-9d42-b28bbeb8ffc1"
        },
        "item": {
          "id": "24cc6544-39d3-41c4-971d-95b61b095026",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2dcc6d69-14a7-4a3b-b961-e1e5419e58a5",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "8c98a2d7-ec63-41db-a2d9-e513ccb14313",
        "cursor": {
          "ref": "5bb09077-b264-4050-bbcf-0d703c357c04",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e690c5af-cea8-42a6-96d0-f248b28f3ccd"
        },
        "item": {
          "id": "8c98a2d7-ec63-41db-a2d9-e513ccb14313",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6bdf4b34-bd2c-472c-af9b-d153a70a26d2",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "9718a79e-5db2-4093-9c7f-415152c72c21",
        "cursor": {
          "ref": "e4f4bd7f-44f1-4a23-9dce-02bc9c430683",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "80231938-b6bf-45aa-8337-5aad9dabe38c"
        },
        "item": {
          "id": "9718a79e-5db2-4093-9c7f-415152c72c21",
          "name": "did_json"
        },
        "response": {
          "id": "36ddf202-2a09-4c5d-885b-6dce33ffa3e5",
          "status": "OK",
          "code": 200,
          "responseTime": 231,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f9add7-6ab3-4ae8-87af-508a6c5e33cc",
        "cursor": {
          "ref": "1174037c-6ad2-465f-ad5e-5d885427f7f3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "30f6e954-5af7-423f-8785-488e8e45d38e"
        },
        "item": {
          "id": "37f9add7-6ab3-4ae8-87af-508a6c5e33cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "6d78aa3b-ca31-4832-8238-8863afe19180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f9add7-6ab3-4ae8-87af-508a6c5e33cc",
        "cursor": {
          "ref": "1174037c-6ad2-465f-ad5e-5d885427f7f3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "30f6e954-5af7-423f-8785-488e8e45d38e"
        },
        "item": {
          "id": "37f9add7-6ab3-4ae8-87af-508a6c5e33cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "6d78aa3b-ca31-4832-8238-8863afe19180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026a5bec-c819-4b33-ac8d-151d1d5df24f",
        "cursor": {
          "ref": "3bbef912-01bd-4abf-9428-073a1e035e74",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2e1dbaad-f94a-4fd3-951f-2030bd5550c0"
        },
        "item": {
          "id": "026a5bec-c819-4b33-ac8d-151d1d5df24f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9e9eb610-7e99-4876-afa0-f71e38dc5db3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 112,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd47d01f-90dd-4df5-9a06-e478fdb24411",
        "cursor": {
          "ref": "353ee16d-ec42-4a72-8a6a-3b9ec2f59807",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6d29b06c-9c4a-4c6f-b506-083d0b644138"
        },
        "item": {
          "id": "fd47d01f-90dd-4df5-9a06-e478fdb24411",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f53e91b7-1641-436b-9239-f8435bb1fbd3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088c07e2-15dc-41aa-922e-44c1b7d77521",
        "cursor": {
          "ref": "509a2128-0069-44cf-ac86-583285dead4f",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4700691b-9b69-4f51-aabd-ccbc570f41d3"
        },
        "item": {
          "id": "088c07e2-15dc-41aa-922e-44c1b7d77521",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "db9e126c-0df9-4a02-a201-1071e4e37aac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0938eb5-5d6c-46a5-bad9-8ad1a1a6d878",
        "cursor": {
          "ref": "c7d6254a-9d87-48a9-b966-bae932779078",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e5372726-736d-4e82-9cee-b92c51bde816"
        },
        "item": {
          "id": "c0938eb5-5d6c-46a5-bad9-8ad1a1a6d878",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8239d451-0f24-43f4-85ec-d5295607d83c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0938eb5-5d6c-46a5-bad9-8ad1a1a6d878",
        "cursor": {
          "ref": "c7d6254a-9d87-48a9-b966-bae932779078",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e5372726-736d-4e82-9cee-b92c51bde816"
        },
        "item": {
          "id": "c0938eb5-5d6c-46a5-bad9-8ad1a1a6d878",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8239d451-0f24-43f4-85ec-d5295607d83c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f31c89b-c1d4-454e-afb2-6305fe8db044",
        "cursor": {
          "ref": "e02f8248-634d-4f8d-947b-5db0f7252d94",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d999bd94-61d4-4084-82da-cb2ef37adc2d"
        },
        "item": {
          "id": "8f31c89b-c1d4-454e-afb2-6305fe8db044",
          "name": "identifiers"
        },
        "response": {
          "id": "1aa98f43-33d2-44de-8e55-484e8b6dfffa",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3442c44-dea6-429a-83c0-54af1f294628",
        "cursor": {
          "ref": "cac7a928-9864-4e41-8b9a-45ad2c40e8bd",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b2487bd0-d1cc-42d2-a02c-5fe0e1f85d33"
        },
        "item": {
          "id": "d3442c44-dea6-429a-83c0-54af1f294628",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9d3f85c4-3b72-4e2b-9a5a-d97ea723a58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3442c44-dea6-429a-83c0-54af1f294628",
        "cursor": {
          "ref": "cac7a928-9864-4e41-8b9a-45ad2c40e8bd",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b2487bd0-d1cc-42d2-a02c-5fe0e1f85d33"
        },
        "item": {
          "id": "d3442c44-dea6-429a-83c0-54af1f294628",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9d3f85c4-3b72-4e2b-9a5a-d97ea723a58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77cfd949-bae4-443b-bfc8-cfc4f249ff4b",
        "cursor": {
          "ref": "0e3c7279-cfb2-47b5-8f88-c99e3ea1115a",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "45d1e21b-e332-4fcb-ba17-5b0095f7e444"
        },
        "item": {
          "id": "77cfd949-bae4-443b-bfc8-cfc4f249ff4b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d15188ed-9b0e-486f-b65a-53624ab7ec8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb7cacd-9440-4d27-861b-ff5b1623af84",
        "cursor": {
          "ref": "89ce25ce-31e9-4fc9-83c0-a0e3b9adfda0",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e1fa520c-55a2-49af-951e-5b67c8b5f72d"
        },
        "item": {
          "id": "3eb7cacd-9440-4d27-861b-ff5b1623af84",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "df0a27ff-a659-46a0-a1a5-6ad1bf1744a0",
          "status": "Created",
          "code": 201,
          "responseTime": 605,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "4f5288f2-3637-4d88-bf26-30e318f69d7b",
        "cursor": {
          "ref": "767b6bfb-ac14-4772-974e-5128678ba545",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b9351d85-340c-4a72-8c58-0777f21b5574"
        },
        "item": {
          "id": "4f5288f2-3637-4d88-bf26-30e318f69d7b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2470552a-032a-41c8-98f8-a82100aa0c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0306d77-1aa3-496a-a2f1-63da71d9eef5",
        "cursor": {
          "ref": "762e9cd4-1f1a-4788-9bb4-379b39b7eb35",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ac38b7c7-435d-4743-bffd-93cefbc74851"
        },
        "item": {
          "id": "d0306d77-1aa3-496a-a2f1-63da71d9eef5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b62a8420-beda-4b2b-aafb-0b39f6f4bd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e788cfac-87d5-4e57-a0ca-c7f4e9bc6fba",
        "cursor": {
          "ref": "f9ac78de-0266-4c48-b7b4-88242d91b6a9",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6ea6a6cd-5ec2-43ee-80e1-380037f4cc32"
        },
        "item": {
          "id": "e788cfac-87d5-4e57-a0ca-c7f4e9bc6fba",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cb80218e-e46e-4799-871e-a1bedf76d55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273a0c27-2537-47f1-8de1-79b3317f5a07",
        "cursor": {
          "ref": "900243cf-9eec-4000-9b36-3ff1bc14a45e",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9e150a0f-6b87-4001-9219-5e65855d07ed"
        },
        "item": {
          "id": "273a0c27-2537-47f1-8de1-79b3317f5a07",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3a271c76-f9e7-4d53-810e-8a9e2a7bec89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f34e430-a944-4682-8397-219ff87d6749",
        "cursor": {
          "ref": "52ca94c4-ee9a-4aef-bf69-2540a4521a65",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e8a25f3a-eca7-402c-b9f7-8d9f2a3c3138"
        },
        "item": {
          "id": "2f34e430-a944-4682-8397-219ff87d6749",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1482eaab-2f98-49c6-a51a-2ee8b21660f2",
          "status": "Created",
          "code": 201,
          "responseTime": 584,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "4d2b9195-47be-48c3-a86f-f36850f2f02e",
        "cursor": {
          "ref": "71d5431a-cc03-4701-ba4d-34f726621d04",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "18f6c5c2-8e22-4426-b640-28ed2bacc370"
        },
        "item": {
          "id": "4d2b9195-47be-48c3-a86f-f36850f2f02e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "93ecf891-d1b7-4e58-a044-81b04a20bbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22cc7665-7b08-4715-8f38-0f0583c324b0",
        "cursor": {
          "ref": "3c5da2af-383c-4213-b2f2-cf2ee2582839",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "99bd559a-41c7-4105-9239-12a3c01388b8"
        },
        "item": {
          "id": "22cc7665-7b08-4715-8f38-0f0583c324b0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1be22fc1-781b-4d6b-b814-af2909e2e7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84e9345-1086-49c1-8cb6-a360159a6e94",
        "cursor": {
          "ref": "7c3066a0-68db-4aa4-b14b-c74b86465109",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e30bbdae-a014-4017-87fb-046078974712"
        },
        "item": {
          "id": "a84e9345-1086-49c1-8cb6-a360159a6e94",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "56e0e347-3ad5-46fd-be44-37e8bea95430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10926ad-73a4-4421-8b42-cd432145cb87",
        "cursor": {
          "ref": "80a4650c-fd8c-418e-98e2-c6a64c7ec3ba",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "65a08b2b-c74f-46b0-93a1-fa4398fa0f5d"
        },
        "item": {
          "id": "f10926ad-73a4-4421-8b42-cd432145cb87",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7ad7d2c0-0bbe-4855-a955-4525045a3f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5956135-bdac-4e5f-80b5-e64b616acac6",
        "cursor": {
          "ref": "f7b58247-ab2c-4a75-ae03-e5884c724183",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "16393ae8-8d83-4e02-8e62-f31efcfdbea8"
        },
        "item": {
          "id": "c5956135-bdac-4e5f-80b5-e64b616acac6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ea8a80dd-7145-4834-9693-1e5f86a6e546",
          "status": "Created",
          "code": 201,
          "responseTime": 555,
          "responseSize": 734
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "819d3076-8476-4ba8-be38-1681e0a89834",
        "cursor": {
          "ref": "100335e5-125b-4929-8116-404fc969539e",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "00b25470-50d2-493d-bd03-19ff1da49cd7"
        },
        "item": {
          "id": "819d3076-8476-4ba8-be38-1681e0a89834",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "ebbf44d0-c41d-4373-a3ee-a47447d70653",
          "status": "Created",
          "code": 201,
          "responseTime": 1060,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "26ab4c29-7225-40ed-9bb3-b69ee7f3044a",
        "cursor": {
          "ref": "1fc68713-6b56-44ec-b595-ca542d3ef86c",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e3e0cbe8-ca8e-4d34-9bc2-b517a98e0e49"
        },
        "item": {
          "id": "26ab4c29-7225-40ed-9bb3-b69ee7f3044a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2ceab1bf-bedf-4dc4-af3a-05bd3bcab5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015ea3bd-b205-499d-81c0-2e1744f58e73",
        "cursor": {
          "ref": "64e8155f-36e8-4904-8186-e39fed962643",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b8f62a77-5130-4176-a70b-73c3ed2bbbf0"
        },
        "item": {
          "id": "015ea3bd-b205-499d-81c0-2e1744f58e73",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8b04dd9b-7306-465d-94f1-1d275c4bdacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f33a584-0ae9-4f27-8a24-28fc46b0dc85",
        "cursor": {
          "ref": "5ad67e20-b4a1-47e4-9682-815e78a30c06",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c1df3372-7317-4726-81bc-1497f6dabc24"
        },
        "item": {
          "id": "1f33a584-0ae9-4f27-8a24-28fc46b0dc85",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8d2ffe76-eb96-41fe-9cda-1f19f82d6d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56fb086-0cc4-4872-842b-5d3a3b89101f",
        "cursor": {
          "ref": "dbaf186e-2b53-4268-b3d9-b83da7dbcf10",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "37c5dfd4-fd24-4bfb-a1f0-0a580b3b4958"
        },
        "item": {
          "id": "e56fb086-0cc4-4872-842b-5d3a3b89101f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7b6ef883-2140-4d29-af2e-43f3ecd5b881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330ca93b-a045-475a-abbc-f5d7d6062add",
        "cursor": {
          "ref": "e88ef020-8cb9-4a46-869b-efa411a2b8fe",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4e781bc1-b718-49b6-80c7-2d693c94589f"
        },
        "item": {
          "id": "330ca93b-a045-475a-abbc-f5d7d6062add",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7402c9b4-1365-48fc-a906-2401d97ed5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0942bbf6-883e-4178-bcfc-f3363ef48d90",
        "cursor": {
          "ref": "b5d4e889-9a20-4946-a726-56ad1bf76775",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cd7d1b2f-66de-444d-9ad4-16a352377ca2"
        },
        "item": {
          "id": "0942bbf6-883e-4178-bcfc-f3363ef48d90",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4405cb6b-dab5-440f-a30d-e2df007a52b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b0dc14-126f-459c-8073-92c9084adac1",
        "cursor": {
          "ref": "27b018dc-177d-4c6b-beb5-e81e9adcc8ac",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "af0c7e2c-6ade-4c2b-81e6-516c24febe2d"
        },
        "item": {
          "id": "76b0dc14-126f-459c-8073-92c9084adac1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d5c97c0b-8b9f-4c74-963b-21cc61017dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e04fb5-e338-4312-bc67-46ced6d91fda",
        "cursor": {
          "ref": "05f25b4a-0e22-4ad1-af48-aac3752005bc",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0d735532-4e41-4803-87e7-89438c8e29c5"
        },
        "item": {
          "id": "94e04fb5-e338-4312-bc67-46ced6d91fda",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "570f7cd6-fa05-4a28-968e-e62da2277c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cefcf43e-6f60-4b9c-bac5-bb75a683f59c",
        "cursor": {
          "ref": "51f3560b-8bf5-4f77-ace8-5213eb915972",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6feacf1a-8f5a-4e14-9c50-ece454547277"
        },
        "item": {
          "id": "cefcf43e-6f60-4b9c-bac5-bb75a683f59c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "91bd28bc-a9a6-435b-8b99-38b19b105afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8692edbb-398c-467a-b5ff-d39e7613a879",
        "cursor": {
          "ref": "aec5c512-e8a1-407f-a078-1f13252fd39b",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a3ea5d2c-b880-4e4e-9cd3-51587409e14f"
        },
        "item": {
          "id": "8692edbb-398c-467a-b5ff-d39e7613a879",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e71fbee6-14f2-4f93-b37b-843d7702a8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2712b225-33c8-48b8-bc6d-82cc33bc2591",
        "cursor": {
          "ref": "e3e7ef61-5efd-45d0-99a7-09e2fac7951e",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c1a0e199-aab3-4763-85df-e7901128c8ef"
        },
        "item": {
          "id": "2712b225-33c8-48b8-bc6d-82cc33bc2591",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9d882e0f-0c03-4300-acb3-3810edcbb017",
          "status": "Created",
          "code": 201,
          "responseTime": 732,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "11444693-fbb9-4075-8bef-1e54c43c5402",
        "cursor": {
          "ref": "8404fd59-4d48-4db5-b858-5a5eed394523",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c8c89ff3-330e-4203-997c-7878afc756ae"
        },
        "item": {
          "id": "11444693-fbb9-4075-8bef-1e54c43c5402",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1d13fc65-5ba6-47e5-b911-74614ea291af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb210f13-1d98-45d8-98db-a714fd003764",
        "cursor": {
          "ref": "4d280c3f-800b-42c3-ac7a-4b2058bde6b9",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fe7d3803-3070-41bc-9c65-57ceb3dcb91c"
        },
        "item": {
          "id": "eb210f13-1d98-45d8-98db-a714fd003764",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "407c9f0b-bd10-437a-ab07-8b12baff0fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa16b49a-1798-4864-a0c4-d5094ef0f5fb",
        "cursor": {
          "ref": "55a69751-82ef-442f-802f-30ec6c7e44a5",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1df64cff-3324-4451-a6e3-779563391d1c"
        },
        "item": {
          "id": "aa16b49a-1798-4864-a0c4-d5094ef0f5fb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8e3b5cd9-4f57-4768-9ac9-03f752340dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13114b2-829f-42c6-9d25-e838dc237712",
        "cursor": {
          "ref": "0f4123f1-e2f7-4ec4-890e-413000adb029",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "351cbf5d-7bef-4b11-9003-1fc655fa2942"
        },
        "item": {
          "id": "d13114b2-829f-42c6-9d25-e838dc237712",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "282ed8cf-eb70-4915-9f32-ebfbcf6ddabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5409a47-99d2-4105-bbb1-bc8d95b56e0d",
        "cursor": {
          "ref": "0cb8f52e-2b53-4730-9f38-55decaf26cfd",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "29157bed-d322-4230-8719-8fa3a3b01c4c"
        },
        "item": {
          "id": "f5409a47-99d2-4105-bbb1-bc8d95b56e0d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "339c8c8a-31e6-42e8-9bf5-f9e94f0b69a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a53b49b-d5a3-4806-b656-0ba62adec048",
        "cursor": {
          "ref": "266cb59a-309c-41c0-84ec-32f9ca988b78",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a009220f-8025-4bd1-8d4e-87d796000b5b"
        },
        "item": {
          "id": "9a53b49b-d5a3-4806-b656-0ba62adec048",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1d58364e-0d92-4c62-b700-1c08a9560c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbe6e02-3f77-4103-8c3e-935d62d754c8",
        "cursor": {
          "ref": "1d4e6e38-2e56-4135-ba51-c482f80ac9cb",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8ec9c33a-c0cb-4c09-9b08-56c05f5429b9"
        },
        "item": {
          "id": "ddbe6e02-3f77-4103-8c3e-935d62d754c8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0341c621-36e3-4700-ac1b-5b291dd608e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac47a00-d13c-4cac-9f28-ffc2107d9790",
        "cursor": {
          "ref": "9d835ebc-9ac3-48bd-98be-0d3bac51dd76",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c98d04bb-d1fa-4ddc-ada1-992372777771"
        },
        "item": {
          "id": "dac47a00-d13c-4cac-9f28-ffc2107d9790",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4993f207-4c71-4ad1-9253-48a61e23a60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3a184b-156a-40b8-a1a6-572a7ca9df11",
        "cursor": {
          "ref": "16e65a05-c971-43d5-9dcc-c7bff05a54cb",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c25486e5-ece5-4950-8f73-125413f1fe9d"
        },
        "item": {
          "id": "aa3a184b-156a-40b8-a1a6-572a7ca9df11",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "dd4c6d58-7640-4314-995c-76be82a04389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02bcea0-d514-47f5-894b-70dc9f0c919a",
        "cursor": {
          "ref": "bdc7cb43-bf3f-4df2-9404-2512834adfd5",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "95b2e2fc-46eb-478e-81d5-bdf555089af4"
        },
        "item": {
          "id": "c02bcea0-d514-47f5-894b-70dc9f0c919a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7852d0db-a865-4cf3-a477-fcf505e266b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58755f3d-1d4f-47f2-9a3d-920558406b1b",
        "cursor": {
          "ref": "55f5cc4a-a8e5-4339-81c3-1045f5cad61b",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8720c2f4-23d7-422e-8902-5fdaf0bd1086"
        },
        "item": {
          "id": "58755f3d-1d4f-47f2-9a3d-920558406b1b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0eaa9ad2-8d98-4543-9962-00965dfc1e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b74c104-b253-408c-be1d-c688d5aad45e",
        "cursor": {
          "ref": "cdc0605f-947d-4daf-bd11-05a09810cec4",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "df77fd28-8372-4ca4-8069-07fbd0a40786"
        },
        "item": {
          "id": "7b74c104-b253-408c-be1d-c688d5aad45e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b7a26d50-da30-469f-be1a-29c2da7463da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcdb9949-0159-4a98-bfa8-3012f2be0961",
        "cursor": {
          "ref": "89d9bade-d9ec-4d00-949a-930bfb8b0c7f",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6a58746b-a087-42de-a65d-507e7c347684"
        },
        "item": {
          "id": "bcdb9949-0159-4a98-bfa8-3012f2be0961",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ecaa3bf3-a65a-4eaa-bf47-38c9858815a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 369,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6adbd085-a5dc-4b05-8796-208d5ecb7f8b",
        "cursor": {
          "ref": "198c3d9a-b278-498d-bc97-9200620131b3",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c6e30c0d-d8b1-49a1-b7e8-f228b40502ce"
        },
        "item": {
          "id": "6adbd085-a5dc-4b05-8796-208d5ecb7f8b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "62f591e1-9517-4490-89da-92470b0ed190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e05d22-9b43-47ad-9cea-50eb1ab4934d",
        "cursor": {
          "ref": "caa00597-84b7-4382-b6d1-376f3bfaf4e3",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "940c6b19-a25f-47de-88f3-4c55410a32b9"
        },
        "item": {
          "id": "13e05d22-9b43-47ad-9cea-50eb1ab4934d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2d729a11-858c-4fc5-9dee-58ab4d3e870f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0801327a-65e3-4b02-8b69-07fb9dbe7ae8",
        "cursor": {
          "ref": "642c22a7-8a5c-4839-bf1d-1ab2699e826c",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "22cd7396-b4cc-478c-9bd6-056081821db0"
        },
        "item": {
          "id": "0801327a-65e3-4b02-8b69-07fb9dbe7ae8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "60c98b83-a679-47ee-aa05-a2b012af2f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae340aa-3023-42c0-827c-8fc377504b57",
        "cursor": {
          "ref": "be9ebe9d-7d7d-42bc-a0f0-0fbf7ad7599a",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cffee466-a956-49a3-903f-d7882cbc8a8a"
        },
        "item": {
          "id": "cae340aa-3023-42c0-827c-8fc377504b57",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4e87131a-309e-47a6-ae4f-aefcdd235323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8947adc5-4512-4bec-8670-7476042cff1e",
        "cursor": {
          "ref": "56bc7d5f-aa6c-4645-a9ea-ef8e055a4623",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "44559bb6-58d9-4103-82a5-713c7520f909"
        },
        "item": {
          "id": "8947adc5-4512-4bec-8670-7476042cff1e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1be11a57-2fcf-42c1-ba06-ea6d4193ef96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba45e86-394c-42d3-a260-7cfb1eac694b",
        "cursor": {
          "ref": "8dbefa38-ca4b-416f-9d0a-e74e776401fa",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fff4153e-5812-4d47-b821-085410fdd3e5"
        },
        "item": {
          "id": "dba45e86-394c-42d3-a260-7cfb1eac694b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "06ba4f7e-fdac-4f68-96ae-598afd7c0861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f431a7-4108-4ab0-9143-7e5e3b449693",
        "cursor": {
          "ref": "7929fd28-b7ee-4049-bbd5-7e2572abef4f",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6dd7bcc2-5fb4-48bc-936f-25bee366c78a"
        },
        "item": {
          "id": "b6f431a7-4108-4ab0-9143-7e5e3b449693",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "05fa4f4c-bff8-4660-b9cb-919e224d5c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 365,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "587287f6-5bc2-4111-a894-ac98be01bb47",
        "cursor": {
          "ref": "cca1b8f0-d815-4053-9f14-f24a04625c5d",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "496923ed-4c36-4ee2-b882-04a5afea886c"
        },
        "item": {
          "id": "587287f6-5bc2-4111-a894-ac98be01bb47",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9db1555a-0ea3-4a17-a229-00b8ae471f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e8dae6-4e8e-4980-a399-6d4f04d8b246",
        "cursor": {
          "ref": "75fb22a3-383c-4826-a0c1-e5e7ab62e5c3",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "32c24a4f-053a-400c-998a-16e9d6e9938e"
        },
        "item": {
          "id": "94e8dae6-4e8e-4980-a399-6d4f04d8b246",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8cb0a246-ef44-4405-ac9b-8661333b6b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c8ab58-afea-44fd-bf29-b4a5ddeefb2c",
        "cursor": {
          "ref": "f009dd66-b519-415d-889e-d9eff854de29",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4550ae90-8e4d-420b-896e-55dc5ad5fe21"
        },
        "item": {
          "id": "79c8ab58-afea-44fd-bf29-b4a5ddeefb2c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ba0f3e6e-b316-4348-a960-522aaa39a390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda58972-8cb7-40f7-aa38-7920d347ceed",
        "cursor": {
          "ref": "14797d3c-42b6-4857-933f-0fd4177a17b2",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "78b73eae-0a7c-4381-b549-a510db0fd65e"
        },
        "item": {
          "id": "fda58972-8cb7-40f7-aa38-7920d347ceed",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "26c0ef02-0d5d-4b9c-9859-690876d96983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f09817-1de8-4e92-84a5-0d5ed1eaa171",
        "cursor": {
          "ref": "5b63d5c4-5757-441c-8396-411fc623ed61",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1865586d-19dd-48cc-88d7-10e7319b4cb7"
        },
        "item": {
          "id": "70f09817-1de8-4e92-84a5-0d5ed1eaa171",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5cc3ce19-5cf3-42fb-a082-e6afa37fa5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b55226-8739-4f80-b5dd-96abc75f814e",
        "cursor": {
          "ref": "929ec4dc-6217-479f-95f2-e1e7b79b579b",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "83b8815d-17aa-4d69-a80f-7a39cb181cb4"
        },
        "item": {
          "id": "26b55226-8739-4f80-b5dd-96abc75f814e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c5db4536-270d-4b41-a8d5-c1284aa7f3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2bb77bb-b0f9-4489-89e2-dea5a6097501",
        "cursor": {
          "ref": "5753087c-4e92-4ea6-88fe-3fee42d3cf64",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2a9c40ef-bf9c-45e4-8c45-980f4f727335"
        },
        "item": {
          "id": "a2bb77bb-b0f9-4489-89e2-dea5a6097501",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "06eee0d9-7c96-462e-afed-3b49166fa3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1838bcf9-8b2c-468e-8fbb-3b623caf183e",
        "cursor": {
          "ref": "59d61eb9-1407-4179-ad0a-2411d36cb368",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "92a51ee1-4561-46c8-805d-8cb74f35112b"
        },
        "item": {
          "id": "1838bcf9-8b2c-468e-8fbb-3b623caf183e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e8202e25-80f2-457d-a0b8-4bc154609df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8806757-b00c-4ca7-bb11-4cad041e3d1e",
        "cursor": {
          "ref": "aaf75317-d6cb-4871-9899-da4f2bfab133",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "03f7a14b-274c-424a-83af-6aa083796d44"
        },
        "item": {
          "id": "c8806757-b00c-4ca7-bb11-4cad041e3d1e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e933b0ce-2224-49a1-9fc7-7d7471ef57b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6241ee4a-b5f0-4bd6-b635-36d32ec2de61",
        "cursor": {
          "ref": "344648b7-3e8f-421c-b9e6-0972b3038ae5",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a29d9d88-3428-4a84-98b7-3626d144dcd8"
        },
        "item": {
          "id": "6241ee4a-b5f0-4bd6-b635-36d32ec2de61",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2851160d-8e80-46f7-a0b7-2f75d8b45853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21274c37-0297-494d-bbef-be809ea60a4e",
        "cursor": {
          "ref": "1833381f-2998-4dd7-aca6-63281f89767e",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b5bbb937-8e79-4e4f-a7fb-2b015e40f163"
        },
        "item": {
          "id": "21274c37-0297-494d-bbef-be809ea60a4e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "963c618e-81e6-4698-a2a1-270f783bf8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106834ef-238a-4244-a35a-70b8b2eb558e",
        "cursor": {
          "ref": "c7c5646b-0810-46c5-ab82-7f64c97c89fd",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3223d4ec-9a1f-475f-a857-815895b2030d"
        },
        "item": {
          "id": "106834ef-238a-4244-a35a-70b8b2eb558e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0e5ea00a-f07f-49e4-94f0-1791082db147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b95546-3ed9-4f02-b377-e98f3553e7cb",
        "cursor": {
          "ref": "6c783c50-09a3-4054-9d7f-dffaa3d9587a",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "51527cb5-1b6d-41ef-9c6e-8bfd1a24f3a4"
        },
        "item": {
          "id": "67b95546-3ed9-4f02-b377-e98f3553e7cb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dfc81623-5bef-43ab-85e6-d394a64aabf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1047c5c-6b27-40ca-aa47-1cc5972993d1",
        "cursor": {
          "ref": "4c315fa4-5b0a-420a-95e8-f0674cdd0242",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "08414127-0b04-43a1-a09f-a105846729aa"
        },
        "item": {
          "id": "a1047c5c-6b27-40ca-aa47-1cc5972993d1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7bf899e1-8a6b-477c-975c-b07d8a962d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920d48f5-759a-4742-ac36-2636ee256387",
        "cursor": {
          "ref": "201fc3bb-a5da-47b2-887a-2f4a7994bc66",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "29b8d2ee-f17c-471f-b65e-c0472c954e95"
        },
        "item": {
          "id": "920d48f5-759a-4742-ac36-2636ee256387",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f72ad23d-e610-4b95-a0d5-670bc289a974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0a57f6-1f1f-436d-a354-65208e19da69",
        "cursor": {
          "ref": "6d967a92-e5a5-44f1-90aa-98ef2c0c964c",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "70cecb9e-47b2-42e3-a079-03080807970e"
        },
        "item": {
          "id": "af0a57f6-1f1f-436d-a354-65208e19da69",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b4bb7653-6e96-4ba1-9ad8-d06f24e7033e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f51121-d848-4bc3-bd11-446333c3924d",
        "cursor": {
          "ref": "da93102b-20b5-4f86-acd6-263578ea3832",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e2e25704-7d79-4647-a3a4-dd17fbe09cbe"
        },
        "item": {
          "id": "e2f51121-d848-4bc3-bd11-446333c3924d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7dbaa9ff-6976-4b09-a039-30c42c29b935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dde5506-e7a9-4c38-b29b-404bd47c0477",
        "cursor": {
          "ref": "78dc833b-68aa-4608-b0c6-b2d73b8a8cf1",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7da3da91-b7e2-4701-88b6-efa882a1460d"
        },
        "item": {
          "id": "6dde5506-e7a9-4c38-b29b-404bd47c0477",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6e90f687-d258-4f88-9ae5-9f157275166b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b050a1ba-c1df-44f3-bb9e-dda31b206867",
        "cursor": {
          "ref": "e10ba472-50fd-4ca3-854a-493d7aeab2b8",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fce0c497-a726-4118-8617-abab17cae868"
        },
        "item": {
          "id": "b050a1ba-c1df-44f3-bb9e-dda31b206867",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d8eb6f9b-87fd-4ad8-831e-a7ce22149109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcaa3ea-54ce-40a7-9375-582c1d1e83e2",
        "cursor": {
          "ref": "a447abcf-90a4-4c13-9199-07f0c5ce02cb",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "637c376a-7710-43a8-93f9-8b68355c5316"
        },
        "item": {
          "id": "9bcaa3ea-54ce-40a7-9375-582c1d1e83e2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7d4e0223-c562-402e-a4f8-54fd86d93a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1bfabc-c2f8-4d6b-9ecf-4a4e45ff84b4",
        "cursor": {
          "ref": "08a0da0a-c877-4413-aa37-4d3eeeb76e5f",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "78b6979f-f48f-4f2d-98e0-0fb6ead9e16b"
        },
        "item": {
          "id": "5b1bfabc-c2f8-4d6b-9ecf-4a4e45ff84b4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fe8d4b00-bb57-4787-8476-5b37b80648c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777746d3-37cf-4b46-b1ea-61b2a6368f3d",
        "cursor": {
          "ref": "70a66fff-a711-4300-9dfd-2d05fcf98a58",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5ea4ed4d-7c4e-4081-a3d1-33b5a48330a3"
        },
        "item": {
          "id": "777746d3-37cf-4b46-b1ea-61b2a6368f3d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "42ac0381-7352-458e-b4ee-6b8d92f70b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a56f496-8074-4127-b816-c65949ea8e62",
        "cursor": {
          "ref": "f866bb29-5348-4a07-a34a-5e8c8fc64227",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a56c09fc-da69-4a0a-af78-8c9b141f9d5e"
        },
        "item": {
          "id": "9a56f496-8074-4127-b816-c65949ea8e62",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d402fba8-08c4-4d84-a7a3-44b058323c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4617cd-a666-4679-b074-57b2c3ee5ae0",
        "cursor": {
          "ref": "f4167cea-5eb1-4ea5-aa21-89aad71caa95",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "dd46d43c-64e8-4cba-9d99-0d14f7d7cb6f"
        },
        "item": {
          "id": "3c4617cd-a666-4679-b074-57b2c3ee5ae0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "babc32b4-5737-4d2b-a200-23154a1df478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac0d09c-b89d-4078-ae9e-36b511bb8065",
        "cursor": {
          "ref": "c4da575c-c6a2-47d2-9689-62d7b4d88c32",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f490843b-03d1-473a-9a20-568a6cfe233c"
        },
        "item": {
          "id": "0ac0d09c-b89d-4078-ae9e-36b511bb8065",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a6dc8eb4-ae47-4ecd-bbf7-4b1a1e3c185f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570ae630-f851-4c43-88ac-c5787f2f00e1",
        "cursor": {
          "ref": "e26d95b2-537b-4884-a3f7-f12036025f3b",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ec8ff685-7522-430d-97ff-247c46317f42"
        },
        "item": {
          "id": "570ae630-f851-4c43-88ac-c5787f2f00e1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cec4cecc-aeaf-48da-8e01-42bd4502ecdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02fa9ea-b19e-4aa4-b42e-ee74bf757ef0",
        "cursor": {
          "ref": "69f99595-8924-406f-97e7-232d865e7ff2",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4f0b9cc3-658c-4c38-8e9a-df6dc5d3317f"
        },
        "item": {
          "id": "e02fa9ea-b19e-4aa4-b42e-ee74bf757ef0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "609590a9-959c-419d-958b-9261834cb2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bb0aa1-e065-420c-99ce-7cf8029b6997",
        "cursor": {
          "ref": "8fcf9582-fb76-42e7-8257-514f5dd36539",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0a4d36c2-2d86-41a9-90c7-3a1282ac4fb4"
        },
        "item": {
          "id": "92bb0aa1-e065-420c-99ce-7cf8029b6997",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2729f189-ee1b-44c7-b2a1-86fde7620e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e711b512-7854-4950-98fd-22056dc9f86d",
        "cursor": {
          "ref": "d7e82e41-d196-45df-8fb1-f0c9478609e0",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3b4339f7-a48b-4fd5-a1a5-2e7ed5614770"
        },
        "item": {
          "id": "e711b512-7854-4950-98fd-22056dc9f86d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2d13f781-bfb4-4378-88db-9b3092bcbe3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da74d4d4-6a75-4819-ba74-7b46aed4d340",
        "cursor": {
          "ref": "16256ea9-ffef-4fde-907b-91d6a2da6ba4",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2aeb3eeb-541c-4460-bdd3-6696098c186a"
        },
        "item": {
          "id": "da74d4d4-6a75-4819-ba74-7b46aed4d340",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ad0b07fd-f384-4e90-acd8-c316c12b2636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca9a77a-b118-46bc-9eec-d3584404d973",
        "cursor": {
          "ref": "fd9d2846-4d98-49fb-b3af-bdfb6e381359",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ce37756d-1076-44c3-97dd-1588fa979c8c"
        },
        "item": {
          "id": "1ca9a77a-b118-46bc-9eec-d3584404d973",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "596a6ba9-7282-409b-b55e-302ff37f19d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 375,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8368d0-4add-492c-a2d5-94611f007970",
        "cursor": {
          "ref": "4a70c3cc-1abe-4dc9-a068-62a6642b0213",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "39041206-3717-42db-8ec6-b6a8634771e0"
        },
        "item": {
          "id": "ae8368d0-4add-492c-a2d5-94611f007970",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8244276b-84de-4ee9-842b-40a5ba6abeeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68012d98-cc8f-4b99-a2f1-cdad54ad4398",
        "cursor": {
          "ref": "755d29e8-617e-4e9c-9c27-b505ccbcebfe",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d8e2358b-fc04-4da3-882b-1abb766e041c"
        },
        "item": {
          "id": "68012d98-cc8f-4b99-a2f1-cdad54ad4398",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "910f3b15-0110-468a-8a34-7b145eb43e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115e112c-8a23-4367-8bdc-0809c8a04577",
        "cursor": {
          "ref": "3585c426-3f3a-4053-8d26-baf7ec6d1fb6",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "240d7122-bc0f-4e5c-b9be-874f740019df"
        },
        "item": {
          "id": "115e112c-8a23-4367-8bdc-0809c8a04577",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6420f9e0-22ea-4c03-a6d5-323ba3df6c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a05bf8-1829-436f-9948-fd629a3abb62",
        "cursor": {
          "ref": "bb304536-d241-40a7-b657-dd3b20d4b9c6",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eb902332-1419-4ffb-a4fb-d60d7b7bf8a4"
        },
        "item": {
          "id": "a5a05bf8-1829-436f-9948-fd629a3abb62",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fdf8b680-24d7-4c20-a120-33dc16c272f9",
          "status": "Created",
          "code": 201,
          "responseTime": 688,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "9416db2d-b5cf-4177-b534-8c5b3e9761a9",
        "cursor": {
          "ref": "53cd912e-2e2b-45c6-8d10-18b7d2ae1f76",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f86cab47-6bf5-49d1-a996-6bb177655b25"
        },
        "item": {
          "id": "9416db2d-b5cf-4177-b534-8c5b3e9761a9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bc243544-563e-49c7-885c-117be0ea8180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d69d225-d7df-4071-9194-be0a6db6b920",
        "cursor": {
          "ref": "665f1479-beba-4dcd-ad44-d856d27b80bc",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "848cea1e-c081-4a59-97c1-2cf593688273"
        },
        "item": {
          "id": "7d69d225-d7df-4071-9194-be0a6db6b920",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "826f2d46-b8b9-4c10-9558-71b9a62de1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51304f3d-ca1a-41ad-b641-778a4dbb5bb1",
        "cursor": {
          "ref": "0508a5a7-5ebe-492c-afc4-49a940db2120",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "174118a3-75d1-4685-b7c9-2546bc8ccdd9"
        },
        "item": {
          "id": "51304f3d-ca1a-41ad-b641-778a4dbb5bb1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9e5a5e2b-f209-4bef-b66d-9e1d21d10df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1b8bb3-921d-479e-9477-44937f7f9c68",
        "cursor": {
          "ref": "f5e0a241-2826-4e36-b668-6d9e673530e6",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "363f7420-abfa-473d-9b70-6ea7e869476f"
        },
        "item": {
          "id": "8e1b8bb3-921d-479e-9477-44937f7f9c68",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9a063c94-d6c3-4e60-be36-4ff4223ec55c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba55cbd1-5081-4e28-9dd7-969366e5a788",
        "cursor": {
          "ref": "da39dff9-ab8d-422a-8c27-1e29794d81ea",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9ef7d368-f0fb-4d9c-a3ba-cb0f582373ea"
        },
        "item": {
          "id": "ba55cbd1-5081-4e28-9dd7-969366e5a788",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f42b6eaf-e68b-45a7-a634-b40c5c0bcf60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1655c0d-3d1f-4776-84f2-3e9a2391ad6c",
        "cursor": {
          "ref": "0d763932-709f-480f-8495-802312d6543c",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3217b4e9-c38a-439b-b55a-728d6d984a12"
        },
        "item": {
          "id": "b1655c0d-3d1f-4776-84f2-3e9a2391ad6c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c4945151-adef-4c5e-a6e8-e618d9a78bfa",
          "status": "Created",
          "code": 201,
          "responseTime": 853,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "fd21f117-92c1-4e0b-bdcb-c4c974c2a9db",
        "cursor": {
          "ref": "8766d710-8f47-4e31-8725-14f259241e27",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ccb26f00-a096-430f-9f95-a1772019737e"
        },
        "item": {
          "id": "fd21f117-92c1-4e0b-bdcb-c4c974c2a9db",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "86fe67f7-0cf0-4eba-a0dd-c4be6ea87a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0063dd26-9ed1-4d9d-a42e-0ac9a70421bb",
        "cursor": {
          "ref": "ae3c887a-3523-48b1-a54c-0834c75b4e75",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "33808d04-6818-4bb0-a5df-f581c5626e8c"
        },
        "item": {
          "id": "0063dd26-9ed1-4d9d-a42e-0ac9a70421bb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d5bb1b91-2d02-4b7c-8898-74daaa9e5524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8fd33c-d6f5-4e33-ba3a-437198bf6495",
        "cursor": {
          "ref": "65af6680-ea94-4d6c-b883-75b77a074a51",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "749f8a06-566f-4368-95e1-3273e3eee755"
        },
        "item": {
          "id": "cd8fd33c-d6f5-4e33-ba3a-437198bf6495",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3b7c0b50-881b-4af6-8782-781fd69bd422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d70c4d-00ed-4aed-94d0-bb7521590745",
        "cursor": {
          "ref": "40fe3664-a755-43ae-ad70-709267a0f1bf",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9b9c90df-fba2-471f-9579-cf8ad89522dc"
        },
        "item": {
          "id": "04d70c4d-00ed-4aed-94d0-bb7521590745",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "87a97a5a-6a30-42ea-8d53-c66de361e6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7674c0-99cf-4749-8bb9-b11f961200bf",
        "cursor": {
          "ref": "194b9545-a359-4e13-a449-e98c404b9f0d",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "427b935d-3dd2-4681-82a9-b463ae8fb4b0"
        },
        "item": {
          "id": "4f7674c0-99cf-4749-8bb9-b11f961200bf",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "301a69ba-8ea9-456b-aac7-132b80991afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bf2481-b097-4481-818b-38ae927cb605",
        "cursor": {
          "ref": "5d7eab0d-c634-41ca-a77e-6b73388bf844",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1a918a7e-30e1-4a55-b2d5-cc8ff6ecfa7f"
        },
        "item": {
          "id": "66bf2481-b097-4481-818b-38ae927cb605",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7d092fdc-b88d-4b14-a507-5cd911ac6c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a382b97-10cb-4925-8bd9-db86f6b9cbbb",
        "cursor": {
          "ref": "43958175-5559-4ab2-86a5-c3aa4a7ca9e4",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6d8ace0b-6807-4534-94d5-b5c0a1625c5c"
        },
        "item": {
          "id": "3a382b97-10cb-4925-8bd9-db86f6b9cbbb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "83041c81-28cc-4184-8730-0bae6561f00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdb5799-bdfc-478f-94f9-ae84a89860b9",
        "cursor": {
          "ref": "ffa328c8-3e08-492c-89a8-33f04670861a",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3eeb4e44-a26d-4746-b8ff-9dff775449af"
        },
        "item": {
          "id": "9bdb5799-bdfc-478f-94f9-ae84a89860b9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a61d75e5-c071-43dc-8d38-8019f00f5c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840ba31e-2e59-4ab4-9d33-c7853ed77def",
        "cursor": {
          "ref": "1b22902b-e94e-49ba-91b0-54b13cc17d1b",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "226d25e0-bfbf-4315-ae52-17a52b83e832"
        },
        "item": {
          "id": "840ba31e-2e59-4ab4-9d33-c7853ed77def",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3908cef6-567b-4529-8ac8-0f723d86b594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "99d68977-88c5-4ade-be1f-c3b24b093ce4",
        "cursor": {
          "ref": "5a8a004f-082c-497d-b5ca-fe918122e169",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7515493b-45ac-4431-9732-9e2a9b00d818"
        },
        "item": {
          "id": "99d68977-88c5-4ade-be1f-c3b24b093ce4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7a441d84-3e2d-4eb2-83a3-587d248a0ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "b15eb44d-db76-41bf-bca3-f7cfa2994d61",
        "cursor": {
          "ref": "12f5e09d-2e01-458f-8530-38bed5074f54",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6551ff37-6d90-4af0-86fe-1168e9fa8f1a"
        },
        "item": {
          "id": "b15eb44d-db76-41bf-bca3-f7cfa2994d61",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a392e95b-49ef-46b6-a0c1-9a3af149f77b",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b2fde4-23b7-4a81-8560-7c0759383134",
        "cursor": {
          "ref": "3a103e6b-8905-4201-a482-8f40608fa4ef",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "efe6dc52-eb31-48da-bc62-63f0aa07c227"
        },
        "item": {
          "id": "08b2fde4-23b7-4a81-8560-7c0759383134",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0cad4f05-8568-4ef8-ad67-614a1ab958e8",
          "status": "Created",
          "code": 201,
          "responseTime": 696,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9105b612-2f48-43e1-9f8a-572fc250321e",
        "cursor": {
          "ref": "7a311364-fd0f-4602-a553-fd19f757a80a",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0aecb6ec-3dc3-4076-a0cd-58cc299e2aa1"
        },
        "item": {
          "id": "9105b612-2f48-43e1-9f8a-572fc250321e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1b209225-e027-45df-a1dc-3b745fb6f9d9",
          "status": "Created",
          "code": 201,
          "responseTime": 747,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4961b3e-7a8e-407f-910b-43fe942cbdba",
        "cursor": {
          "ref": "dcf0f6d0-5a42-4f98-8a07-4785e9b70ac8",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ff739ef5-1b6e-4394-904c-ee4191ccca47"
        },
        "item": {
          "id": "d4961b3e-7a8e-407f-910b-43fe942cbdba",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2e3f9a55-5888-4fa9-ba7e-6aba3ab88182",
          "status": "Created",
          "code": 201,
          "responseTime": 681,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e17635-418b-4724-a1df-78f34a7a2204",
        "cursor": {
          "ref": "c9cfc3fa-837e-46a1-a509-fc2261811208",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "54fa0e18-30a3-4d51-a870-77d64c488e8a"
        },
        "item": {
          "id": "83e17635-418b-4724-a1df-78f34a7a2204",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "88686bf7-579e-4d3a-bdb1-35b70ce604c9",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ede80f-30b5-4d5f-ac73-b0b06014fc2c",
        "cursor": {
          "ref": "72d3cc18-4100-46f5-bbbf-ca1941229040",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c1af9415-a6a2-4b02-b91f-4f323e59f3bd"
        },
        "item": {
          "id": "91ede80f-30b5-4d5f-ac73-b0b06014fc2c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7be48020-8352-43b5-a2dd-c0f7a10195f2",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "91ede80f-30b5-4d5f-ac73-b0b06014fc2c",
        "cursor": {
          "ref": "72d3cc18-4100-46f5-bbbf-ca1941229040",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c1af9415-a6a2-4b02-b91f-4f323e59f3bd"
        },
        "item": {
          "id": "91ede80f-30b5-4d5f-ac73-b0b06014fc2c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7be48020-8352-43b5-a2dd-c0f7a10195f2",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "6d931d3e-5984-4416-b9d0-f7a7635b6698",
        "cursor": {
          "ref": "374877a9-c393-4254-9a89-87a9171bdf8c",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "58a1e5b0-c49b-47ad-800e-8f86fef0fd82"
        },
        "item": {
          "id": "6d931d3e-5984-4416-b9d0-f7a7635b6698",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c5c40114-4d64-4d2f-b56c-b0c9b39bfdd1",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "1ec9b990-b546-45be-8856-79921aed53e8",
        "cursor": {
          "ref": "3d8c7a5a-27f5-4a3e-ba73-cf902081764f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "43e1d069-4f2c-4639-a2ca-0ca7726984f0"
        },
        "item": {
          "id": "1ec9b990-b546-45be-8856-79921aed53e8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a35f2dc1-25a7-4592-b0de-69b93a13877d",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "142e5ee2-e102-406f-a5c9-5b67504f3da8",
        "cursor": {
          "ref": "8fb32b6f-9988-4e80-b48e-9da114d92adb",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "79345e94-9214-407c-b49a-9f0028df0e3f"
        },
        "item": {
          "id": "142e5ee2-e102-406f-a5c9-5b67504f3da8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0f49492e-bcb2-49ee-8f00-740e80630971",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b7195f8e-7107-4bf2-b6a4-256a98b67fd9",
        "cursor": {
          "ref": "8dcb1055-29f5-4dac-9064-00c5585799e0",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e6ea6d5c-a5a6-498d-907d-91724a7d7faf"
        },
        "item": {
          "id": "b7195f8e-7107-4bf2-b6a4-256a98b67fd9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1c6ad2d6-5fa7-4191-9589-f0749c9f8e53",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "83e4ef09-7a3e-44e3-a64f-0691bff750ee",
        "cursor": {
          "ref": "36005de3-4687-4be2-b787-17ca38986620",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3a3ec63a-b6cb-41f6-88c5-f71f2520b79e"
        },
        "item": {
          "id": "83e4ef09-7a3e-44e3-a64f-0691bff750ee",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "262aad48-f154-41f0-b89a-15b120ac898b",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "fa03d091-65a6-4916-a5b3-d8d950142127",
        "cursor": {
          "ref": "9b16d75f-0800-447b-9d7e-8b68e59f397c",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3adaf967-0f30-4e27-baeb-f6a0b7d3e2ec"
        },
        "item": {
          "id": "fa03d091-65a6-4916-a5b3-d8d950142127",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4cf09e61-2d33-42aa-b5e7-8de0fe9722ab",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "02c61fdf-3436-4175-bb2a-919e5e48cea8",
        "cursor": {
          "ref": "2edf26da-c8a8-4f3b-b2ef-dfbbd4316825",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "795a333d-c10d-419b-a81f-0096cd887432"
        },
        "item": {
          "id": "02c61fdf-3436-4175-bb2a-919e5e48cea8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "118f0a8b-0396-4204-98cb-abd7d21a336a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "ed78aefe-dd82-443f-ad7e-46cea81b85c9",
        "cursor": {
          "ref": "acd2c4a8-794a-42de-bb9d-f6e4d0894e19",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "57197d6f-f412-45c0-a5f6-3603e098136c"
        },
        "item": {
          "id": "ed78aefe-dd82-443f-ad7e-46cea81b85c9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a3d08673-a03b-461e-8315-5156e510adfc",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "84904252-c081-4243-9f9a-a9bd64b22f89",
        "cursor": {
          "ref": "0ec63ce7-1e3f-44f8-b124-858df3179227",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8f6e6951-97aa-48a9-84cc-7948511c52cf"
        },
        "item": {
          "id": "84904252-c081-4243-9f9a-a9bd64b22f89",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d2ecb45e-c543-4548-b68d-2ba9694cc89d",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "84c2752f-1a6f-460c-b7e7-d029ffaaa2e6",
        "cursor": {
          "ref": "6049aca1-c90f-475a-9da3-8456a17a6bbe",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "539065c2-368d-47ca-ace5-7ba1dd8b0199"
        },
        "item": {
          "id": "84c2752f-1a6f-460c-b7e7-d029ffaaa2e6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9ec17e69-9f57-4a65-8134-e7b0d7f60540",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "67fa92ae-1902-4eb1-a4b2-3e214f8cea7a",
        "cursor": {
          "ref": "f013af5f-dd3a-4021-802c-ab8155585d8a",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "479610dd-32d8-427a-ae3e-9149e74eed3d"
        },
        "item": {
          "id": "67fa92ae-1902-4eb1-a4b2-3e214f8cea7a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b8c4a589-e81f-4cf0-8916-28c56b6da1e2",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "72e724a6-1637-4295-8b64-76f8b631d2c1",
        "cursor": {
          "ref": "278433b0-dff7-4f4a-9500-74ccb47be6c6",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "44c228d9-99c1-484b-b2f8-a8a0370d47a3"
        },
        "item": {
          "id": "72e724a6-1637-4295-8b64-76f8b631d2c1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bfc975ba-57cf-4692-9315-323625246879",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ae528cce-71d4-4e4e-b1eb-18cf32d2689d",
        "cursor": {
          "ref": "e267d833-6fdc-4a1f-bc34-07f737035f09",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "039d6eff-9bd2-4d28-b778-a28b8ea4f1c5"
        },
        "item": {
          "id": "ae528cce-71d4-4e4e-b1eb-18cf32d2689d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a7288b92-25df-47dd-afae-934098f32194",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "e40892e5-ef35-403a-b700-cb9d9e68a128",
        "cursor": {
          "ref": "356f43a1-ef06-496f-b948-b31966d3c051",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e38171da-66aa-45d2-80e1-6ffab1e92e74"
        },
        "item": {
          "id": "e40892e5-ef35-403a-b700-cb9d9e68a128",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c362dae4-6c64-478a-82d4-9f15471f4eb9",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "6a82f8b9-8ae2-43bf-818b-1a05fb61aeaa",
        "cursor": {
          "ref": "38495762-9ab3-4e4d-9176-83e56c208c0b",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0d975ab0-f520-4893-9d1b-45c25051cfbb"
        },
        "item": {
          "id": "6a82f8b9-8ae2-43bf-818b-1a05fb61aeaa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0df6fa72-8b10-40ac-a28e-910a89ecd725",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "94450d80-6672-4461-98fa-0ec90d0d9f48",
        "cursor": {
          "ref": "ac2a9246-81b1-4845-a023-5023262fa324",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "30f8ef06-ab71-44f8-8828-c3557b29f490"
        },
        "item": {
          "id": "94450d80-6672-4461-98fa-0ec90d0d9f48",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9e1436c6-750a-4866-85af-242b337c0559",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b3dc3066-c403-4a7a-9172-cb524dcb88fd",
        "cursor": {
          "ref": "000c450c-10a0-4dbd-b070-3d88042b06cd",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "59b9480e-6b79-4093-a029-1c07938d704a"
        },
        "item": {
          "id": "b3dc3066-c403-4a7a-9172-cb524dcb88fd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7d91f6e9-7885-45ac-8a45-0731b24988eb",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "72eb1d69-a3c9-4387-9ef5-be8479ba0c23",
        "cursor": {
          "ref": "cc96129d-845a-4e7d-8011-2199498aa1fc",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "adb44da7-bfff-4a16-b5be-d25eb8673048"
        },
        "item": {
          "id": "72eb1d69-a3c9-4387-9ef5-be8479ba0c23",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e8f7f5b5-dce1-4a6d-bb66-68e507f487a6",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "5773bf1e-7af3-48ba-a6ab-d7489804a1e6",
        "cursor": {
          "ref": "5fd7c0d3-f9ed-468f-b068-d12de3e543ed",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f17fd361-57ea-47e3-b135-3aacb2fb5cf4"
        },
        "item": {
          "id": "5773bf1e-7af3-48ba-a6ab-d7489804a1e6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "36be455b-a465-4070-9a9b-a452dc2bd14c",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "0df8cd06-ae28-4589-8765-511522d8ff2e",
        "cursor": {
          "ref": "24e87218-cf62-4584-89f0-4a7a4b668af5",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cf726f14-72d9-41f9-9b95-78ed83700e76"
        },
        "item": {
          "id": "0df8cd06-ae28-4589-8765-511522d8ff2e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "59379ef3-4a0e-4670-87b3-785905e821d6",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "4f513b16-baad-4c16-a9f8-4b8d707c6119",
        "cursor": {
          "ref": "e4cea5a9-a752-4217-b4e9-dc47d7611d89",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "db6997f7-24ec-42c5-8668-328f6a4152ab"
        },
        "item": {
          "id": "4f513b16-baad-4c16-a9f8-4b8d707c6119",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3a901257-8fd4-483c-a23b-9008815b3bbe",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "bc25066b-1b54-43d5-bafd-1d5b6c9472ca",
        "cursor": {
          "ref": "a10968bc-6261-4b14-bf42-7698a670d43e",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ce6b4d2c-ba05-4b84-a348-762ec0bcf106"
        },
        "item": {
          "id": "bc25066b-1b54-43d5-bafd-1d5b6c9472ca",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "54c7a2e8-20f9-404e-898c-e91ebafe013c",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "ef4a4e43-43c5-4c1a-b379-4bfa2238f4c4",
        "cursor": {
          "ref": "dfdf41a9-337a-4766-bdcb-6db1e5da3d40",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "713df513-ad7c-487e-b0f1-ba75ba423bf5"
        },
        "item": {
          "id": "ef4a4e43-43c5-4c1a-b379-4bfa2238f4c4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "da860306-aa8a-4d8a-a780-b864531bef1a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "bb6dd67b-577d-4309-81dd-d8bfbcc53c1b",
        "cursor": {
          "ref": "2ec17c08-6650-46c5-9b84-0aa8358f5054",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "66d02d3f-8cfc-4c9a-86a2-c0195991f21f"
        },
        "item": {
          "id": "bb6dd67b-577d-4309-81dd-d8bfbcc53c1b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c47b37e0-a70b-4043-acc1-edf292511de1",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b8267b1e-797a-499e-807e-fb585f1e0825",
        "cursor": {
          "ref": "0817fe11-05b3-4862-9ea1-47f3d804484f",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "32a8d940-f147-4be4-bfec-166de53df42e"
        },
        "item": {
          "id": "b8267b1e-797a-499e-807e-fb585f1e0825",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fe044237-f45e-4f52-8c12-037d34333432",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7ed607b0-ad5f-463c-b3fc-b04888db7fa6",
        "cursor": {
          "ref": "6ff325a0-5ee9-4ada-b681-2d9b5d8b516f",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "77bf0ba4-9f3a-4b30-95e6-8d686a4ef381"
        },
        "item": {
          "id": "7ed607b0-ad5f-463c-b3fc-b04888db7fa6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3ec03d61-b9d8-4235-ac78-9cfc106b7666",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "7241ab1f-c55d-4ada-8597-f71bb34f71d0",
        "cursor": {
          "ref": "8847ca77-aefe-4244-af07-dfa17d31335c",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "53dff16d-e190-48ff-ab75-543b8e41a809"
        },
        "item": {
          "id": "7241ab1f-c55d-4ada-8597-f71bb34f71d0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "11a2d69f-d50d-4f62-af77-8656229d7483",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "38acae6d-50b4-4461-be2d-a41ba1f2d78d",
        "cursor": {
          "ref": "85d98904-9c91-4996-8f25-2d0e675515d3",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3739852c-a5a7-4d53-b06b-5611563fe9ec"
        },
        "item": {
          "id": "38acae6d-50b4-4461-be2d-a41ba1f2d78d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9933d15e-cc08-4bb5-a1ce-7d33202e417f",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c5419342-8a4a-4191-bd3d-e2ecc0af490d",
        "cursor": {
          "ref": "12849f2c-061a-4f61-b9cc-68313ac3ad23",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2230f55e-a0ca-4f30-b22b-1384e2ba40c1"
        },
        "item": {
          "id": "c5419342-8a4a-4191-bd3d-e2ecc0af490d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a246d48c-7d3c-4873-a0db-a52027f70413",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3bf11cf6-a47d-4da0-908e-a7a608a4eb8f",
        "cursor": {
          "ref": "1681aa1d-9dec-4ed8-9148-0004c080c797",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1dd856cf-5875-4d0e-bc8d-e5687f72d33a"
        },
        "item": {
          "id": "3bf11cf6-a47d-4da0-908e-a7a608a4eb8f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f9b01622-56d7-4e45-96fd-6728c4fc06fb",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "90c834ba-27a2-4750-b9ef-d153665087c5",
        "cursor": {
          "ref": "20743e20-811d-48e6-bc58-96b82fc1562b",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "81e78569-1cf8-42c4-9193-7dc0e83ff650"
        },
        "item": {
          "id": "90c834ba-27a2-4750-b9ef-d153665087c5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3e300afa-0401-45c7-a0fd-e54c646dffd6",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "de7ebf78-a259-4b87-8f92-f8cb96fd2790",
        "cursor": {
          "ref": "550a7da0-b73f-4e5f-8b89-36dd52b1179d",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b971eaad-4084-4fd8-9712-184846752dea"
        },
        "item": {
          "id": "de7ebf78-a259-4b87-8f92-f8cb96fd2790",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a946bb53-6151-45d3-87fe-4d661dd7bfaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84e1b49-78bf-40d1-aa95-498d2f8de8f1",
        "cursor": {
          "ref": "643d2d58-a91f-4efd-86b6-691806c61199",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "470a9eab-f0ca-4ffe-9ad5-9a92d996d5d2"
        },
        "item": {
          "id": "e84e1b49-78bf-40d1-aa95-498d2f8de8f1",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2c8b6b0e-4183-46fa-98b2-e41c1369f4b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f7cfed-8eec-4a21-987a-f0b1c6b9147a",
        "cursor": {
          "ref": "c7bbd61e-8203-49d9-981e-5349e8903492",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1542e5bb-a89d-45ac-ba50-59b27b45c518"
        },
        "item": {
          "id": "66f7cfed-8eec-4a21-987a-f0b1c6b9147a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cd9a9b19-09be-40c7-91e7-7d2b25c99d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f7cfed-8eec-4a21-987a-f0b1c6b9147a",
        "cursor": {
          "ref": "c7bbd61e-8203-49d9-981e-5349e8903492",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1542e5bb-a89d-45ac-ba50-59b27b45c518"
        },
        "item": {
          "id": "66f7cfed-8eec-4a21-987a-f0b1c6b9147a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cd9a9b19-09be-40c7-91e7-7d2b25c99d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e96672-c010-4cc3-838d-27f8ccd9caad",
        "cursor": {
          "ref": "7e641272-2f48-439d-b35c-6179a5847c08",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f62e8b8d-5321-41bc-9f10-98881a8a4a17"
        },
        "item": {
          "id": "09e96672-c010-4cc3-838d-27f8ccd9caad",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c4b65f9e-22e9-457f-8f0f-57184633c521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe95d149-8f62-453e-8c7f-c521e7cec630",
        "cursor": {
          "ref": "e0ee5f6b-a473-449b-a175-a498232f7715",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9e0c5efa-c496-45ee-a1d0-72a136cbd4c4"
        },
        "item": {
          "id": "fe95d149-8f62-453e-8c7f-c521e7cec630",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8ed53797-3a96-41a7-bfef-11110aef7e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab11219-756b-4ab9-96b2-3552e79c7b50",
        "cursor": {
          "ref": "81ab0b07-be83-400a-8e88-76923214c6f4",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2bf98c75-0e6d-4bdd-843c-7b76863cd313"
        },
        "item": {
          "id": "4ab11219-756b-4ab9-96b2-3552e79c7b50",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e873591d-b804-413d-808f-39978912d761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d4e5b5-4d9b-41a6-be3d-8b1095b3adee",
        "cursor": {
          "ref": "601c9c00-6547-4e57-8072-3a0bb5c11cb7",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6232c52f-74cc-4707-9c99-8030cc641ef6"
        },
        "item": {
          "id": "b8d4e5b5-4d9b-41a6-be3d-8b1095b3adee",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "24bb626d-89cc-40f1-89bf-67a938fe812a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53046750-02bc-4fe0-be55-0890e07d9171",
        "cursor": {
          "ref": "eebe3621-6032-43fc-812e-6aa320a07a9b",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2a4a3262-cc3e-41cf-b94d-aca5162edbe3"
        },
        "item": {
          "id": "53046750-02bc-4fe0-be55-0890e07d9171",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4b64f458-23de-44b0-9fab-2e1b75b1566d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee61886-3fca-4631-948b-62633908943b",
        "cursor": {
          "ref": "5bbfbd82-8769-4687-a92a-eba43648ed43",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4a8b4e97-cec3-4d29-972d-a2cbad911cb9"
        },
        "item": {
          "id": "dee61886-3fca-4631-948b-62633908943b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5352fb4c-fb9b-4f9b-ae65-6031d5322649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8b3294-91e7-4bf5-8a76-0319b29c8ebc",
        "cursor": {
          "ref": "4561b8a9-e9c9-4bb2-90a6-179e3fd7a6c1",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e27d9c17-6b9c-48b4-8035-e06a87af4369"
        },
        "item": {
          "id": "4f8b3294-91e7-4bf5-8a76-0319b29c8ebc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a3d5a328-16c9-4443-bd88-d89f430bde26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b6c3d6-ebdd-464a-bffe-3ac8637d724b",
        "cursor": {
          "ref": "b595105d-6a79-4fbd-aae0-34f9647f5088",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ee9a7d05-680b-4f76-a829-6b2df0a6e5cd"
        },
        "item": {
          "id": "04b6c3d6-ebdd-464a-bffe-3ac8637d724b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "893286c2-2083-4cb4-85cf-dc463e1ccbbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646aede7-b8b7-4fa9-879f-f40114dd075f",
        "cursor": {
          "ref": "83fc2ed5-2d90-46e1-a4fb-991449f724ba",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "13a38dcc-ba3e-4cd1-aa01-b093d007ff64"
        },
        "item": {
          "id": "646aede7-b8b7-4fa9-879f-f40114dd075f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "45771c32-b2d2-4bbb-8a53-b93d363e8b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e872f3-6834-48e0-bcff-f2724a98ff6d",
        "cursor": {
          "ref": "b55f519f-1469-4e09-9034-ff4c1e8ca672",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4732676b-ee50-4355-91e5-f9fb9803827c"
        },
        "item": {
          "id": "99e872f3-6834-48e0-bcff-f2724a98ff6d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bbcf52ef-0792-4ed4-8d69-0d427dc64ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d663640-ac52-45e7-a9b9-7443c7f2f245",
        "cursor": {
          "ref": "b7f6a98c-795c-482b-aab1-edb532155d86",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4c14e71c-e886-4a9a-ba57-9fa554800081"
        },
        "item": {
          "id": "8d663640-ac52-45e7-a9b9-7443c7f2f245",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "131637ff-e66b-477b-9f0b-b64dd3966cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab010062-3bd7-4cdc-9d6b-65ccfc5cb952",
        "cursor": {
          "ref": "20da6b96-2b26-4a94-a9d3-f9f65c3a184a",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5b6a3608-67c4-40c0-8515-f0df59541ed6"
        },
        "item": {
          "id": "ab010062-3bd7-4cdc-9d6b-65ccfc5cb952",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "dd19f065-e703-467f-8949-8aefef93ae4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a7803b-3d16-48ae-8bbf-200a98f14c14",
        "cursor": {
          "ref": "c6bd81df-c635-473c-8274-eedaf26596e7",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b890e837-204c-4702-8de1-d0cbf750fe38"
        },
        "item": {
          "id": "38a7803b-3d16-48ae-8bbf-200a98f14c14",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8255f34b-74f5-4f30-8552-7cb1fcc6d799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0664c7-f027-42f7-bfa7-d3525a9ce6ed",
        "cursor": {
          "ref": "0e361616-ca80-4a0a-940d-8bd040c0fbd2",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "91194e46-fcf2-44ac-90cf-9739ab5c47f8"
        },
        "item": {
          "id": "7e0664c7-f027-42f7-bfa7-d3525a9ce6ed",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9869220c-15a1-4111-9182-31caf4a8b27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0872138-52ae-44a6-af7a-9a6d1a3933b7",
        "cursor": {
          "ref": "f72fb926-3d6d-4946-bd4b-1b16c2315c71",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b9e9a301-8f25-415b-a38b-433621f91d7f"
        },
        "item": {
          "id": "f0872138-52ae-44a6-af7a-9a6d1a3933b7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f5f7fb40-1b40-4085-8aed-06e4e052fba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597522c5-f2e8-499e-8621-c6566e0b3318",
        "cursor": {
          "ref": "c646d7ad-e083-4ba1-b12d-a2ae032b9a1c",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5e4d0d5c-d87a-4b4f-a84f-a5bde0ceb4b3"
        },
        "item": {
          "id": "597522c5-f2e8-499e-8621-c6566e0b3318",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "610d821c-b2d9-4d7f-b095-639dba2ec5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1694672-93d5-41a6-923b-478a375c92f5",
        "cursor": {
          "ref": "db76c61b-811b-4a82-9f82-0948b4a0958e",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f94cc9c1-1072-41f3-9429-28063ed70ba0"
        },
        "item": {
          "id": "a1694672-93d5-41a6-923b-478a375c92f5",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "a0933af3-3a44-4eab-a698-76d4f85f0d37",
          "status": "OK",
          "code": 200,
          "responseTime": 662,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "cbd67a24-5f84-4cb2-a24a-247afc08de96",
        "cursor": {
          "ref": "e3c71377-3855-4eb3-92a7-6d620b3c5c26",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "952f402a-25ff-4fbe-92ab-a1384d8b8022"
        },
        "item": {
          "id": "cbd67a24-5f84-4cb2-a24a-247afc08de96",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "eef8acbf-777c-412f-bfa6-28b8cd10bf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a66d02-f11e-4dab-82b8-3ff112e4ef1b",
        "cursor": {
          "ref": "120ac7fb-f38a-4a14-8c5c-23417e2f81f1",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b00d6763-397c-44cc-ba25-0c41c9c6a358"
        },
        "item": {
          "id": "c9a66d02-f11e-4dab-82b8-3ff112e4ef1b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d310ad71-40fe-44d2-afbe-3699c6872030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bfb29e-8e8b-428e-951d-edd6d61519a4",
        "cursor": {
          "ref": "381b46c9-c6b4-4cad-af33-6df844ade7c5",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "287c228b-2e3e-4e68-9d0c-eb3e6fe76b66"
        },
        "item": {
          "id": "17bfb29e-8e8b-428e-951d-edd6d61519a4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "682817ee-3355-45c3-82db-bfaee9ba8aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba60e977-19fe-4864-bf31-e8784cda94e7",
        "cursor": {
          "ref": "d344fbfe-2e5c-4130-b68f-d85fbc26a509",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "43662013-72bd-4f2e-bb6c-da52eadd00d1"
        },
        "item": {
          "id": "ba60e977-19fe-4864-bf31-e8784cda94e7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a4186030-3a2f-4e57-be78-28c221e9d108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c479bd97-b2e4-4e91-841b-af4d696be265",
        "cursor": {
          "ref": "846d490f-1643-49f7-933c-4ebd24e5a165",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b0a1ac77-ee1f-40a5-970c-b53444cc727f"
        },
        "item": {
          "id": "c479bd97-b2e4-4e91-841b-af4d696be265",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cb78199d-1508-4dcc-9910-476558926e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac144ce0-70e4-4e9c-a87e-59d996f0a354",
        "cursor": {
          "ref": "d4eb0082-e000-48cd-92f9-785cc06f4c00",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c1a27dd2-92f9-457f-a854-e0584636bd56"
        },
        "item": {
          "id": "ac144ce0-70e4-4e9c-a87e-59d996f0a354",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "56367b99-392c-4f94-a6a3-372d54ce536d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd995d3-a739-4e99-af02-49edee771934",
        "cursor": {
          "ref": "c75116fa-c59e-4404-a444-9bb0c4efe446",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d0eb1ed0-09c6-4f4d-9266-8732de61e4e9"
        },
        "item": {
          "id": "6fd995d3-a739-4e99-af02-49edee771934",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "77a0bc9c-ab8c-4b1c-a64b-bf475e1cd971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf8a0e5-7ed4-412c-933d-4a5f15ecbdf4",
        "cursor": {
          "ref": "f06c836d-a08c-4f83-b5b1-d0e8dcb0ace5",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "be1d5b2f-b1ae-4477-a165-26d637bb23c7"
        },
        "item": {
          "id": "acf8a0e5-7ed4-412c-933d-4a5f15ecbdf4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0515346a-5e34-4237-85ca-a7aeee3e2507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece33cd8-6813-43cd-9cae-0761cd3ab196",
        "cursor": {
          "ref": "9aeed8ab-cfb2-465b-bc9e-ed5b375d09f3",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e86bcd93-28ee-424b-8238-6e7c16a03347"
        },
        "item": {
          "id": "ece33cd8-6813-43cd-9cae-0761cd3ab196",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "34ddcff6-6205-4bb5-a8dd-053ee1e6c403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e60f6fb-6476-4439-b97f-ef80c94c9d0f",
        "cursor": {
          "ref": "0eb16d01-c168-4b57-b2ee-809189184a51",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a80f0073-3163-41ed-bfcd-f0518a28a06e"
        },
        "item": {
          "id": "7e60f6fb-6476-4439-b97f-ef80c94c9d0f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "657e7a58-ae59-4cac-a579-fcbf05200d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55d5e71-8dfa-4879-8e92-4a82138c84fa",
        "cursor": {
          "ref": "dbaf6edd-1d9c-4921-810e-664c87e5d9fc",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3d6c13b4-1b10-4163-bdca-79ab5c41f67b"
        },
        "item": {
          "id": "b55d5e71-8dfa-4879-8e92-4a82138c84fa",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "656a5dac-2b24-497f-a570-4a0c5f444af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e6e257-f63a-46fd-a084-69a58cdfdc82",
        "cursor": {
          "ref": "5842aeb3-960c-49a6-ba12-534dcc86c3e8",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4f643312-49f1-4334-82bd-482eb095c7b6"
        },
        "item": {
          "id": "a6e6e257-f63a-46fd-a084-69a58cdfdc82",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "752db8d7-2f43-4492-b2a7-34a762554bf9",
          "status": "OK",
          "code": 200,
          "responseTime": 295,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "579205b4-c394-4fad-b5a7-d0b8239a5cad",
        "cursor": {
          "ref": "8005f437-beef-483c-b8d6-924bed67f14d",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "160ed430-fc2d-483d-9579-51509728c07f"
        },
        "item": {
          "id": "579205b4-c394-4fad-b5a7-d0b8239a5cad",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "49958d7f-0740-4f1b-abd2-d8d1a194f287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc3cc18-67ff-442c-bb58-d659beeccd52",
        "cursor": {
          "ref": "ddd09185-4160-4f5d-b74e-4bf16a2196ef",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d483e85e-c4af-4e8c-8864-aedde16bb180"
        },
        "item": {
          "id": "9bc3cc18-67ff-442c-bb58-d659beeccd52",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "aef843f1-b452-41a0-8c14-8e8804aa57b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12d1d81-84b6-4fd9-8769-9432e3701f40",
        "cursor": {
          "ref": "467d39dc-6e25-49d8-983e-8907692755f8",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "04269243-e9a2-46a3-a6d7-f143dc15b988"
        },
        "item": {
          "id": "e12d1d81-84b6-4fd9-8769-9432e3701f40",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e971bbe9-734a-47f6-b97a-f8d2ae0ca98d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e734c110-5cae-47f4-854e-e9bef2f9b460",
        "cursor": {
          "ref": "eb9aad68-2685-4612-9fe7-793936545d11",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5c025304-0579-46f7-bbb0-bb0b22d376ea"
        },
        "item": {
          "id": "e734c110-5cae-47f4-854e-e9bef2f9b460",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ac02cd5d-7599-47c0-9fac-9f79fea1184c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3fc1c1-4ee6-44ab-8dc7-1859a112e31b",
        "cursor": {
          "ref": "cb34c3eb-1040-4265-a31d-46f559d6430b",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b0fe007d-ee1e-4aaf-a98e-dee3ef1be306"
        },
        "item": {
          "id": "6a3fc1c1-4ee6-44ab-8dc7-1859a112e31b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "86538eab-eeb4-4b16-8063-9127df3a068e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d002271b-dbba-41b4-ab96-23ae153c38e4",
        "cursor": {
          "ref": "4cc120b1-3adf-4e3a-8bde-45789ec2ca93",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "97840bad-709b-4161-a85f-586cb91d89cd"
        },
        "item": {
          "id": "d002271b-dbba-41b4-ab96-23ae153c38e4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "98c01531-978f-444e-81a9-353da70c5b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7934db7e-3978-46a8-b6fd-d0b0446fd581",
        "cursor": {
          "ref": "070c0e6c-31a2-405a-a1ba-4967e7b83dce",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "598e793f-a9ac-4db9-a94d-4cb20ab974b5"
        },
        "item": {
          "id": "7934db7e-3978-46a8-b6fd-d0b0446fd581",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d1775f42-b3cf-47c7-963f-1c75d09fdee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ce070f-1b84-448e-8cd2-1c9dfede8bca",
        "cursor": {
          "ref": "db6e4997-f3c8-44f6-9e26-f3ca286f8a7f",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c52bf717-73cf-425a-b717-261c1e544dd8"
        },
        "item": {
          "id": "a7ce070f-1b84-448e-8cd2-1c9dfede8bca",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "196204e4-81f7-4e8d-8e2b-6ef558ae7a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 350,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06674ddb-7356-4efe-b835-1d530885ad58",
        "cursor": {
          "ref": "4acf902d-6765-495b-a7d5-3fd185b2caa8",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2c75df91-9207-4d9e-a1b9-790e70b13de2"
        },
        "item": {
          "id": "06674ddb-7356-4efe-b835-1d530885ad58",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "005e52d4-ca57-4249-a523-0687768b5937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854be131-380d-4af0-9c10-cd7008712f94",
        "cursor": {
          "ref": "b7ed058f-02b4-4302-9c61-eb1aed8d140a",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f16736eb-bd81-4506-82c3-31547181c82b"
        },
        "item": {
          "id": "854be131-380d-4af0-9c10-cd7008712f94",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7c2c83c0-7f81-4cbf-a92e-6c663861b301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873a1e34-eb0a-41d4-9a49-c0bfb5934078",
        "cursor": {
          "ref": "51cf716f-0919-4fa8-adb9-80517509cd98",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "233be345-20dc-4712-a00e-53578326e01f"
        },
        "item": {
          "id": "873a1e34-eb0a-41d4-9a49-c0bfb5934078",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7879735a-fc53-4b88-90e5-389521b6a923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3803f45-c051-464f-8f85-be3fec6d5f58",
        "cursor": {
          "ref": "0eef4063-3edb-4906-b63e-ca92f05ae4f7",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eaf51a53-10e4-4314-bd08-77360b4ff8f4"
        },
        "item": {
          "id": "c3803f45-c051-464f-8f85-be3fec6d5f58",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "68c14057-ef75-4c5a-8928-1d60210799c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310aa457-4dbd-4719-a7aa-84c9bb1cd9a0",
        "cursor": {
          "ref": "ff4ebd25-5271-466d-bc0d-fa605e59bd89",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dc568801-eb5b-4e57-a3a5-703ad5dca5ac"
        },
        "item": {
          "id": "310aa457-4dbd-4719-a7aa-84c9bb1cd9a0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f6f7b7e3-d1f0-4e1f-b5c6-c4389d73a8c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b68f4f9-a1b1-4a68-85be-e65544861312",
        "cursor": {
          "ref": "44f99818-fa4f-4d34-b34b-84a35016cb1a",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ba98fca4-ab74-463d-b14e-d299df67bfbf"
        },
        "item": {
          "id": "8b68f4f9-a1b1-4a68-85be-e65544861312",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0e9cf959-1761-4eb6-a5d3-c1f79aea288b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6802ac-fd3b-4d60-be8a-b031f22fc118",
        "cursor": {
          "ref": "cb780f76-dce2-4d39-a156-79fa4f0e05da",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "86af1adc-9062-48b0-a563-aac61501d9b1"
        },
        "item": {
          "id": "6f6802ac-fd3b-4d60-be8a-b031f22fc118",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e0e6f86b-8d30-4b0d-a764-347a3f550991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b563d1-34b3-42c9-9002-6a5102c13835",
        "cursor": {
          "ref": "b6b40e2c-3929-494f-938a-e550cdf5b23d",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c8820ea9-6161-46d2-a3a2-f75b52966e30"
        },
        "item": {
          "id": "80b563d1-34b3-42c9-9002-6a5102c13835",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "dac01ea1-7493-4061-8637-6e39939f2d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a952548-50f8-4abc-b4a7-9af3ed692ba0",
        "cursor": {
          "ref": "a46b91f1-015d-48ef-b09c-ceb964f6bcb3",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0096b39c-5ac7-4a2b-865a-be0f243dace4"
        },
        "item": {
          "id": "7a952548-50f8-4abc-b4a7-9af3ed692ba0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4179f95d-9468-4e25-9d4e-11fc3957f0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e5edee-2c26-4d52-ad71-4bd3856e7194",
        "cursor": {
          "ref": "c551d46e-0f0f-4a97-8b8c-2e7521afdedc",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "60473a44-4d74-47d6-9a0f-b1df40fe4d03"
        },
        "item": {
          "id": "a2e5edee-2c26-4d52-ad71-4bd3856e7194",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fab7ae50-b731-4e03-bea9-cd1a33287d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebc9476-2cab-4e79-a2ad-5fe94357ac7f",
        "cursor": {
          "ref": "28b3053f-3be9-4e3d-8dd6-fa8057ba196e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "884da5be-8825-4f43-8eeb-7dae79a28695"
        },
        "item": {
          "id": "8ebc9476-2cab-4e79-a2ad-5fe94357ac7f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "14b36745-0d35-47c5-b791-2da1dcec3153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174bc1cf-138a-4563-9f82-56d42ba42baf",
        "cursor": {
          "ref": "91e3ceeb-1c91-4752-8c8e-9f1a18d173aa",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7b92e464-ffa9-4f6b-8a19-860f4b2eb906"
        },
        "item": {
          "id": "174bc1cf-138a-4563-9f82-56d42ba42baf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ce354fd7-57c3-4074-a9c4-f905e9c1ca5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 563,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09922c5f-e318-4728-8ad6-3ea7bcd477b9",
        "cursor": {
          "ref": "ef9fbe50-b381-4ae2-a1b8-41011fd43b20",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "05bd8dab-7955-4235-b267-52da500e4aed"
        },
        "item": {
          "id": "09922c5f-e318-4728-8ad6-3ea7bcd477b9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cd63f058-6e4f-4819-a118-4bd945a1ec46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 344,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de238ca3-3038-466c-8250-2ee603c83e73",
        "cursor": {
          "ref": "2f09e77e-de0b-4a51-aef1-21d288f02e4e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3573af32-62fe-497c-b55d-2077a8ab775f"
        },
        "item": {
          "id": "de238ca3-3038-466c-8250-2ee603c83e73",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f53fb039-c2e2-498f-b2cd-9dfcc8ef160b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 346,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13df2889-f68b-4560-a7c5-ba7cca037343",
        "cursor": {
          "ref": "61c0d7ac-2efe-4b52-9c31-6c26b95231ac",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cf954deb-020d-4f79-91c4-e50b97237f29"
        },
        "item": {
          "id": "13df2889-f68b-4560-a7c5-ba7cca037343",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b707e262-ef56-402f-8df5-106fa744ea2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 344,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a1d93b-7324-4318-adce-d4264f8c5778",
        "cursor": {
          "ref": "ecefd332-9ec6-4988-8e10-852ed51b8845",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4488c6c6-3b65-493e-84ce-73de46f0655d"
        },
        "item": {
          "id": "d9a1d93b-7324-4318-adce-d4264f8c5778",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b7465d60-49f0-4076-96be-404eac012503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 344,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df159123-1634-4987-ae67-d0aba0163ecc",
        "cursor": {
          "ref": "d1b8946b-cd79-4e49-9ec2-e50b58d260f1",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9b9cf6f4-10f5-46e7-b516-3321b8f50ba2"
        },
        "item": {
          "id": "df159123-1634-4987-ae67-d0aba0163ecc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1a9bf09b-e58c-4809-9814-c5572f6715de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827c0f6c-626c-4388-96f2-b47b2da754ff",
        "cursor": {
          "ref": "61e6ee1c-9e4d-4e71-9e46-deb297b361b6",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "40820738-3d6c-45bc-b376-99ddf60238aa"
        },
        "item": {
          "id": "827c0f6c-626c-4388-96f2-b47b2da754ff",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2863612d-382b-4804-847d-c706f3d60c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5beb42-3e3c-44ef-a7d5-466979081dce",
        "cursor": {
          "ref": "b73f9cb2-233a-4d92-bb92-f53a2eecc32d",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1b9dcf7f-0ec3-4481-91ca-e940a3510eb3"
        },
        "item": {
          "id": "eb5beb42-3e3c-44ef-a7d5-466979081dce",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b3172d82-8087-4c65-a025-e998b6613af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819e77a5-1adc-4a8f-b219-b55fa6e1234d",
        "cursor": {
          "ref": "e28f0629-62ed-43f7-963b-9e13abf89658",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8d418a98-4795-4c25-ab62-36f2e56fbe46"
        },
        "item": {
          "id": "819e77a5-1adc-4a8f-b219-b55fa6e1234d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "aaac1723-df4a-425a-9d7c-b45a99885a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8da3dd8-4741-4744-9078-9225af31d158",
        "cursor": {
          "ref": "2bd44e85-72b5-49ad-a960-b9e9c0a588ea",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "11c19d54-1fca-4dc2-b655-270dd6e4f944"
        },
        "item": {
          "id": "e8da3dd8-4741-4744-9078-9225af31d158",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ee75ace4-3372-4f4a-ac43-a4853b8d688b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82254865-4942-49b1-b8d2-97a5d2090f00",
        "cursor": {
          "ref": "9db2bd3a-64db-4031-8754-e869ee59c424",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c7a09e40-3e0d-4a37-82fb-ddc761b26404"
        },
        "item": {
          "id": "82254865-4942-49b1-b8d2-97a5d2090f00",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6d886db9-a9e1-46d2-a231-27093c73be97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e755ccb0-1521-4650-8045-18fae9cf8e97",
        "cursor": {
          "ref": "a4afcfd3-7b1c-4c11-b6f9-2c5d1a67f628",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "79af70cc-6c6b-4ddc-82d8-2754110bc815"
        },
        "item": {
          "id": "e755ccb0-1521-4650-8045-18fae9cf8e97",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4a224431-ba34-44f3-b56e-d7d07730eee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d708128-d6dd-479d-9af8-602a4ec71561",
        "cursor": {
          "ref": "01720f8f-5417-423a-9bdd-c2b1116fdce0",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "943feb3d-1355-4df9-9bce-41a10fd87cc2"
        },
        "item": {
          "id": "0d708128-d6dd-479d-9af8-602a4ec71561",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "28904c4e-ef87-447e-8530-6ac6d1a4568e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9508f9-9eef-4fa8-814c-fca024f45c07",
        "cursor": {
          "ref": "ca207907-a40b-45b3-83e0-9c7a4d407ea3",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "23c259fb-b3c8-4322-a061-2b657f284cb5"
        },
        "item": {
          "id": "ff9508f9-9eef-4fa8-814c-fca024f45c07",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0dd4f7c9-498f-46a4-9bcd-9801ffa6818b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410e942a-9d4d-4beb-88d3-c4dace7353b6",
        "cursor": {
          "ref": "d6f20e4b-f54e-4288-a0b9-a54b7947260f",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9735f0ea-82f2-4679-be83-413f910e99c3"
        },
        "item": {
          "id": "410e942a-9d4d-4beb-88d3-c4dace7353b6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "89372604-5d8d-4780-a368-7bb38ae7f4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2573397-aa68-4e66-a001-01090b18ce91",
        "cursor": {
          "ref": "4cc7944d-2050-4db0-8bdb-b5106c1d9ccf",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "89298e3d-fc37-49c3-b69e-e2de21eedc26"
        },
        "item": {
          "id": "a2573397-aa68-4e66-a001-01090b18ce91",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "40f3fbaa-dbcd-4e12-8c6d-b7b0f94355be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0025d53-ab9a-4468-818e-bc1f6e1af0f7",
        "cursor": {
          "ref": "6f300e43-00d4-43e5-955f-efd28cb12818",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "498227c7-b51b-427c-b747-09433a7c32ff"
        },
        "item": {
          "id": "a0025d53-ab9a-4468-818e-bc1f6e1af0f7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "400b50c6-925f-4db4-8542-89a89dc53304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5161e72-c179-4329-be5d-9da0ebdeeb2b",
        "cursor": {
          "ref": "a4a7a59f-d696-4d4e-bf33-529355663f39",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2cf70482-df16-4132-ab00-e1971cca8ef4"
        },
        "item": {
          "id": "a5161e72-c179-4329-be5d-9da0ebdeeb2b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ea87cf6b-730a-48e6-a08a-243125d676bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c8abc9-8407-4a92-ae0f-af08b05a84f5",
        "cursor": {
          "ref": "7d5223fc-8ce5-4b59-9d4b-44818fcf651d",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7e01275c-de7e-4057-a06f-4e6b9493672f"
        },
        "item": {
          "id": "44c8abc9-8407-4a92-ae0f-af08b05a84f5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "77d8d451-2422-4382-9fa9-25a35c1a07f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57ac6dc-d08f-4aa3-bf4c-cef2e0f3a544",
        "cursor": {
          "ref": "647f46c0-d9ec-4121-b507-55832bdea8e5",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "33811e1c-2a5e-4b2b-b404-96342f8a5861"
        },
        "item": {
          "id": "e57ac6dc-d08f-4aa3-bf4c-cef2e0f3a544",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5491ba57-e133-44af-9b73-01293dd85fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9553e27-ab57-4c6b-8cd4-1566781367a0",
        "cursor": {
          "ref": "f72fb3a5-7907-46c1-b6a5-63f17a0bc208",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "27313074-541d-4504-a95a-d4989206d396"
        },
        "item": {
          "id": "a9553e27-ab57-4c6b-8cd4-1566781367a0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "db2b8e00-8279-4e35-a7f7-df63845e4839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba7ab0c-81f1-4f66-8369-f9bc65258010",
        "cursor": {
          "ref": "ec145644-88f8-49f1-813d-d32ac100b6b5",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1e883b24-bc23-45f5-8d85-c1f683599393"
        },
        "item": {
          "id": "5ba7ab0c-81f1-4f66-8369-f9bc65258010",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "92c9e773-4986-489e-9a39-3b7152e27a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d2e997-9be0-4c19-b728-c8985282c872",
        "cursor": {
          "ref": "3f1d439a-9d1a-420f-8d73-54f555eb8690",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c189b10e-3616-4d18-b1b4-62a88f0a45ee"
        },
        "item": {
          "id": "47d2e997-9be0-4c19-b728-c8985282c872",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "62bfdd38-de3b-4af4-b27b-22c9b55e484f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d1e4c3-e86f-4bfa-97e2-8a5ea4c206df",
        "cursor": {
          "ref": "e6142d3a-3ca3-4f1d-bdb1-86d7c05f994a",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0500f1e1-809c-487e-b1f7-af878bfe4d15"
        },
        "item": {
          "id": "85d1e4c3-e86f-4bfa-97e2-8a5ea4c206df",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4198a490-1be3-43bd-98b3-86bac0a58a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd071acb-f452-42ce-8d46-50c601009b37",
        "cursor": {
          "ref": "92bcd8d4-3964-4710-ad41-77148f1a6005",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bcd20aff-9099-4f3f-aa2e-7cd6d83cde45"
        },
        "item": {
          "id": "dd071acb-f452-42ce-8d46-50c601009b37",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8ba3c2a9-b23a-4251-971d-883054e7aa43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ad7db3-3eb8-4e2d-b0fc-1781c082d2c5",
        "cursor": {
          "ref": "71eacccf-6cd6-4c1c-8e54-667652f28c99",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4100785c-8af5-4fc1-bd11-fe0820dc1329"
        },
        "item": {
          "id": "65ad7db3-3eb8-4e2d-b0fc-1781c082d2c5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5e4d6c4a-0d2b-42b0-9c31-df920f1a2c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3483a8ee-22fb-435b-b0eb-bf3312d403a9",
        "cursor": {
          "ref": "944e9a4a-3d7a-468d-a741-7e81beeb8f8f",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e0678797-062d-426a-8b4d-aee0bbe9c175"
        },
        "item": {
          "id": "3483a8ee-22fb-435b-b0eb-bf3312d403a9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "cf7662af-7771-4466-89bd-b165fc060fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a22858-2739-4912-aae3-9f73f3d23c85",
        "cursor": {
          "ref": "98c18f3d-430d-4b8b-8935-04c02ef7c2df",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "97c89e6c-ae2b-4379-a814-de506aa8f3ed"
        },
        "item": {
          "id": "b7a22858-2739-4912-aae3-9f73f3d23c85",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "01047a15-2900-4939-a4f7-d95ad937f127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d325652c-63b1-4405-a3e8-e0005d6d5a8b",
        "cursor": {
          "ref": "d48798f4-e097-47e5-a218-01c4937310bb",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ce067e08-6255-42ae-945c-681351ce7483"
        },
        "item": {
          "id": "d325652c-63b1-4405-a3e8-e0005d6d5a8b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f441fd59-d504-46fe-9b63-6ecd11342787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4eeadf0-a44e-4b94-9791-b6b7fd968f6a",
        "cursor": {
          "ref": "81422551-4e96-4b74-b760-4255ddcee224",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0d8b2fd7-758c-4ec9-9f53-510cec2d08d8"
        },
        "item": {
          "id": "a4eeadf0-a44e-4b94-9791-b6b7fd968f6a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2f3ab6eb-19ab-4b40-8f83-a6ed97819aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55a4421-7a5c-4860-9a67-7e19b1a52030",
        "cursor": {
          "ref": "ffbc1b78-0493-42ee-8104-827a89bd6d8a",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ba5b6b42-3f55-4e67-affb-d2a23ec46fab"
        },
        "item": {
          "id": "e55a4421-7a5c-4860-9a67-7e19b1a52030",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c5f0d84b-f986-46a3-97f1-21e2d4ce881f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5ecc24-6ea3-4a5e-9211-84f21c4b4869",
        "cursor": {
          "ref": "a9a0b0d7-e6c1-48f8-beea-465d1a8642fd",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a006d18a-6633-4dd0-a2fa-0a5ce1f24ea9"
        },
        "item": {
          "id": "fc5ecc24-6ea3-4a5e-9211-84f21c4b4869",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "93df0d9c-2466-435d-9467-4e63bd9d5967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2627d8c1-a2da-4e71-b27d-a818330a8ea2",
        "cursor": {
          "ref": "623287b3-364f-4f49-bf43-8003c3597a47",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "866f1591-90df-4d1d-a865-bfd7f06bd612"
        },
        "item": {
          "id": "2627d8c1-a2da-4e71-b27d-a818330a8ea2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "161f0979-8e26-4868-8d4c-dd35ea859921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7dd875c-4c62-4c34-b185-dec56d8cfd49",
        "cursor": {
          "ref": "ca1b8060-a17e-4648-9030-e4d5fd5856ec",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5afd4b84-4d6b-4e7c-b2fb-fbf3458191f8"
        },
        "item": {
          "id": "b7dd875c-4c62-4c34-b185-dec56d8cfd49",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "47290550-ae4b-4e6c-8ddd-402e0f6bc0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f870738-2295-4fd1-81e4-6e2665f0314f",
        "cursor": {
          "ref": "a0c3b567-002c-41f1-bb01-55bba48e8f42",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cde788f3-cd42-413c-969b-8f09fbc531b4"
        },
        "item": {
          "id": "5f870738-2295-4fd1-81e4-6e2665f0314f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4becf21d-162a-467f-8d41-03d1a0569baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4739aeeb-2771-425c-b281-0a9c9148b099",
        "cursor": {
          "ref": "6c35b28f-c089-42a1-95a7-f1afb909322e",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ea706744-9d13-4f42-8805-7afc4b8f19b0"
        },
        "item": {
          "id": "4739aeeb-2771-425c-b281-0a9c9148b099",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "232bf2bb-4648-47b1-aded-33628de8632f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66649dab-e2e2-47a0-b644-61608290e9d9",
        "cursor": {
          "ref": "2df49d17-345a-4a02-8f02-4d973f563c52",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "30f78aa2-08e8-47c7-b673-bf95b313199b"
        },
        "item": {
          "id": "66649dab-e2e2-47a0-b644-61608290e9d9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "23a29921-f362-4cc1-a6c2-2625de2fa1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d5b1c5-982d-42f4-8530-4bd0719bb911",
        "cursor": {
          "ref": "c3d16831-2fc2-4728-bd02-533829f55a28",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0cf7924b-bf51-4386-8128-d7cbdfdb05ad"
        },
        "item": {
          "id": "33d5b1c5-982d-42f4-8530-4bd0719bb911",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "46b06b42-caf2-4bcc-a03e-d8a1d5a67c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6abe81f-4f6a-43fa-bcaa-b2c9803a1ef7",
        "cursor": {
          "ref": "fc48c03d-8b8b-409e-9981-1a30ac6a93dc",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "60a8b358-1eb2-4a89-9be1-fecaa837a6bc"
        },
        "item": {
          "id": "e6abe81f-4f6a-43fa-bcaa-b2c9803a1ef7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9953fdd2-90d7-41a7-b050-429f4c06cb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436027cc-917d-497e-bc8b-1ef4d3cea36a",
        "cursor": {
          "ref": "6ef784b2-e9e7-4fd1-8613-a2b7480a3ce8",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b452d735-27bc-41a1-bbfe-3b4302d9677d"
        },
        "item": {
          "id": "436027cc-917d-497e-bc8b-1ef4d3cea36a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "60d61e05-58df-48bf-b28e-5cab05a501d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb32f2ed-bebb-4213-ab25-0bdad73b8668",
        "cursor": {
          "ref": "643da6bd-387e-47d2-9579-58bdce77fb73",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e3de0cd6-32c6-4201-a001-39c74425034f"
        },
        "item": {
          "id": "fb32f2ed-bebb-4213-ab25-0bdad73b8668",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d7fe25b7-74ea-4c5e-8fa0-397a0829629f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fc9113-bfd8-4aae-94fa-3b88d886eb9a",
        "cursor": {
          "ref": "9d8d9d14-23e4-46c9-bd66-3c36c7227d68",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f82439e5-9af1-41fd-97c8-21b21aa70f24"
        },
        "item": {
          "id": "c8fc9113-bfd8-4aae-94fa-3b88d886eb9a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "436d8c88-b7a1-4479-bab2-e7c29090fec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c37c8f-170c-405d-b10b-ad7302aef641",
        "cursor": {
          "ref": "05c8275d-ebc4-4313-b7db-1e5d1f136807",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a826acf8-75e7-4c7b-a6d4-66f796968e83"
        },
        "item": {
          "id": "20c37c8f-170c-405d-b10b-ad7302aef641",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4e03d765-a754-4830-89e6-fdd9a1a28931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73629630-5103-448d-a57d-b8de2edf2aed",
        "cursor": {
          "ref": "680a11bb-507a-4409-b627-fbd0a5d72fa3",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "82f99a9c-02da-47b4-ab67-9e1f859c2a28"
        },
        "item": {
          "id": "73629630-5103-448d-a57d-b8de2edf2aed",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "63d1901f-7016-4cf2-9cb3-896935c0d90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e538e59-a128-446d-8c97-c88982992e89",
        "cursor": {
          "ref": "706b8f9f-586c-4c8b-974a-3a5bf3452e68",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e29f89f1-8c54-4c4e-8cff-0e38ccb41bda"
        },
        "item": {
          "id": "2e538e59-a128-446d-8c97-c88982992e89",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a1c4da17-9a8e-4f38-94a2-b412591eafe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9f63b2-7314-442e-89c6-231d4d1035e0",
        "cursor": {
          "ref": "1d18e21a-a338-482d-b6ac-3ea6c5689396",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "50927595-4acc-4af0-9a8a-8b8716c6dc93"
        },
        "item": {
          "id": "fd9f63b2-7314-442e-89c6-231d4d1035e0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0754f24c-6ae0-468e-a897-612f0602d0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f206dc-3b2b-4055-8cf7-ab448a7179d0",
        "cursor": {
          "ref": "5782f4a2-9a31-4dfe-b378-a91af950bff9",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "61b9ff20-4501-49cf-aa12-aaec225e1940"
        },
        "item": {
          "id": "83f206dc-3b2b-4055-8cf7-ab448a7179d0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "50e50e1e-bd7d-45d3-8a92-a513895ba8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e9df73-d165-4009-a536-4ba1bdf03571",
        "cursor": {
          "ref": "09731584-aa88-47e0-859b-337d422b9495",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3906bae5-6053-46bc-a9af-5cb6cfb308c6"
        },
        "item": {
          "id": "70e9df73-d165-4009-a536-4ba1bdf03571",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d9a62590-3c1b-4995-be8d-5346fb07b011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52282c55-21c0-493e-9f6c-53dbb13677b5",
        "cursor": {
          "ref": "d37f7b22-0292-48c9-b0e6-6e1a4f81806e",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "41c647bc-d158-433d-83c1-5f1f8004c9af"
        },
        "item": {
          "id": "52282c55-21c0-493e-9f6c-53dbb13677b5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "67c276f8-ea9d-46df-a66d-770daa27aa4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a910eb-c48d-4c59-96b9-682321c8140f",
        "cursor": {
          "ref": "bcfa9615-4105-437b-99d9-02472ba3bd22",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0bc59025-14d2-4f2f-bb82-dea6f64637d9"
        },
        "item": {
          "id": "40a910eb-c48d-4c59-96b9-682321c8140f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "07954d58-b8e5-4512-b639-2e8f0daab626",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde46d10-9d60-4cff-b619-badbe29de04f",
        "cursor": {
          "ref": "1e43fa6c-5f43-436b-aa8a-8bad42f1f6c3",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fcf7c4c9-2c6e-4213-ad64-3d6f763110c5"
        },
        "item": {
          "id": "dde46d10-9d60-4cff-b619-badbe29de04f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6c01b1bf-189c-4f12-b860-51ace43cd60c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d918752-06e1-4f2e-bf6d-f5c928957a28",
        "cursor": {
          "ref": "5bef6b06-9f4c-4197-986c-02c10548ac16",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2248ba20-a84d-427b-b790-6d9412e3127c"
        },
        "item": {
          "id": "2d918752-06e1-4f2e-bf6d-f5c928957a28",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "de8f864e-c706-44a4-9470-dfaacde2111d",
          "status": "OK",
          "code": 200,
          "responseTime": 293,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "40325308-c6ea-4ec5-8fd4-90b3c1d33305",
        "cursor": {
          "ref": "0fb9d20d-3878-4e4f-ace8-0135e6e676d0",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "47d4d133-dbf9-48f4-897e-1a573c78c1bd"
        },
        "item": {
          "id": "40325308-c6ea-4ec5-8fd4-90b3c1d33305",
          "name": "credentials_verify"
        },
        "response": {
          "id": "08a0380a-0a04-4fe5-b329-2c12b135ede7",
          "status": "OK",
          "code": 200,
          "responseTime": 669,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc17294d-a3e3-444d-8e7b-e585f22d87ab",
        "cursor": {
          "ref": "96d47bd8-7761-42dd-913c-9ac35c80bca7",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a5016b3f-13dd-4758-8e18-3d0b00183324"
        },
        "item": {
          "id": "bc17294d-a3e3-444d-8e7b-e585f22d87ab",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d5733217-2973-4beb-a831-2276542bb5c3",
          "status": "OK",
          "code": 200,
          "responseTime": 709,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "312a0d99-aeac-4ec2-884e-ca5c764f8a4d",
        "cursor": {
          "ref": "bbe9d2b3-e12d-45a8-825e-143cd78bac14",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a5b53238-c1e3-47da-9e8b-54532bb9e080"
        },
        "item": {
          "id": "312a0d99-aeac-4ec2-884e-ca5c764f8a4d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bcab4f7a-1414-4768-99db-835cb78bdbac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312a0d99-aeac-4ec2-884e-ca5c764f8a4d",
        "cursor": {
          "ref": "bbe9d2b3-e12d-45a8-825e-143cd78bac14",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a5b53238-c1e3-47da-9e8b-54532bb9e080"
        },
        "item": {
          "id": "312a0d99-aeac-4ec2-884e-ca5c764f8a4d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bcab4f7a-1414-4768-99db-835cb78bdbac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312a0d99-aeac-4ec2-884e-ca5c764f8a4d",
        "cursor": {
          "ref": "bbe9d2b3-e12d-45a8-825e-143cd78bac14",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a5b53238-c1e3-47da-9e8b-54532bb9e080"
        },
        "item": {
          "id": "312a0d99-aeac-4ec2-884e-ca5c764f8a4d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bcab4f7a-1414-4768-99db-835cb78bdbac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7db490d-d68d-425c-bddc-c6e690503dbf",
        "cursor": {
          "ref": "bde20314-d4cd-4920-a4ae-153b07742045",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3eaa8f40-b9a3-4d8c-85c4-26d1f288d3f6"
        },
        "item": {
          "id": "c7db490d-d68d-425c-bddc-c6e690503dbf",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4527f573-ce22-42f9-a4b9-74ab4aad4747",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 62,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0285bfc-1f2d-4609-b9b5-90b79e2923bf",
        "cursor": {
          "ref": "472822cc-e5d7-4ad6-9ba0-d607a494aa92",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7c3f1bd0-e6da-4578-8382-00119554b229"
        },
        "item": {
          "id": "a0285bfc-1f2d-4609-b9b5-90b79e2923bf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3842825f-67f6-443b-a419-417b6e9e058f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a0285bfc-1f2d-4609-b9b5-90b79e2923bf",
        "cursor": {
          "ref": "472822cc-e5d7-4ad6-9ba0-d607a494aa92",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7c3f1bd0-e6da-4578-8382-00119554b229"
        },
        "item": {
          "id": "a0285bfc-1f2d-4609-b9b5-90b79e2923bf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3842825f-67f6-443b-a419-417b6e9e058f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c73e18ff-f962-4abf-b51a-3311cc3e815e",
        "cursor": {
          "ref": "127407e4-6f4e-4333-a193-2cc1c2565ebb",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "69c0b18e-206b-474a-b4aa-c430bac5a811"
        },
        "item": {
          "id": "c73e18ff-f962-4abf-b51a-3311cc3e815e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0be9460c-fe36-42a8-88a1-7a72edc0e0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "4b3a63cd-3ac5-4dcf-a0ec-c97be2173fa6",
        "cursor": {
          "ref": "eec85bea-ca03-4338-a5c2-d09892bb71f6",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6753cb53-e873-4341-a1ac-a9324057d028"
        },
        "item": {
          "id": "4b3a63cd-3ac5-4dcf-a0ec-c97be2173fa6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a5740bc1-105e-48ab-b979-4a99c32f4d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "4b3a63cd-3ac5-4dcf-a0ec-c97be2173fa6",
        "cursor": {
          "ref": "eec85bea-ca03-4338-a5c2-d09892bb71f6",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6753cb53-e873-4341-a1ac-a9324057d028"
        },
        "item": {
          "id": "4b3a63cd-3ac5-4dcf-a0ec-c97be2173fa6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a5740bc1-105e-48ab-b979-4a99c32f4d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "07b2f884-5186-4524-a43f-a7a18b9aff22",
        "cursor": {
          "ref": "9c18cd0a-b1a1-49eb-9a6c-b55cc3d4d4ee",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c860f1e8-b0f3-416b-b640-9ae3cd6025be"
        },
        "item": {
          "id": "07b2f884-5186-4524-a43f-a7a18b9aff22",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "71b60fbe-c09c-4979-880f-094c00f17bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}