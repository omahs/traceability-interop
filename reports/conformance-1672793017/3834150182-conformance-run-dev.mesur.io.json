{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d38d618d-f061-4ebd-9f3f-ba8f243eda22",
        "name": "Clear Cache",
        "item": [
          {
            "id": "559020ad-e62c-4b7e-9005-daed8bbed408",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "40ab98fe-5e64-4845-8dd2-c8c649aa7955",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "effe6b3b-46da-4f51-a843-cde90939f326"
                }
              }
            ]
          },
          {
            "id": "7c8c2b2b-c532-494a-b33b-4616c54327dc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fbd5cc90-1956-4c99-87a0-ffee759c4da8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "33d80125-3373-4060-b5e0-8a4096f6494e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "642e2914-df18-4e9a-901a-6980d381caab",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6650d562-7940-460b-a0b7-2d883ab0592a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5e45a2a6-fabd-465e-b248-b5fa2f1e042e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e034181-8c68-4820-b442-cebbbbceaf9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9752dbf8-c0c9-4245-9f3a-d2625da21f7e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b9470aa8-d6d2-49a6-9a78-60b523f4a17b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e51aecc1-2611-4063-927d-eb0bbcc30af8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c16930bf-7081-4798-ba2d-2d2c00341b06",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f1a68beb-72bc-4bb9-963e-4898e48e832d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3beece71-3884-492c-a6fc-e530eb638bf4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f9a891d0-02b9-4410-96d1-6f7cc9d7be24"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "823d96fe-ba38-47b6-a1d6-51b022ceaa99",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16a61257-a350-4991-9b98-64a7cc5f77f4"
            }
          }
        ]
      },
      {
        "id": "d2307eb9-55a4-4dd5-9c26-18ce0f950597",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a891411c-ebc8-4c52-b57b-3629f65a6ed7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc5379d0-de23-4dcc-87ba-dce0cc61c66e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6e20a824-7dca-4f8d-b66b-9a063f7b6a6c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ccc959-44d0-4332-bf3c-614bbbbadc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca77f44a-da97-49f2-b0a5-aedb1c1c875c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446d9ace-c2cf-4f0a-a411-cec7461bd725",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d95000-5289-4dbe-bb5f-12619c12a595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f49a498-7d51-4fe0-8f45-488538806fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb3bbfe-a60c-4c55-9c16-cb4825879b01",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb95d55-1811-45da-82de-2346283df72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9a27294-a742-4304-acb8-9b84ab84d96a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "99f71cc8-1a34-45eb-937b-fd3d7b12c9ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "414a2fb8-4fd2-4c8c-ab63-50bb95ef6ca7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7985647d-20c8-461a-95bb-f61b589803cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10508b44-574b-499c-9e54-e15338f3a2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3926926-a7a2-4e32-8741-81ba93977546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30731968-7a3e-44f4-98a1-81dc2c5ac2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a463a7-ec59-48b4-9af9-08d6f3c9994f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfd0a31-d7c5-4e93-a740-e2d5252dcfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d91d56a-2530-42e6-88fb-5d29a76d8cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31d0297-9f3c-4c03-97c5-6aeea975e2bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b5e57843-c880-42db-a928-31bfa6879a84"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5931e65a-9e84-459a-afa2-ea2d932c6086",
            "name": "Positive Testing",
            "item": [
              {
                "id": "73c2fceb-3889-43e0-94db-a347fdcd25ef",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6c29432-16fe-4519-9471-8420d1f9eb8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4bfa0def-0541-4e3f-8162-d7d6cccb837c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7236ab6-a64c-45da-9404-acfd5197b406",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b1df8bae-bb51-4f23-a2fc-a65f71648496"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bfdf5492-bbab-4941-9bc2-bafdb851d20b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07d37bb2-a9a8-4f22-865f-b89959da561d"
            }
          }
        ]
      },
      {
        "id": "dec1407a-d415-4c44-b802-1f4edbc1f1be",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c01290cf-d59e-4f48-8b84-fc0eddbfa96c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "076362c9-9de4-4a36-b0c7-8316ac0a53f0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "30eebf6d-5637-471b-b36f-f4bf81712a3d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ee703e-71d6-43cf-bccf-7e53650f328a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e4cb57-9d3e-4817-911a-fd9651deb851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b5c593-dada-4510-a1f2-8cb63d510052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0096dac-ba38-4fb6-b182-bafbf643fe6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b365de-32f6-4e11-8fd1-f35dc339136a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772af899-fc9c-43b5-81aa-6d9b1734da28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d0f6a1-ead0-4288-8799-dcea5898225f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a34e607-8126-49e6-b90f-233e43ca6b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "785bbd9b-e0f8-41f7-8cdc-9b9f05c16237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6301271-53d3-45ca-9162-31174b854046",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428f7fb7-901e-4ed3-b638-86dd4eacdb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b453fc-6a8e-4607-a62f-0f6e7c415fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6450f807-9165-4e01-bc0f-c9e51e9e91e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c25db9a2-50c9-4e3c-a623-acc137a7ba95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dae8ccc-e839-4209-82ca-5980d2b588bc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf26b07d-dbd3-4b8d-8a77-a2ae592b636d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e49837-8b5c-4c36-bbf4-8f686b608ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80999f83-f77e-43b9-a814-d799755710ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "566b1989-3710-4318-b6dc-8f6cf2e65156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c77d369-233c-4e2a-8ff2-e2594a2739df",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5337ab71-e830-412e-8053-f21f9e4e56a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "699951ae-fea4-4ad2-8fb8-041d138f3653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132008a9-1f15-458a-9776-b59492909d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6c0a716-d775-4232-8c4b-da24d304ad05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d179af4-a8b9-4468-b360-cb760f285d1a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494e9d37-0f03-4017-ab86-057f5dfcbbec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71d69f46-c9c5-49f3-bfdc-25517882e38e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a2d5c2-5b24-4e82-b921-e04b3a93f065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3d2134f-608b-4148-bdc6-252e3634317f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e074c30-7c23-403a-86f5-6e4f3f6b8e54",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dc682d-267c-4fef-9ca5-21c8e85bdddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0481df86-ccea-498d-8667-f3d9b9f87883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c019b2-041a-484d-b6c6-44c34db07c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84d8c5c2-e1d3-4b15-9fd0-9c83b3a1ed17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3541b959-375a-4e5d-9cba-219e85655179",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08831db6-6255-485a-887a-5b1816bb218c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235aad4d-cb82-4a20-afec-8116ac5fe27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0fba84-5002-4766-839d-f0d73d0ad4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cbe72a9-3b6d-4952-97c5-acbc6eb9afb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f0bcc0-4ae5-4173-ba82-ed922d5e4398",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73197e1-73fc-4a63-99e0-a46cd8ef831d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a15377-8500-4798-8fff-f1fdc7883507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c8b562-6d66-45c9-9136-f54fa095548a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bccb5651-0e63-401a-a9c6-7ff43d838a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bd2fdd-fd6c-45b0-abee-d0da08daad9f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d397c13-fc5f-4860-a527-cf3a3fd2b2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9144e8-96e6-462c-af51-f0f22c2b945f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5e2a11-0c8e-45df-be63-b66271155b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2b65fc9-2781-4804-8dd8-ea54a94eaab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d155e8-6221-47a7-9d11-38e03bd492b6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb98da74-fab1-4f89-b0b0-4ba2603f5b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c57b21-0e21-456f-8278-83efc643ae0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6c44e5-878e-49e4-8f9e-a152abde7d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ff44f82-523a-44a3-a634-fbddfb23b2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4900a587-5552-49ea-84e3-2c1f9b4de1f0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483af2e4-1818-4239-96de-6285c4c55e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "882101d9-5c0a-41c2-bba5-8858568d55fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e06b874-918f-4314-bd89-16c7b6bafb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee218706-0816-413c-933d-e7c6d468e590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d56a72e-090a-4fdf-9868-c478c6f952e3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed86fd4-80ab-4075-9227-abd3cbbebaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9601172-2a27-4b5f-a8e4-1a9b3107486b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530b7532-c0a1-4483-a97b-b709b98a5997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d611867c-9534-456e-9185-12e3e290d89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c95fdd4-fd23-4475-90fb-a056e6fda809",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a06252-c272-4b6c-82e6-b43a0fb8d76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e90b48-a044-4aff-93da-d0e833d83cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98b3161-447f-4a07-bd74-bcb6b6cbcff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bbc85ca-3fa1-4405-a752-af526c604213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67418d39-9478-415a-9291-fe041add1a9a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15072733-6280-4487-8000-4ca50732c868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a606ef37-196d-425c-b445-33bdb028e0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033b1067-10e4-45f1-9761-1c9b2b6f9f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fda9c9e-8091-4018-8e67-1e16448f9851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a85e6f5-6158-44bd-bcf4-454e212d9ac8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f232d36-0ffa-4bab-8e13-9420461c5889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3698b46-c1e7-49b8-bd66-dc229a58781d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa25cbb-ac1c-4f27-a689-bdfa96513092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7405e0db-ed32-4f9c-a324-0cf22eec1049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed05b0e-e60e-4355-84a7-ebf1c18f0fd1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef530a3-d872-4372-b612-007ec5d6adfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378d53e8-ca7f-4312-82b9-dbc90b948ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7644e81c-2ab4-442c-b791-9db621aff3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65be1977-5989-4a90-bef6-e17a57322d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030d97f7-d5ea-4573-9856-9c2342e4666f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1830dfdd-1725-461b-bfce-9f40410541da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44402289-680f-4152-8cee-211cb9a1cc61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc28ad4-5f61-41d9-9d5f-181937cdd1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ab00457-0c07-4f15-9746-0600f96ccf7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f579c364-a814-4179-ab35-25aa7e6b5d65",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea9db84-a3aa-4078-b48c-a53044054170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8dce092-cf22-4001-907b-fc02b15798ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8691ed3f-3e08-4a7e-bb27-c2bdbf711381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d31014bf-842d-43c1-839d-3e21d6226f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75758c08-84aa-4dfd-bde3-6b835086a5bf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bf1388-0a25-48ac-b297-fe0bc2387697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f230e678-72d8-4a4f-98b4-5150b7233375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7443f5-698c-4fa7-8629-5d4f07e47662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "96442d04-226f-4e20-8e46-4b32f0623a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830e31b6-fcf9-4a44-ab24-c2cecea2ce9a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2802e4c-362b-48b2-8686-4555b85b2ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647b9972-fb52-45a1-ac3f-57d4c8747d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e01ed5e-c84b-4606-b380-3088c5206bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30af1fec-7da9-4214-8b26-9abc6c03795e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34ff24e-b7df-487f-ac25-27a5d7ca2e4c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8effc6-efdf-4c0f-8e73-1dd58c4b8c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87f8647-d27b-4541-9482-764a5bece1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bdd0a6-9d24-47a5-b147-142059bce975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a03a827-85b0-4d61-a334-1b037c034963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebc406c-3302-45fc-8d5f-147c104ddf3b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1ec89a-13f5-434b-8857-377b10579100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888c60b8-d2e0-4c4c-8e07-0dec160dacc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b839b6c5-7f4c-46bd-b389-f424e4d52c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e8f21c-292e-4c25-9fbc-012f32526e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bf4b78-07bc-4f3f-bd05-671c88201563",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9928fe-5d70-4492-964e-943972ac9616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9067fe42-1557-48a5-89cf-f521b9629eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7ec65a-da04-4683-bf46-ffc2aab29037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efbbe6b5-c625-44fa-9b94-e7d4b578fae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af4c7be-ed98-44da-bf9c-23ce749d49d1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff61e63-5ef3-46f2-8f96-7fa8fd670775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9931bce-1116-45f6-9ebb-a185d6da953c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875bd3ca-634f-486f-847e-e8046ee4055f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a6f4232-4061-4c93-ae33-0fac6794acf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2eb3bf9-5160-4ed3-8cc8-f53a900837e5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7c97cc-fd0d-4e6a-9837-3ac60f4ed1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a0aacc-cf4d-4da2-a3e1-c2aa2f18a05a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f13de1-19a4-4e6f-a9ca-52b0f9697d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ed08ac-87fe-495b-9ba3-4592e106e90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd8b83d-9f61-41a7-9f02-6dd10c0768e2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e0bf95-ecfe-49fd-a5c4-8c97ff029960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923f9653-fcf8-43ba-a838-4dbad76a1ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5db356-c2a8-4243-be12-61ca02858079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a043a9-640a-4c49-813d-374c205c8b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35f36b6-797a-4c43-a792-9ad67b3e5de5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f445229-0993-40ca-ab9d-46f1e7835920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da14f65a-c143-4111-b574-56dd80e64670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad20a18-2aed-4ef2-b30d-4ed9f53cff8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb7f440-b482-40a4-9d26-3390ce9ab6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3202dfa-48c5-4730-bc67-877ce385cb85",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229d9ceb-a6a2-460d-af1a-7f37be8ce422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae06a0bb-b8ba-4487-a734-ccca31c55aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3203eb-ecf8-4ddc-a12a-1b7fc06671f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "281c2ce9-d99b-4204-934b-a11bdc5955dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a464811b-d04f-4485-8103-a78cb157f195",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f98605-3083-460e-900e-4675e740d0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156ef3c1-6b90-4c06-9e19-843c0a2a3d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80d5204-a09b-4958-b290-a11837dfd042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bef480d9-b995-4bc8-81bd-6356e7c8f80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a8d14f-bf28-4f39-bddd-3f7023a996f0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f36414-8099-4506-986b-be1167d04aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5583a2-4eb3-4a2f-b237-20a0e7677dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2b98f3-a1fa-4238-95d7-e53cfeec6970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f91bb1-b5eb-41c5-bdfc-9f24181e4e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be27f20a-0fc9-4c36-8e67-a0fc1e0c4b25",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cacf31b-b176-406a-995c-589659955379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7242007e-7e88-4af7-b002-af8fbcf75156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13317e49-fe88-4a8b-bcdd-ebe7524f904e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8cbb546-7592-439e-8c08-e8ecd6f96b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa343916-d7fe-44dd-a3fd-dbf7bccb2afb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b822007-e017-4980-94ed-8f09081aa719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7277220-160b-4e2b-9045-e81414f75b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6707a4-77b8-4678-b912-49c82d1500cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21704f26-3eeb-407c-8f91-855330f87445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65790833-5edf-4d6e-98b7-e0a7629cc32a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4894a9f-4b61-40ca-9412-e4853399ace4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb2f65d7-1033-4b5b-b1a0-a900ef7747f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a27e530-a4a9-4aac-a843-3e1009223a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f71512a9-33be-4a38-acce-65deb18def97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d129ab20-c602-4fd9-a01c-5f6b16956854",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be3b342-1fe4-4625-babd-15315a550182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e34eccf-f1c3-44bf-ba31-f206c4c18ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80563dd8-6487-4491-b8a6-f4718adb0b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea3e582-5350-494a-b69e-de6f02a3c094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389b0a7b-5602-42b2-804b-5ee6bbd79190",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a1e002-f33d-403a-8ccd-1113615fc4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df4d5e7a-4a0e-401a-b5af-9ff8daa5db55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae293d61-a3e7-4747-92b6-0f72e42d9cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38269b20-9b61-4568-a855-cd51f7979d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d40277c-4c30-4d7a-b6e9-2f19bdda557b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd53f4c7-73fa-4a96-80c4-e3d36832469e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b6f57d-3f0d-4273-94af-6c834aeb622e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29fd7f4-8a69-40cd-9618-99a4f2ce0be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c58db0aa-1f11-44ec-aa0c-5e787008621a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2ca3e1-d919-4089-9be9-816e5c53c956",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa7b424-2dad-4f94-a00d-b05b6631b616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d914a54e-c356-46c9-9ead-de75906ceb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b4c7c2-8738-4aa1-8722-527791ce11a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42010f2d-9d31-4874-aec1-dfc7f264e5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dffa50-d49c-4947-9090-9a7da16bbd7b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa9e0d8-a687-4d7f-b047-9fd22e9c2433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93bcd30c-cfe1-4a89-93c3-b04a0e6a5654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9a30af-0d88-490f-9b58-be018aafcd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "966e4edc-3932-4a5f-9e9e-ddfd88237445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf159c6-b497-4271-b161-041e5bccb149",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211c22c6-0bb6-4daa-8987-e5574a851b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136267b5-61e0-49f3-87a6-2729efc164cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c0d07e-4cd3-4883-bf5a-cf03a3d0f515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aba186b-319d-4be4-8db9-d6b8cde399a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a2e35c-823b-4768-99da-7975bc554e09",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90ab3fc-6cba-49b4-a357-5eede30a0ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0a1e3f-7361-49a6-8166-78b9942c9274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dc39bc-349b-40d6-bae2-9f74895c9fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bec8507-03cd-4762-b0a2-1492a1fcf49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a9b541-74c5-4ad8-9ecf-67308d132f02",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665b3c7d-3fb5-47d3-b1b7-6863256de518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eecb3290-414e-485e-8b70-d5c25de90272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370feb3b-c1c9-4913-9a1a-c3ec5773e794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2e0af4-bd76-478b-ac15-7c0c10281f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3436de-7f1d-4d29-a45d-fbcc219ddddc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0eb99a6-af2c-4aa5-8c50-25a8501f7544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c80f0b-1a27-4bbc-a565-f30724a99a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced81f08-7cca-4392-8ff3-15b41a4f7f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2b6456-4efd-4417-8eef-5b62108439d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf62d3f-c59c-4f12-b68e-9075a81f464e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51c876b-bea8-4da7-9910-40734ed50d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b2fa20-1ac5-4f09-b12f-f7f1ef207110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cc0d35-d41a-4c71-9b25-39d9be81fdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8b808101-8291-42f4-a387-be052f70c6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbce39de-2819-4de3-8711-a1abaf9654aa",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382a2840-9fb5-438e-b102-fbef2a920bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb4eb818-bd2a-41cd-b540-c54c2f983ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ba90db-05ec-41cd-a670-c16a9abb1eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "651cd8c6-4740-4718-9f62-c90ce8a767a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf7d211-20a6-4834-84f1-a82afd9bb484",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147f14a6-5845-4888-8d4e-0533890f43fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af89eba0-9d64-4552-800b-7aa2776ed3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddd6f40-c68f-42a6-b7ba-52e1a0eb3f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac800f35-e7b5-4a84-93f7-05a972957677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5b241f-1fe0-451a-bf8a-f8e98dc0a7a6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf9ce39-280b-463d-9bec-d1ac90e44b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f84241-a7da-4595-9e9e-0e25f8e822de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96cdf60-ea1a-4767-a80f-9baed0ced853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f1b228a-75f9-467e-a0b0-57446155815d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38814f0f-745f-4e26-9166-bb70fc65939c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d46b100-e22f-489d-a475-6ab18697f425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0383ed07-0c71-4ea2-a8c5-863da154560b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be15b030-f014-4e91-81cd-adb6adf49df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39583321-387f-4245-a2f8-18e18d3da9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c110ca13-5ec0-4e3b-ad7d-424a1de89987",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7667f4b4-ca1c-47dd-aafa-50adf9171fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c659430b-7465-4cb4-9567-fb8c078350dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663fc34b-99c4-423c-a8d4-36259bd7b6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c20a800-b057-4ac8-ad89-8348cb19ad07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc08622b-df1f-4bb6-b1e8-f456833b179d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3ccaf1-b5cf-4cf7-966b-7971d9548f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb56e889-f4bf-4358-9aff-830c8f39df51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8710fb-f945-47c6-afeb-eb944c7480ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea609cd0-fef0-4906-96ab-665c31d90aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8eb07f-10d2-4229-a064-760261ca3f22",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e91e45-6f45-4977-8c23-698d1e778575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434f7e23-3939-4af2-b804-937f8e19895c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77196948-55ec-420d-8e4f-cc7dc50101d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecff38d8-55af-4fda-b443-4f3407b3164b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d77544e-f9c8-4eea-b3f2-2d6354a7388f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc687da0-e250-4ab8-8030-80ce33f59b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05ace5f-f4c3-4e60-ab35-e5f0152fbb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e30d13-16a2-48ca-9eee-ed0928f8a875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9cebb5f-ade3-4068-a88d-ba46049a46c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca1a351-55c9-41cd-9d7f-7ebe82d8fa31",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a67872-6fa3-430f-be05-22f19fc6b2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c22468-93fc-4045-ad34-8dc465d4eca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c744e75-de83-4e82-aecc-a623a3f892ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c432f3d3-3ca8-45c6-b17b-d1ef15347e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca417ef9-b0e7-4360-95fb-85247dda3ddb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91787a6-f2e6-4e34-98d5-490d7d9bb4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc0f43ae-8c4b-48e9-a287-a7200882aea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc92105-d75c-4a12-a47c-15ec218844b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "90f5bd39-6afe-4429-992b-d4b9b3103455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213bae7b-5d8b-49ea-8ca8-da30d461be14",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778c5dc4-a16d-4174-95e7-0606a08b4707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3c52da-74be-4c4b-912d-7f4cfd613b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5480ae-1830-446f-a521-30a57844fd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b10988-f73b-466e-9bfd-22e9cd5c80d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644a1fc4-7cae-47cd-a70d-ab3bc7ffaa3a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540819af-541d-4770-95a3-28a5fe6716d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b9b3b8-66bd-4d66-ac5c-f97ca1d6f0a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4d6b47-7db4-4a05-bbbb-1993d4fb571c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac7da29-9a9a-4db8-ade4-cfab999489c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660cbcba-439b-40a7-90a6-b18570494ff8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6743859-ab82-4c2f-8275-a77f97497e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1af0b3b-10fb-4ffe-bf9a-8fcffb4425ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba24382-197f-44d8-bdda-f53755352d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4983d1c-2e78-4f96-9781-0accf0ace675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a826ba4-22a8-4b29-8b79-347b20248948",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb48f7a7-a690-4c09-9a4f-ceb68bbc3b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa45c31-39f6-4d4f-b059-d8b32b153474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d311b86-75c2-451d-8ff8-bc1a20a2c943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea70bf4-d81f-4265-9415-4da2bc93c528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d484bb2-5ca6-4b87-91b3-ca4f2254ee3e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d61a886-db89-464d-abab-dd456fd7c983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551e8250-9afb-44d7-8bda-360ed27579b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84195bac-a471-40cb-b658-86c28056cc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a365bd05-1db2-4f75-b115-5124a7c62f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58935d52-563b-41f2-aa80-957fc2215ab6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a6636e-a096-464f-b849-70660a7a3ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5582220-c032-4581-b669-9440fe09872c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2e6c70-95ca-45d2-a6e2-e652ca05cba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cab40da-b426-46ff-94e7-cdbe1f241b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f26a48f-e9fb-4a52-9602-d42490a1f2cb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be010faf-15d4-445e-a421-597eddca2863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5246920-211f-4ad2-b8c6-56a7031761c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e8bfaa-b6bd-4733-b90c-6e5048cfd977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "58a0d194-c526-472e-bfed-a8210f25d249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd4f2cd-2598-4060-b188-32f9e68caa0f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61ba63f-1896-48e7-8302-2a8e81e4fa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b581edf2-8db4-43c2-97aa-36a8b8df461d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e090ae4e-6276-4903-b33d-29643fba27d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "03912fee-29c6-4268-94ae-d9117fe4b69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e4de5a-0bfa-40c7-97f4-9cd5b18886ef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d489bb-f17a-47e7-bc81-b856bfe6ea08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114972ee-022b-42ff-8e27-fedf4a0ccdd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9574d2-c8ff-4590-bd97-99c347797803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "51a40352-d667-4089-a753-014ae5ddb16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c218197d-b5ee-4df0-937b-5a6e267e588d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385df565-5afd-4fbc-b0d1-588ba82d8c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6921edff-61b9-4980-be58-6b255e0706f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f04369c-2341-497a-b435-0fca534915f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c214b8d9-2d42-4c5b-a365-856b6ec3dcbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2a41f5-89ef-420f-bb02-2009d8660618",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737b0e03-b6f7-4eb4-a969-a7a875c2e5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf904add-b3b7-45ac-b850-f3d0ffb77cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab705648-ed62-4a8b-ae09-ae4e2dabce98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3e1ccb-86fb-4f5c-a072-f2e3389c59bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e7755a-a2eb-4e3e-b334-5305b0308675",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7a19a1-9764-4014-879b-cbaf8c1e5b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc45b93-4614-43cf-b650-e80b45028205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3a11a0-0adb-4f8e-96f5-74da56e1f5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4021779c-a883-4988-8daf-283fed75aa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb36c0c-bd49-4053-b173-adbc51a27810",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc85dcd-53b9-4660-922a-73f7a4e0a2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661ecdd5-b915-4470-a89a-c12e8eabf8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2dfae94-e5a2-4397-954c-40b410b1ff29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b62247c-721a-4af3-ae80-605b0d5c0d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecfb8d1-207f-45b3-bb1a-095eddfdcd52",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f6ecd2-89f8-4e64-99de-dd5385b116ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb56a6c-c723-41c3-af1c-c74e6e5ed3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceeb96f2-e41d-44b9-ba66-448f19f1e562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f34ddd65-7604-4088-a4b0-bccf635f6db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347aeadd-e25a-4485-bfd9-40033fcabd11",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8430dba-5d21-4c26-8cf6-c152c189ad3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa5488e7-44ca-4ce5-9542-66f47b7feccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7716ae31-3c83-4ffa-9398-c5ef53e9e4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "231c7300-16de-41ab-9687-948d073fd737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725adc8b-ff43-4f5f-b7b5-b03d0f8c2629",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d5d2e4-27ee-4437-a57f-07fde81b594b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cdf7b94-d5c4-4e49-aaf1-583c2b9b15aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07dff2f9-e7be-4848-8db8-7abd866407a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c46895dc-62a3-416f-b7a2-8646598cd6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491b73b2-a1cb-4567-812e-efe672ea7776",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c282042-9835-405d-9622-2a542671744c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321f6556-2218-44ab-be2e-946121dd0c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcf5362-b702-4c24-93bd-3ae876a13254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "17164cbc-42d0-41b7-b758-3a591ecaa50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689f9c15-5c08-4d67-9d9d-55e943c63643",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c2b160-76d0-4be3-86e4-baf47097f813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7e8802-f0c0-47ce-96a7-ac03115473ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2456b0dc-a000-4bf5-b9b8-a02c6fe37d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5cda4af-44fb-4ace-8eab-090d6ef42156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78802fb2-d318-49d9-af51-4cdd1432e39e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf978d9a-314c-427d-8450-1a57e36a8c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e0a14d-8955-42ef-aab0-cbe6f94983a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c254c8ab-2376-4c86-820f-efdb128b3b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b398f0fb-3b66-4650-8835-67ca74f12647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362dab5f-4b97-4c62-905d-ae9179f12beb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c515f9f5-68dd-4526-ba11-62753a82cf2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e43186ee-58b5-4b33-b040-d8be274e57d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd200abc-d099-4138-9f47-b4abfaa658cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b194c7db-9eda-437e-812a-7213e3605768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5803ab-7ece-4819-a127-b7566981e725",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0accbe0-9ac1-469a-b2bd-12f2297a52ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db4c4e2-58cc-4ec8-a576-167ab22f8dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282cc93c-93e7-4d24-ae73-0b6059285f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdfab58f-0e2c-4e0c-bfa4-1599fa6ad0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8a6e32-f8a9-4889-b745-41d99803d5a8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8da99d-f1a4-4c07-ac48-65799b96b665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6eab719-87f3-486d-b339-ef1d22801bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e858c29-659e-40aa-b430-091730f84c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b46b394-a0a4-4f79-bf03-f985002a5f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b56502-0cc7-4cd0-8b54-938ae007553e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92efb996-2799-4d66-a3b8-113f43ba993f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877720bd-edc7-4cdd-9ee4-e6a1591c48cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3f71e2-9f77-4346-b32d-002450e6104f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "62a3a1af-2fff-4114-a5e1-e1b5bce18d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c0aad9-ef3e-49d5-9b1a-f834522fe8fb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e50917b-3d04-4d74-a514-185eacb0e882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036006ec-ff96-4333-84a0-26c264cafedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a11d6e-a76b-49d5-b185-a58bb4396d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95275542-0870-4677-9448-cdae74af7f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727ef8c4-9d09-41a0-b559-0099ae216d18",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83a749d-aec2-498a-a171-de50ccef9aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad94bdf2-5f76-4a68-bcae-17f9a8a50b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693e0b58-86bc-4673-be9e-6de01202f277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9929be2b-775e-46ca-accc-de47afde03f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317f0c05-91f4-48ff-ae61-7d32a433e479",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbea630e-556d-402f-b2f9-15f0f106eb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e469408c-ded5-4834-888f-d8f7da5814a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2793bdc0-d365-4c85-b65c-892be6c793f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "430b1399-4e1c-4071-9247-0e71367dad08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28aa2a60-b9c3-4723-a3d8-64d6901d9fc7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03918668-aacc-4e6e-a176-e7648b360f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1fd0534-bc15-4620-be2d-80aa060c8af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b77e4c-b0a5-40da-b54b-7b7396ea0576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d7f01a9-b048-4954-8f9b-8cf7c5fc8516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdc34ee-41b5-401d-a65d-6ab0c2b3da73",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f825168-e077-4ccd-ac69-01ca1b531e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2af202-8e67-4fb6-8468-8c60d461669e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0c89e5-799b-4a63-b9bf-74cae79725e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e906c2b-cb2a-4961-8219-b093e143d389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92226939-c11b-4209-bc91-16cf84c14304",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00fe000-f482-4884-8c19-e6bdd2b5cece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f449205-761b-45a4-9131-2dbc8f88d480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688c1280-c7a1-4a83-8223-7207b287bc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2fcf487-401b-473e-980e-196b317647b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617c3c81-c93f-4c9e-b81b-c9f6f8d56c01",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244153b7-97e3-46e6-a543-c5d0c0fd964e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a490e1e-9e25-4941-bdfe-cf0d3fc7440c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5a11c7-3698-4b8d-8d0d-a5295c613af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa51130e-0990-4360-94a7-ae5abdae17c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10082ad1-68b0-40d4-917f-fee7e23764f9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faaf905e-945a-4a0b-87b6-74d09bae27a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef567958-cf68-46d1-b644-59524afea10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d419cf4-1926-4d08-ae10-ac554271c6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dabeddc-7831-46af-89c2-3da1aedca68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7713b1ca-506c-45b3-bfaf-b7f2e9c5ea57",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9070c765-23ba-4b44-b9bb-6f24fc871bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db05644e-c1a0-419f-935b-624b2a9d7745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f23209-766a-437b-8733-d4c82b59aef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e264547-c4ff-4d73-9307-339581881cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7d4433-1d15-404a-ac78-f703a539da16",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0606f86d-eea6-42dc-83f5-7aa2b8e93b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e9f22f-c4e7-4742-9455-ed1e0716a381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887c1cf8-5bb8-45c8-b8ec-e52a2e1e3517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14e7bbcb-61c0-478a-b6e9-1c7111cd3fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0fa393-295e-4bb5-b1fd-3532e7373d9d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e3017d-8b8e-4303-8d48-465888ec0c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ff985b-1061-4bb6-828c-645136afab91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7876e30-e55c-4b71-9c04-aef985851ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb38b6f9-29f1-4a6f-8f7e-96f0e6eb5409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a801683d-4288-444b-9518-0437d344da9c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c44acc0-a855-4bde-922f-9a5601c2a4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c63561-7444-41fb-8114-fef5b65df6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fcb8b1-c236-41a5-aef5-454e505931b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6412c71-c357-4c9f-b526-8c89ab0b9fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd6c77e-fbca-4bae-8270-96c37707697a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b17f963-98b2-471b-92e3-e305345a0c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6682de-15b0-4365-8a4c-d003918c367e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb02729-dd04-4bd2-ae14-c5a8240e1663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "710f4516-5eb9-4cd9-b625-39a8178f5f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5b4628-d26e-48dd-8b60-03345bc32447",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73efa564-51d0-4398-8b51-3b9a66713301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a74d718-6900-47a6-bbed-7da3959f61a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4016e0-75fa-4aa4-8afc-592f98d30f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a142f745-1b82-4609-89ba-eeca1f2db6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2302c5-9304-4622-8714-f70161c9dd51",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c51e135-9ecc-465b-9c16-5b69218b3704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c2dbcd-134e-4f24-ae84-f8b83fb79ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d72aa21-da8e-411d-bd0e-03c87d3e128a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "290a50a8-99fb-4d8d-8423-56786a3c27b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60c8f10-88e3-4d17-8f1e-bbf09aaa1bfe",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b07e71-b095-4835-948b-9cf9d3d74692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f114d4-6def-4eb5-8e37-fad54e2b2814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec6cf7b-355b-4356-9b09-3453e5bbfd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1638998-213e-4ea8-8357-df21ee182c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bee98eb-5312-4321-9dd9-ce4bd5366787",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28be31ac-95cf-405e-b7e2-8833c3b6e87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "76d5fbbc-c433-4e98-b363-cbf2680f14e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f1e391-0af4-46ba-ad91-eb68b1cf5aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "70439b41-3034-4816-a673-6d03e3f4c5d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "33a04068-f33e-4829-95da-d43abae2f07f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f39106d-6b29-40bf-b1db-4e5e301eb2c8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3860150a-dc3e-4b9b-816e-c46c0d83f352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8ccfd62-8d20-475e-b352-ba1a22b79c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e827fda-6ecd-4f41-a4c9-0cc060f088e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "cf87652c-83ed-4ccc-8be3-2e42ab7eb7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f2df5a-9c10-4695-95fd-62ef863a9f23",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6c43dc-380d-4a19-9aee-82799aa907ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "460557cf-e784-4ed5-95d8-743246d37f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd0f3b0-9e49-47fd-ae7e-5f7a6fa0ddb3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c6f8c070-dcb5-431d-9888-efe6db7c9cee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a00ba87-9153-40ba-ae52-9b8f1c43bb68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07d63c23-1114-4027-89e6-b44d7624cc5b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40691695-fe5d-4ac3-83c8-e6f8036abeea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f04aed3-f58a-4b5b-bbaf-b171673e39a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "db440dd5-ebce-4847-85fc-4d6adf3bc696",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87bd2b52-f4f3-405b-9c58-a6db2bb29eb4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a8db4ca4-b942-495f-80dd-a6547f4ee469",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7f4e1f2-4264-4cd6-aea6-776fe2f261f5"
                }
              }
            ]
          },
          {
            "id": "ee34373c-c0f5-45cd-b522-5ea4e29f8298",
            "name": "Positive Testing",
            "item": [
              {
                "id": "283e5639-9e37-4b98-a14d-b0a254b316cc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea8bb48f-05c5-44f1-84d4-949fbd107e93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc963ad9-16cf-4e80-b8b6-b356d5f832e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4373dc9-1efd-4cf4-9a89-77fcb8acb2b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f8bafc3c-8ba2-49c7-a357-092a50d4095b"
                    }
                  }
                ]
              },
              {
                "id": "0f83abda-f8b6-4ce5-9c48-1b1b431c7c13",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "092764da-186f-42b6-a033-72e17c6adfba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3bb19c82-8c98-45ca-8a57-ff2bf2745f51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0eb09f20-f40e-4090-a348-07deea0b33ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b9f6585c-6586-449d-9580-c6236e6cb596"
                    }
                  }
                ]
              },
              {
                "id": "b269b8ec-fe0a-41aa-9f85-e609a85cd38f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68485467-09ab-4d95-9108-03a54db9b28b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b1889ca-61b7-475f-850a-ddc48d86e333"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b90a6698-4d1c-425e-a237-7cefd24b687d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cfb74227-f5fa-435c-bb71-f35fc63d525f"
                    }
                  }
                ]
              },
              {
                "id": "36c96684-4a71-4d44-82b0-184e8929cade",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1925f619-6794-40bb-956d-686fe000f271",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49024fd7-51f2-45a2-827d-3ee873b934a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0a6ce63-0681-4760-88fc-fb94e62321e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "62d05694-ddd5-4c3d-bf62-86791e0d803e"
                    }
                  }
                ]
              },
              {
                "id": "0980e2b8-c180-4fb6-9f0d-8ef925705e53",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36577dc4-d545-4dce-b0b4-b0e4a08bac67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40d82ee1-84f4-4629-a27a-5cce14f0d0cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28543312-ec70-43c2-a6b0-a9d6804977f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c39c9d2-ca78-49e7-b59a-41a7e8876815"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c35c1262-9f7a-438d-883e-9fa18cfb021e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db0a8f73-563e-4917-b458-20eb3bb6a5ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ce3af497-dca3-4b0b-915a-a9726f821355",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ae05e602-1d52-4ad3-88f4-9a8cf931d486"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "171f3c43-4974-4a41-9f44-acd5ef76aac8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e8308af6-0b19-4e37-ab0f-c09299644f6f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b01f0119-2e4e-4b6d-a73a-c55b9de6ac2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6cc6ae88-d7fd-45c5-b7fa-46c09bae7d7f"
            }
          }
        ]
      },
      {
        "id": "49a34556-ce87-4c79-967a-e9da818316f0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "625e04f4-dba1-4363-be64-ce2831f4d5a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe60d9a2-fca8-414c-bc5a-85b837e20c8c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2660aba7-3d3a-4cb1-a946-cf6017113a2b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030e019d-32e0-4ea6-a723-79220adaf387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0397902-e467-4ac3-9a30-4b1050c34031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8d5263-fae7-450c-b617-4edda568464a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7558c0a9-3cf0-4761-aba1-f78af2077c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb149ee4-9708-4619-a1c6-9fbbf8b41313",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "242d97a0-d6d4-402d-8c9d-1a3a457aa520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495ed1f8-fdb4-4a4e-be5e-bfd5da05496a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b85e5f2-7916-4333-a1c2-3bbfb9988641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe451dc-4881-4549-a7ab-e7ad5c66289e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3785c9c-de33-4f49-9dd3-b9c9fe8639f8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de4b030-e406-4dec-b36e-0797959cdaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cadfbf-a11c-4e98-b47f-0593750b173b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7619e469-c0ae-4e08-97ce-afdc15156b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d338193-28e8-4ca1-8440-b8290ca02c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b343156-27a2-4a68-96e2-c8c1fe577d52",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd4c68a-b6d0-4b9a-91f0-c6d9652f15c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be85063e-fb63-4d21-9eeb-bbaf4f79327d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99edef65-09a6-40ea-bd74-4e562020e820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "572411e7-fa2f-41cc-81fc-f51f0cdfec7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9a79d5-4ecf-4232-81db-860ed2024701",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f3b057-e0ff-4843-aa6d-49ef807fa005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ad4934-3e94-4819-9120-00ab719636fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcecd76-c323-4466-ab02-d1ee61cb79ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b538f6-1ab0-49b7-99a1-bb56c07e60fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9be3b4-712a-4628-b012-67e9b158b562",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b0e880-7c9d-4d68-ade2-ceee0bd2cf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5bb624-c9e5-4e7e-99d5-b2e2d3a4b236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f601d7-f973-4b8d-9054-3c7c0cbc5397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29afbfc6-43a4-41f3-b42d-a4911ff4b048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3b30fe-22e0-4fd4-b27c-eadb19362d6d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a713f5-027e-4a75-8621-35a77e93b109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b300380b-0554-43c3-b7b0-7b213e9af3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03010772-107a-4762-b184-b2de088ca7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb78c85-9e0e-41be-bc71-2238dcd46bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406b2e68-79c7-4051-8038-66a14cb210a2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bc4867-a35a-4988-8a29-37b0c833cd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c1c2c4-7fdb-43a3-8f6e-a013ca9def5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8620b2-0f40-4972-b9aa-438b1e92d537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3ae983-468a-4d0d-8e0a-3d4aeed8f0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67925891-cd1f-4736-a1e2-5a9d55bc320b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64289215-24a7-45e1-bc17-52f46b743e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b46a28a-b31a-473a-aea7-2526ded35a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64499a73-764b-4bd4-acab-3f5b7e5ea088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a377d946-5dde-47d3-9c43-cfc81f3bee9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516ec079-d5d0-4af8-b8df-59a1ded8266a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d87619b-3e7c-4c9c-b604-cf500b0c9fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe43098-5fe6-4ab1-aff4-9fdb45119790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ad00ee-46e9-42b8-b713-9755d3effb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c99533-87d3-4d1b-8b8d-96da6889caa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ea3cf9-66eb-4394-8d13-161c6d7f9aae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fba594f-6665-407c-b3d8-8f50c4cf7e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e5ec82-6c8d-4925-86af-c667d6a07c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c609ac55-7c81-4f03-ac81-ea980718dedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a91fa46d-5fea-4265-802b-04d5bc97ecf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1484c391-e98a-4542-ab39-ebe5fcb945e8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba8cf74-632e-43e5-a9a1-44ee283b592b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06d0b06-2ac0-4d7a-b1e5-95159a0a32ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9411a5-56ea-4222-8422-c66713ba1691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84744baf-22d8-412c-a0eb-1c89978b57ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5694dd3e-6ec6-4c46-af70-012d15565069",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d5e890-3ef3-4470-9eb5-486b3055cfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87cb1c9-21d3-4225-91d4-f9ca6ce8157e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34682d52-fbb8-4b89-9a83-141f07900923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af7eb207-9e02-46e5-83ae-5d6b513d0b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ab5488-51d8-401f-bad4-0570cf306afb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f1132a-c07f-4cd8-8648-7128df462216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c089437-73ed-40c6-93b5-ac6ec2d95d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe468b3-0fa6-46aa-a763-c5f19679c077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "895f11b8-92d8-4881-bfed-c38206816d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa824756-591d-4af3-a922-1079585e073c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "571e4c86-bf6d-4900-b3d6-1925bd56f2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c1b6d7-efd3-4a77-93ff-4deee0e536fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141cb0be-cf29-47dd-a9b3-412622daeb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c30a950a-aff0-40f0-8ee9-7497944902cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0acd84-5649-42ce-afaa-4990fa21f1d0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992666f9-5256-44d5-8953-8e63846d9902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24eee142-85f3-4e1c-8d82-08a352d9abb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2afee2-c12d-43c4-aa02-5882e06698d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "52a93e1c-f40d-4738-a2b4-a349c46bb0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a144a56a-c22f-4d60-95ad-6ebf6d9ec969",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c60351-5451-497a-a7ea-b856e94856c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39da3922-e798-41fa-a1a4-cc6de0aeeaf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284f2f83-83c8-4609-9505-ad762942a16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7d9ecc-7956-4ca5-853a-db3be6d45def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbdeb28-e9c1-4ffd-9c93-b69bbd8f450f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfee16c-54c5-45e9-9876-0dcb0830d67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4d94a7-3137-490c-b9e0-36a86445d586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d91961-ce2d-48b7-9c82-fca4142a8e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4df41066-839f-47dc-944f-4cd266bd875e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600e55a4-6de6-40da-afce-e45a5ed0465e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf928f5-ac34-4644-afb1-a6a5d9ac1d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddbfbf1-dd62-42aa-a9e5-3034a9c9c9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b3678d-4cc5-463b-a890-cd147265973c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee883784-64f0-4ba2-b70c-4f6ecf3a1946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2babf2-4f04-4bf0-ad89-a46b65a4a4ce",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a10f30-0078-4aee-8495-b099904ebcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3aded1-d3fe-4576-b1ff-f374a49d32bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3e8577-54e4-49bb-a6b7-08fdc946a29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46cca766-453f-4a7d-ad91-d6fd3341fa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839ed153-df08-470e-b123-fbc2d25bc53f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d7d573-91f0-43e6-aa52-59bbea011a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a28483-5d7d-48f2-9f1e-ed1f35898e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba85667-ebdf-494a-8531-6120ae45737c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9b14d5-9d90-40d6-98a5-640c6f23662e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fc1a3c-026c-4be0-b144-f9bdeb3f2847",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5694ae58-c5cd-4230-9974-911985645cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2767e038-94ec-4e99-95c0-9c498cbf2a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b211207-c09b-4070-a140-e3ef4d2cfef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb49413-5b76-4364-9d43-aef94db046e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbc263f-dd61-4b52-80ca-523e5821b999",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e0d4a3-2856-458b-ad78-a513e1008111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e321b05b-9da1-4f71-95f2-ff239f455016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1925ae-9f65-40bc-b43d-dd0f14320c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aca4143-9b26-4f46-ba37-0450e4cd5dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5983ba15-a97d-4fb7-a051-02c281ec1519",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bc76ea-c3f2-41cc-bbcb-8c3cf25c2038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18246b5-804f-41a8-a1cd-1964f1a8e7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273973b1-2810-4592-8e90-68793310cfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04408797-a061-44bd-b241-131a13a29cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412d8018-4771-4b7a-972d-bb5818735cc2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7f82ef-2441-4ea0-bb6a-21ae845edda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dfd02f9-7f67-45bb-87a5-6fe7035f2f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351dbfe7-47f2-400c-929f-34fc8030f358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd9f333-bf79-424d-8710-ab56e517455c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccf2e99-a772-4864-a0df-5393c0e3f25b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e695f07c-ec08-41d2-8faa-bf69e62b7837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b51e80-1b74-471f-b729-61aa077a0f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540b7ce7-917b-46b8-83b5-41e5aadd62e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e11a938e-44bf-49e6-80e3-b98c68e3a3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d426f71-f86f-431c-82a4-33582e510cad",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f7614e-db4b-45d2-9290-84a6cd991420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4ad30f-608a-4b79-853a-ac3e671d5ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea03bdc4-73d8-4579-901e-0d55f45b78b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee71058b-e27f-44e1-9552-0878ac388841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2092f69-bf9f-4964-ac64-5fade7928693",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8bc4f9-d87a-449d-b8c1-08c664846d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e3caa2-462c-4671-bd59-ec775d60eaa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a96e73c-62a2-4892-a511-4d943d9732e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9d1393-1bec-4625-94be-119728d1ef1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0982751-71c1-4662-8f50-c0fa599451de",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f03e04-3612-4a58-9eff-77f7dd7deaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbdf76a7-581b-40e8-961d-3b70e425599d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fa048d-0010-4f7c-852c-44491b6b60b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f331d564-cc7b-43e6-a91d-57f4181013d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0422455-47b6-4a7f-b118-d9a74a5bd1d6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207150ab-8608-4cef-b918-69b1ed42e909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc40d294-c9e4-4024-af37-8a86656d10e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06e1737-0af9-4cb4-9f19-a7dbda9cb264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "870fcbc2-55dd-4bd6-bb4e-236a95345416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8c2f6c-46ea-47e1-8b0d-64034243b2d8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb572099-f5a5-4839-bbb4-1c0da2e7a565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0757651b-3fa9-4811-b09c-116a951589ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cb1d1b-f0fa-4373-906d-de0e8f7af2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef2a875-9153-4a54-906c-3b21754f8b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b198e78d-2f39-42a8-8cca-9fab8d739fe1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4651a0-46c0-4c01-9ea0-dc681f10db2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09324c88-bf0a-4484-a2f2-1ae62f98c362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0365da-0189-439a-b049-9d13e510cf01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76285d1a-d7fb-4b90-b7fd-a72df80dd91a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bd96d012-4363-41b7-be95-cccc261548da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2af398b0-71af-4676-84fc-dcd46259a5ab",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6271181-896b-411b-a187-8dafbbc40c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c052381-989a-49de-99b7-edd32f01c900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4687eb0-9986-4ec1-a234-68363b3dbd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85fae977-e303-4b58-b7d4-b2683fec29f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c7bf6b-d03c-4221-8e59-5c73d5c57c86",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c7d039-bf39-4fea-a12a-83c086596f7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6d1b35ad-7cbc-4363-8da5-e28989937bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b8dfdb-6015-4a8c-9d98-93806e32a454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10f3b874-cd66-4304-a5ef-45274d9eeebe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20f584ba-ca37-49fa-a7db-846d0fa44e84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f313f44-0531-4fae-a906-16e93ea6b8dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5661d756-e76e-406f-9081-88e80b6fc948",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1be7c1d1-616a-4009-84d4-28e4f48785e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37eee912-6f48-4215-805e-8dca99b37993",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42347abb-87f2-4de3-94de-6a687c030a15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3430fdf-c044-4fb8-8ae0-64448f43ba62",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1afe4c3c-5827-45c9-8c25-8b959eaecff9"
            }
          }
        ]
      },
      {
        "id": "13c4db76-637a-45f0-8cef-41f2e09b1173",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "afedb881-7734-465a-9329-52b722455c08",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d56483c-4ac7-4771-a222-eb8ff8b89a58",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0afb715f-ba07-4451-a595-a060dbf9ddda",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759afd69-528d-4c9c-b9e2-db0b467f3c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b559b90b-2663-4591-957f-a700314877c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b73e49d-7221-44db-a470-08120ad81d92",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a230aafa-a257-428a-9dc3-799be5d51d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ed07ff-6b7a-4f05-ab80-3c3e60a98116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a832f0e-78a3-4808-ac47-252cb2136796",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844acbe4-7a08-40d1-b5f6-b9b2a985cb23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a032f47-553e-499f-8bc1-bf9310e670d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b57086-b1f4-4fe4-8118-94b996999710",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b4e81a-c17d-4fd8-868e-f5ad35155fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ecc699-66b3-4751-9209-e477f774f626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b0eacd-1326-46d7-b624-39ebb95c278d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a21443-5df4-478e-8dfe-ba2c63871071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec4a97e-d22a-4f58-a7d5-ce0e9825cf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d95a22-7ecb-42fb-b6cf-727744adfc7d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320815f2-17bf-4950-afff-e816d61a80d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c798f143-2e1a-4c45-908a-c88dc4a5b2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb54910-b9c0-4cb3-882f-a5fa1bd5ce19",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ca6e1c-bbdb-45e6-89ad-b783dc4d1db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b321252a-71d7-4970-8621-15a6e1a60a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588284e3-ceeb-4fc9-9d07-630f173901b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c782d729-b07d-4a23-97c4-b4a3bd460622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b213d3c-0b50-469b-a658-f5a517b463a1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fc9bfe-6399-42a7-827e-660b8b123901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49b5aca2-f8ec-473a-a7df-fa7b48e86109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32c2d86-7311-4351-813a-8ba8a5d8de5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d02456-bef1-424c-b8d4-701369821102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6860c58-f56e-48e7-b1bd-589972c743b7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f271ee3-ae68-42d7-9595-361b1b6129f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "101f6381-fa10-42a9-83a8-4b4bd24de6aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e8ae7c-1790-4062-817c-6e39f1e7a3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace0a2f6-992a-4442-aba0-0c80141f09c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a818d219-93db-4c06-b58e-a9bb5f91344c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a95eea7-bd30-4b66-a113-7840771fcf1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6621f4c1-d34c-4a84-a102-20b158348700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f353a31f-7910-4d20-83c8-95917b99835c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6484ed1-8397-4ef3-a334-459ea8450b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b4af63-e375-4112-b2a2-bb5db44be625",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a24df2-1077-4d08-8e6c-00911aea5cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "654f27eb-7e93-4e9a-ae43-9b386d6ef7f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932f576e-ff97-4f56-8d92-cc380dd654f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834871f1-b6da-47d4-bdbd-b6949b3cc964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8081583d-e827-488d-9684-537079ca656f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a7629c-7f76-4ab5-819a-350536e8f014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4241a6-9f09-48e0-8d9b-f4b15afd43ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f18d6e7-037b-419c-ab92-3e03dcd16969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acf2dba2-204b-4531-bd69-aa3000a3b7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b785db-2fa6-4b28-afc1-ab9592eb1c3e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd720afe-bf01-423b-bdd2-f34fab005e47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4059ad5a-ad6c-4a19-bc8e-e11e1e2d8b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998304a9-834e-4042-9238-9b06786fdee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf52bf5-8e0b-4e28-b8ba-2145eeaf1f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1918765-9954-4a8a-aaa9-cda572ac1964",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f938e0fc-7960-4b47-86bc-7c0ea19842a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56ca3d99-2e5b-4e7a-bf58-c811e1638c0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f7852b-7f78-42d8-83f0-8b37d2f06549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53506219-e5bf-4d79-bf8f-fbb232ed7502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881391d3-50eb-44e7-9d19-7a8166fac5c8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7dc2160-d35f-41d0-bf4a-34ae0a7cc168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e451cd17-5dfd-4a9c-bbb2-1cbaa247afdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec683958-7183-41b6-9c11-57afb1350608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01aea91a-3b8e-4d0c-a7e5-a332fde34562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6ed979-0272-4593-b807-d4dd551f9c19",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250cfa23-b77a-4c2a-8447-2cf45c1eb652",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f48d37df-2cdd-46d9-b588-8681f7f43be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdfa2bdd-0e5f-492f-9197-ad5fbe64da8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ebd17b3-9721-4ccb-9467-6e19f46c7791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6a2abe-9f16-496d-82ff-0db9c2907257",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18590fa6-0a76-4444-9bab-41b72c0739d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959387f9-0aaa-4106-805c-a3f22522b86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2e1810-140d-4666-bd63-9d7e1e3529a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a681bd71-ab86-4b62-ad29-c5737fa7cb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593277f2-350b-4804-a216-7df0589be3ed",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6e8cac-9e9f-47c1-8316-d3368aa87106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4854dd62-2388-4f84-970e-d58ece1aed71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bd0a8e-738e-4a8a-9dbe-41327745344b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee22c584-7f8a-433b-be55-0be8217045c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8850c1e-d50e-4df1-b41a-d74576a122a1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2fe646-74b7-41a6-975f-cdeca80f7967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3381a08-3b56-40c3-ad34-002f1fd6889c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f53ebf9-36bc-4a4d-a132-7508ea6c4feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba820c4c-e9af-414f-83dc-c5922cdffec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d10c42-b194-44d7-af51-823eb7593473",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1caabf30-cd21-4130-af1b-b2f9c8e12115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d54fce-93d2-4aff-bea5-234ece55bf1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90562e40-8aa5-4f9b-a31f-7cd232567eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249a9962-8c00-4a74-9e42-6c05ce8d8a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2aa8a43-e707-47c4-a7c2-81f98f68f56b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6145e4be-52ee-4056-8e49-6c82bc2eb99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9d11d8-83b6-436a-a769-421e5543926d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92510ee4-427a-42e4-8a38-ca3634a6bc2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947706de-1417-437b-9f1a-709d332393ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b68e28-b7d0-4b4d-b1a3-35ef5a284be8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f415c8-5a5a-4946-b7aa-0e34749b4689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24393e9-91b4-43e3-8520-a94ecf7217d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b922a163-54da-48f4-804c-956ae45a0e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eff2338-fb8d-4c35-8c46-20b6ebbac7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a28dc02-9d99-4573-b35b-94ed571a951b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbdcd72-08f2-4522-bc4e-53becd67544a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde5e0ac-ba5d-4e5e-a80b-654d7d9c7a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0108663-7b18-420c-a2e2-61454ea34006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684e6389-4231-4f22-9654-0bcc091c4266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65b0148-1511-4b71-b3bb-beef54660ab3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1136aa-cf61-4e3e-9c91-922a4f0c0ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee97adf5-6569-4498-a790-3c1eda56c82a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d2293c-f30a-4c40-b05e-427bae873833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b1b369-92c0-4b7a-8322-0966f22285ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ce05df-0ed5-403c-9dc2-0a22cd4b211d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5bf840-8721-4a75-942f-e52b505c9f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8554b4b0-6971-4600-ba74-24fae1365e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39630bd2-109e-447f-a11d-c20011327041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56cbdae7-3d6a-4dfd-9917-ac3514d8ff87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710939f9-fdb1-4d04-a5fd-8d45076f0279",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b51b65b-286d-48e5-89b6-c6c72e8e4dc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "096c2b5f-aa31-4ff8-8792-762f6b67659b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad816ea-675b-4da1-8811-6ce778bfe616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bf53e5-7efe-4261-bf16-4233962e9d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8b4801-b0b8-4d20-92c8-690fa658f437",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2d58d9-a10e-4bd9-8d9b-791cd22c305a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f313130f-17c2-4d5c-bd5c-5a0b9e468ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00c6ae4-fb3e-4a56-bec7-011a57e52258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763c12ea-4433-439f-83e1-cda83ae828e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0ef1dc-804f-452d-ada7-c3169381629f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18e218d-5a61-4e09-8640-02d517aac8ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa1b2467-1458-49f2-9338-c8d0c0152dc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489966a8-1014-49cd-a995-3f30ebd0cf19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e8e1d5-90b5-429a-9cba-b708b09a5766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3c810a-427e-4d89-b416-e47a4cb210a1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e5555f-577f-49d1-917d-6b3db3a6bd4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d4b7b5-a51a-46f5-9afd-c0117fea5125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cac0267-f94c-487b-bc21-37438e99bc7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37397c61-0dec-4ff8-86a0-ec4e37b1d7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce43c18-9ef9-4563-9f57-55f78ec95044",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3ee673-c5fe-4d2e-969f-e60dae01dbcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47bbaab6-ec32-4080-a433-6a608ab31545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f60fd9-88b8-41ed-87e0-85ac315f68a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4d08ab-b87b-405e-bc4e-22b9f75e5dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07acd63f-8e2c-44e3-a83d-11cfac8437da",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f07b1f4-d8b1-4223-89eb-39825c62bae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e43d030a-3b80-4bcc-ba66-fca80b28691b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "292e28ab-cdce-4700-abed-16229879d6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99ee962-c22c-40c7-87a8-0124a267f249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483d4965-bc7d-4563-ab08-49e11e6003db",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f7091b-9389-418d-8994-1287c8dbcc20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1260bf1e-c729-4e9a-b417-a3e8a58c7b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf658b8-1196-4bf2-bf25-e1ebd3e84213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7507e903-f933-429d-90b6-0c4633a6fad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718bf3e5-0132-4ed2-a46c-f2f8288a2f80",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ede63ab-7170-445d-aaf4-0ebcb068813b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c58a39d9-bec3-4c5f-bf02-e54eb38bc557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2559e7-b89c-46d1-a205-26235ce785b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333620b1-1bf8-4fd8-ae3b-bbe81e86a373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9a3f5c-c354-4749-bb3a-ccf9aebcd1c2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b24902-1ef4-4de9-b41f-5930588011b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b6bd20-b637-49a1-8f92-ed205e1b0626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb6fbc1-9b2c-478e-bcb2-025417588a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2aacf9-d75b-4f0d-a353-115e5ecbc0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf05414-173b-4aec-a5d9-8aa6f7dc2fd7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6fb16d-bc12-4ecb-b1ee-35fb8a418d9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55deb00b-e4e1-4353-a1e9-28ff66acb8fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de89cf5-3a1b-4ac5-894d-71eac0108ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69b4832-b5d7-4d4b-8de5-c6c2bd4b15a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de6b0cc-5e0b-4b10-a3e2-8f0b24bf94d2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704e178c-9dbc-4900-808d-81486fd04869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d9285e2-ae12-4363-9ae9-f31164882e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6412118-dad4-47ff-820b-e6f3bdbdbb9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f425d09-ab70-4edf-adc6-d2e1ec5c0cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66e8ff4-71a0-4824-b30d-2213827d53a3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c913585-bbe3-4e7f-a980-76c761f79a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "118d51da-beb1-4a32-abac-a76d76e3b1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b089eb5-ae4f-47c8-87ba-8f34818fb3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992897af-cf68-416a-a5cc-a80495295dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41e3aa4-f405-457c-8374-96edb168f735",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce140dad-e5e9-4f2c-84b5-97c2b39c23ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd12a5a1-28e6-470e-a2de-4da9f13b5c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "958789f3-90f7-4b34-b7c0-b02fb657012d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31fd215-c719-4455-afb7-2c627a350a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756d7aaf-b3ad-40f5-a56e-2606a2fdaac8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af862a58-3001-40fa-8b1d-db5060c80c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591d1b25-9e4a-463d-8db8-91c8cfa39867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676393cb-1122-4029-9e3f-4cc8d28981d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d7f788-9b1e-4f36-a9d8-d17c2806ba38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4748ee-7e8d-4606-a326-0c4d59a314d6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09e4dca-cb82-41e0-b9f8-3f9e22bdcef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2919242-b920-419d-9282-d6c999bc06c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1af1aa-caf7-429e-afd0-1b185d19ecdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e6cbee-0672-4ab3-bd90-abd326dca9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8a8290-7314-4122-8baa-13dcaf6767c4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec39a28-7bfc-4530-b2bc-645dd588337e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8070ceb-07d7-4d85-bc9c-2fe7be953cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8b7e52-b8a1-4f12-8777-9e5b8cf87be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bbaa24-8353-4e0f-9add-e8931e8c6adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c0b536-c2ae-4afc-9441-1dc0268d945d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab60bd14-c791-4a1c-8a9e-6060aa2c415d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60638dde-69ed-4088-a518-4eeae7dee293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e8e91c-6418-493e-8900-23775f9d60b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918552fd-f7a0-40db-8a71-616e73ef3cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5e3dcb-9c80-483f-a329-5a982fd4e407",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ace465-33f5-45d4-9178-df8acb0a03e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d74c4ab-14a7-4b96-ac7b-0de45cfc4578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6ed32b-caad-41a4-a847-4e94dea5d295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "549c0809-534a-438a-9423-23226dc5df93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12eb74a3-3ceb-4dfb-b3e5-43ef7f7fb19e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d2c07c-224f-4a3d-97f9-1f6674966433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a8448d-2a83-4276-9ceb-7fcf662fae79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e778c0ae-d0c8-4022-9c3f-de582d2509fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deaa2ae3-2626-49b7-8a8f-4ac61dc7cb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7496a8-be88-438a-b680-3256ec3911d5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e20579-8511-4b37-9906-417ec7f930bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43f1e17-a9e9-449a-83d2-481a85e014cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3a4823-472d-4169-9042-ce42b8ab1049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43d6670-8aa6-4c7c-bad8-56c9d9adc8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3db28b-2169-4ab1-ba34-e2896dc3acc9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6348de-2671-4ff3-a988-25e62f35fd2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42bfe29d-2707-4c65-9ab9-86e86382464f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b3b9ae-8e0e-4984-86f8-849aabaeac23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b502c97b-7f91-4aaf-8ef8-2acfcce8cf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7c53c6-0b37-4dab-ac3b-f6c33ae29011",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab39d94c-020c-4338-8682-265d110aa984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab608901-04e2-4ece-a163-92ea206fd8c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8151af0d-23db-47af-8d4f-b255213c0902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310a33f8-e5de-467c-8740-78be79117288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17869723-6e7b-4345-b9d6-2422c8d49a9e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24c6fe4-2991-4e12-bc39-56db2d0e2fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e0ab3b-dbf7-45b4-bfcf-4b9e502654bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e1f39e-f4f5-4d40-aee0-f9b1a6d1e2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4acd744d-0a90-4e1b-abd5-3b01bc8735e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b5d2e6-c00e-4bdc-bd92-eababd9324bc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65d7448-db77-4f06-aac7-51af97ddf281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e162e5-9cfb-4863-a5a2-0550edbc9141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45983488-8877-42bf-9b34-2f0996e7bf53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6621a9a-ad05-44e9-90dd-3913c4e90d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134ae378-ca54-4bb3-a47b-b37daf418e21",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ef5b36-93a4-496a-8345-2dedf600240a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3597885-a596-489e-a56a-653e06d27b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc14e89f-4b5b-4508-97f7-47f698539019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e396006-691c-4743-958d-8fbb9aa5436c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455e7f10-fd95-4554-af4e-5665bd5717a0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db93386-7f5e-4322-aef8-7962f0f8eb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5bf459-a62b-405a-b689-a6234bcbec03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d1c2b0-50cf-47c7-b236-341a4115aa35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1816079-fc5b-4aac-b8c1-5b512430ae32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee167a8-ee4f-46e5-ad53-de034d2a8df4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75beba7e-45d1-4559-a807-afe9e6a248d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373cb06a-0f4a-49e8-8801-e42f8819c219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152cbb01-5d29-47a4-bb40-7e98095adb19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc47831a-c9a9-466b-99b0-ce5c3c6bb9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ddc84b-4284-4a9a-86cc-91432500b572",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d061a2c-bc04-46c6-a157-c73ba322142b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c7c96b-8b5f-4061-91fe-cfcbb9a77e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e29336-5402-4ab3-992c-06ec96e6e344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9a1616-0b70-46f0-bb62-1b1fbdb1f0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d47004-100a-4964-8bb4-b4fc10b1da63",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476510c0-3dae-4e73-acad-d772622839b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618180de-f049-41e2-a239-ace230ceb711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55211b3-8624-41c8-81b8-41960724bb9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5623aad8-592e-4045-a203-eefa85edc035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e77e31-260d-4e76-975f-3d73ee70cde0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1558da-55fc-4ca7-a559-22678d337c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e94007-6e3c-4264-adab-b9079f52ed6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6ae828-90c0-43f4-9a6c-caf0aa4bb4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431e89d0-231a-4787-9566-d31a6a778c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ba2190-0698-475e-b9b1-eb97447d4e7f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640c6abb-590a-45cc-ab86-b485be31c113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f535d598-c113-4e3a-97c1-885cb086f3e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "217ac740-c39e-4653-afb8-d78bf2683446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef6c189-b084-465b-a2a6-05f900e33563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587b95e4-9ef3-49be-b625-ac0397ecc747",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eadd2be6-0eff-435a-af08-ae1350fde885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f45a77-0e94-4588-bef2-a9df85c2edc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb381c69-2df5-4c7e-a05b-d56154865e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45547c2a-65a3-43f7-ab12-3a5c1f4c84c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a156409f-a066-4f92-aea2-9fa7e9d5abbb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2470430b-efa9-4f16-af95-69fd0a8f54f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a143d96-38f4-41bc-ac83-530554a69577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98316cad-ab27-42af-8c29-1edbdf6db608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17280f14-5053-4fbf-858e-b55dcc2ca98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfd34ab-6e67-4bc4-980b-fd15d0dc5049",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefa6693-eba6-441d-bb38-b835cf6d8aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b957f326-f80d-4f7e-bf32-9f86f4143757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1831d07b-1b34-4458-bf16-54ef5a6a4532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b9722d-7344-4d7f-b742-06d447ce153a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50897884-c89f-4216-ab3b-821522699b02",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c49e5a4-b6dd-47d6-aa57-8500cec9d105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986069de-4b3e-47ea-9e49-c707e69d99b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "976eeb92-d859-4bf3-a25a-30364b6cd4f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681c86f5-e7a3-43ff-9835-d4b5a6fd3508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56124517-fb3c-4c11-8d69-f044b5952b55",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9be27a1-dd52-497b-8d0f-47915b12a279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54518a65-7f11-4523-95e0-24d39e726705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cc0d4a-aa46-4af7-9389-c3fb5a03d062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab04b9ee-3c63-48b4-bc47-fb981a1b0a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0fb743-64bd-4eb6-90c3-9e182db1f782",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db3b013-0454-4a55-a7d2-cd28be761b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ed6cbb-8287-4e6f-aa2a-f7b4b82602ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b729236b-21a7-462d-995d-a8d1d8a8f8c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0699becf-a0bc-42ca-ab5f-07965d5dda75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cc64ed-6af1-4fbb-8a68-3d0b681bfd42",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba9f855-aa5c-4645-836a-fb0743d29f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a681541-ec8e-416f-baef-5bacc7bf9e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fedcad-0ae1-41ee-bafe-882635333cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b26fb5-baaa-4e15-9e8c-6cfdba170f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14a58eb-1685-47bb-a5df-4f73b242dc22",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e348506-9095-4b1a-a350-27c18bb16758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5b3d24-056b-4845-bceb-37f66c376aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1084ae-a1d6-477e-bbf6-bd108d59f624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5d08dc-8ae0-46b7-825f-504b1155e4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df96c949-9977-41cc-b195-dd96c2ef3f55",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f6c71e-e9e1-42a6-800f-883f9e23c81c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9f5eb2c-2e3f-41cc-904f-7b95673524d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec14766-86e1-4092-bf61-0b60cce7a907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f630f299-5104-4ea6-a8f4-764b21e48368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22196a85-7bff-4df6-966b-c0f17624a4ce",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df58708-fdb8-4eec-b13b-1f025690033e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0365fe4-713d-435e-a267-990202b8bb8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51024cec-a8cd-4c30-8f51-0bf197170079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223cf2b2-8f3d-47a9-90e0-ae19d9f2170e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68a5c9b-eba7-4927-9fd5-deedcc2ece13",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e10136-77c9-4ce1-a687-922a52c41a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09851b3c-7fd7-4679-99f0-f6fb0bd0bca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae95fad-f4c6-4655-944a-66727718549b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be58ba8-4e16-4c31-9c11-d451cbeb518e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f8a628-f7c7-4035-8571-ce6ed793f628",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902cef92-4da4-4e9c-bc2a-d1f8cd4d8c00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e184ff6-32e7-4c05-8941-f70df51e47f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab655864-ffcb-4517-a642-a776e8ee01ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b01e9d-f583-49a4-a6b6-a33765a83e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222327d0-5782-4cf0-a5db-39a96459e15d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2af5bec-4122-452e-a2a6-4de12e1d6fe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "829d847a-ce54-43de-a74d-65f50228e143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "729b9fc3-c32e-4e65-b325-991a1dce9cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d57c549-5620-4888-8040-9e250b2064b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0979fef-1800-4202-8e16-ea40b64dc871",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2940b31d-68cd-4ed3-8920-6fa4b661447b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e83f00d8-11a7-4290-81b6-12e6fc9ecfb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11f068c-ea95-4d4b-a771-47693111e730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd0a642-f3a7-4587-b869-b0bfe0615441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac498606-85d3-4237-8bc7-67950bad3440",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7068a8ff-a0c0-4728-900b-e03dd9fc7b2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7271863-72c5-4d12-95d7-b0192566b4bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfdb8e6-e91d-476f-99af-b2e1465563b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee79a8c6-08b1-4b4c-aeba-94fc2df6c87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4475fb2-2f0e-45a7-b113-cfa048e5aa65",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c348921-4fbf-4aab-bbca-1f28de29d822",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40a04839-8718-47b3-b598-9cb327a34aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e994abc-7c56-4ce2-8fbb-d68e6bdc1c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef295f4a-84d7-4120-a705-74fcfb722d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65dc7bc3-2514-4bd7-8035-3f8c0d9404e6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747c077f-ea48-4506-987e-492341615802",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba7c5f3a-7c06-491e-9e41-488f3bf1161c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4a0dd9-08e8-4968-a0b0-ca7fad09d9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "600c39e4-0385-444a-8f31-211a83f55194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff47fbe-ad4b-4220-8db4-290a7dbcb4fc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60382b1-f18a-4412-86f7-a0a8aeb53ca5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07dc060b-d98a-4324-99be-a02e33c982d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285cc6ea-6dae-4adb-8814-a0287006a57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae5739b-4093-46f5-aa22-8a7474c83fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71750d86-c19e-4f1d-8a85-aed9a602c5b6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7d18d8-d0df-4dbc-a06c-a107d181b2f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad51ac85-929c-45db-b073-21f7a26a56fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fa6300-1195-4121-82f5-0ce96b4cc54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d4def1-2bf8-434a-ba93-f50b4b00dca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dcb90b-d7ae-4b7e-b52d-c98427f0f92c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde1d1df-1dbe-42c0-8d7e-43abf4b29f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "497f7c3f-e00c-4c40-8c0d-bd4e35fea797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bc67c7-a92f-4003-a9a7-7022c79cd1fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53daced8-a1f6-4b26-a970-c07d91604d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0bbeee-9977-49e9-bbf1-a252f381631f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4417e16d-d1ad-47d4-8c5b-0a99277012ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c374c2b-c8b3-49df-b7f3-0e6d77d9c674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f20b6e-bef5-4c65-9ac5-31fd0f5f99cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c7c112-3d4c-470f-a260-1caf73a575b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd3cf6f-cc0a-4747-9f9f-ff017f64ec78",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60844734-60d2-4dd1-9b7f-ab182b9c4b28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c61d683d-9087-4d13-b527-48a96a93fb1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1684aa-2d21-4aaa-aa00-9532ef71a0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e352144e-ef2f-44bc-bbbb-89f4afa68e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f31fac5-1103-4969-bfa3-ca005ec93259",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22156655-036b-418f-b859-c012a5f6517d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59f3e1d7-3fe8-4cbd-8cda-a17df34b2e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80ab3a9-eabc-41af-8410-74750200c0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc406c2-c829-46fb-ac7b-b381ee059089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55feaaef-86c3-4630-81b6-45fa40ca3cba",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596fe72e-d42f-4fea-a76c-f7d198319ed4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcf1fc2c-07e1-43a7-bbb3-de81a624fd4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99609839-1226-41ee-bed3-1204bdad89f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f083433-16a0-4ab6-be32-d942bd9ccc53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b68004-bf58-424b-be1b-7d75892904b5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5478debc-f099-4f5d-b743-da2fbac4b067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "075b526c-27b3-4460-a877-5ea8abe4ab20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089180a6-c82c-48dc-9c55-972d21b33180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff92bac-1855-42b4-8ff7-3ab645279efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fedb788-8b7d-47f8-ac3b-9e59ef8726f6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03728b29-ec42-4080-b4ae-ae8e220ee83a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62f61b1-31d1-4e85-b779-a98335ec1682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0d229f-771d-460b-adef-87477422902d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05dbbfb-099f-4b6e-a4d3-c790d4f7d89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0346dd61-72e9-44dc-8636-5fcee937d2e4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ee6259-62a5-4795-906c-549caa24195a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67bf4d98-2d90-4ad7-ae11-619e4f383c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fbf54f-b488-4afa-b14e-8234a7496606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2122c6fb-6b71-4e85-ab74-8043e5c3a03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561187d2-e166-4b0a-82d3-e68c09b0da04",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e35193-9265-4e2c-ae76-e3dedff59135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2103dcfe-111a-40b2-ad17-2f02cf702737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ebf562-106d-43bd-9cf5-82dcb6125a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a7db0e-0221-4cf6-b347-6c8b2d46bfb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5641de6f-4d0a-440d-8863-5e9c063eb1eb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd003525-5ee8-4c8b-866b-d273324dca85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ba89e35-3fe5-4710-91c9-880fa1375b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ca7fb8-0a42-492d-9f35-0fe7ebf70565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ea4bd7-f02d-4f9b-84bc-67fd6c1fbb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae45ca50-09e5-4eef-8c68-fe79f123bb15",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38baf597-1368-4d1a-b768-3164c5847ce8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "232a720a-221b-4eb7-ae57-aaab7f3d9adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca459810-66b3-436e-814b-9f383e74b057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2f455d-1efa-479f-a7a9-e715db95136e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17d22ff-5890-4606-ba26-91bcabfc1af8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c42b0d-6259-4139-bb38-20ba03b7e26c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d3e1865-c622-465c-8fb9-57c0329fddb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69744b18-9516-492b-968f-10ee147ba9ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2c5603-9902-434a-9264-d4efa3c9c2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e39bd5-f618-438c-9443-d829151b0a0d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bdd631-9003-40c8-a6da-4fad500da195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff5394d5-ca9e-4977-abe3-07eba5b817d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b5ed15-6574-4f56-bb89-5b989f717783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53bed591-2bb3-4224-9293-61d6ee26e05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abf0699-1fa1-4659-940f-c9bb183f6745",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4365d960-7c55-4f54-911e-1405c296d514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "973984bc-3492-4272-b7e0-7e5e473bed1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "260e9176-7ac0-4730-a546-6d28b508a71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b370bcf0-b792-4370-bc76-b3627ba8da29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc64c23-0e74-48d0-a207-b287bc44f0f5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd417a8b-ed77-4a6a-baa9-c53498b6e710",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8da347ce-d9e3-4a97-b03a-e739afc266e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "467a5328-1cf0-44b1-aa01-639a6a9182d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80a79dc-ec3a-4613-9d06-2e57dd95a518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fcce28-3442-41a5-a336-55b5c7bc772c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48431508-cf66-4926-bc1e-04571947b20e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb3fbebd-e2a2-482c-8e13-2d6aa3c9f2be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f59b0b-a143-4765-96b2-dcba6b3c95fb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc16d07-639d-4aed-b190-2c10e29c42a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d6b025-c2d1-4be4-840e-6797bb5fb981",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862c3139-6643-4045-bdfe-177e6a41f066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8541415-08dc-48ad-84d2-10a0cff692f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df73d44-70da-4d1e-a80e-169afb1410b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef55c24-b5bd-40d4-8b77-369611ad39cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e81ca1-5c47-404c-8d1e-97b15590f1ef",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d247d64-1aa9-448d-802f-cd5fa73d9963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "994fc9ee-7605-4317-bf61-f653d65b7c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b215d45-89d6-41ff-b2b7-275c391f7535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685cd48f-a8bc-4410-86a2-f02f768fb29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261cbf17-5f2a-4ca1-8328-a7143567f0f2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae395dab-00dc-49ec-853e-c284cb0fa8d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f091cad2-23da-47cc-932e-c816526b130a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac16205-737c-4f23-9003-f9cb94e61d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864a8998-4bd6-4d17-9b28-e6a07fe2798d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac3486e-2294-4a0d-8b43-84a8bd98c54e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90104974-657b-4646-9814-04157ff6e64a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d08e8385-e3d4-445b-810b-d165963c9fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea465ca-bb3e-4748-b99f-f3c4b80f97e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ba8ea5-a3d4-400b-92d8-f9642859d379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee7c25a-61ba-46e3-ad25-2ec97ec12ed2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca08d0f9-4cea-48fd-a649-183eca10b4a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e16d9d20-4111-4a96-8168-90ca9a92e78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe951c3-478b-42a0-84e9-ef654c92b398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e215ddf-a3cd-45aa-9de5-7f626b9a87ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917c4856-700f-4936-bf13-622ce5828aa4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25896e9e-4621-4003-8996-e61af8aaa72a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "085be0e0-87f0-4293-9aa6-ba0d54cb5507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da6ddab-56ae-4aa7-a4d2-1d48f53851be",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13175f7-8db9-4536-afbb-ac9d98cf823a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829cac6c-86f6-4da0-a099-6f40d8fda5e4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06e74af-4fc2-4bbd-8cb5-31210660ba25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d0a8e63-68b5-47da-ab7e-22a976085918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32ca028-76e1-40cc-ac6d-19ab1f034be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43173ba-30b5-4d9b-8d00-dc925c08dde3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "759363b0-bfb1-4d4e-ad4e-f06d73e6784a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "448856cd-a15b-4030-ae23-c8fe40bcf1ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e261afeb-44a7-4965-bdbd-273fbcb55857",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbc95b6a-0642-4b2a-b03c-615b1d46f17d"
                    }
                  }
                ]
              },
              {
                "id": "720090ea-44d7-4259-91e7-b34f218e2768",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44efcf8e-0a60-4dc7-afa8-873a2adf7b21",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7faf2846-b724-4c74-ac4f-09874458cd37",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f3350d30-4a92-4670-b2fd-9a9a9db408f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b410d54-17b7-4663-99b4-6d7edda1a64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20ade340-277c-4151-99ba-d9382353aab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d1a47c-3dc0-406c-ba55-1e727db5c694",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe98cc21-26e8-4f99-9bf3-7e04c6b39228",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "13e7c271-08a4-4ad9-8038-26e798f22960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e529ab68-d01c-49c7-aa1c-07360c274718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13959fa8-69dd-42f6-97a3-07b3ba9c4a5a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62baac39-8984-470e-9155-cb99a045ba2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e014971f-935d-422d-9de0-49045dcaf79e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b55c441-2ac2-43c1-bd26-511b085f947a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "340b28e2-9e5a-4f95-8f98-4bca80d128ad"
                    }
                  }
                ]
              },
              {
                "id": "51d8bf56-1ac1-4180-93e8-7610b13c8832",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "30897923-deee-4bf9-af04-e93f2c578bcd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53703de5-a17e-4b9d-bba2-37a269c3c94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "aef1bccf-8322-40ef-bd90-e39e759c9fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e61d93-bf28-48d5-b973-51243a7d95bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6411542-00d0-4124-8241-02cb2f1d7f54"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3e858c0e-ed1b-4055-b9a1-9cb12dd0126e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c426c8b5-fa07-4699-9652-3511d4305bc3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "887edc63-5ec1-4c14-8a9c-609c0f2914a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "26720d6f-eeab-46e0-93da-e3f686df2cd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "942761be-8f5e-4880-a4a5-637e52dd2286",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b8501f2-9147-4fbf-a07f-7541bbb82a35"
                    }
                  }
                ]
              },
              {
                "id": "cf4a1c5c-a1b0-4edd-a1eb-664815bda79c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e29a8bc-2da4-4b27-8d03-94067d9ceff9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f899648f-fd5a-46cc-bff3-a40fce802c2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59ff802a-766c-48d9-bb73-fec0a96524a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89f3a012-a38a-4ce3-8d66-c95bfda5fd94"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "403622dc-8c6c-413b-b90c-c1933978ccd5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f793eef0-fe04-4c3c-80fb-902bb342910d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e9a0705-db2b-4690-a644-d7e50345801a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8d88f7f-335d-491f-8bae-2efe22239e04"
            }
          }
        ]
      },
      {
        "id": "f5ca83f1-28ff-4425-b83f-169e37f3d6a7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8c76c5fb-0fb2-44c4-8968-91f61c8fab96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e680dbf-4212-4779-b201-0b185f4f6a63",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f822dd77-14b2-45e2-85ed-acb81c432cc0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837d93e0-dee9-4011-be60-c0b854c35b1e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4706409c-c2fd-49b6-ae43-6d11da443b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72871388-abe9-45c8-9128-8da91bd23f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d3576b1-455f-4915-9f5b-6959d7ed0f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ded9073-aa8a-4ce4-bbf5-856fcb13649b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcdb29c-6438-4ca2-9205-7371f267da81",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6877e01c-a767-4ae9-ba22-bbacb4fa91ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e06e51a-a4e9-458a-9833-ddee8c29245c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4deafc8c-df39-4ecd-a09d-e9647fa60193"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81f5d6b4-9034-46ef-a337-9753f6026468",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17888db2-de36-484b-9751-f5b12b3dd684"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "598bd302-f755-4ae1-a237-ffadeb260444",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00d5b778-02b0-40ed-9016-40cd9dcc9faa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b64b26a-bb35-4ad5-890d-dda3bb77a7d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d4bd5976-869b-4119-8e38-256030f10311"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "002741e5-7f87-497f-b406-1a0b96454b1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8148f32-134a-4255-9fef-17652401ab2f"
            }
          }
        ]
      },
      {
        "id": "11682050-7f09-4a16-842d-671a5875d750",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dcb80a06-53e3-439a-aa6c-969601d0b962",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa77d623-12c0-4afe-813d-9ade94e6fae7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73bd27af-bd6e-42db-9528-8e7545ade325",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f9edb0-6cb9-487c-b57a-296b5d18c412",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "64f70da5-2a82-4538-81c1-b517c8ef14aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07974d31-b1ca-4b13-ab56-25b7638c310c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cea24931-0ea0-47a3-9c3d-3f72a6175b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3a1fc6-5abf-4fc8-8d13-c41f1b90194e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff12be4b-ade9-41cc-9058-5bf1ae8f1582",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d2a521d-a7db-486f-8361-8f50078fb219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e486237-391d-4f71-91a4-e8b4d5c6e725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "614f05e5-0864-4336-ad79-f034a2893b86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0d557cb-50ef-4acf-b369-dec3b9e3412a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e18a636-1eff-4752-b2e4-a3913219de2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "edc419cb-2df3-4e6a-b5af-d4733bffbd89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b29e047-af3f-4723-bcfc-99b3d3fac6a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "505bfd89-6668-42b2-a8a5-28838cae72ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5963bf9c-3db6-4e42-88e8-bb7d7aa11856"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fb1c4ca-00c4-4767-b3e3-ecd6be2b74f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6658b697-21a6-4411-8ada-5bb6a209a421"
            }
          }
        ]
      },
      {
        "id": "005475b4-246f-4036-941c-64a33afe589f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e0498ccd-a555-4b41-8df1-1a87e3ab7818",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9bcfa26-4d75-4e24-9426-ab7174d0dd36",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "54ec1981-2569-4e04-b485-f5b904dc77a3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1bd9ae-4a0f-434e-b68d-8c940e5ef0ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6fa2aae7-ba0f-4753-9511-f20e228305cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc08387-49ab-498f-95aa-1893dd08191e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7249a418-00c9-42b1-b394-304da6813ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bf2d0b-3c29-4e3a-bf7d-694583ee9f52",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d01e80-c2f5-4be8-8ee2-430659ed69e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b29ba4cd-14a9-453c-8fa9-fa6ca1500c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f7c054-68d5-4014-8e5e-e0d973207e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1dc1d4b1-dcb3-4809-8b07-2869e0b451b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a126a07d-957f-4db6-a3e3-6e10f258aa3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e2f9d8c-55cd-4afa-8b51-fa7321698c06"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66f4e9f5-2b36-48e6-95da-7f09dbab113e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fdf0a2c-ee2f-48bb-a19d-1a3e8247f79c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1a33aed-2bef-4971-8bb0-76b53dfa5263",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c2e8063e-5b53-4d47-aa2a-55670b47f7ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "056d374b-1624-4dd6-8a75-589baea7eae2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5bf15151-d7b3-4ac4-a01d-82bb0657b502"
            }
          }
        ]
      },
      {
        "id": "8798a163-5e19-467c-b108-1ab8609d8263",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b93bb9a-7d6b-4612-84eb-449a3b7dd80c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "007ee7be-646c-4757-a25f-37f63cc7d791",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9a569b24-2202-4d3b-bf0c-9f958a85a564",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2be0534-cea6-42b0-87d9-e829ec6625a3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19163195-c4ab-44e8-a3b2-c1b50e40e4e3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 95.79007633587783,
      "responseMin": 7,
      "responseMax": 977,
      "responseSd": 182.11760580533934,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672792694515,
      "completed": 1672792733690
    },
    "executions": [
      {
        "id": "559020ad-e62c-4b7e-9005-daed8bbed408",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "69f91bfb-309e-4ff9-8f60-5146ebaea4d3",
          "httpRequestId": "ea540de8-8994-437d-8700-18e447c6e7c4"
        },
        "item": {
          "id": "559020ad-e62c-4b7e-9005-daed8bbed408",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "24206917-4155-4059-8e45-24d95724f722",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "7c8c2b2b-c532-494a-b33b-4616c54327dc",
        "cursor": {
          "ref": "3b65f80a-8890-46dc-9673-38d4a07cee21",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cbbf8c19-18b7-455e-bd99-c159a82c8a86"
        },
        "item": {
          "id": "7c8c2b2b-c532-494a-b33b-4616c54327dc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "311d1f52-7f54-4fb8-9774-00b57663a0ee",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "5e45a2a6-fabd-465e-b248-b5fa2f1e042e",
        "cursor": {
          "ref": "29369197-f1a7-4720-a621-8a8eaf7fca8b",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "52537dfe-c1b2-4537-b466-ca9a17f9ed9a"
        },
        "item": {
          "id": "5e45a2a6-fabd-465e-b248-b5fa2f1e042e",
          "name": "did_json"
        },
        "response": {
          "id": "c2624323-50c8-4178-9a41-1083122475c7",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e20a824-7dca-4f8d-b66b-9a063f7b6a6c",
        "cursor": {
          "ref": "fe891f3a-46f9-4b63-927b-9cccd307a4e9",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "191eccc1-f673-4589-a1de-82e5dcafccf0"
        },
        "item": {
          "id": "6e20a824-7dca-4f8d-b66b-9a063f7b6a6c",
          "name": "did:invalid"
        },
        "response": {
          "id": "6930b4a8-b2dc-4c12-8be8-4f7c495688fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e20a824-7dca-4f8d-b66b-9a063f7b6a6c",
        "cursor": {
          "ref": "fe891f3a-46f9-4b63-927b-9cccd307a4e9",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "191eccc1-f673-4589-a1de-82e5dcafccf0"
        },
        "item": {
          "id": "6e20a824-7dca-4f8d-b66b-9a063f7b6a6c",
          "name": "did:invalid"
        },
        "response": {
          "id": "6930b4a8-b2dc-4c12-8be8-4f7c495688fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446d9ace-c2cf-4f0a-a411-cec7461bd725",
        "cursor": {
          "ref": "31551930-5a22-4b95-896e-c6c939f7e077",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "35d0664e-74c7-44c9-9344-43b75a1c0dbb"
        },
        "item": {
          "id": "446d9ace-c2cf-4f0a-a411-cec7461bd725",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4db7f4a1-5955-4b4e-a85e-490223918352",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb3bbfe-a60c-4c55-9c16-cb4825879b01",
        "cursor": {
          "ref": "c6467517-0275-46b6-9758-bc079c7256f7",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "be994df1-67e7-46fc-97b1-a892f5fca174"
        },
        "item": {
          "id": "dbb3bbfe-a60c-4c55-9c16-cb4825879b01",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "438dcc65-198a-4355-b92b-6f96c067ee9d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414a2fb8-4fd2-4c8c-ab63-50bb95ef6ca7",
        "cursor": {
          "ref": "77f96dc2-7af6-4f35-ae8b-269a2207b2f5",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6a7e9ff1-32f5-4f9f-8ba5-5ebdd048bfd0"
        },
        "item": {
          "id": "414a2fb8-4fd2-4c8c-ab63-50bb95ef6ca7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "133be814-f44a-4662-a6da-995b307c8e79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a463a7-ec59-48b4-9af9-08d6f3c9994f",
        "cursor": {
          "ref": "279ee7da-6504-4a07-8e5f-3745e40e6eb6",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "13663866-0b4f-406d-99ac-04134d06f5ff"
        },
        "item": {
          "id": "c5a463a7-ec59-48b4-9af9-08d6f3c9994f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9ace3cb0-5015-4d75-ac7c-0f1b07cca187",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a463a7-ec59-48b4-9af9-08d6f3c9994f",
        "cursor": {
          "ref": "279ee7da-6504-4a07-8e5f-3745e40e6eb6",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "13663866-0b4f-406d-99ac-04134d06f5ff"
        },
        "item": {
          "id": "c5a463a7-ec59-48b4-9af9-08d6f3c9994f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9ace3cb0-5015-4d75-ac7c-0f1b07cca187",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c2fceb-3889-43e0-94db-a347fdcd25ef",
        "cursor": {
          "ref": "6db6c1a0-0a1a-4a73-be43-2ab4a3a7317e",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e95305a7-f3b6-4f2d-89d6-33eadb488ea4"
        },
        "item": {
          "id": "73c2fceb-3889-43e0-94db-a347fdcd25ef",
          "name": "identifiers"
        },
        "response": {
          "id": "9b0df849-4488-43df-a215-d4a02defe372",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30eebf6d-5637-471b-b36f-f4bf81712a3d",
        "cursor": {
          "ref": "16196afa-c5b9-419a-8577-903460bfe6db",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bdf87463-e69f-4628-ba31-bb7fd856319d"
        },
        "item": {
          "id": "30eebf6d-5637-471b-b36f-f4bf81712a3d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ad7ba15a-4229-4782-a8b9-64f44428d7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30eebf6d-5637-471b-b36f-f4bf81712a3d",
        "cursor": {
          "ref": "16196afa-c5b9-419a-8577-903460bfe6db",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bdf87463-e69f-4628-ba31-bb7fd856319d"
        },
        "item": {
          "id": "30eebf6d-5637-471b-b36f-f4bf81712a3d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ad7ba15a-4229-4782-a8b9-64f44428d7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b365de-32f6-4e11-8fd1-f35dc339136a",
        "cursor": {
          "ref": "e43a7dc3-9735-4aac-84ff-c00b5a3f13a3",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1b3a3da7-d060-4381-b957-4008b6127106"
        },
        "item": {
          "id": "52b365de-32f6-4e11-8fd1-f35dc339136a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5de86685-ea16-417f-90fa-c921655e65eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6301271-53d3-45ca-9162-31174b854046",
        "cursor": {
          "ref": "d6d53ed3-a338-4d58-9c13-27f707edfc2f",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "06bc9b3a-2fa3-4315-bfce-7a3835d3c6fc"
        },
        "item": {
          "id": "a6301271-53d3-45ca-9162-31174b854046",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "c8d95f3d-8533-4dc8-abc8-50465ccdf0e3",
          "status": "Created",
          "code": 201,
          "responseTime": 977,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "1dae8ccc-e839-4209-82ca-5980d2b588bc",
        "cursor": {
          "ref": "9491f189-ec7d-4c4a-b791-7df5b7120b04",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d2f3889d-3e67-471e-8e26-729f87006e17"
        },
        "item": {
          "id": "1dae8ccc-e839-4209-82ca-5980d2b588bc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b240c50d-9f96-4113-aef8-ce21ab97c798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c77d369-233c-4e2a-8ff2-e2594a2739df",
        "cursor": {
          "ref": "b43a04d1-060e-4ae4-9b74-c48f0664c5c2",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "49d6995a-c926-42e8-a661-7ff01c17b281"
        },
        "item": {
          "id": "5c77d369-233c-4e2a-8ff2-e2594a2739df",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ab28b02d-c306-48ed-bb7b-3d112f87ed31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d179af4-a8b9-4468-b360-cb760f285d1a",
        "cursor": {
          "ref": "74760e7e-2b96-406b-89a9-cd59c443768a",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1d11452c-fdc5-4516-a589-891311f4bf05"
        },
        "item": {
          "id": "1d179af4-a8b9-4468-b360-cb760f285d1a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "23711db2-2762-47d0-9e38-46af574f6386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e074c30-7c23-403a-86f5-6e4f3f6b8e54",
        "cursor": {
          "ref": "e06cc427-7e9b-49d1-bcf5-2bde76459079",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a3ddce82-787a-45c4-9534-4d7afe0f2a1d"
        },
        "item": {
          "id": "9e074c30-7c23-403a-86f5-6e4f3f6b8e54",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "89afb472-9245-435d-85c6-85566c47c086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3541b959-375a-4e5d-9cba-219e85655179",
        "cursor": {
          "ref": "31f1ce2e-2bb5-4805-97e4-df5969bcc1ef",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c6266386-e9b7-44a3-9959-1cbf76c4a15c"
        },
        "item": {
          "id": "3541b959-375a-4e5d-9cba-219e85655179",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6110bd82-f049-4ccc-a422-0222113b2787",
          "status": "Created",
          "code": 201,
          "responseTime": 504,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "16f0bcc0-4ae5-4173-ba82-ed922d5e4398",
        "cursor": {
          "ref": "d98367e6-8b91-4b55-8119-c46fd21bd7af",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bd899113-4ed9-480a-926b-13d544ce531b"
        },
        "item": {
          "id": "16f0bcc0-4ae5-4173-ba82-ed922d5e4398",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "790d55f2-b443-4afe-8419-3f16ee5fa240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bd2fdd-fd6c-45b0-abee-d0da08daad9f",
        "cursor": {
          "ref": "fa2b575e-04d2-4af3-930e-213a228bcfe7",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2e9a27be-7d50-4d7b-989d-8fea7eba0932"
        },
        "item": {
          "id": "f6bd2fdd-fd6c-45b0-abee-d0da08daad9f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a4bcb992-a168-4018-9831-e0c01bfa74cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d155e8-6221-47a7-9d11-38e03bd492b6",
        "cursor": {
          "ref": "0fcc3c39-0e4f-43af-87b3-796a6a66310a",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "263e31a9-6840-403d-942f-402a84a6d560"
        },
        "item": {
          "id": "a6d155e8-6221-47a7-9d11-38e03bd492b6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "48c33281-3b50-42c1-85b0-08f29ea9562e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4900a587-5552-49ea-84e3-2c1f9b4de1f0",
        "cursor": {
          "ref": "0b2788ff-5440-48c5-8e42-8950b8521ff9",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "807f1b0f-332e-46c4-a8b6-40e9fe10d11e"
        },
        "item": {
          "id": "4900a587-5552-49ea-84e3-2c1f9b4de1f0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "adb7a595-d39d-4356-9c85-41c9e34702e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d56a72e-090a-4fdf-9868-c478c6f952e3",
        "cursor": {
          "ref": "b79e95f9-c92d-4521-a0b6-6d3d790c19dd",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cd0b5fa1-708f-4a10-b2e7-298fa4bb4c14"
        },
        "item": {
          "id": "3d56a72e-090a-4fdf-9868-c478c6f952e3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8920d5af-b348-4d8d-a3b6-00ceb36160c6",
          "status": "Created",
          "code": 201,
          "responseTime": 514,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1c95fdd4-fd23-4475-90fb-a056e6fda809",
        "cursor": {
          "ref": "bcab961c-a2d2-4454-b617-6ce3867e9d9b",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ef703cf0-1605-4273-9ddc-dd37f54f20d1"
        },
        "item": {
          "id": "1c95fdd4-fd23-4475-90fb-a056e6fda809",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "a6b82921-70be-4428-a78f-3f8651516bef",
          "status": "Created",
          "code": 201,
          "responseTime": 905,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "67418d39-9478-415a-9291-fe041add1a9a",
        "cursor": {
          "ref": "140f08a7-fa88-4801-8be9-323edd530973",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a2415096-e41b-4531-a764-ecbe3c36e405"
        },
        "item": {
          "id": "67418d39-9478-415a-9291-fe041add1a9a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a395866a-fa71-483b-a505-3cf1021fd410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a85e6f5-6158-44bd-bcf4-454e212d9ac8",
        "cursor": {
          "ref": "368b82b2-61e2-49e5-9db9-1030c87e051f",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1ff253f9-bab9-4fed-b577-a1a2b8106734"
        },
        "item": {
          "id": "8a85e6f5-6158-44bd-bcf4-454e212d9ac8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "071cf7ab-b8ed-4506-9e62-70fbd5d46037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed05b0e-e60e-4355-84a7-ebf1c18f0fd1",
        "cursor": {
          "ref": "845e51c9-2629-4d53-a9de-37c22146ac36",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "68263c16-ce18-4c3e-9dc7-60bf4497cde1"
        },
        "item": {
          "id": "5ed05b0e-e60e-4355-84a7-ebf1c18f0fd1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "313032a9-fd4b-43b5-9be0-f47e1b941712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030d97f7-d5ea-4573-9856-9c2342e4666f",
        "cursor": {
          "ref": "87df2a65-bbdb-484e-9b5b-fb17dd3b1479",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e99a6eda-1197-43b9-a246-e30826907cae"
        },
        "item": {
          "id": "030d97f7-d5ea-4573-9856-9c2342e4666f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "803c985c-3eea-4bf0-9f94-077a6c9c494d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f579c364-a814-4179-ab35-25aa7e6b5d65",
        "cursor": {
          "ref": "c14c3384-664e-4289-84d8-7f76b2f6aaee",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7e27c627-8dd2-4cd6-9f5e-3fb2d6222d63"
        },
        "item": {
          "id": "f579c364-a814-4179-ab35-25aa7e6b5d65",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5a214ebe-777c-4f9b-aa88-2b3af27d5f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75758c08-84aa-4dfd-bde3-6b835086a5bf",
        "cursor": {
          "ref": "9af030dc-c67e-4d6f-acdd-226b4355d225",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a0d7181c-f40c-4bc0-ad21-b5787a54f502"
        },
        "item": {
          "id": "75758c08-84aa-4dfd-bde3-6b835086a5bf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4de1eeee-2333-45f4-897c-d6a7b8a3a122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830e31b6-fcf9-4a44-ab24-c2cecea2ce9a",
        "cursor": {
          "ref": "61811e01-1a0a-41a1-8967-70b28644f8a1",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "72a7138d-5743-4a2f-9420-180499cdc2e7"
        },
        "item": {
          "id": "830e31b6-fcf9-4a44-ab24-c2cecea2ce9a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c8f5585c-9e9b-4426-810b-8359e362e656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34ff24e-b7df-487f-ac25-27a5d7ca2e4c",
        "cursor": {
          "ref": "c517fc7b-33a8-480c-96b0-290906dc88de",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "304507ac-e5d6-4557-931e-d01c9899061c"
        },
        "item": {
          "id": "d34ff24e-b7df-487f-ac25-27a5d7ca2e4c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2163d069-113e-45d7-95f6-dc4ae1b6e3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebc406c-3302-45fc-8d5f-147c104ddf3b",
        "cursor": {
          "ref": "9059c128-c383-4fc6-bf7d-a04986836b22",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4d868cdc-fd4c-4ab1-8f38-f78004d2933f"
        },
        "item": {
          "id": "2ebc406c-3302-45fc-8d5f-147c104ddf3b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "543c9bdf-88e1-4b0b-8b6d-1bdb9e0d530e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bf4b78-07bc-4f3f-bd05-671c88201563",
        "cursor": {
          "ref": "fd627768-c39a-4b6f-bc36-a5c7de1c570d",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ab0119f8-4b61-4f4d-a661-155835193803"
        },
        "item": {
          "id": "d3bf4b78-07bc-4f3f-bd05-671c88201563",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "96071212-2429-4ff1-996b-73d739d0b664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af4c7be-ed98-44da-bf9c-23ce749d49d1",
        "cursor": {
          "ref": "ed8ab710-83ec-4930-a49a-a3da515ef786",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "47eda692-cd55-42e1-9a1c-289660b333b3"
        },
        "item": {
          "id": "5af4c7be-ed98-44da-bf9c-23ce749d49d1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c8375577-bf7f-4b55-81ea-0e00c06054c1",
          "status": "Created",
          "code": 201,
          "responseTime": 683,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "b2eb3bf9-5160-4ed3-8cc8-f53a900837e5",
        "cursor": {
          "ref": "380423cc-0ed3-438e-88be-46265c6b0ed9",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0807de28-1509-4e84-b744-45ad72fe253f"
        },
        "item": {
          "id": "b2eb3bf9-5160-4ed3-8cc8-f53a900837e5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a4c66d37-07eb-4b8b-92cf-622827bcec9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd8b83d-9f61-41a7-9f02-6dd10c0768e2",
        "cursor": {
          "ref": "bb0c986e-8fd8-4a07-be89-71ef96ba17a2",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "182e68f6-6f65-4b75-8df7-72ce59f6a13f"
        },
        "item": {
          "id": "9dd8b83d-9f61-41a7-9f02-6dd10c0768e2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4c054fd8-73a9-45b3-92ae-ccd3f3c60769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35f36b6-797a-4c43-a792-9ad67b3e5de5",
        "cursor": {
          "ref": "ec3375eb-f584-4b68-8d7a-d36169c5b556",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b97786f6-0494-485b-b9dc-e45de94314fd"
        },
        "item": {
          "id": "d35f36b6-797a-4c43-a792-9ad67b3e5de5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ae230f84-b7b3-461c-8e66-c2968ca40f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3202dfa-48c5-4730-bc67-877ce385cb85",
        "cursor": {
          "ref": "31f73425-0059-4fcf-8d7b-1979747e3ff9",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "329c777e-54af-4b80-b807-a2987777cbb5"
        },
        "item": {
          "id": "a3202dfa-48c5-4730-bc67-877ce385cb85",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4c9e1e08-7210-4f0f-96ca-44efac718f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a464811b-d04f-4485-8103-a78cb157f195",
        "cursor": {
          "ref": "db0cac1a-35e0-4fe1-98b7-2daeaef92f10",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8a3336e3-e918-4267-a57a-0301fa228417"
        },
        "item": {
          "id": "a464811b-d04f-4485-8103-a78cb157f195",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a6c27644-abf9-4fe2-93aa-2a81707612c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a8d14f-bf28-4f39-bddd-3f7023a996f0",
        "cursor": {
          "ref": "bb6301b3-0cfc-488d-85d9-724e60e61acd",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cc51565b-00b6-444b-b173-d33a25848e18"
        },
        "item": {
          "id": "c1a8d14f-bf28-4f39-bddd-3f7023a996f0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2c11e7ad-d8aa-4111-90d1-23831dbe8e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be27f20a-0fc9-4c36-8e67-a0fc1e0c4b25",
        "cursor": {
          "ref": "97e6269c-0fa3-4483-9e22-78b81854caf2",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3948cb01-0d72-4bae-8438-907203a4b966"
        },
        "item": {
          "id": "be27f20a-0fc9-4c36-8e67-a0fc1e0c4b25",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c82d88e8-bafd-4147-88de-ae9743bffed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa343916-d7fe-44dd-a3fd-dbf7bccb2afb",
        "cursor": {
          "ref": "5cb3dd0a-24d8-40c6-b278-23f19008dca6",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "aa621d00-e1cb-4148-a53e-9114048c5b5a"
        },
        "item": {
          "id": "fa343916-d7fe-44dd-a3fd-dbf7bccb2afb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6b5e3833-4aaa-4481-84b3-738efc0a8e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65790833-5edf-4d6e-98b7-e0a7629cc32a",
        "cursor": {
          "ref": "72894fd2-951b-41d3-b9c6-2913581f2e3b",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "31cb7984-a734-44ec-82ae-03363d8669eb"
        },
        "item": {
          "id": "65790833-5edf-4d6e-98b7-e0a7629cc32a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "33f53d2d-af02-4538-99cc-5b607f876157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d129ab20-c602-4fd9-a01c-5f6b16956854",
        "cursor": {
          "ref": "80479b95-a2ed-4e0c-bffd-fa71d3d46f1c",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "959564a4-3d5d-4312-8fd6-885469f9db8f"
        },
        "item": {
          "id": "d129ab20-c602-4fd9-a01c-5f6b16956854",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "878c5277-6d54-4e16-b1f3-d84c3dc7ec5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389b0a7b-5602-42b2-804b-5ee6bbd79190",
        "cursor": {
          "ref": "2551500a-24c8-4e00-ac3c-abeefc1dac58",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a271560b-b5a2-4c13-84df-5210ee63ec69"
        },
        "item": {
          "id": "389b0a7b-5602-42b2-804b-5ee6bbd79190",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fa3ef112-159d-407c-a8bc-7b70bd07693f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d40277c-4c30-4d7a-b6e9-2f19bdda557b",
        "cursor": {
          "ref": "bffc50c3-e4f7-48af-851e-294de66cfe96",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cc487684-67fd-4084-9571-1d4b27328064"
        },
        "item": {
          "id": "1d40277c-4c30-4d7a-b6e9-2f19bdda557b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d9ad37ad-d4bd-4f7d-b981-0c9221aa6657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2ca3e1-d919-4089-9be9-816e5c53c956",
        "cursor": {
          "ref": "2ee827a1-c1a6-4189-8801-5cae8f2a23f4",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "31480e88-5c7a-4261-9746-1197199b8061"
        },
        "item": {
          "id": "fd2ca3e1-d919-4089-9be9-816e5c53c956",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fca3b0f6-da24-4dfd-ae7d-b7de84562dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 348,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "30dffa50-d49c-4947-9090-9a7da16bbd7b",
        "cursor": {
          "ref": "70fdd5ab-f4c8-47ac-b882-aa4f4a39721a",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ae08d113-cba8-4bf8-81cc-64edfab33d08"
        },
        "item": {
          "id": "30dffa50-d49c-4947-9090-9a7da16bbd7b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "31d25c83-8546-4cec-a5c3-b31b406dc5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf159c6-b497-4271-b161-041e5bccb149",
        "cursor": {
          "ref": "8c1f53aa-007c-41ac-b0ad-2a3cc490d0df",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e8ac73e1-aa44-44d1-bb08-754941cd6d96"
        },
        "item": {
          "id": "cbf159c6-b497-4271-b161-041e5bccb149",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2909d839-ca1b-4925-8bff-73a204eb37d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a2e35c-823b-4768-99da-7975bc554e09",
        "cursor": {
          "ref": "89dfa53f-4945-4d04-801b-86c7d8e31601",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "833f67a5-7080-4d11-9897-f20b85d8dd69"
        },
        "item": {
          "id": "15a2e35c-823b-4768-99da-7975bc554e09",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "20f67558-8cba-46a3-9c35-52377d12f1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a9b541-74c5-4ad8-9ecf-67308d132f02",
        "cursor": {
          "ref": "9ba42aee-2177-41fb-9b7a-b8388ab3e215",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "518bb0dc-5f2f-4e54-bb12-990dbe19b0c0"
        },
        "item": {
          "id": "d1a9b541-74c5-4ad8-9ecf-67308d132f02",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "640ec195-12d5-4a17-8411-0429afbcfaef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3436de-7f1d-4d29-a45d-fbcc219ddddc",
        "cursor": {
          "ref": "32e226d1-a2e8-4f16-8230-90cdd01693ef",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "adf55165-c086-4a8e-b8bc-bc01bdab31b1"
        },
        "item": {
          "id": "ee3436de-7f1d-4d29-a45d-fbcc219ddddc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a20b38dd-9506-41b2-936f-3fb4c7d635b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf62d3f-c59c-4f12-b68e-9075a81f464e",
        "cursor": {
          "ref": "8ae28a7e-8ae4-412f-9793-09f71b8f7b3f",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c0477d24-9119-4f81-8e47-0a4ca4f47f53"
        },
        "item": {
          "id": "bcf62d3f-c59c-4f12-b68e-9075a81f464e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "fcd08300-1317-4f3d-819c-4c4caec6d292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbce39de-2819-4de3-8711-a1abaf9654aa",
        "cursor": {
          "ref": "2141bf8c-910b-4dad-8642-6f7432887a2f",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "be008de1-89c9-4287-a0db-fb5e5fac68bd"
        },
        "item": {
          "id": "dbce39de-2819-4de3-8711-a1abaf9654aa",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7f08a755-8de6-4dff-acd5-e9dccca408e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "bbf7d211-20a6-4834-84f1-a82afd9bb484",
        "cursor": {
          "ref": "21fa0185-7616-4c3f-920e-003d8cdc91dc",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6dbebb93-dbcc-48a4-bb84-c9735a7daf88"
        },
        "item": {
          "id": "bbf7d211-20a6-4834-84f1-a82afd9bb484",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b18d70af-13b4-41a6-8715-31f585d36bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5b241f-1fe0-451a-bf8a-f8e98dc0a7a6",
        "cursor": {
          "ref": "95cef544-672c-4f0c-99ff-ff46f0fcdca6",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ea74fdfa-4fa0-40c1-9550-d6a362b2f055"
        },
        "item": {
          "id": "cb5b241f-1fe0-451a-bf8a-f8e98dc0a7a6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "499800e3-b083-4d40-83cb-c5b51be29c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38814f0f-745f-4e26-9166-bb70fc65939c",
        "cursor": {
          "ref": "efafa2e8-fc7a-4a2b-bd73-87f1b4abe0a2",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0dddbd62-6e68-4b36-bc62-767b12489785"
        },
        "item": {
          "id": "38814f0f-745f-4e26-9166-bb70fc65939c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "42a0824c-cbef-4d13-9153-b082e9ffd524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c110ca13-5ec0-4e3b-ad7d-424a1de89987",
        "cursor": {
          "ref": "c989afff-651e-464e-95f1-6031ae0b88da",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5ceab908-de04-4daf-926d-9116d093b8a6"
        },
        "item": {
          "id": "c110ca13-5ec0-4e3b-ad7d-424a1de89987",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "69bfa347-403a-4091-b7a6-e321b923821f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc08622b-df1f-4bb6-b1e8-f456833b179d",
        "cursor": {
          "ref": "b1fe849b-c0be-442b-ad11-4a4f5dab429b",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "be1708f3-3615-4135-ba78-317da6bfc923"
        },
        "item": {
          "id": "fc08622b-df1f-4bb6-b1e8-f456833b179d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ab5dd6b8-0db2-4f12-a1af-cbba835b59f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8eb07f-10d2-4229-a064-760261ca3f22",
        "cursor": {
          "ref": "677b7ac6-2579-43a4-a568-ecb2fdc3105b",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e046939f-a3f7-4bb3-aad8-913a5490f5bb"
        },
        "item": {
          "id": "1d8eb07f-10d2-4229-a064-760261ca3f22",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1df83cde-a2cd-4720-81e3-0f336fe7ce6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d77544e-f9c8-4eea-b3f2-2d6354a7388f",
        "cursor": {
          "ref": "74113b56-8ace-457a-a6da-0392ab604a73",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ace1acad-233a-408d-82ab-a90b64a17930"
        },
        "item": {
          "id": "9d77544e-f9c8-4eea-b3f2-2d6354a7388f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "025f19f5-bba0-479e-9401-ec145ba5aa16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca1a351-55c9-41cd-9d7f-7ebe82d8fa31",
        "cursor": {
          "ref": "ea016d25-324b-4c0d-ae78-b3ad04b16d27",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e3eecddb-8b0b-4a35-b4bb-023c53c8c561"
        },
        "item": {
          "id": "6ca1a351-55c9-41cd-9d7f-7ebe82d8fa31",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b087a281-0392-4f33-8d7d-b6698fdc6541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca417ef9-b0e7-4360-95fb-85247dda3ddb",
        "cursor": {
          "ref": "72d2f06b-306c-4dbe-a5d5-3328cbf65c41",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ce295451-3e6d-45bb-82af-435fda1c7c97"
        },
        "item": {
          "id": "ca417ef9-b0e7-4360-95fb-85247dda3ddb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8206a988-dabe-4d80-9912-2ed04fdae0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213bae7b-5d8b-49ea-8ca8-da30d461be14",
        "cursor": {
          "ref": "cf2b1163-776d-4425-a73a-6220e2c17e2a",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "be55a2fe-6ee7-4983-9331-48f6b2cb29da"
        },
        "item": {
          "id": "213bae7b-5d8b-49ea-8ca8-da30d461be14",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5b464614-bfe8-44b7-ad74-73c81d7bb56c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644a1fc4-7cae-47cd-a70d-ab3bc7ffaa3a",
        "cursor": {
          "ref": "6385e7c5-350c-4d61-8fe5-57669b992e12",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9d84bc49-0dfc-4c4f-a2e4-8903ce59fbf1"
        },
        "item": {
          "id": "644a1fc4-7cae-47cd-a70d-ab3bc7ffaa3a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1b092549-19ea-443d-be6b-7dc5d7bde9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660cbcba-439b-40a7-90a6-b18570494ff8",
        "cursor": {
          "ref": "b1dafd9c-0e24-40c3-a246-116386cca2fd",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "19f6d4d9-0492-4cc6-9bed-140ddffc4907"
        },
        "item": {
          "id": "660cbcba-439b-40a7-90a6-b18570494ff8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "06df774d-2bdb-4650-8363-19f08413140c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a826ba4-22a8-4b29-8b79-347b20248948",
        "cursor": {
          "ref": "4b05fa69-95cb-4709-880a-ca16589b2de1",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d0386a04-3801-490a-84f1-4d4c185aad38"
        },
        "item": {
          "id": "6a826ba4-22a8-4b29-8b79-347b20248948",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "140e3811-e356-43d7-9d00-6230af3c249e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d484bb2-5ca6-4b87-91b3-ca4f2254ee3e",
        "cursor": {
          "ref": "cd22b5ed-00d6-4163-84a8-8b872d273775",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c147c411-2840-4b9d-8d30-cd7c7bc8447a"
        },
        "item": {
          "id": "0d484bb2-5ca6-4b87-91b3-ca4f2254ee3e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5384a1ba-c5b7-4cc1-80c9-4431ff2ce8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58935d52-563b-41f2-aa80-957fc2215ab6",
        "cursor": {
          "ref": "a8eaba82-7bc6-4617-b9cc-8b2534d4644e",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7ad90c79-0527-40a4-97a9-bb777818cd3d"
        },
        "item": {
          "id": "58935d52-563b-41f2-aa80-957fc2215ab6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "09208269-9596-4a71-a692-a0773c067d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f26a48f-e9fb-4a52-9602-d42490a1f2cb",
        "cursor": {
          "ref": "40345298-a9b6-4e13-afce-ebe2c4be5618",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "81dafdea-7220-4777-934a-f1d4e6886851"
        },
        "item": {
          "id": "6f26a48f-e9fb-4a52-9602-d42490a1f2cb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f4b48c94-26cf-4bac-8e92-a9aa9eb36004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd4f2cd-2598-4060-b188-32f9e68caa0f",
        "cursor": {
          "ref": "90e4c37d-303a-4ab2-90a5-c38d48341abf",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ae1e110d-ecbc-4182-aaf4-027f23222393"
        },
        "item": {
          "id": "4fd4f2cd-2598-4060-b188-32f9e68caa0f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "12f7b63b-43e9-4767-9d0e-df03daaf4b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e4de5a-0bfa-40c7-97f4-9cd5b18886ef",
        "cursor": {
          "ref": "fe12a35f-97c5-43e0-b6a1-de81865a92e3",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d886bb78-5081-471c-8341-e6697a2c2204"
        },
        "item": {
          "id": "48e4de5a-0bfa-40c7-97f4-9cd5b18886ef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "76a2cdba-c3a4-4a2c-9e06-27bafce2a21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c218197d-b5ee-4df0-937b-5a6e267e588d",
        "cursor": {
          "ref": "b9fccdde-6e45-40cb-abec-00db38f47bd7",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bd449bfc-158e-44af-aaa1-235f6126baf8"
        },
        "item": {
          "id": "c218197d-b5ee-4df0-937b-5a6e267e588d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9065189e-f732-4be4-9be0-4321897ec17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2a41f5-89ef-420f-bb02-2009d8660618",
        "cursor": {
          "ref": "b2dfd1fd-ac00-4284-b773-12e89203a58a",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "48b42496-9688-4c4c-a702-8664661b6902"
        },
        "item": {
          "id": "0f2a41f5-89ef-420f-bb02-2009d8660618",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5f044be4-b865-48c5-b1e7-945c5b1340c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e7755a-a2eb-4e3e-b334-5305b0308675",
        "cursor": {
          "ref": "841a19de-ecac-4d0a-882a-50aa66dff98f",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a03def6e-e41d-4a8a-917e-83bc0f02fe1f"
        },
        "item": {
          "id": "28e7755a-a2eb-4e3e-b334-5305b0308675",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6d1e724b-68b5-4057-b074-a351ab34ac21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb36c0c-bd49-4053-b173-adbc51a27810",
        "cursor": {
          "ref": "a03f89d3-e766-48c5-bc55-fc9822c4ffd6",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "25e5beae-bd34-4dd1-bad9-a52842a5f76b"
        },
        "item": {
          "id": "2bb36c0c-bd49-4053-b173-adbc51a27810",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0ee6e833-1cee-47e2-ad72-3e14ac3e65da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecfb8d1-207f-45b3-bb1a-095eddfdcd52",
        "cursor": {
          "ref": "10d7d90c-7c49-47d4-b9d7-45467cc78d43",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "79b93691-349a-4a8f-bc51-3c170677a3b6"
        },
        "item": {
          "id": "fecfb8d1-207f-45b3-bb1a-095eddfdcd52",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b6ccf9e4-bbcf-47cb-8185-00b826fd9f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347aeadd-e25a-4485-bfd9-40033fcabd11",
        "cursor": {
          "ref": "a8ae5949-9ad9-46c7-9d57-02f948848005",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "81adfe5f-6521-4090-b158-01c053f4094e"
        },
        "item": {
          "id": "347aeadd-e25a-4485-bfd9-40033fcabd11",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fb1825d9-617c-4200-9a0d-3a0b2e57a682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725adc8b-ff43-4f5f-b7b5-b03d0f8c2629",
        "cursor": {
          "ref": "108b3ded-028e-4e7e-b444-a7fc8f01c380",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c6dac4b0-5eda-4b8e-8967-8997e18f7ed7"
        },
        "item": {
          "id": "725adc8b-ff43-4f5f-b7b5-b03d0f8c2629",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5dd71fcb-ae51-4ddd-9efb-a9028052bd80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491b73b2-a1cb-4567-812e-efe672ea7776",
        "cursor": {
          "ref": "56a40bbe-dc01-487b-8ab3-6f98aa008590",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4f93842c-2057-46f9-9b88-f046659ca851"
        },
        "item": {
          "id": "491b73b2-a1cb-4567-812e-efe672ea7776",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "68b83e3a-0bed-46bd-a30b-6139206ce65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689f9c15-5c08-4d67-9d9d-55e943c63643",
        "cursor": {
          "ref": "b6014ffa-7974-4074-8fce-803decc58e6f",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5e3f0b82-d8fe-476e-83c7-c61582480adc"
        },
        "item": {
          "id": "689f9c15-5c08-4d67-9d9d-55e943c63643",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "923eebf5-1e9f-499e-8444-ed8de1786000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78802fb2-d318-49d9-af51-4cdd1432e39e",
        "cursor": {
          "ref": "5849ef74-4440-4d43-afc9-07099f6ef445",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "732105fb-4cdc-4286-a4d6-efaf2d610de2"
        },
        "item": {
          "id": "78802fb2-d318-49d9-af51-4cdd1432e39e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c762cbf4-43e0-4081-b7f7-20f6cd25ffe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362dab5f-4b97-4c62-905d-ae9179f12beb",
        "cursor": {
          "ref": "56e81f9e-1092-485f-866f-fdb1e1d4fdba",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "68078d96-479f-4206-959b-5d125f1a0115"
        },
        "item": {
          "id": "362dab5f-4b97-4c62-905d-ae9179f12beb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b484c84e-beb6-49cb-98a8-cbb50f3abbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5803ab-7ece-4819-a127-b7566981e725",
        "cursor": {
          "ref": "0a6b0dfb-9b77-497c-aca1-be333bd35d28",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "30513dcd-449f-4ce5-afad-181271bb8138"
        },
        "item": {
          "id": "8f5803ab-7ece-4819-a127-b7566981e725",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "82a3af03-8a01-4059-ae65-62f89966cc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8a6e32-f8a9-4889-b745-41d99803d5a8",
        "cursor": {
          "ref": "c58da49f-396d-46ae-bf12-c8046f767a8e",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0adfeef2-279e-4695-9fd7-9b8c1e5a86b1"
        },
        "item": {
          "id": "ba8a6e32-f8a9-4889-b745-41d99803d5a8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "03626b16-223b-4ae5-8ee1-c91fac9a0eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b56502-0cc7-4cd0-8b54-938ae007553e",
        "cursor": {
          "ref": "446a8c88-df17-43b3-81dd-64e14a95a709",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ce1ff4e9-bd07-43f9-9165-8e9b5d399b67"
        },
        "item": {
          "id": "05b56502-0cc7-4cd0-8b54-938ae007553e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "30cd6712-e44e-4e97-b0e4-6fe502a0bcd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c0aad9-ef3e-49d5-9b1a-f834522fe8fb",
        "cursor": {
          "ref": "6e7c3513-4711-453b-9b0d-35d82b6b777f",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "37894ef7-1b07-4339-ab5c-452593b10917"
        },
        "item": {
          "id": "b8c0aad9-ef3e-49d5-9b1a-f834522fe8fb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9343dacd-c9dc-4eed-a230-8ef4ea12e70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727ef8c4-9d09-41a0-b559-0099ae216d18",
        "cursor": {
          "ref": "cc2bc5b8-3b27-4e24-b087-cdbb61c10f72",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "99d9939b-8b01-476b-8468-2654bf0f03de"
        },
        "item": {
          "id": "727ef8c4-9d09-41a0-b559-0099ae216d18",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8c9cb4c3-e243-49d4-84ac-0b41bdb1b748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317f0c05-91f4-48ff-ae61-7d32a433e479",
        "cursor": {
          "ref": "5f6453f4-3bfe-4f1a-9004-9e0e56f60624",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ca0ac4a0-783b-4108-a405-9cbc82453159"
        },
        "item": {
          "id": "317f0c05-91f4-48ff-ae61-7d32a433e479",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ebeffe4d-2bfd-4a9a-9851-c1ebc9049a79",
          "status": "Created",
          "code": 201,
          "responseTime": 732,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "28aa2a60-b9c3-4723-a3d8-64d6901d9fc7",
        "cursor": {
          "ref": "ee13f1c6-f1d8-4fe2-8273-cc76e678e10e",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e66654ac-4298-4636-95b9-ce9466c68fcb"
        },
        "item": {
          "id": "28aa2a60-b9c3-4723-a3d8-64d6901d9fc7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "56b53eaf-cdd2-40aa-ab41-afda7cc0bd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdc34ee-41b5-401d-a65d-6ab0c2b3da73",
        "cursor": {
          "ref": "cd9ce8af-0c0f-484e-bef7-2002bf8b805f",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b55331bf-78b1-425a-9a82-45b6fb23750e"
        },
        "item": {
          "id": "8cdc34ee-41b5-401d-a65d-6ab0c2b3da73",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "783f9ed8-1882-4c40-bdc8-315b8670f042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92226939-c11b-4209-bc91-16cf84c14304",
        "cursor": {
          "ref": "c1ed38f4-3db7-4826-ade3-7bb9e1d51a0d",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "02c0fcf0-0b5a-4575-9932-f1607ebe2a45"
        },
        "item": {
          "id": "92226939-c11b-4209-bc91-16cf84c14304",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5c1ae181-b199-4a03-9479-44cbeeaa8239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617c3c81-c93f-4c9e-b81b-c9f6f8d56c01",
        "cursor": {
          "ref": "1881e844-d91e-4619-8de3-092659513cd5",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "80231aac-21e1-4b34-a73b-350c326571cb"
        },
        "item": {
          "id": "617c3c81-c93f-4c9e-b81b-c9f6f8d56c01",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "775b4a78-1ff6-4b3a-87cf-4cfb480dbc39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10082ad1-68b0-40d4-917f-fee7e23764f9",
        "cursor": {
          "ref": "3a474d1c-4603-40ad-b891-828a119a0de3",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ef41f6f9-519f-4960-aa73-e3adffc83550"
        },
        "item": {
          "id": "10082ad1-68b0-40d4-917f-fee7e23764f9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bc5337f9-e6de-452a-b251-aeefc92fd3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7713b1ca-506c-45b3-bfaf-b7f2e9c5ea57",
        "cursor": {
          "ref": "31c4baf6-497f-44d5-959d-d4e251cdf875",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "67aca94e-a780-46dd-a195-8917e4639098"
        },
        "item": {
          "id": "7713b1ca-506c-45b3-bfaf-b7f2e9c5ea57",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5b49cf22-0bb4-4701-8a03-e9450d7da7e3",
          "status": "Created",
          "code": 201,
          "responseTime": 683,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "eb7d4433-1d15-404a-ac78-f703a539da16",
        "cursor": {
          "ref": "e964ce41-d6da-49e7-8617-7e413efa3d57",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ee6c0fcd-1bb5-491c-b261-d435b87aa270"
        },
        "item": {
          "id": "eb7d4433-1d15-404a-ac78-f703a539da16",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b6177a89-15f3-4fa8-bba4-a1a9bcd70766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0fa393-295e-4bb5-b1fd-3532e7373d9d",
        "cursor": {
          "ref": "6ffdabb3-c2dc-48c8-b4ff-5626bd669dcf",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "720dc714-42e1-4c5e-bdc1-a24cf0213ccd"
        },
        "item": {
          "id": "6d0fa393-295e-4bb5-b1fd-3532e7373d9d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "675168c5-3f56-469f-80b1-8a9fcaaa1c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a801683d-4288-444b-9518-0437d344da9c",
        "cursor": {
          "ref": "3f1ad579-351e-4bb4-846d-2d6e82319f8a",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "56209672-2cc2-4c9d-8d3a-9bf5252450c9"
        },
        "item": {
          "id": "a801683d-4288-444b-9518-0437d344da9c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ff4166d0-c9ce-4684-922a-6c74bb6ccf16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd6c77e-fbca-4bae-8270-96c37707697a",
        "cursor": {
          "ref": "c947f2c3-9e3a-4a6f-9f13-778f75f8c8e7",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ceb7a184-80c4-4610-855c-7a59a080c0a5"
        },
        "item": {
          "id": "2fd6c77e-fbca-4bae-8270-96c37707697a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "578f4ba5-787b-47e7-becb-bfda6036bb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5b4628-d26e-48dd-8b60-03345bc32447",
        "cursor": {
          "ref": "ea27c35e-d105-4624-9608-443deb245c15",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "06ca16d4-01d1-4607-9b00-dc2e513873c3"
        },
        "item": {
          "id": "ff5b4628-d26e-48dd-8b60-03345bc32447",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3feed15f-fe19-4a63-828f-31082ea24aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2302c5-9304-4622-8714-f70161c9dd51",
        "cursor": {
          "ref": "9d8cfb74-0500-44b5-895d-81603d995986",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9a4f5f51-5e78-4594-bebd-b2d723385fdb"
        },
        "item": {
          "id": "0d2302c5-9304-4622-8714-f70161c9dd51",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bd753e04-11a4-4fce-8e6c-7b350eb42fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60c8f10-88e3-4d17-8f1e-bbf09aaa1bfe",
        "cursor": {
          "ref": "bd4e63c3-e6dc-4868-9d9f-8bfa23dcab31",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d2e7dbc9-4cf4-464a-a4d1-eea07ae4265e"
        },
        "item": {
          "id": "b60c8f10-88e3-4d17-8f1e-bbf09aaa1bfe",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "73a7e8b4-e308-45c6-8559-513bd87dde4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bee98eb-5312-4321-9dd9-ce4bd5366787",
        "cursor": {
          "ref": "867c848e-50cc-409c-8236-5c74d004f979",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "41c5e66a-ab35-4261-95a8-eaa13ede0134"
        },
        "item": {
          "id": "5bee98eb-5312-4321-9dd9-ce4bd5366787",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "df423291-9c91-499d-9e81-a695af666fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f39106d-6b29-40bf-b1db-4e5e301eb2c8",
        "cursor": {
          "ref": "0d67e9ae-6f16-4bb7-9458-cae776546b07",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2e6776e1-11c1-4dec-b7ef-a83898767b3a"
        },
        "item": {
          "id": "1f39106d-6b29-40bf-b1db-4e5e301eb2c8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "58d21b39-4b02-4922-8269-e6b09e69cc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "18f2df5a-9c10-4695-95fd-62ef863a9f23",
        "cursor": {
          "ref": "81f90125-19f5-435f-ad19-432bedaee245",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "893899d0-13f4-4832-984f-815c0a256116"
        },
        "item": {
          "id": "18f2df5a-9c10-4695-95fd-62ef863a9f23",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "72c6e018-e5ad-4176-88b7-137a5db09830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "283e5639-9e37-4b98-a14d-b0a254b316cc",
        "cursor": {
          "ref": "d567550a-5041-4f8f-b4cf-e6692658ef5d",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6178d4fe-39fe-41a5-a043-8a71cc82b3df"
        },
        "item": {
          "id": "283e5639-9e37-4b98-a14d-b0a254b316cc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e666e04d-ba63-4a49-9ede-a4fabe18e822",
          "status": "Created",
          "code": 201,
          "responseTime": 667,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f83abda-f8b6-4ce5-9c48-1b1b431c7c13",
        "cursor": {
          "ref": "bc33f2a4-8727-4514-b35e-de04949fdbba",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c52b7fc5-c101-4773-81f6-fc7c0801d1d3"
        },
        "item": {
          "id": "0f83abda-f8b6-4ce5-9c48-1b1b431c7c13",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6a68aada-6a40-4678-bab3-72491bf179c6",
          "status": "Created",
          "code": 201,
          "responseTime": 678,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b269b8ec-fe0a-41aa-9f85-e609a85cd38f",
        "cursor": {
          "ref": "341d9d06-986c-4eb7-83ef-97350a2bbaed",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f41438d9-864c-47ab-8031-b5f08ad89cff"
        },
        "item": {
          "id": "b269b8ec-fe0a-41aa-9f85-e609a85cd38f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5ef90188-087f-47c4-825b-4c1c1d086e80",
          "status": "Created",
          "code": 201,
          "responseTime": 665,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c96684-4a71-4d44-82b0-184e8929cade",
        "cursor": {
          "ref": "4d580e57-fbe9-486f-bffa-762c1a6a54b4",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f60268fd-f772-428e-8610-db3ade8577cb"
        },
        "item": {
          "id": "36c96684-4a71-4d44-82b0-184e8929cade",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f56f048b-6083-45f4-8308-9c6d6aec09e8",
          "status": "Created",
          "code": 201,
          "responseTime": 660,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "0980e2b8-c180-4fb6-9f0d-8ef925705e53",
        "cursor": {
          "ref": "e3ed3d8c-9e5d-4a5d-9ccc-a3028bcb0ff9",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9e2e5299-78bc-4574-895e-196392c0e2bc"
        },
        "item": {
          "id": "0980e2b8-c180-4fb6-9f0d-8ef925705e53",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "741ca30b-69ed-474b-beba-4f3507ff57ee",
          "status": "Created",
          "code": 201,
          "responseTime": 698,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "2660aba7-3d3a-4cb1-a946-cf6017113a2b",
        "cursor": {
          "ref": "d1c9741b-5ab7-4169-9b8a-2a0697ddf3f6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6ae0e30d-6e96-4abc-bf6d-423aab65c901"
        },
        "item": {
          "id": "2660aba7-3d3a-4cb1-a946-cf6017113a2b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c0073f07-5337-4f87-b6af-1bb8958e81f3",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2660aba7-3d3a-4cb1-a946-cf6017113a2b",
        "cursor": {
          "ref": "d1c9741b-5ab7-4169-9b8a-2a0697ddf3f6",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6ae0e30d-6e96-4abc-bf6d-423aab65c901"
        },
        "item": {
          "id": "2660aba7-3d3a-4cb1-a946-cf6017113a2b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c0073f07-5337-4f87-b6af-1bb8958e81f3",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "cb149ee4-9708-4619-a1c6-9fbbf8b41313",
        "cursor": {
          "ref": "8608e1af-ceed-4215-9bdf-2352039e22ad",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c4612325-34e2-4024-8882-2210edaee5dd"
        },
        "item": {
          "id": "cb149ee4-9708-4619-a1c6-9fbbf8b41313",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "31e8df90-748e-40fe-b542-c7efe1837249",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c3785c9c-de33-4f49-9dd3-b9c9fe8639f8",
        "cursor": {
          "ref": "12a24e3a-a8a8-4b6e-a35e-9d19245770cc",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "78127761-0ac7-4d0e-aff8-690f1150a735"
        },
        "item": {
          "id": "c3785c9c-de33-4f49-9dd3-b9c9fe8639f8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "40ac6c59-8531-421f-84fd-c0c2457599f4",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "5b343156-27a2-4a68-96e2-c8c1fe577d52",
        "cursor": {
          "ref": "58905281-a70b-42c7-96d6-1dc661648258",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7dcb4a41-3170-4b3c-9563-7e23fe45cfe9"
        },
        "item": {
          "id": "5b343156-27a2-4a68-96e2-c8c1fe577d52",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bf62026e-81ad-4c57-9545-7c929d39977a",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "5b9a79d5-4ecf-4232-81db-860ed2024701",
        "cursor": {
          "ref": "4b3aa8f2-72e6-45b6-b111-9d4aba6f9c9e",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "17c3170f-d163-4f52-8473-e6a6a42a06d9"
        },
        "item": {
          "id": "5b9a79d5-4ecf-4232-81db-860ed2024701",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6605f5cd-e07d-436b-8fe0-d3f06283fc3a",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ac9be3b4-712a-4628-b012-67e9b158b562",
        "cursor": {
          "ref": "b80a206b-87d1-455a-8070-5cf0f178899a",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8426dbb5-425d-428a-bf04-771a0edfdf15"
        },
        "item": {
          "id": "ac9be3b4-712a-4628-b012-67e9b158b562",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6bae6e4a-e47e-4990-b675-1b57042e5992",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "fd3b30fe-22e0-4fd4-b27c-eadb19362d6d",
        "cursor": {
          "ref": "d51d99e8-89b4-4282-ab2c-c2a27aa4688c",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "50689638-3f92-43c6-a3a3-f32b344352af"
        },
        "item": {
          "id": "fd3b30fe-22e0-4fd4-b27c-eadb19362d6d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f3bf4d0a-f089-49e5-9692-0d4e1a8569b7",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "406b2e68-79c7-4051-8038-66a14cb210a2",
        "cursor": {
          "ref": "13ac75e1-f5aa-4260-baf0-5dfe24731e2b",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "49c05109-a9ee-4b10-b2e8-0aa375ce47c1"
        },
        "item": {
          "id": "406b2e68-79c7-4051-8038-66a14cb210a2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "71776bc5-892f-4548-9d36-9d2fb05d4606",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "67925891-cd1f-4736-a1e2-5a9d55bc320b",
        "cursor": {
          "ref": "f146b24c-3987-431b-8b77-dfc5906a442c",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e749c1e1-6774-46e7-9845-de5aaefaa106"
        },
        "item": {
          "id": "67925891-cd1f-4736-a1e2-5a9d55bc320b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "12665b22-fc73-4099-937e-a41deb033c85",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "516ec079-d5d0-4af8-b8df-59a1ded8266a",
        "cursor": {
          "ref": "89bd7f00-cf83-4a14-a269-6894eb1a8b31",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0b23d7a9-3363-4162-9d73-7416e13cb154"
        },
        "item": {
          "id": "516ec079-d5d0-4af8-b8df-59a1ded8266a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aedfbaec-c004-4b77-ad74-6f915b8930e4",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "33ea3cf9-66eb-4394-8d13-161c6d7f9aae",
        "cursor": {
          "ref": "fad66960-de5e-40bd-a1ad-bfcfdab78469",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d7fd4501-aa26-4e2b-8f97-90ed58355e51"
        },
        "item": {
          "id": "33ea3cf9-66eb-4394-8d13-161c6d7f9aae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "554050c4-f73c-4054-af25-65ece46063ec",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1484c391-e98a-4542-ab39-ebe5fcb945e8",
        "cursor": {
          "ref": "cf264f61-46a0-4fe3-802a-79d5a5427d5a",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e7c71052-a106-4e49-bdff-79e6ad7f027d"
        },
        "item": {
          "id": "1484c391-e98a-4542-ab39-ebe5fcb945e8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d6b7acc0-f1ea-41c0-94cc-a33bf1986801",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5694dd3e-6ec6-4c46-af70-012d15565069",
        "cursor": {
          "ref": "c37f0c7b-4617-4841-88c3-a619b2bb8a83",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8c6e8359-b6fa-455a-b83d-8bd00790a937"
        },
        "item": {
          "id": "5694dd3e-6ec6-4c46-af70-012d15565069",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0a62d106-04c0-4454-b936-bb56b8bd5ccc",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "05ab5488-51d8-401f-bad4-0570cf306afb",
        "cursor": {
          "ref": "953408f8-e621-442b-882c-b7a0b650e7cc",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ad6a1dde-732c-4e2f-98e3-38eb275c6a0c"
        },
        "item": {
          "id": "05ab5488-51d8-401f-bad4-0570cf306afb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9c4ba507-b3a7-4fd2-a7b0-94fb29f80b88",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "fa824756-591d-4af3-a922-1079585e073c",
        "cursor": {
          "ref": "b9c61342-dedc-4e2f-8a9a-9c4c0e4b797c",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d2170837-ac6b-4745-b425-7782463c4495"
        },
        "item": {
          "id": "fa824756-591d-4af3-a922-1079585e073c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "678454d2-a2e8-4eb0-9e25-32df9594d5f2",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "ca0acd84-5649-42ce-afaa-4990fa21f1d0",
        "cursor": {
          "ref": "533035e1-73dc-4a9a-9bb0-621681d31dd9",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f06ca824-8b7b-4db2-b26a-b38dfdebee57"
        },
        "item": {
          "id": "ca0acd84-5649-42ce-afaa-4990fa21f1d0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8dbcb961-c8db-4212-805a-8f251ab31d97",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "a144a56a-c22f-4d60-95ad-6ebf6d9ec969",
        "cursor": {
          "ref": "55607a2a-3f90-4316-965c-0a3e4b719ddd",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c65916af-92ad-4967-84e8-88697a980d8c"
        },
        "item": {
          "id": "a144a56a-c22f-4d60-95ad-6ebf6d9ec969",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c265dcde-24a2-48c1-8e55-c58ddc5b2fca",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4dbdeb28-e9c1-4ffd-9c93-b69bbd8f450f",
        "cursor": {
          "ref": "84e520d1-b061-4af2-8cad-499d692dc761",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b21b9f9c-be35-4eb7-8554-1a94bc9b6a02"
        },
        "item": {
          "id": "4dbdeb28-e9c1-4ffd-9c93-b69bbd8f450f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3540ae87-4872-47f7-9b36-4bd3e35b3166",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "600e55a4-6de6-40da-afce-e45a5ed0465e",
        "cursor": {
          "ref": "ba02d875-6a66-4157-97a1-eb067149bf9e",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4809eaab-ef5e-480c-91de-dd5db3737ac2"
        },
        "item": {
          "id": "600e55a4-6de6-40da-afce-e45a5ed0465e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "67e71aa5-55a9-4b8f-a2d0-90e5a49b89f5",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "eb2babf2-4f04-4bf0-ad89-a46b65a4a4ce",
        "cursor": {
          "ref": "aa81f563-6a85-40f5-9432-b5a5d0ef34b9",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "aa2ab302-07c4-4381-a48f-41287ebb1896"
        },
        "item": {
          "id": "eb2babf2-4f04-4bf0-ad89-a46b65a4a4ce",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "618d03d6-01f2-43ba-8034-0d45ec170e98",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "839ed153-df08-470e-b123-fbc2d25bc53f",
        "cursor": {
          "ref": "565ab97c-c90f-4f15-b4aa-8378995bedf7",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "dabcb7a1-208a-444f-a39f-7abc5f5f4798"
        },
        "item": {
          "id": "839ed153-df08-470e-b123-fbc2d25bc53f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a3e103b5-2079-4127-a070-c39a3b276a72",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "84fc1a3c-026c-4be0-b144-f9bdeb3f2847",
        "cursor": {
          "ref": "a8df2089-f7e2-424a-a98a-b308afd838ce",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7055393d-3426-496f-bb9c-5858e5504079"
        },
        "item": {
          "id": "84fc1a3c-026c-4be0-b144-f9bdeb3f2847",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6c4f0456-d713-4ec6-8f1f-367b4d3d70bc",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "5fbc263f-dd61-4b52-80ca-523e5821b999",
        "cursor": {
          "ref": "79931115-18b7-4b61-b288-8b06b40d1668",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2fcdd733-a577-487a-8f85-f32596c6eeba"
        },
        "item": {
          "id": "5fbc263f-dd61-4b52-80ca-523e5821b999",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b62e736b-cbfd-4ab5-a326-2f38e059b8d0",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "5983ba15-a97d-4fb7-a051-02c281ec1519",
        "cursor": {
          "ref": "b7d2e477-996a-49ff-a9b1-2396230d932a",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f9c424dc-3cf4-4c1a-ab50-7f5b13a66abc"
        },
        "item": {
          "id": "5983ba15-a97d-4fb7-a051-02c281ec1519",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f142e498-21d0-4b8c-b912-89042170e167",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "412d8018-4771-4b7a-972d-bb5818735cc2",
        "cursor": {
          "ref": "8e2f7117-8ba6-47dd-a3e3-7353abcef6a1",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "da04b894-2596-4a6f-aa79-79f32b60b778"
        },
        "item": {
          "id": "412d8018-4771-4b7a-972d-bb5818735cc2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dd5539c4-3a97-470f-99ef-6f841aca826a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "bccf2e99-a772-4864-a0df-5393c0e3f25b",
        "cursor": {
          "ref": "10673f47-c4d4-4ac3-a8f3-412e7da27025",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "20e1fb12-dab5-40a1-969c-de03e074f20a"
        },
        "item": {
          "id": "bccf2e99-a772-4864-a0df-5393c0e3f25b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ea248ede-e3f4-4481-b131-48b9f9492ba2",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "2d426f71-f86f-431c-82a4-33582e510cad",
        "cursor": {
          "ref": "815da25d-5bd7-4c2f-98e0-a0dd2d02ca1f",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f936278f-ba13-4490-a277-359932cbb912"
        },
        "item": {
          "id": "2d426f71-f86f-431c-82a4-33582e510cad",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d0756234-69c8-49d0-907c-b0bd64b4c313",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "c2092f69-bf9f-4964-ac64-5fade7928693",
        "cursor": {
          "ref": "614c4b84-5031-44d2-a164-b8265a2131ee",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "132ac22a-3cf8-40b2-9e7c-7f6c5a04a1f6"
        },
        "item": {
          "id": "c2092f69-bf9f-4964-ac64-5fade7928693",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fc8eb91f-ce66-42b9-98ee-651dc5a88479",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c0982751-71c1-4662-8f50-c0fa599451de",
        "cursor": {
          "ref": "5c309d06-c8c7-4f80-aa28-8970ce0fab22",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1682dfc7-31cd-445a-b628-62412936cbd4"
        },
        "item": {
          "id": "c0982751-71c1-4662-8f50-c0fa599451de",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9168a327-14a5-40ff-b52f-fe0f4f812e5a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "a0422455-47b6-4a7f-b118-d9a74a5bd1d6",
        "cursor": {
          "ref": "d04883d2-b0d5-4d42-bd14-48957e1050ef",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8e797462-831a-4fb5-82ec-6283f4801dab"
        },
        "item": {
          "id": "a0422455-47b6-4a7f-b118-d9a74a5bd1d6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5892412b-c8ad-4a75-995d-9d60b949f51e",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4a8c2f6c-46ea-47e1-8b0d-64034243b2d8",
        "cursor": {
          "ref": "66003959-c612-43ad-869d-7c0d38cb6e16",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2d5980df-e116-49e7-a20d-2f386acac163"
        },
        "item": {
          "id": "4a8c2f6c-46ea-47e1-8b0d-64034243b2d8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2a32c57f-bbfa-4d5c-a28b-35b18d1493f5",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b198e78d-2f39-42a8-8cca-9fab8d739fe1",
        "cursor": {
          "ref": "978a893e-1b6b-4b92-b5eb-9fad291b1a8f",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6d3a0051-11d3-4d9a-93c1-5882a92bc255"
        },
        "item": {
          "id": "b198e78d-2f39-42a8-8cca-9fab8d739fe1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "166a3f8e-570b-48ff-ab2d-067cb23bb63a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2af398b0-71af-4676-84fc-dcd46259a5ab",
        "cursor": {
          "ref": "69248f74-4144-44b8-b6dd-7d2cc4c800ad",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9a224d54-c57d-49f3-9b5b-994ce65f204b"
        },
        "item": {
          "id": "2af398b0-71af-4676-84fc-dcd46259a5ab",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e694ad28-fd57-4ef4-8055-e26311ff1ded",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c7bf6b-d03c-4221-8e59-5c73d5c57c86",
        "cursor": {
          "ref": "874af975-6eb7-4852-8b9f-9f1eb352277e",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d5516bb5-72a7-47cd-8f20-fdede951c26d"
        },
        "item": {
          "id": "47c7bf6b-d03c-4221-8e59-5c73d5c57c86",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f2e1c25b-71e0-4a58-8e17-4831f5fbe535",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afb715f-ba07-4451-a595-a060dbf9ddda",
        "cursor": {
          "ref": "53bfcaef-222b-4ba0-8136-cbb7335fd0d3",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e401d9ed-af22-4ee9-8b8c-2c1b8512a93e"
        },
        "item": {
          "id": "0afb715f-ba07-4451-a595-a060dbf9ddda",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6ef1ce40-397a-4175-b964-7756f8c3d10d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afb715f-ba07-4451-a595-a060dbf9ddda",
        "cursor": {
          "ref": "53bfcaef-222b-4ba0-8136-cbb7335fd0d3",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e401d9ed-af22-4ee9-8b8c-2c1b8512a93e"
        },
        "item": {
          "id": "0afb715f-ba07-4451-a595-a060dbf9ddda",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6ef1ce40-397a-4175-b964-7756f8c3d10d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b73e49d-7221-44db-a470-08120ad81d92",
        "cursor": {
          "ref": "3c2eb490-8c25-4e87-b753-6824ff2f9dc0",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5b104ddb-7ca4-4787-b009-3620f873d6af"
        },
        "item": {
          "id": "6b73e49d-7221-44db-a470-08120ad81d92",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cb857d32-0a7f-4309-a69f-fc7dead240e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a832f0e-78a3-4808-ac47-252cb2136796",
        "cursor": {
          "ref": "fb470ee8-7fbc-4dad-b43b-e10cd9c944c6",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "76c7a3a6-4a32-4566-b0dd-0e120da2334c"
        },
        "item": {
          "id": "2a832f0e-78a3-4808-ac47-252cb2136796",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "42bce285-5a43-4867-ae30-6ad9dbc1a854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b57086-b1f4-4fe4-8118-94b996999710",
        "cursor": {
          "ref": "c9d07df5-9047-43f1-aef1-dfe9ce746d4a",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a5062eb1-0bad-4406-8a08-f963988d45db"
        },
        "item": {
          "id": "d6b57086-b1f4-4fe4-8118-94b996999710",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "53519db5-6946-4960-8ae0-c0b30b2ad983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b0eacd-1326-46d7-b624-39ebb95c278d",
        "cursor": {
          "ref": "246c911b-7e17-4eb9-b9e3-186ec3051b02",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "859b997c-a160-42a4-a3e3-d034e464495c"
        },
        "item": {
          "id": "90b0eacd-1326-46d7-b624-39ebb95c278d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8158fb08-0233-4e6e-a270-555dbaf6db3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d95a22-7ecb-42fb-b6cf-727744adfc7d",
        "cursor": {
          "ref": "27c57fc6-8102-4ecb-a873-385bdf5247c2",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a4baeb53-a688-49a5-aca6-950efa8af86e"
        },
        "item": {
          "id": "a8d95a22-7ecb-42fb-b6cf-727744adfc7d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "173ebc95-1748-42b1-a35d-5c212fb4e513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb54910-b9c0-4cb3-882f-a5fa1bd5ce19",
        "cursor": {
          "ref": "6f9b3c47-3772-4843-9e5f-88f7d15a8503",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1d1e12ac-d30b-464d-95c7-1483c98aa987"
        },
        "item": {
          "id": "bcb54910-b9c0-4cb3-882f-a5fa1bd5ce19",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "337fee27-a26c-49c9-9678-d5cd109f7008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b213d3c-0b50-469b-a658-f5a517b463a1",
        "cursor": {
          "ref": "131a09e8-a227-4791-8237-ee5f603ae5ae",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "38a68967-5d9d-4d58-af32-9df8f59952fe"
        },
        "item": {
          "id": "7b213d3c-0b50-469b-a658-f5a517b463a1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "11187813-4221-4051-8614-0dcdf91a8954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6860c58-f56e-48e7-b1bd-589972c743b7",
        "cursor": {
          "ref": "7523ba1e-fe54-41fe-9506-2dbcb1215b48",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "30e69b5a-0c91-496b-a89c-2a55bcac66ad"
        },
        "item": {
          "id": "d6860c58-f56e-48e7-b1bd-589972c743b7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8ef1fbc6-d1dc-41a5-af0b-161eb48b9afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a818d219-93db-4c06-b58e-a9bb5f91344c",
        "cursor": {
          "ref": "d77d3ea3-095d-4598-9d61-0b55cbb937df",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1266caa9-6e70-410e-abaf-425db88b5360"
        },
        "item": {
          "id": "a818d219-93db-4c06-b58e-a9bb5f91344c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f016ff8a-7f26-4000-aa22-b1398eb743a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b4af63-e375-4112-b2a2-bb5db44be625",
        "cursor": {
          "ref": "14ef5b5a-bfc0-4ed1-8db9-e047ee9abe98",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "05cfbf47-3fe6-4889-b01b-fe758d7e2b9c"
        },
        "item": {
          "id": "46b4af63-e375-4112-b2a2-bb5db44be625",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a74cd12c-e1e9-41fc-80a7-7b29462e17fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8081583d-e827-488d-9684-537079ca656f",
        "cursor": {
          "ref": "d7f862ec-266e-447b-9de1-944e4bb110e0",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "472ca96f-1401-4529-b7e2-f689dcf68d76"
        },
        "item": {
          "id": "8081583d-e827-488d-9684-537079ca656f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "76f944a3-5ac9-4ebe-8cb3-8243d2f7a6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b785db-2fa6-4b28-afc1-ab9592eb1c3e",
        "cursor": {
          "ref": "6c868e09-09b8-449f-ac14-e1492867dc9b",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "697df3d7-fe0f-4969-9322-79368d2da6e3"
        },
        "item": {
          "id": "b7b785db-2fa6-4b28-afc1-ab9592eb1c3e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b5c2c4ba-7bff-47ed-8848-87479d1c5606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1918765-9954-4a8a-aaa9-cda572ac1964",
        "cursor": {
          "ref": "0505050a-d326-46e5-b84c-372adb899b7a",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "796887e1-269e-4d2c-a6a3-b71ad8965458"
        },
        "item": {
          "id": "b1918765-9954-4a8a-aaa9-cda572ac1964",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0069259e-b55e-49fc-9b7a-6b3bcd0282f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881391d3-50eb-44e7-9d19-7a8166fac5c8",
        "cursor": {
          "ref": "7b4cd903-71d9-466d-bc32-90bb0421cf2d",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2b864932-0d3f-4e89-8fd2-8f0dfc4bd33e"
        },
        "item": {
          "id": "881391d3-50eb-44e7-9d19-7a8166fac5c8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5befd444-aa3e-4230-99b4-597f7a8cd58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6ed979-0272-4593-b807-d4dd551f9c19",
        "cursor": {
          "ref": "cba58e18-318e-4e57-b96a-67289fe25081",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9023eaf6-e4ae-4dcf-a37f-fd0f2491b796"
        },
        "item": {
          "id": "ae6ed979-0272-4593-b807-d4dd551f9c19",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "64461f17-a403-4559-aba4-1fba2c452a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6a2abe-9f16-496d-82ff-0db9c2907257",
        "cursor": {
          "ref": "2800ad72-32ee-4077-ba14-e62815547ec8",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dd651331-333c-4775-a27a-458d01b864d3"
        },
        "item": {
          "id": "7b6a2abe-9f16-496d-82ff-0db9c2907257",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5ab57019-de41-47d7-bdd1-b4a19429157b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593277f2-350b-4804-a216-7df0589be3ed",
        "cursor": {
          "ref": "8d03f7d8-d412-4c5f-9bec-d89fc7cc48c2",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "10fdaef2-6378-4b8b-914f-1a807bc643a6"
        },
        "item": {
          "id": "593277f2-350b-4804-a216-7df0589be3ed",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "adafefbb-9701-45b0-9243-e1e1bdc12041",
          "status": "OK",
          "code": 200,
          "responseTime": 643,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "c8850c1e-d50e-4df1-b41a-d74576a122a1",
        "cursor": {
          "ref": "14480fb8-3ef4-4187-bd81-8ea97641c414",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cdfc3639-8499-4702-bef0-5213e8f39f19"
        },
        "item": {
          "id": "c8850c1e-d50e-4df1-b41a-d74576a122a1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "eef86fee-06ab-496a-a3e5-4044cdc5ad93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d10c42-b194-44d7-af51-823eb7593473",
        "cursor": {
          "ref": "9ddb7628-f92b-47b5-9f2c-cb7bacd489c6",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f741d687-cd55-46ea-9d61-f48acef1720f"
        },
        "item": {
          "id": "b2d10c42-b194-44d7-af51-823eb7593473",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a85c15c1-5038-443e-a034-f32dbf07f9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2aa8a43-e707-47c4-a7c2-81f98f68f56b",
        "cursor": {
          "ref": "f4f3db59-6b68-4c89-ab44-1edb67d31482",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a5866c36-8547-407c-b698-3a1a308c80e1"
        },
        "item": {
          "id": "a2aa8a43-e707-47c4-a7c2-81f98f68f56b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "059824a4-ecb7-48bb-9707-a3c250a81131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b68e28-b7d0-4b4d-b1a3-35ef5a284be8",
        "cursor": {
          "ref": "55c70a9f-2f2a-4174-9d80-636a29ecf153",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c0cfb8e3-b485-4571-ac9a-ad2d39e38d28"
        },
        "item": {
          "id": "92b68e28-b7d0-4b4d-b1a3-35ef5a284be8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8360e168-2ada-4cc5-87a1-e4815750e35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a28dc02-9d99-4573-b35b-94ed571a951b",
        "cursor": {
          "ref": "a8bf43d0-08db-4b84-85bf-030cd1a43646",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "42a1bb33-8e85-48c3-92ba-ee3d3582233f"
        },
        "item": {
          "id": "9a28dc02-9d99-4573-b35b-94ed571a951b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "41ed314e-6c5b-4393-8ba7-83b8a3c1174d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65b0148-1511-4b71-b3bb-beef54660ab3",
        "cursor": {
          "ref": "cda93a0f-5646-40ee-ab04-c0dc809cf213",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dc5e66e9-dc2f-4cf2-98b0-50ed01947e26"
        },
        "item": {
          "id": "b65b0148-1511-4b71-b3bb-beef54660ab3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "602063a7-4699-4b3f-b22a-9cfedc675170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ce05df-0ed5-403c-9dc2-0a22cd4b211d",
        "cursor": {
          "ref": "cba16199-feb9-45fc-b425-62d2592be01d",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0fecfea0-6756-491c-b467-c8bcbac8a65e"
        },
        "item": {
          "id": "83ce05df-0ed5-403c-9dc2-0a22cd4b211d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "12b9a5dc-fcd6-41e3-b9d6-21e32ec26453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710939f9-fdb1-4d04-a5fd-8d45076f0279",
        "cursor": {
          "ref": "d0ea3cf9-52ee-4e81-82da-462ecdc06847",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6a0d4ccd-d46d-4b85-9ffd-6f01a795239e"
        },
        "item": {
          "id": "710939f9-fdb1-4d04-a5fd-8d45076f0279",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2c66398f-a7e1-43f9-8dd3-c02e6914b596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8b4801-b0b8-4d20-92c8-690fa658f437",
        "cursor": {
          "ref": "a5da4ab5-e44b-4ba8-a08d-edb7e52f95a7",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c37d3a50-ba80-493d-9e3f-555b50b2970f"
        },
        "item": {
          "id": "7f8b4801-b0b8-4d20-92c8-690fa658f437",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6161876a-bd19-4793-a506-365ef5ed06f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0ef1dc-804f-452d-ada7-c3169381629f",
        "cursor": {
          "ref": "d11c6cd3-4045-4a24-aad0-27f73f1069cf",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "79b0a053-e96e-4d3d-93df-1eea8311da73"
        },
        "item": {
          "id": "af0ef1dc-804f-452d-ada7-c3169381629f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6767b7dd-8dad-4c85-9c72-af3937d670cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3c810a-427e-4d89-b416-e47a4cb210a1",
        "cursor": {
          "ref": "8a1fd162-ab9b-4b5f-bcec-251069a6a77b",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "14dbbe50-ab82-4aa8-bd76-784f062976e2"
        },
        "item": {
          "id": "ef3c810a-427e-4d89-b416-e47a4cb210a1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "73ea1129-1430-45eb-8af3-93a9f07e439f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce43c18-9ef9-4563-9f57-55f78ec95044",
        "cursor": {
          "ref": "79cee2e3-7b31-4a22-b67a-7d7c054ad619",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "622f37a6-f087-472f-89ae-393f83d85091"
        },
        "item": {
          "id": "5ce43c18-9ef9-4563-9f57-55f78ec95044",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3e5d7837-d3dc-4bc0-bae7-ad1dad9f26d8",
          "status": "OK",
          "code": 200,
          "responseTime": 290,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "07acd63f-8e2c-44e3-a83d-11cfac8437da",
        "cursor": {
          "ref": "3bc981e6-280f-4309-aa0d-2664110421dc",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "30715f0e-2c29-4b33-bae7-0cc1052b127d"
        },
        "item": {
          "id": "07acd63f-8e2c-44e3-a83d-11cfac8437da",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9d7ba6b1-2165-4aad-a585-4675a2ae26c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483d4965-bc7d-4563-ab08-49e11e6003db",
        "cursor": {
          "ref": "8e251f14-afd3-4682-8463-1713e4fdd049",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3cc8d878-88e6-4cf8-9219-e754a49a1184"
        },
        "item": {
          "id": "483d4965-bc7d-4563-ab08-49e11e6003db",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5192330b-fb39-4bb5-ad89-050dd646b8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718bf3e5-0132-4ed2-a46c-f2f8288a2f80",
        "cursor": {
          "ref": "0f603423-28e5-4952-9ce4-6cc0c43c2996",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5df0265e-4437-4144-a60b-0b25710a51d2"
        },
        "item": {
          "id": "718bf3e5-0132-4ed2-a46c-f2f8288a2f80",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "22bb4c89-6ffd-4948-822f-1cda454021f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9a3f5c-c354-4749-bb3a-ccf9aebcd1c2",
        "cursor": {
          "ref": "b481ea44-07d2-45ca-abf2-93fe87058086",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cc5c827c-04ff-41aa-a7db-566327485c44"
        },
        "item": {
          "id": "af9a3f5c-c354-4749-bb3a-ccf9aebcd1c2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5701dad2-6525-44d4-b7d9-5cc723591363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf05414-173b-4aec-a5d9-8aa6f7dc2fd7",
        "cursor": {
          "ref": "98c850b9-1131-43d9-910e-9e544f1b9b81",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "183c8d72-2213-489a-a7fe-78c860263c82"
        },
        "item": {
          "id": "bbf05414-173b-4aec-a5d9-8aa6f7dc2fd7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7b4bd0d4-d46c-4bbb-b517-9467ecdb8680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de6b0cc-5e0b-4b10-a3e2-8f0b24bf94d2",
        "cursor": {
          "ref": "6926a3f2-2aef-48de-bf78-15e4034a1486",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3d8dbe0b-38c0-40e9-9e5a-ce9d364a85dc"
        },
        "item": {
          "id": "0de6b0cc-5e0b-4b10-a3e2-8f0b24bf94d2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8f9632d7-22d4-45f7-89c3-bc36a252e655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66e8ff4-71a0-4824-b30d-2213827d53a3",
        "cursor": {
          "ref": "71aeeee1-cb04-4911-b70f-c0e137858646",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "03760d02-5f34-46a8-873d-5da8dab13fa7"
        },
        "item": {
          "id": "f66e8ff4-71a0-4824-b30d-2213827d53a3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "462b89f1-dbf7-4fa1-9af6-29daec1229f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41e3aa4-f405-457c-8374-96edb168f735",
        "cursor": {
          "ref": "e37fe58c-fac8-46d4-b11a-469c2c5221c3",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "eee529e4-0feb-4d83-bc94-6c68615f7da4"
        },
        "item": {
          "id": "f41e3aa4-f405-457c-8374-96edb168f735",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9aab1b55-5d63-4410-b1b7-37801cc51c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756d7aaf-b3ad-40f5-a56e-2606a2fdaac8",
        "cursor": {
          "ref": "dd4b8c2d-b975-4a8f-898d-74cd48157169",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "605fbcca-7611-41e9-b193-82a83507e1e1"
        },
        "item": {
          "id": "756d7aaf-b3ad-40f5-a56e-2606a2fdaac8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "657e624c-de69-4ef5-93cb-06d6b918249f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4748ee-7e8d-4606-a326-0c4d59a314d6",
        "cursor": {
          "ref": "506a975f-2d75-4ea1-9ede-ffcfabd1a267",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "aa8cdbe4-ffba-4a8b-a9c2-812b59cf3679"
        },
        "item": {
          "id": "cb4748ee-7e8d-4606-a326-0c4d59a314d6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3e62b429-8a7a-4712-983a-5676c150902a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 699,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8a8290-7314-4122-8baa-13dcaf6767c4",
        "cursor": {
          "ref": "690dbe64-834b-42e9-a5cd-51a493b4f727",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3f0c6b81-074e-4f22-b83c-16c221c08728"
        },
        "item": {
          "id": "2c8a8290-7314-4122-8baa-13dcaf6767c4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a73dcec9-6607-4ae8-8568-cdc9ba1de04f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c0b536-c2ae-4afc-9441-1dc0268d945d",
        "cursor": {
          "ref": "24b948a6-b974-4b73-b823-f01c9aed0c9e",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b6345ff8-2e7e-425f-bddd-5b87af249abc"
        },
        "item": {
          "id": "08c0b536-c2ae-4afc-9441-1dc0268d945d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1952a45b-f37d-40ab-86a2-30926942613f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5e3dcb-9c80-483f-a329-5a982fd4e407",
        "cursor": {
          "ref": "44c37e31-96d5-4a5f-8371-ddd6a49721b3",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cfd7c25a-0a5d-4fa7-bc34-ebdf2153bd4b"
        },
        "item": {
          "id": "0c5e3dcb-9c80-483f-a329-5a982fd4e407",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2f419820-de04-4bfb-910e-0fdeeaa593a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12eb74a3-3ceb-4dfb-b3e5-43ef7f7fb19e",
        "cursor": {
          "ref": "0cc69490-f799-45e8-9605-e6c463dbb1fb",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c285f1c7-5da1-446a-bf42-d3fbc1c66b71"
        },
        "item": {
          "id": "12eb74a3-3ceb-4dfb-b3e5-43ef7f7fb19e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "78bd5dd4-e7b7-4f81-9525-4f60d52d5af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7496a8-be88-438a-b680-3256ec3911d5",
        "cursor": {
          "ref": "e8557129-11f7-4b6f-8b12-8bbb9361a0fb",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fe16396d-a2f3-48c5-b077-488a5672d5a6"
        },
        "item": {
          "id": "ab7496a8-be88-438a-b680-3256ec3911d5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5ddd0679-ef86-480e-907d-3ccd769ac014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3db28b-2169-4ab1-ba34-e2896dc3acc9",
        "cursor": {
          "ref": "52827a9a-e7f9-41f7-818f-fb932f002f0d",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ed5a98a7-c75f-48fd-b34c-a92824d6b9bd"
        },
        "item": {
          "id": "bc3db28b-2169-4ab1-ba34-e2896dc3acc9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "864024bb-1813-4830-877b-7c033adf35cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7c53c6-0b37-4dab-ac3b-f6c33ae29011",
        "cursor": {
          "ref": "499edec0-1b1c-4e29-b875-a509ffaa62e8",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0ebd2d64-8fc2-4c04-96f6-0f46980cb419"
        },
        "item": {
          "id": "ab7c53c6-0b37-4dab-ac3b-f6c33ae29011",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a7b5f424-e109-443f-92d1-ecca7d4bb2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17869723-6e7b-4345-b9d6-2422c8d49a9e",
        "cursor": {
          "ref": "aeaef4de-3169-40cc-afc4-04853dae0e71",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a3f54645-0409-4f56-b816-ea0d6480c237"
        },
        "item": {
          "id": "17869723-6e7b-4345-b9d6-2422c8d49a9e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ac6ec8b2-7713-4e76-96e7-fe795ea67bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b5d2e6-c00e-4bdc-bd92-eababd9324bc",
        "cursor": {
          "ref": "5c33dcb8-e07c-41c1-9716-b15af7e52ff2",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fb2b48c7-d733-46f8-a89e-f89611318bed"
        },
        "item": {
          "id": "32b5d2e6-c00e-4bdc-bd92-eababd9324bc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bc12032b-f4b1-4b27-9c91-8c91ebb00f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134ae378-ca54-4bb3-a47b-b37daf418e21",
        "cursor": {
          "ref": "e6cb5505-8d6c-4e5b-a29a-9a2c2bdd5995",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7bcc5625-8be3-4492-bca2-7819ee2a416d"
        },
        "item": {
          "id": "134ae378-ca54-4bb3-a47b-b37daf418e21",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c7aff568-f8fc-4272-ab9d-b5c5d8b34edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455e7f10-fd95-4554-af4e-5665bd5717a0",
        "cursor": {
          "ref": "ecf2cb7a-8521-46d1-b747-793a917a7da4",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a13e626f-3b09-4b29-9921-8a60ccfb7345"
        },
        "item": {
          "id": "455e7f10-fd95-4554-af4e-5665bd5717a0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "88458db1-a54d-41b8-b747-8d70f4bfecc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee167a8-ee4f-46e5-ad53-de034d2a8df4",
        "cursor": {
          "ref": "0068ad2d-561a-401c-bf1b-b93734c665f6",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "831ee198-688d-4c4b-8a07-d06f4345bd95"
        },
        "item": {
          "id": "cee167a8-ee4f-46e5-ad53-de034d2a8df4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4369d3ec-da33-4cc2-b674-790a7d5aad40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ddc84b-4284-4a9a-86cc-91432500b572",
        "cursor": {
          "ref": "3337a11d-2cf9-4bcd-a82b-9366ef3c2f4d",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "39ecff22-00f8-42bb-9b22-c80b00281c28"
        },
        "item": {
          "id": "b8ddc84b-4284-4a9a-86cc-91432500b572",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1fadadeb-35de-424d-83ad-55f1b85649f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d47004-100a-4964-8bb4-b4fc10b1da63",
        "cursor": {
          "ref": "65d480fa-bdef-4660-86f6-d75ccd6ec9b6",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8beccb52-1257-48f8-81b4-d4a90a27012c"
        },
        "item": {
          "id": "e7d47004-100a-4964-8bb4-b4fc10b1da63",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "be98ebcd-540e-47a2-b4a2-c41fbea1c3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e77e31-260d-4e76-975f-3d73ee70cde0",
        "cursor": {
          "ref": "6c2c67c1-a36e-4898-92aa-2fe91ed9226c",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "899c4d69-5cda-47d5-a22b-3ae858317e49"
        },
        "item": {
          "id": "c7e77e31-260d-4e76-975f-3d73ee70cde0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "48cb8dd5-f0b8-441d-b7a8-5777586fca16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ba2190-0698-475e-b9b1-eb97447d4e7f",
        "cursor": {
          "ref": "877df032-394e-472f-bd99-2e16cfa022e6",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e3961e79-a0e0-489b-8ca0-35d173aa9784"
        },
        "item": {
          "id": "74ba2190-0698-475e-b9b1-eb97447d4e7f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "791505c0-f3b1-4f4b-89aa-5b7c33a6aced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587b95e4-9ef3-49be-b625-ac0397ecc747",
        "cursor": {
          "ref": "ecedc8d8-68a1-4b48-868f-a19555f67cd4",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1a1b037a-7d4e-478d-8877-87dce5879fe8"
        },
        "item": {
          "id": "587b95e4-9ef3-49be-b625-ac0397ecc747",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f83818e6-fa1e-4e09-b57f-2d5db02ed5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a156409f-a066-4f92-aea2-9fa7e9d5abbb",
        "cursor": {
          "ref": "c58a40c9-5e7a-4e4d-8756-1e165dc479ba",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "00ef785e-a357-4ef2-bf94-30f0789d31b9"
        },
        "item": {
          "id": "a156409f-a066-4f92-aea2-9fa7e9d5abbb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "aa7c4343-37dd-4aa9-b642-7e2d018657cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfd34ab-6e67-4bc4-980b-fd15d0dc5049",
        "cursor": {
          "ref": "288e362e-9392-48b9-bd77-51cbff9ad447",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4aba8228-df8b-409f-83ab-0699bb00fa72"
        },
        "item": {
          "id": "9dfd34ab-6e67-4bc4-980b-fd15d0dc5049",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5cd6653b-7710-49c1-be91-2718ea544550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50897884-c89f-4216-ab3b-821522699b02",
        "cursor": {
          "ref": "632e1645-89cf-4bb3-bb7d-1ece4922254e",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bc4b0417-a7cd-4614-9bab-84f179f6ab17"
        },
        "item": {
          "id": "50897884-c89f-4216-ab3b-821522699b02",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7d98a994-6ebd-443e-b216-3769b0ec9f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56124517-fb3c-4c11-8d69-f044b5952b55",
        "cursor": {
          "ref": "a0e6bbdf-f5f3-4f4d-b8a6-35801fd28bb8",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8a20aa7c-079a-4e11-bc80-d2e9291acf7c"
        },
        "item": {
          "id": "56124517-fb3c-4c11-8d69-f044b5952b55",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "be0404dd-f1a6-4610-9727-771fc48c1f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0fb743-64bd-4eb6-90c3-9e182db1f782",
        "cursor": {
          "ref": "f0be73d1-2cbc-431d-8ecd-4ed6226c829a",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4febd0d8-6b48-4be4-a4b4-5a674b8e4505"
        },
        "item": {
          "id": "be0fb743-64bd-4eb6-90c3-9e182db1f782",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ed9398ff-e31d-4a60-875e-ca203fd827e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cc64ed-6af1-4fbb-8a68-3d0b681bfd42",
        "cursor": {
          "ref": "9b27929c-2d16-4238-9efa-b65ef8da5a59",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "be42bfd1-b1c4-4826-8d90-5aa04493b08c"
        },
        "item": {
          "id": "96cc64ed-6af1-4fbb-8a68-3d0b681bfd42",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "636a8964-49de-44c3-81ab-754ba1d98c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14a58eb-1685-47bb-a5df-4f73b242dc22",
        "cursor": {
          "ref": "200ead1f-891b-4cb8-bd5e-a83e774950a0",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "270ddf73-afa3-4872-9dd3-b005fd2dc08e"
        },
        "item": {
          "id": "d14a58eb-1685-47bb-a5df-4f73b242dc22",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "af7e3c4f-1790-430b-bd45-ba2531c7fed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df96c949-9977-41cc-b195-dd96c2ef3f55",
        "cursor": {
          "ref": "9985484c-6211-4958-82a3-87ddb7ef8a3b",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6a4f4f40-1e35-42e0-9223-f31d3ae474d9"
        },
        "item": {
          "id": "df96c949-9977-41cc-b195-dd96c2ef3f55",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2a64129c-68d3-49f6-9893-b0a1158743af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22196a85-7bff-4df6-966b-c0f17624a4ce",
        "cursor": {
          "ref": "cde9ebaf-bf69-4496-8a8b-ea1505d8076a",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "30277f58-b5f4-4f28-a232-20a754d69075"
        },
        "item": {
          "id": "22196a85-7bff-4df6-966b-c0f17624a4ce",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c46b2950-57db-4d3a-be7e-7e3d54bcd237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68a5c9b-eba7-4927-9fd5-deedcc2ece13",
        "cursor": {
          "ref": "2b7d983b-9172-403c-b462-c7230170cbe8",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4586e9fe-2fc1-4197-a127-3a9980f4d4ae"
        },
        "item": {
          "id": "c68a5c9b-eba7-4927-9fd5-deedcc2ece13",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d6035a16-19e0-46a6-a124-18f9b9d51575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f8a628-f7c7-4035-8571-ce6ed793f628",
        "cursor": {
          "ref": "380497d7-5f8b-437e-88dd-c113263ec358",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "01f74ab7-ace6-42f9-b388-280c24a9733d"
        },
        "item": {
          "id": "68f8a628-f7c7-4035-8571-ce6ed793f628",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b3718c01-a988-4b23-9833-edf05f6efb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222327d0-5782-4cf0-a5db-39a96459e15d",
        "cursor": {
          "ref": "5330061e-7c1e-490a-8fce-d8ed6af33228",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b49b13b6-59f6-47e7-b79a-2d0bda1729bd"
        },
        "item": {
          "id": "222327d0-5782-4cf0-a5db-39a96459e15d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0a54bf7c-f3bb-4b0b-8610-ff5e3e7bc598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0979fef-1800-4202-8e16-ea40b64dc871",
        "cursor": {
          "ref": "4108ddcc-2840-40f8-ab27-4dc4785518b0",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "adb89d1e-4375-4c38-b9ed-afb98590dc1a"
        },
        "item": {
          "id": "f0979fef-1800-4202-8e16-ea40b64dc871",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c9b4653c-92da-48bf-a126-b7578373a7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac498606-85d3-4237-8bc7-67950bad3440",
        "cursor": {
          "ref": "6e1b0ab0-3e8f-43f1-8eea-026117b23322",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4c59781a-8093-49e5-b81d-da2b4174b53d"
        },
        "item": {
          "id": "ac498606-85d3-4237-8bc7-67950bad3440",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2c831005-c53e-46ed-bc90-83689851d36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4475fb2-2f0e-45a7-b113-cfa048e5aa65",
        "cursor": {
          "ref": "f650ccea-7dfa-47ff-8b57-aa2da014bd10",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0cc02eb1-0c85-423c-9f16-7f17d7d23c48"
        },
        "item": {
          "id": "f4475fb2-2f0e-45a7-b113-cfa048e5aa65",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d74a207b-0b96-4b14-b0bf-e8e4898a343f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dc7bc3-2514-4bd7-8035-3f8c0d9404e6",
        "cursor": {
          "ref": "7a8b45d0-14b3-4a55-83e3-09e8017fd197",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f761a0af-b468-46d9-ac70-f7539fc0b1ea"
        },
        "item": {
          "id": "65dc7bc3-2514-4bd7-8035-3f8c0d9404e6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fc58a3f2-85c1-4c34-9132-9a2b65ae8fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff47fbe-ad4b-4220-8db4-290a7dbcb4fc",
        "cursor": {
          "ref": "b380fcf8-eabe-4d75-901d-e97f829b145c",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "74a004cd-8943-418a-93c3-53d3d5264303"
        },
        "item": {
          "id": "0ff47fbe-ad4b-4220-8db4-290a7dbcb4fc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "52545fe1-c8df-4481-a827-0fee28530ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71750d86-c19e-4f1d-8a85-aed9a602c5b6",
        "cursor": {
          "ref": "82e559f2-9dfa-479f-a920-c0f3434fb397",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "109a3fd9-13db-4b2c-b98a-a82d783673f5"
        },
        "item": {
          "id": "71750d86-c19e-4f1d-8a85-aed9a602c5b6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f4fe8ba6-dbbe-4e54-a9eb-ef3cd76c9770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dcb90b-d7ae-4b7e-b52d-c98427f0f92c",
        "cursor": {
          "ref": "506c5201-3297-4a9f-bcb3-d4201d4646d7",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "41fb1cbd-fdc2-4182-87ba-4ee15c77d28d"
        },
        "item": {
          "id": "31dcb90b-d7ae-4b7e-b52d-c98427f0f92c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0621ab71-d718-4078-a248-0edd38e3808c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0bbeee-9977-49e9-bbf1-a252f381631f",
        "cursor": {
          "ref": "6c9d371a-3e10-4a3b-80cc-6e4c247fd430",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "53a6975c-bdb5-4364-a4fe-903909798bce"
        },
        "item": {
          "id": "fa0bbeee-9977-49e9-bbf1-a252f381631f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "59ee648e-648e-4688-9e56-1d542fd29434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd3cf6f-cc0a-4747-9f9f-ff017f64ec78",
        "cursor": {
          "ref": "7fb10904-532f-4b71-8da6-cee4f7f32eca",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "af5f39b3-a0e6-4ad6-b2cd-d85f092eecb7"
        },
        "item": {
          "id": "7bd3cf6f-cc0a-4747-9f9f-ff017f64ec78",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d025f57e-5dcf-442e-b25d-0cf98799fc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f31fac5-1103-4969-bfa3-ca005ec93259",
        "cursor": {
          "ref": "c8ca1fcd-504c-48aa-b0c3-74ce46eec2f6",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "807c28ca-42e7-4a21-8db2-8dbf4498ec60"
        },
        "item": {
          "id": "3f31fac5-1103-4969-bfa3-ca005ec93259",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e7ea3fa3-37f2-42d9-b720-b3bb3f94fc49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55feaaef-86c3-4630-81b6-45fa40ca3cba",
        "cursor": {
          "ref": "77df3075-e72b-4a3a-a66b-5ef61c756cdf",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b8f8a6e5-7ed2-4706-b315-fe2c14d7a8dd"
        },
        "item": {
          "id": "55feaaef-86c3-4630-81b6-45fa40ca3cba",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "30a5123c-21d0-4f94-ab51-12a7da6f570a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b68004-bf58-424b-be1b-7d75892904b5",
        "cursor": {
          "ref": "b09f5297-5467-4198-a57d-606253d0df57",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "51a4fba0-27de-4b5f-9e11-30934ffeaef0"
        },
        "item": {
          "id": "54b68004-bf58-424b-be1b-7d75892904b5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6b860efe-8a01-420b-b7f6-5cb37f627736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fedb788-8b7d-47f8-ac3b-9e59ef8726f6",
        "cursor": {
          "ref": "b093a014-9f66-4269-b5d6-144b851ef958",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "be123329-609d-49de-85a8-3af3b5535f60"
        },
        "item": {
          "id": "1fedb788-8b7d-47f8-ac3b-9e59ef8726f6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "288ef3c8-1367-459b-af32-b948659b79cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0346dd61-72e9-44dc-8636-5fcee937d2e4",
        "cursor": {
          "ref": "6a8a8184-0710-4910-b57f-3786f09c0e75",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0cb836ad-30fe-452c-85dd-28131da03145"
        },
        "item": {
          "id": "0346dd61-72e9-44dc-8636-5fcee937d2e4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3c5149f5-2ff5-4c02-a552-39625f1e2042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561187d2-e166-4b0a-82d3-e68c09b0da04",
        "cursor": {
          "ref": "8d5ed26e-59da-4be3-9aff-79a148b45b85",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ec864a1e-9544-436d-b4b9-6c756db22b7e"
        },
        "item": {
          "id": "561187d2-e166-4b0a-82d3-e68c09b0da04",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "21176b3a-79b9-49c6-9e08-fbf29cf05255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5641de6f-4d0a-440d-8863-5e9c063eb1eb",
        "cursor": {
          "ref": "1a6494bf-ddb8-4dc5-bc5e-3c71ffeed50a",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2a4fed67-d5f3-436b-9350-dc1d0d542d35"
        },
        "item": {
          "id": "5641de6f-4d0a-440d-8863-5e9c063eb1eb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c4907e1f-0593-4ef4-81ab-dd17bdc73305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae45ca50-09e5-4eef-8c68-fe79f123bb15",
        "cursor": {
          "ref": "63761f49-7e5d-40ce-8855-87295117442d",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "18bbdfd7-f4a2-41a3-a1eb-00d7497ecfb8"
        },
        "item": {
          "id": "ae45ca50-09e5-4eef-8c68-fe79f123bb15",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "257a6333-5e90-4667-a514-d158851e4a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17d22ff-5890-4606-ba26-91bcabfc1af8",
        "cursor": {
          "ref": "225adace-4c48-4a72-82e5-06009728a351",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "67348968-b88c-4dd5-86b0-5d52f0f2c11a"
        },
        "item": {
          "id": "a17d22ff-5890-4606-ba26-91bcabfc1af8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dec8862f-b0ed-4da0-b27c-fe9cb18b9d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e39bd5-f618-438c-9443-d829151b0a0d",
        "cursor": {
          "ref": "c42ea609-f308-49e7-9eca-ee194d07161d",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "012ed989-89b8-4d72-8c81-c655163c816c"
        },
        "item": {
          "id": "c8e39bd5-f618-438c-9443-d829151b0a0d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "54912385-a203-4358-92f4-608056c5f153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abf0699-1fa1-4659-940f-c9bb183f6745",
        "cursor": {
          "ref": "82524e41-bf14-4ed5-8065-629075b54cf9",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3b5b59d0-e2ff-4b0a-812c-c516d5f88173"
        },
        "item": {
          "id": "1abf0699-1fa1-4659-940f-c9bb183f6745",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b411d752-c0d6-47c1-b9e2-2c2bd3353cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc64c23-0e74-48d0-a207-b287bc44f0f5",
        "cursor": {
          "ref": "fba51461-4fbd-4d60-8a03-515cc448c859",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1aea40bb-a765-4121-a267-8c68e380329b"
        },
        "item": {
          "id": "8dc64c23-0e74-48d0-a207-b287bc44f0f5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6c1f2aac-bfae-44ab-8423-7dc2a326dd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fcce28-3442-41a5-a336-55b5c7bc772c",
        "cursor": {
          "ref": "9e96e78b-ec1f-4a1a-8731-fef33f082cb3",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a01df548-7458-4204-a882-a29e51479399"
        },
        "item": {
          "id": "15fcce28-3442-41a5-a336-55b5c7bc772c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4077e524-0bd7-47a8-9445-f79fba984d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d6b025-c2d1-4be4-840e-6797bb5fb981",
        "cursor": {
          "ref": "9a59f567-9bff-4a33-be8c-fd6811168e27",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8bd59a27-c282-4833-8531-3d54db0f8fd0"
        },
        "item": {
          "id": "43d6b025-c2d1-4be4-840e-6797bb5fb981",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "75d33028-7b8c-4a9d-8800-4441f05fa4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e81ca1-5c47-404c-8d1e-97b15590f1ef",
        "cursor": {
          "ref": "c0c0ab7d-54b3-44ab-871a-690bab2e32f4",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "eb878186-b002-4c7b-b55b-a064d9a4fc28"
        },
        "item": {
          "id": "71e81ca1-5c47-404c-8d1e-97b15590f1ef",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4b4e096d-e9e7-4757-8da6-96024479f08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261cbf17-5f2a-4ca1-8328-a7143567f0f2",
        "cursor": {
          "ref": "669f5f1e-2c14-4ae0-acab-f237e3d1060c",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d844782b-ccf4-4c56-9702-404823f119ca"
        },
        "item": {
          "id": "261cbf17-5f2a-4ca1-8328-a7143567f0f2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d30ced1d-d3b1-4f34-946a-43c173855d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac3486e-2294-4a0d-8b43-84a8bd98c54e",
        "cursor": {
          "ref": "49b66a6b-88f7-4d2f-b886-bc0d47991ebf",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "db1e95bb-5a81-4e14-a691-351e7567f643"
        },
        "item": {
          "id": "eac3486e-2294-4a0d-8b43-84a8bd98c54e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b4306cbc-be4d-446b-a09a-060ef717b4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee7c25a-61ba-46e3-ad25-2ec97ec12ed2",
        "cursor": {
          "ref": "df3b292d-1609-4af4-95ae-f7b979e71bb2",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f1e2563e-3451-4e3d-9613-d677c5ea646d"
        },
        "item": {
          "id": "3ee7c25a-61ba-46e3-ad25-2ec97ec12ed2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "724da160-f606-45a0-968c-747f8dcb2f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917c4856-700f-4936-bf13-622ce5828aa4",
        "cursor": {
          "ref": "a78fa6f5-e53b-43dc-8466-78dd54a00d72",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "19d69c30-0c71-44f6-9045-1b7e5c0886a9"
        },
        "item": {
          "id": "917c4856-700f-4936-bf13-622ce5828aa4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1a0068b8-ea14-4075-82e6-2512c4327e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829cac6c-86f6-4da0-a099-6f40d8fda5e4",
        "cursor": {
          "ref": "6c7ff393-860f-4e82-a464-69d0dd45576a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "48419053-5589-4fe5-83e3-81b752f4d0d8"
        },
        "item": {
          "id": "829cac6c-86f6-4da0-a099-6f40d8fda5e4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fc4927a5-5037-49c2-80ee-661d9a482fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44efcf8e-0a60-4dc7-afa8-873a2adf7b21",
        "cursor": {
          "ref": "131ab47f-8f8d-4334-9785-d2da6f04e8a7",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cf236c00-6d89-422a-b393-7437ed6bc0a0"
        },
        "item": {
          "id": "44efcf8e-0a60-4dc7-afa8-873a2adf7b21",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a7693fd4-2227-4e75-9fe8-1dda7eaaef65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d1a47c-3dc0-406c-ba55-1e727db5c694",
        "cursor": {
          "ref": "63340a18-e25f-4a83-b923-25539c7aab4b",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3cd5d427-9f86-4c58-bf05-ae4fa86fcb58"
        },
        "item": {
          "id": "e0d1a47c-3dc0-406c-ba55-1e727db5c694",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c4664de0-c74a-4caf-b680-733643d67c2d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30897923-deee-4bf9-af04-e93f2c578bcd",
        "cursor": {
          "ref": "07134a60-b7fa-42b9-8cad-97bf0185b4b5",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7dd95231-3435-4b5f-be52-985d17035ee1"
        },
        "item": {
          "id": "30897923-deee-4bf9-af04-e93f2c578bcd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a2879a21-0b82-4ded-b021-c9a122f9bc09",
          "status": "OK",
          "code": 200,
          "responseTime": 321,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c426c8b5-fa07-4699-9652-3511d4305bc3",
        "cursor": {
          "ref": "fb567e80-fcd3-461d-a870-255a5e7c2e4e",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "45adceea-eefb-4a50-8ff0-0157730e2284"
        },
        "item": {
          "id": "c426c8b5-fa07-4699-9652-3511d4305bc3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a7a66cec-371d-4170-bec0-79a69abe9d4e",
          "status": "OK",
          "code": 200,
          "responseTime": 619,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4a1c5c-a1b0-4edd-a1eb-664815bda79c",
        "cursor": {
          "ref": "8af4fc0e-a83b-494d-83ba-0eb5b9c42dfc",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "82183bfb-8cbd-47b9-9eb9-db3a63e3e9bb"
        },
        "item": {
          "id": "cf4a1c5c-a1b0-4edd-a1eb-664815bda79c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c26bc7b0-4565-481f-a125-bcd1e80fb48d",
          "status": "OK",
          "code": 200,
          "responseTime": 619,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f822dd77-14b2-45e2-85ed-acb81c432cc0",
        "cursor": {
          "ref": "635be836-9b56-4fd2-aa4b-44ef951d6d54",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d0438f58-464c-4cd6-b7a0-cf724d23990e"
        },
        "item": {
          "id": "f822dd77-14b2-45e2-85ed-acb81c432cc0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "276a2e57-3b45-43ac-a939-a5042e80cba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f822dd77-14b2-45e2-85ed-acb81c432cc0",
        "cursor": {
          "ref": "635be836-9b56-4fd2-aa4b-44ef951d6d54",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d0438f58-464c-4cd6-b7a0-cf724d23990e"
        },
        "item": {
          "id": "f822dd77-14b2-45e2-85ed-acb81c432cc0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "276a2e57-3b45-43ac-a939-a5042e80cba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f822dd77-14b2-45e2-85ed-acb81c432cc0",
        "cursor": {
          "ref": "635be836-9b56-4fd2-aa4b-44ef951d6d54",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d0438f58-464c-4cd6-b7a0-cf724d23990e"
        },
        "item": {
          "id": "f822dd77-14b2-45e2-85ed-acb81c432cc0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "276a2e57-3b45-43ac-a939-a5042e80cba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ded9073-aa8a-4ce4-bbf5-856fcb13649b",
        "cursor": {
          "ref": "10f44f5a-bd89-4e3c-9e1a-ed50e6ab261f",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "645b2e96-7202-4180-b850-a8194e3c9c68"
        },
        "item": {
          "id": "7ded9073-aa8a-4ce4-bbf5-856fcb13649b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6ada89dc-06c0-4235-adcc-3e8a785523ba",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bd27af-bd6e-42db-9528-8e7545ade325",
        "cursor": {
          "ref": "31f40d8b-4d0c-4090-b7e9-8091e9eee342",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c74220fc-dcad-495c-95cf-4bec18e450ba"
        },
        "item": {
          "id": "73bd27af-bd6e-42db-9528-8e7545ade325",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "85bb6cb8-766f-43af-ad55-4d59646d3c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "73bd27af-bd6e-42db-9528-8e7545ade325",
        "cursor": {
          "ref": "31f40d8b-4d0c-4090-b7e9-8091e9eee342",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c74220fc-dcad-495c-95cf-4bec18e450ba"
        },
        "item": {
          "id": "73bd27af-bd6e-42db-9528-8e7545ade325",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "85bb6cb8-766f-43af-ad55-4d59646d3c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8d3a1fc6-5abf-4fc8-8d13-c41f1b90194e",
        "cursor": {
          "ref": "a52685c1-e163-41a3-abb2-0b6d90074cb2",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "845403a7-02d9-4e08-8c2f-371770062125"
        },
        "item": {
          "id": "8d3a1fc6-5abf-4fc8-8d13-c41f1b90194e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0a9e65bf-0531-458a-8d16-4dfc786ee4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "54ec1981-2569-4e04-b485-f5b904dc77a3",
        "cursor": {
          "ref": "01b2e754-a12f-4375-ae4b-3b1f9aaa26ad",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "128f943f-79f3-4839-85a5-5fc4486e439c"
        },
        "item": {
          "id": "54ec1981-2569-4e04-b485-f5b904dc77a3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "04e4532c-b0fc-4ede-87ca-a14414dc19ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "54ec1981-2569-4e04-b485-f5b904dc77a3",
        "cursor": {
          "ref": "01b2e754-a12f-4375-ae4b-3b1f9aaa26ad",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "128f943f-79f3-4839-85a5-5fc4486e439c"
        },
        "item": {
          "id": "54ec1981-2569-4e04-b485-f5b904dc77a3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "04e4532c-b0fc-4ede-87ca-a14414dc19ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f8bf2d0b-3c29-4e3a-bf7d-694583ee9f52",
        "cursor": {
          "ref": "5798ba7d-0770-49df-ba9e-ad7634479137",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "649b16af-e0f1-4a24-94a5-598a661afa12"
        },
        "item": {
          "id": "f8bf2d0b-3c29-4e3a-bf7d-694583ee9f52",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "08d6a322-1e3e-4af8-9c73-252078b81e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}